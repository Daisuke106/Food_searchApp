{"ast":null,"code":"\"use client\";\n\nimport { useColorSlider } from \"./chunk-R4DLOKLT.mjs\";\n\n// src/alpha-slider.tsx\nimport { ui, forwardRef, omitThemeProps, useMultiComponentStyle } from \"@yamada-ui/core\";\nimport { alphaToHex, convertColor, cx } from \"@yamada-ui/utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar defaultOverlays = (color, min, max, withShadow) => {\n  let overlays = [{\n    bgImage: \"linear-gradient(45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--ui-checkers) 75%), linear-gradient(-45deg, var(--ui-body) 75%, var(--ui-checkers) 75%)\",\n    bgSize: \"8px 8px\",\n    bgPosition: \"0 0, 0 4px, 4px -4px, -4px 0\",\n    var: [{\n      __prefix: \"ui\",\n      name: \"checkers\",\n      token: \"colors\",\n      value: [\"blackAlpha.300\", \"whiteAlpha.300\"]\n    }, {\n      __prefix: \"ui\",\n      name: \"body\",\n      token: \"colors\",\n      value: [\"whiteAlpha.500\", \"blackAlpha.500\"]\n    }]\n  }, {\n    bgGradient: \"linear(to-r, \".concat(convertColor(color)(\"hex\") + alphaToHex(min), \", \").concat(convertColor(color)(\"hex\") + alphaToHex(max), \")\")\n  }];\n  if (withShadow) overlays = [...overlays, {\n    boxShadow: \"rgba(0, 0, 0, .1) 0 0 0 1px inset, rgb(0, 0, 0, .15) 0 0 4px inset\"\n  }];\n  return overlays;\n};\nvar AlphaSlider = forwardRef((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"AlphaSlider\", props);\n  const {\n    className,\n    inputProps,\n    trackProps,\n    thumbProps,\n    color = \"#ffffff\",\n    min = 0,\n    max = 1,\n    withShadow = true,\n    overlays = defaultOverlays(color, min, max, withShadow),\n    __css,\n    ...computedProps\n  } = omitThemeProps(mergedProps);\n  const {\n    getContainerProps,\n    getTrackProps,\n    getInputProps,\n    getThumbProps\n  } = useColorSlider({\n    min,\n    max,\n    step: 0.01,\n    thumbColor: \"transparent\",\n    ...computedProps\n  });\n  const css = {\n    position: \"relative\",\n    ...styles.container,\n    ...__css\n  };\n  return /* @__PURE__ */jsxs(ui.div, {\n    className: cx(\"ui-alpha-slider\", className),\n    __css: css,\n    ...getContainerProps(),\n    children: [/* @__PURE__ */jsx(ui.input, {\n      ...getInputProps(inputProps, ref)\n    }), overlays.map((props2, index) => /* @__PURE__ */jsx(ui.div, {\n      className: \"ui-alpha-slider__overlay\",\n      __css: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        ...styles.overlay\n      },\n      ...props2\n    }, index)), /* @__PURE__ */jsx(ui.div, {\n      className: \"ui-alpha-slider__track\",\n      __css: {\n        position: \"relative\",\n        w: \"100%\",\n        h: \"100%\",\n        ...styles.track\n      },\n      ...getTrackProps(trackProps),\n      children: /* @__PURE__ */jsx(ui.div, {\n        className: \"ui-alpha-slider__thumb\",\n        __css: {\n          ...styles.thumb\n        },\n        ...getThumbProps(thumbProps)\n      })\n    })]\n  });\n});\nexport { AlphaSlider };","map":{"version":3,"names":["ui","forwardRef","omitThemeProps","useMultiComponentStyle","alphaToHex","convertColor","cx","jsx","jsxs","defaultOverlays","color","min","max","withShadow","overlays","bgImage","bgSize","bgPosition","var","__prefix","name","token","value","bgGradient","concat","boxShadow","AlphaSlider","props","ref","styles","mergedProps","className","inputProps","trackProps","thumbProps","__css","computedProps","getContainerProps","getTrackProps","getInputProps","getThumbProps","useColorSlider","step","thumbColor","css","position","container","div","children","input","map","props2","index","top","left","right","bottom","overlay","w","h","track","thumb"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\color-picker\\src\\alpha-slider.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useMultiComponentStyle,\n} from \"@yamada-ui/core\"\nimport type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport { alphaToHex, convertColor, cx } from \"@yamada-ui/utils\"\nimport type { UseColorSliderProps } from \"./use-color-slider\"\nimport { useColorSlider } from \"./use-color-slider\"\n\nconst defaultOverlays = (\n  color: string,\n  min: number,\n  max: number,\n  withShadow: boolean,\n): HTMLUIProps<\"div\">[] => {\n  let overlays: HTMLUIProps<\"div\">[] = [\n    {\n      bgImage:\n        \"linear-gradient(45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--ui-checkers) 75%), linear-gradient(-45deg, var(--ui-body) 75%, var(--ui-checkers) 75%)\",\n      bgSize: `8px 8px`,\n      bgPosition: `0 0, 0 4px, 4px -4px, -4px 0`,\n      var: [\n        {\n          __prefix: \"ui\",\n          name: \"checkers\",\n          token: \"colors\",\n          value: [\"blackAlpha.300\", \"whiteAlpha.300\"],\n        },\n        {\n          __prefix: \"ui\",\n          name: \"body\",\n          token: \"colors\",\n          value: [\"whiteAlpha.500\", \"blackAlpha.500\"],\n        },\n      ],\n    },\n    {\n      bgGradient: `linear(to-r, ${\n        convertColor(color)(\"hex\") + alphaToHex(min)\n      }, ${convertColor(color)(\"hex\") + alphaToHex(max)})`,\n    },\n  ]\n\n  if (withShadow)\n    overlays = [\n      ...overlays,\n      {\n        boxShadow: `rgba(0, 0, 0, .1) 0 0 0 1px inset, rgb(0, 0, 0, .15) 0 0 4px inset`,\n      },\n    ]\n\n  return overlays\n}\n\ntype AlphaSliderOptions = {\n  /**\n   * The color used for the slider.\n   *\n   * @default \"#ffffff\"\n   */\n  color?: string\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   *\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   *\n   * @default 1\n   */\n  max?: number\n  /**\n   * The step in which increments or decrements have to be made.\n   *\n   * @default 0.01\n   */\n  step?: number\n  /**\n   * If `true`, the slider has an inner `box-shadow`.\n   *\n   * @default true\n   */\n  withShadow?: boolean\n  /**\n   * Props for slider input element.\n   */\n  inputProps?: HTMLUIProps<\"input\">\n  /**\n   * Props for slider track element.\n   */\n  trackProps?: HTMLUIProps<\"div\">\n  /**\n   * Props for slider thumb element.\n   */\n  thumbProps?: HTMLUIProps<\"div\">\n  /**\n   * The overlay used for the slider.\n   */\n  overlays?: HTMLUIProps<\"div\">[]\n}\n\nexport type AlphaSliderProps = ThemeProps<\"AlphaSlider\"> &\n  Partial<Omit<UseColorSliderProps, \"color\">> &\n  AlphaSliderOptions\n\n/**\n * `AlphaSlider` is a component used to allow the user to select color transparency.\n *\n * @see Docs https://yamada-ui.com/components/forms/alpha-slider\n */\nexport const AlphaSlider = forwardRef<AlphaSliderProps, \"input\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"AlphaSlider\", props)\n    const {\n      className,\n      inputProps,\n      trackProps,\n      thumbProps,\n      color = \"#ffffff\",\n      min = 0,\n      max = 1,\n      withShadow = true,\n      overlays = defaultOverlays(color, min, max, withShadow),\n      __css,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n    const { getContainerProps, getTrackProps, getInputProps, getThumbProps } =\n      useColorSlider({\n        min,\n        max,\n        step: 0.01,\n        thumbColor: \"transparent\",\n        ...computedProps,\n      })\n\n    const css: CSSUIObject = {\n      position: \"relative\",\n      ...styles.container,\n      ...__css,\n    }\n\n    return (\n      <ui.div\n        className={cx(\"ui-alpha-slider\", className)}\n        __css={css}\n        {...getContainerProps()}\n      >\n        <ui.input {...getInputProps(inputProps, ref)} />\n\n        {overlays.map((props, index) => (\n          <ui.div\n            key={index}\n            className=\"ui-alpha-slider__overlay\"\n            __css={{\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              right: 0,\n              bottom: 0,\n              ...styles.overlay,\n            }}\n            {...props}\n          />\n        ))}\n\n        <ui.div\n          className=\"ui-alpha-slider__track\"\n          __css={{\n            position: \"relative\",\n            w: \"100%\",\n            h: \"100%\",\n            ...styles.track,\n          }}\n          {...getTrackProps(trackProps)}\n        >\n          <ui.div\n            className=\"ui-alpha-slider__thumb\"\n            __css={{ ...styles.thumb }}\n            {...getThumbProps(thumbProps)}\n          />\n        </ui.div>\n      </ui.div>\n    )\n  },\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}