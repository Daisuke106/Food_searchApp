{"ast":null,"code":"\"use client\";\n\n// src/use-color-slider.ts\nimport { useFormControlProps, formControlProperties, getFormControlProperties } from \"@yamada-ui/form-control\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { useLatestRef } from \"@yamada-ui/use-latest-ref\";\nimport { usePanEvent } from \"@yamada-ui/use-pan-event\";\nimport { useSize } from \"@yamada-ui/use-size\";\nimport { omitObject, dataAttr, handlerAll, mergeRefs, valueToPercent, clampNumber, useCallbackRef, roundNumberToStep, useUpdateEffect, percentToValue, pickObject } from \"@yamada-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\nvar useColorSlider = _ref => {\n  let {\n    focusThumbOnChange = true,\n    ...props\n  } = _ref;\n  if (!focusThumbOnChange) props.isReadOnly = true;\n  let {\n    id,\n    name,\n    value: valueProp,\n    defaultValue,\n    min = 0,\n    max,\n    step = 1,\n    onChange: onChangeProp,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    thumbColor,\n    required,\n    disabled,\n    readOnly,\n    ...rest\n  } = useFormControlProps(props);\n  const onChangeStart = useCallbackRef(onChangeStartProp);\n  const onChangeEnd = useCallbackRef(onChangeEndProp);\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue != null ? defaultValue : min + (max - min) / 2,\n    onChange: onChangeProp\n  });\n  const value = clampNumber(computedValue, min, max);\n  const thumbPercent = valueToPercent(value, min, max);\n  const [isDragging, setDragging] = useState(false);\n  const isInteractive = !(disabled || readOnly);\n  const oneStep = step || (max - min) / 100;\n  const tenStep = (max - min) / 10;\n  const containerRef = useRef(null);\n  const trackRef = useRef(null);\n  const thumbRef = useRef(null);\n  const latestRef = useLatestRef({\n    value,\n    min,\n    max,\n    step,\n    isInteractive,\n    eventSource: null,\n    focusThumbOnChange\n  });\n  const thumbSize = useSize(thumbRef);\n  const getValueFromPointer = useCallback(ev => {\n    var _a, _b;\n    if (!trackRef.current) return;\n    const {\n      min: min2,\n      max: max2,\n      step: step2\n    } = latestRef.current;\n    latestRef.current.eventSource = \"pointer\";\n    const {\n      left,\n      width\n    } = trackRef.current.getBoundingClientRect();\n    const {\n      clientX\n    } = (_b = (_a = ev.touches) == null ? void 0 : _a[0]) != null ? _b : ev;\n    let percent = (clientX - left) / width;\n    let nextValue = percentToValue(percent, min2, max2);\n    if (step2) nextValue = parseFloat(roundNumberToStep(nextValue, min2, step2));\n    nextValue = clampNumber(nextValue, min2, max2);\n    return nextValue;\n  }, [latestRef]);\n  const setValueFromPointer = ev => {\n    const {\n      value: value2\n    } = latestRef.current;\n    const nextValue = getValueFromPointer(ev);\n    if (nextValue != null && nextValue !== value2) setValue(nextValue);\n  };\n  const focusThumb = useCallback(() => {\n    const {\n      focusThumbOnChange: focusThumbOnChange2\n    } = latestRef.current;\n    if (focusThumbOnChange2) setTimeout(() => {\n      var _a;\n      return (_a = thumbRef.current) == null ? void 0 : _a.focus();\n    });\n  }, [latestRef]);\n  const constrain = useCallback(value2 => {\n    const {\n      isInteractive: isInteractive2,\n      min: min2,\n      max: max2\n    } = latestRef.current;\n    if (!isInteractive2) return;\n    value2 = parseFloat(roundNumberToStep(value2, min2, oneStep));\n    value2 = clampNumber(value2, min2, max2);\n    setValue(value2);\n  }, [setValue, latestRef, oneStep]);\n  const stepUp = useCallback(function () {\n    let step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n    return constrain(value + step2);\n  }, [constrain, value, oneStep]);\n  const stepDown = useCallback(function () {\n    let step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n    return constrain(value - step2);\n  }, [constrain, value, oneStep]);\n  const onKeyDown = useCallback(ev => {\n    const {\n      min: min2,\n      max: max2\n    } = latestRef.current;\n    const actions = {\n      ArrowRight: () => stepUp(),\n      ArrowUp: () => stepUp(),\n      ArrowLeft: () => stepDown(),\n      ArrowDown: () => stepDown(),\n      PageUp: () => stepUp(tenStep),\n      PageDown: () => stepDown(tenStep),\n      Home: () => constrain(min2),\n      End: () => constrain(max2)\n    };\n    const action = actions[ev.key];\n    if (!action) return;\n    ev.preventDefault();\n    ev.stopPropagation();\n    action(ev);\n    latestRef.current.eventSource = \"keyboard\";\n  }, [constrain, latestRef, stepDown, stepUp, tenStep]);\n  usePanEvent(containerRef, {\n    onSessionStart: ev => {\n      const {\n        isInteractive: isInteractive2,\n        value: value2\n      } = latestRef.current;\n      if (!isInteractive2) return;\n      setDragging(true);\n      focusThumb();\n      setValueFromPointer(ev);\n      onChangeStart(value2);\n    },\n    onSessionEnd: () => {\n      const {\n        isInteractive: isInteractive2,\n        value: value2\n      } = latestRef.current;\n      if (!isInteractive2) return;\n      setDragging(false);\n      onChangeEnd(value2);\n    },\n    onMove: ev => {\n      const {\n        isInteractive: isInteractive2\n      } = latestRef.current;\n      if (!isInteractive2) return;\n      setValueFromPointer(ev);\n    }\n  });\n  useUpdateEffect(() => {\n    const {\n      eventSource,\n      value: value2\n    } = latestRef.current;\n    if (eventSource === \"keyboard\") onChangeEnd(value2);\n  }, [value, onChangeEnd]);\n  const getContainerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const {\n      width: w\n    } = thumbSize != null ? thumbSize : {\n      width: 0\n    };\n    const style = {\n      ...props2.style,\n      ...rest.style,\n      paddingInline: \"\".concat(w / 2, \"px\")\n    };\n    return {\n      ...props2,\n      ...omitObject(rest, [\"aria-readonly\"]),\n      ref: mergeRefs(ref, containerRef),\n      tabIndex: -1,\n      style\n    };\n  }, [rest, thumbSize]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...pickObject(rest, formControlProperties),\n      ...props2,\n      id,\n      ref,\n      type: \"hidden\",\n      name,\n      value,\n      required,\n      disabled,\n      readOnly\n    };\n  }, [disabled, id, name, readOnly, required, rest, value]);\n  const getTrackProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...pickObject(rest, getFormControlProperties({\n        omit: [\"aria-readonly\"]\n      })),\n      ...props2,\n      ref: mergeRefs(ref, trackRef)\n    };\n  }, [rest]);\n  const getThumbProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const n = thumbPercent;\n    const {\n      width: w\n    } = thumbSize != null ? thumbSize : {\n      width: 0\n    };\n    const style = {\n      ...props2.style,\n      position: \"absolute\",\n      userSelect: \"none\",\n      touchAction: \"none\",\n      left: \"calc(\".concat(n, \"% - \").concat(w / 2, \"px)\")\n    };\n    return {\n      \"aria-label\": \"Slider thumb\",\n      bg: thumbColor != null ? thumbColor : \"hsl(\".concat(value, \", 100%, 50%)\"),\n      ...pickObject(rest, formControlProperties),\n      ...props2,\n      ref: mergeRefs(ref, thumbRef),\n      tabIndex: isInteractive && focusThumbOnChange ? 0 : void 0,\n      role: \"slider\",\n      \"aria-valuenow\": value,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"data-active\": dataAttr(isDragging && focusThumbOnChange),\n      onKeyDown: handlerAll(props2.onKeyDown, onKeyDown),\n      onFocus: handlerAll(props2.onFocus, rest.onFocus),\n      onBlur: handlerAll(props2.onBlur, rest.onBlur),\n      style\n    };\n  }, [thumbColor, focusThumbOnChange, isDragging, isInteractive, min, max, onKeyDown, rest, thumbPercent, thumbSize, value]);\n  return {\n    value,\n    getContainerProps,\n    getTrackProps,\n    getInputProps,\n    getThumbProps\n  };\n};\nexport { useColorSlider };","map":{"version":3,"names":["useFormControlProps","formControlProperties","getFormControlProperties","useControllableState","useLatestRef","usePanEvent","useSize","omitObject","dataAttr","handlerAll","mergeRefs","valueToPercent","clampNumber","useCallbackRef","roundNumberToStep","useUpdateEffect","percentToValue","pickObject","useCallback","useRef","useState","useColorSlider","_ref","focusThumbOnChange","props","isReadOnly","id","name","value","valueProp","defaultValue","min","max","step","onChange","onChangeProp","onChangeStart","onChangeStartProp","onChangeEnd","onChangeEndProp","thumbColor","required","disabled","readOnly","rest","computedValue","setValue","thumbPercent","isDragging","setDragging","isInteractive","oneStep","tenStep","containerRef","trackRef","thumbRef","latestRef","eventSource","thumbSize","getValueFromPointer","ev","_a","_b","current","min2","max2","step2","left","width","getBoundingClientRect","clientX","touches","percent","nextValue","parseFloat","setValueFromPointer","value2","focusThumb","focusThumbOnChange2","setTimeout","focus","constrain","isInteractive2","stepUp","arguments","length","undefined","stepDown","onKeyDown","actions","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","key","preventDefault","stopPropagation","onSessionStart","onSessionEnd","onMove","getContainerProps","props2","ref","w","style","paddingInline","concat","tabIndex","getInputProps","type","getTrackProps","omit","getThumbProps","n","position","userSelect","touchAction","bg","role","onFocus","onBlur"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\color-picker\\src\\use-color-slider.ts"],"sourcesContent":["import type { CSSUIProps, HTMLUIProps, UIPropGetter } from \"@yamada-ui/core\"\nimport {\n  useFormControlProps,\n  type FormControlOptions,\n  formControlProperties,\n  getFormControlProperties,\n} from \"@yamada-ui/form-control\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport { useLatestRef } from \"@yamada-ui/use-latest-ref\"\nimport { usePanEvent } from \"@yamada-ui/use-pan-event\"\nimport { useSize } from \"@yamada-ui/use-size\"\nimport {\n  omitObject,\n  dataAttr,\n  handlerAll,\n  mergeRefs,\n  valueToPercent,\n  clampNumber,\n  useCallbackRef,\n  roundNumberToStep,\n  useUpdateEffect,\n  percentToValue,\n  pickObject,\n} from \"@yamada-ui/utils\"\nimport type { CSSProperties, KeyboardEvent, KeyboardEventHandler } from \"react\"\nimport { useCallback, useRef, useState } from \"react\"\n\ntype UseColorSliderOptions = {\n  /**\n   * The base `id` to use for the slider.\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms.\n   */\n  name?: string\n  /**\n   * The value of the slider.\n   */\n  value?: number\n  /**\n   * The initial value of the slider.\n   */\n  defaultValue?: number\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   */\n  min: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   */\n  max: number\n  /**\n   * The step in which increments or decrements have to be made.\n   *\n   * @default 1\n   */\n  step?: number\n  /**\n   * Function called whenever the slider value changes.\n   */\n  onChange?: (value: number) => void\n  /**\n   * Function called when the user starts selecting a new value.\n   */\n  onChangeStart?: (value: number) => void\n  /**\n   * Function called when the user is done selecting a new value.\n   */\n  onChangeEnd?: (value: number) => void\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   *\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The CSS `background` property. Used in `background` of thumb element.\n   */\n  thumbColor?: CSSUIProps[\"bg\"]\n}\n\nexport type UseColorSliderProps = Omit<\n  HTMLUIProps<\"div\">,\n  \"defaultValue\" | \"onChange\"\n> &\n  UseColorSliderOptions &\n  FormControlOptions\n\nexport const useColorSlider = ({\n  focusThumbOnChange = true,\n  ...props\n}: UseColorSliderProps) => {\n  if (!focusThumbOnChange) props.isReadOnly = true\n\n  let {\n    id,\n    name,\n    value: valueProp,\n    defaultValue,\n    min = 0,\n    max,\n    step = 1,\n    onChange: onChangeProp,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    thumbColor,\n    required,\n    disabled,\n    readOnly,\n    ...rest\n  } = useFormControlProps(props)\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? min + (max - min) / 2,\n    onChange: onChangeProp,\n  })\n  const value = clampNumber(computedValue, min, max)\n  const thumbPercent = valueToPercent(value, min, max)\n  const [isDragging, setDragging] = useState(false)\n  const isInteractive = !(disabled || readOnly)\n\n  const oneStep = step || (max - min) / 100\n  const tenStep = (max - min) / 10\n\n  const containerRef = useRef<HTMLElement>(null)\n  const trackRef = useRef<HTMLElement>(null)\n  const thumbRef = useRef<HTMLElement>(null)\n  const latestRef = useLatestRef({\n    value,\n    min,\n    max,\n    step,\n    isInteractive,\n    eventSource: null as \"pointer\" | \"keyboard\" | null,\n    focusThumbOnChange,\n  })\n\n  const thumbSize = useSize(thumbRef)\n\n  const getValueFromPointer = useCallback(\n    (ev: any) => {\n      if (!trackRef.current) return\n\n      const { min, max, step } = latestRef.current\n\n      latestRef.current.eventSource = \"pointer\"\n\n      const { left, width } = trackRef.current.getBoundingClientRect()\n      const { clientX } = ev.touches?.[0] ?? ev\n\n      let percent = (clientX - left) / width\n\n      let nextValue = percentToValue(percent, min, max)\n\n      if (step) nextValue = parseFloat(roundNumberToStep(nextValue, min, step))\n\n      nextValue = clampNumber(nextValue, min, max)\n\n      return nextValue\n    },\n    [latestRef],\n  )\n\n  const setValueFromPointer = (ev: MouseEvent | TouchEvent | PointerEvent) => {\n    const { value } = latestRef.current\n    const nextValue = getValueFromPointer(ev)\n\n    if (nextValue != null && nextValue !== value) setValue(nextValue)\n  }\n\n  const focusThumb = useCallback(() => {\n    const { focusThumbOnChange } = latestRef.current\n\n    if (focusThumbOnChange) setTimeout(() => thumbRef.current?.focus())\n  }, [latestRef])\n\n  const constrain = useCallback(\n    (value: number) => {\n      const { isInteractive, min, max } = latestRef.current\n\n      if (!isInteractive) return\n\n      value = parseFloat(roundNumberToStep(value, min, oneStep))\n      value = clampNumber(value, min, max)\n\n      setValue(value)\n    },\n    [setValue, latestRef, oneStep],\n  )\n\n  const stepUp = useCallback(\n    (step = oneStep) => constrain(value + step),\n    [constrain, value, oneStep],\n  )\n\n  const stepDown = useCallback(\n    (step = oneStep) => constrain(value - step),\n    [constrain, value, oneStep],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLElement>) => {\n      const { min, max } = latestRef.current\n\n      const actions: Record<string, KeyboardEventHandler> = {\n        ArrowRight: () => stepUp(),\n        ArrowUp: () => stepUp(),\n        ArrowLeft: () => stepDown(),\n        ArrowDown: () => stepDown(),\n        PageUp: () => stepUp(tenStep),\n        PageDown: () => stepDown(tenStep),\n        Home: () => constrain(min),\n        End: () => constrain(max),\n      }\n\n      const action = actions[ev.key]\n\n      if (!action) return\n\n      ev.preventDefault()\n      ev.stopPropagation()\n\n      action(ev)\n\n      latestRef.current.eventSource = \"keyboard\"\n    },\n    [constrain, latestRef, stepDown, stepUp, tenStep],\n  )\n\n  usePanEvent(containerRef, {\n    onSessionStart: (ev) => {\n      const { isInteractive, value } = latestRef.current\n\n      if (!isInteractive) return\n\n      setDragging(true)\n      focusThumb()\n      setValueFromPointer(ev)\n      onChangeStart(value)\n    },\n    onSessionEnd: () => {\n      const { isInteractive, value } = latestRef.current\n\n      if (!isInteractive) return\n\n      setDragging(false)\n      onChangeEnd(value)\n    },\n    onMove: (ev) => {\n      const { isInteractive } = latestRef.current\n\n      if (!isInteractive) return\n\n      setValueFromPointer(ev)\n    },\n  })\n\n  useUpdateEffect(() => {\n    const { eventSource, value } = latestRef.current\n\n    if (eventSource === \"keyboard\") onChangeEnd(value)\n  }, [value, onChangeEnd])\n\n  const getContainerProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const { width: w } = thumbSize ?? { width: 0 }\n\n      const style: CSSProperties = {\n        ...props.style,\n        ...rest.style,\n        paddingInline: `${w / 2}px`,\n      }\n\n      return {\n        ...props,\n        ...omitObject(rest, [\"aria-readonly\"]),\n        ref: mergeRefs(ref, containerRef),\n        tabIndex: -1,\n        style,\n      }\n    },\n    [rest, thumbSize],\n  )\n\n  const getInputProps: UIPropGetter<\"input\"> = useCallback(\n    (props = {}, ref = null) => ({\n      ...pickObject(rest, formControlProperties),\n      ...props,\n      id,\n      ref,\n      type: \"hidden\",\n      name,\n      value,\n      required,\n      disabled,\n      readOnly,\n    }),\n    [disabled, id, name, readOnly, required, rest, value],\n  )\n\n  const getTrackProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...pickObject(\n        rest,\n        getFormControlProperties({ omit: [\"aria-readonly\"] }),\n      ),\n      ...props,\n      ref: mergeRefs(ref, trackRef),\n    }),\n    [rest],\n  )\n\n  const getThumbProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const n = thumbPercent\n      const { width: w } = thumbSize ?? { width: 0 }\n\n      const style: CSSProperties = {\n        ...props.style,\n        position: \"absolute\",\n        userSelect: \"none\",\n        touchAction: \"none\",\n        left: `calc(${n}% - ${w / 2}px)`,\n      }\n\n      return {\n        \"aria-label\": \"Slider thumb\",\n        bg: thumbColor ?? `hsl(${value}, 100%, 50%)`,\n        ...pickObject(rest, formControlProperties),\n        ...props,\n        ref: mergeRefs(ref, thumbRef),\n        tabIndex: isInteractive && focusThumbOnChange ? 0 : undefined,\n        role: \"slider\",\n        \"aria-valuenow\": value,\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"data-active\": dataAttr(isDragging && focusThumbOnChange),\n        onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n        onFocus: handlerAll(props.onFocus, rest.onFocus),\n        onBlur: handlerAll(props.onBlur, rest.onBlur),\n        style,\n      }\n    },\n    [\n      thumbColor,\n      focusThumbOnChange,\n      isDragging,\n      isInteractive,\n      min,\n      max,\n      onKeyDown,\n      rest,\n      thumbPercent,\n      thumbSize,\n      value,\n    ],\n  )\n\n  return {\n    value,\n    getContainerProps,\n    getTrackProps,\n    getInputProps,\n    getThumbProps,\n  }\n}\n\nexport type UseColorSliderReturn = ReturnType<typeof useColorSlider>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}