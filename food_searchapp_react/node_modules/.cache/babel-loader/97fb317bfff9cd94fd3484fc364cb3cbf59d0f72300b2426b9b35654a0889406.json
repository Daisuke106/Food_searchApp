{"ast":null,"code":"// src/string.ts\nvar escape = (value, replaceValue = \"\") => value.replace(/\\s+/g, replaceValue);\nvar antonym = value => {\n  switch (value) {\n    case \"top\":\n      return \"bottom\";\n    case \"bottom\":\n      return \"top\";\n    case \"left\":\n      return \"right\";\n    case \"right\":\n      return \"left\";\n    case \"start\":\n      return \"end\";\n    case \"end\":\n      return \"start\";\n    case \"x\":\n      return \"y\";\n    case \"y\":\n      return \"x\";\n    case \"enter\":\n      return \"exit\";\n    case \"exit\":\n      return \"enter\";\n    case \"vertical\":\n      return \"horizontal\";\n    case \"horizontal\":\n      return \"vertical\";\n    case \"up\":\n      return \"down\";\n    case \"down\":\n      return \"up\";\n    case \"block\":\n      return \"inline\";\n    case \"inline\":\n      return \"block\";\n    default:\n      return value;\n  }\n};\nvar toCamelCase = value => value.toLowerCase().replace(/[_-](.)/g, (_, group1) => group1.toUpperCase()).replace(/^(.)/, (_, group1) => group1.toUpperCase());\nvar toKebabCase = value => value.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\").toLowerCase().replace(/^-/, \"\");\nexport { escape, antonym, toCamelCase, toKebabCase };","map":{"version":3,"names":["escape","value","replaceValue","replace","antonym","toCamelCase","toLowerCase","_","group1","toUpperCase","toKebabCase"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\utils\\src\\string.ts"],"sourcesContent":["import type { StringLiteral } from \"./index.types\"\n\nexport const escape = (value: string, replaceValue: string = \"\"): string =>\n  value.replace(/\\s+/g, replaceValue)\n\nexport const antonym = (value: string): string => {\n  switch (value) {\n    case \"top\":\n      return \"bottom\"\n\n    case \"bottom\":\n      return \"top\"\n\n    case \"left\":\n      return \"right\"\n\n    case \"right\":\n      return \"left\"\n\n    case \"start\":\n      return \"end\"\n\n    case \"end\":\n      return \"start\"\n\n    case \"x\":\n      return \"y\"\n\n    case \"y\":\n      return \"x\"\n\n    case \"enter\":\n      return \"exit\"\n\n    case \"exit\":\n      return \"enter\"\n\n    case \"vertical\":\n      return \"horizontal\"\n\n    case \"horizontal\":\n      return \"vertical\"\n\n    case \"up\":\n      return \"down\"\n\n    case \"down\":\n      return \"up\"\n\n    case \"block\":\n      return \"inline\"\n\n    case \"inline\":\n      return \"block\"\n\n    default:\n      return value\n  }\n}\n\nexport const toCamelCase = (value: StringLiteral): string =>\n  value\n    .toLowerCase()\n    .replace(/[_-](.)/g, (_, group1) => group1.toUpperCase())\n    .replace(/^(.)/, (_, group1) => group1.toUpperCase())\n\nexport const toKebabCase = (value: StringLiteral): string =>\n  value\n    .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\")\n    .toLowerCase()\n    .replace(/^-/, \"\")\n"],"mappings":";AAEO,IAAMA,MAAA,GAASA,CAACC,KAAA,EAAeC,YAAA,GAAuB,OAC3DD,KAAA,CAAME,OAAA,CAAQ,QAAQD,YAAY;AAE7B,IAAME,OAAA,GAAWH,KAAA,IAA0B;EAChD,QAAQA,KAAA;IACN,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET,KAAK;MACH,OAAO;IAET;MACE,OAAOA,KAAA;EACX;AACF;AAEO,IAAMI,WAAA,GAAeJ,KAAA,IAC1BA,KAAA,CACGK,WAAA,CAAY,EACZH,OAAA,CAAQ,YAAY,CAACI,CAAA,EAAGC,MAAA,KAAWA,MAAA,CAAOC,WAAA,CAAY,CAAC,EACvDN,OAAA,CAAQ,QAAQ,CAACI,CAAA,EAAGC,MAAA,KAAWA,MAAA,CAAOC,WAAA,CAAY,CAAC;AAEjD,IAAMC,WAAA,GAAeT,KAAA,IAC1BA,KAAA,CACGE,OAAA,CAAQ,gCAAgC,OAAO,EAC/CG,WAAA,CAAY,EACZH,OAAA,CAAQ,MAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}