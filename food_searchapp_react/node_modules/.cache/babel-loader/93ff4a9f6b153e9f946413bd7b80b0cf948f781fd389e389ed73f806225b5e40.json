{"ast":null,"code":"\"use client\";\n\n// src/notice.tsx\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@yamada-ui/alert\";\nimport { CloseButton } from \"@yamada-ui/close-button\";\nimport { ui, useTheme } from \"@yamada-ui/core\";\nimport { cx, merge } from \"@yamada-ui/utils\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar findId = (options, id) => options.find(notice => notice.id === id);\nvar findNotice = (state, id) => {\n  const placement = getNoticePlacement(state, id);\n  const index = placement ? state[placement].findIndex(notice => notice.id === id) : -1;\n  return {\n    placement,\n    index\n  };\n};\nvar getNoticePlacement = (state, id) => {\n  for (const [placement, values] of Object.entries(state)) {\n    if (findId(values, id)) return placement;\n  }\n};\nvar counter = 0;\nvar createNotice = (message, {\n  id,\n  placement = \"top\",\n  duration,\n  onCloseComplete,\n  status,\n  style\n}) => {\n  counter += 1;\n  id != null ? id : id = counter;\n  return {\n    id,\n    placement,\n    status,\n    duration,\n    message,\n    onDelete: () => noticeStore.remove(String(id), placement),\n    isDelete: false,\n    onCloseComplete,\n    style\n  };\n};\nvar createRender = options => {\n  const {\n    component\n  } = options;\n  const Render = props => {\n    if (typeof component === \"function\") {\n      return component({\n        ...props,\n        ...options\n      });\n    } else {\n      return /* @__PURE__ */jsx(Notice, {\n        ...props,\n        ...options\n      });\n    }\n  };\n  return Render;\n};\nvar createNoticeFunc = (defaultOptions, theme) => {\n  var _a, _b;\n  const themeOptions = (_b = (_a = theme.__config.notice) == null ? void 0 : _a.options) != null ? _b : {};\n  const computedOptions = options => merge(themeOptions, merge(defaultOptions, options));\n  const notice = (options = {}) => {\n    options = computedOptions(options);\n    const message = createRender(options);\n    return noticeStore.create(message, options);\n  };\n  notice.update = (id, options) => {\n    options = computedOptions(options);\n    noticeStore.update(id, options);\n  };\n  notice.closeAll = noticeStore.closeAll;\n  notice.close = noticeStore.close;\n  notice.isActive = noticeStore.isActive;\n  return notice;\n};\nvar useNotice = defaultOptions => {\n  const {\n    theme\n  } = useTheme();\n  return useMemo(() => createNoticeFunc(defaultOptions != null ? defaultOptions : {}, theme), [defaultOptions, theme]);\n};\nvar initialState = {\n  top: [],\n  \"top-left\": [],\n  \"top-right\": [],\n  bottom: [],\n  \"bottom-left\": [],\n  \"bottom-right\": []\n};\nvar createNoticeStore = initialState2 => {\n  let state = initialState2;\n  const storeChangeCache = /* @__PURE__ */new Set();\n  const setState = setStateFunc => {\n    state = setStateFunc(state);\n    storeChangeCache.forEach(onStoreChange => onStoreChange());\n  };\n  return {\n    getSnapshot: () => state,\n    subscribe: onStoreChange => {\n      storeChangeCache.add(onStoreChange);\n      return () => {\n        setState(() => initialState2);\n        storeChangeCache.delete(onStoreChange);\n      };\n    },\n    remove: (id, placement) => {\n      setState(prevState => ({\n        ...prevState,\n        [placement]: prevState[placement].filter(notice => notice.id != id)\n      }));\n    },\n    create: (message, options) => {\n      const limit = options.limit;\n      const notice = createNotice(message, options);\n      const {\n        placement,\n        id\n      } = notice;\n      setState(prev => {\n        var _a;\n        let prevNotices = (_a = prev[placement]) != null ? _a : [];\n        if (limit !== void 0 && limit > 0 && prevNotices.length > limit - 1) {\n          const n = prevNotices.length - (limit - 1);\n          const notices2 = placement.includes(\"top\") ? prevNotices.slice(n * -1) : prevNotices.slice(0, n);\n          const ids = notices2.map(({\n            id: id2\n          }) => id2);\n          prevNotices = prevNotices.map(notice2 => ids.includes(notice2.id) ? {\n            ...notice2,\n            isDelete: true\n          } : notice2);\n        }\n        const notices = placement.includes(\"top\") ? [notice, ...prevNotices] : [...prevNotices, notice];\n        return {\n          ...prev,\n          [placement]: notices\n        };\n      });\n      return id;\n    },\n    update: (id, options) => {\n      setState(prev => {\n        const next = {\n          ...prev\n        };\n        const {\n          placement,\n          index\n        } = findNotice(next, id);\n        if (placement && index !== -1) {\n          next[placement][index] = {\n            ...next[placement][index],\n            ...options,\n            message: createRender(options)\n          };\n        }\n        return next;\n      });\n    },\n    closeAll: ({\n      placement\n    } = {}) => {\n      setState(prev => {\n        let placements = [\"bottom\", \"bottom-right\", \"bottom-left\", \"top\", \"top-left\", \"top-right\"];\n        if (placement) placements = placement;\n        return placements.reduce((acc, placement2) => {\n          acc[placement2] = prev[placement2].map(notice => ({\n            ...notice,\n            isDelete: true\n          }));\n          return acc;\n        }, {\n          ...prev\n        });\n      });\n    },\n    close: id => {\n      setState(prev => {\n        const placement = getNoticePlacement(prev, id);\n        if (!placement) return prev;\n        return {\n          ...prev,\n          [placement]: prev[placement].map(notice => notice.id == id ? {\n            ...notice,\n            isDelete: true\n          } : notice)\n        };\n      });\n    },\n    isActive: id => Boolean(findNotice(noticeStore.getSnapshot(), id).placement)\n  };\n};\nvar noticeStore = createNoticeStore(initialState);\nvar Notice = ({\n  variant = \"basic\",\n  colorScheme,\n  status,\n  icon,\n  title,\n  description,\n  isClosable,\n  className,\n  onClose\n}) => {\n  return /* @__PURE__ */jsxs(Alert, {\n    status,\n    variant,\n    colorScheme,\n    alignItems: \"start\",\n    boxShadow: \"fallback(lg, 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05))\",\n    className: cx(\"ui-notice\", className),\n    pe: isClosable ? 8 : void 0,\n    children: [/* @__PURE__ */jsx(AlertIcon, {\n      variant: icon == null ? void 0 : icon.variant,\n      className: \"ui-notice__icon\",\n      ...((icon == null ? void 0 : icon.color) ? {\n        color: icon.color\n      } : {}),\n      children: icon == null ? void 0 : icon.children\n    }), /* @__PURE__ */jsxs(ui.div, {\n      flex: \"1\",\n      children: [title ? /* @__PURE__ */jsx(AlertTitle, {\n        className: \"ui-notice__title\",\n        lineClamp: 1,\n        children: title\n      }) : null, description ? /* @__PURE__ */jsx(AlertDescription, {\n        className: \"ui-notice__desc\",\n        lineClamp: 3,\n        children: description\n      }) : null]\n    }), isClosable ? /* @__PURE__ */jsx(CloseButton, {\n      className: \"ui-notice__close-button\",\n      size: \"sm\",\n      onClick: onClose,\n      position: \"absolute\",\n      top: 2,\n      right: 2\n    }) : null]\n  });\n};\nexport { useNotice, noticeStore };","map":{"version":3,"names":["Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","ui","useTheme","cx","merge","useMemo","jsx","jsxs","findId","options","id","find","notice","findNotice","state","placement","getNoticePlacement","index","findIndex","values","Object","entries","counter","createNotice","message","duration","onCloseComplete","status","style","onDelete","noticeStore","remove","String","isDelete","createRender","component","Render","props","Notice","createNoticeFunc","defaultOptions","theme","_a","_b","themeOptions","__config","computedOptions","create","update","closeAll","close","isActive","useNotice","initialState","top","bottom","createNoticeStore","initialState2","storeChangeCache","Set","setState","setStateFunc","forEach","onStoreChange","getSnapshot","subscribe","add","delete","prevState","filter","limit","prev","prevNotices","length","n","notices2","includes","slice","ids","map","id2","notice2","notices","next","placements","reduce","acc","placement2","Boolean","variant","colorScheme","icon","title","description","isClosable","className","onClose","alignItems","boxShadow","pe","children","color","div","flex","lineClamp","size","onClick","position","right"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\notice\\src\\notice.tsx"],"sourcesContent":["import type { AlertProps } from \"@yamada-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@yamada-ui/alert\"\nimport { CloseButton } from \"@yamada-ui/close-button\"\nimport type {\n  CSSUIObject,\n  NoticePlacement,\n  NoticeComponentProps,\n  NoticeConfigOptions,\n  StyledTheme,\n} from \"@yamada-ui/core\"\nimport { ui, useTheme } from \"@yamada-ui/core\"\nimport { cx, merge } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode } from \"react\"\nimport { useMemo } from \"react\"\n\nexport type UseNoticeOptions = NoticeConfigOptions\n\nexport type NoticeOptions = {\n  id: string | number\n  placement: NoticePlacement\n  duration: UseNoticeOptions[\"duration\"]\n  status: UseNoticeOptions[\"status\"]\n  message: (props: NoticeComponentProps) => ReactNode\n  isDelete?: boolean\n  onDelete: () => void\n  onCloseComplete?: () => void\n  style?: CSSUIObject\n}\n\nconst findId = (\n  options: NoticeOptions[],\n  id: string | number,\n): NoticeOptions | undefined => options.find((notice) => notice.id === id)\n\nconst findNotice = (\n  state: State,\n  id: string | number,\n): {\n  placement: NoticePlacement | undefined\n  index: number\n} => {\n  const placement = getNoticePlacement(state, id)\n\n  const index = placement\n    ? state[placement].findIndex((notice) => notice.id === id)\n    : -1\n\n  return { placement, index }\n}\n\nconst getNoticePlacement = (\n  state: State,\n  id: string | number,\n): NoticePlacement | undefined => {\n  for (const [placement, values] of Object.entries(state)) {\n    if (findId(values, id)) return placement as NoticePlacement\n  }\n}\n\ntype CreateNoticeOptions = Partial<\n  Pick<\n    NoticeOptions,\n    \"id\" | \"placement\" | \"status\" | \"duration\" | \"onCloseComplete\" | \"style\"\n  >\n>\n\nlet counter = 0\n\nconst createNotice = (\n  message: (props: NoticeComponentProps) => ReactNode,\n  {\n    id,\n    placement = \"top\",\n    duration,\n    onCloseComplete,\n    status,\n    style,\n  }: CreateNoticeOptions,\n) => {\n  counter += 1\n\n  id ??= counter\n\n  return {\n    id,\n    placement,\n    status,\n    duration,\n    message,\n    onDelete: () => noticeStore.remove(String(id), placement),\n    isDelete: false,\n    onCloseComplete,\n    style,\n  }\n}\n\nconst createRender = (options: UseNoticeOptions): FC<NoticeComponentProps> => {\n  const { component } = options\n\n  const Render: FC<NoticeComponentProps> = (props) => {\n    if (typeof component === \"function\") {\n      return component({ ...props, ...options }) as JSX.Element\n    } else {\n      return <Notice {...props} {...options} />\n    }\n  }\n\n  return Render\n}\n\nconst createNoticeFunc = (\n  defaultOptions: UseNoticeOptions,\n  theme: StyledTheme,\n) => {\n  const themeOptions = theme.__config.notice?.options ?? {}\n\n  const computedOptions = (options: UseNoticeOptions) =>\n    merge(themeOptions, merge(defaultOptions, options))\n\n  const notice = (options: UseNoticeOptions = {}) => {\n    options = computedOptions(options)\n\n    const message = createRender(options)\n\n    return noticeStore.create(message, options)\n  }\n\n  notice.update = (\n    id: string | number,\n    options: Omit<UseNoticeOptions, \"id\">,\n  ) => {\n    options = computedOptions(options)\n\n    noticeStore.update(id, options)\n  }\n\n  notice.closeAll = noticeStore.closeAll\n  notice.close = noticeStore.close\n  notice.isActive = noticeStore.isActive\n\n  return notice\n}\n\ntype CreateNoticeReturn = ReturnType<typeof createNoticeFunc>\n\n/**\n * `useNotice` is a custom hook that controls the notifications of the application.\n *\n * @see Docs https://yamada-ui.com/hooks/use-notice\n */\nexport const useNotice = (\n  defaultOptions?: UseNoticeOptions,\n): CreateNoticeReturn => {\n  const { theme } = useTheme()\n\n  return useMemo(\n    () => createNoticeFunc(defaultOptions ?? {}, theme),\n    [defaultOptions, theme],\n  )\n}\n\ntype State = {\n  [K in NoticePlacement]: NoticeOptions[]\n}\n\ntype Store = {\n  subscribe: (onStoreChange: () => void) => () => void\n  getSnapshot: () => State\n  create: (\n    message: (props: NoticeComponentProps) => ReactNode,\n    options: UseNoticeOptions,\n  ) => string | number\n  close: (id: string | number) => void\n  closeAll: (options?: { placement?: NoticePlacement[] }) => void\n  update: (id: string | number, options: Omit<UseNoticeOptions, \"id\">) => void\n  remove: (id: string | number, placement: NoticePlacement) => void\n  isActive: (id: string | number) => boolean\n}\n\nconst initialState = {\n  top: [],\n  \"top-left\": [],\n  \"top-right\": [],\n  bottom: [],\n  \"bottom-left\": [],\n  \"bottom-right\": [],\n}\n\nconst createNoticeStore = (initialState: State): Store => {\n  let state = initialState\n  const storeChangeCache = new Set<() => void>()\n\n  const setState = (setStateFunc: (values: State) => State) => {\n    state = setStateFunc(state)\n    storeChangeCache.forEach((onStoreChange) => onStoreChange())\n  }\n\n  return {\n    getSnapshot: () => state,\n\n    subscribe: (onStoreChange) => {\n      storeChangeCache.add(onStoreChange)\n\n      return () => {\n        setState(() => initialState)\n        storeChangeCache.delete(onStoreChange)\n      }\n    },\n\n    remove: (id, placement) => {\n      setState((prevState) => ({\n        ...prevState,\n        [placement]: prevState[placement].filter((notice) => notice.id != id),\n      }))\n    },\n\n    create: (message, options) => {\n      const limit = options.limit\n\n      const notice = createNotice(message, options)\n      const { placement, id } = notice\n\n      setState((prev) => {\n        let prevNotices = prev[placement] ?? []\n\n        if (\n          limit !== undefined &&\n          limit > 0 &&\n          prevNotices.length > limit - 1\n        ) {\n          const n = prevNotices.length - (limit - 1)\n          const notices = placement.includes(\"top\")\n            ? prevNotices.slice(n * -1)\n            : prevNotices.slice(0, n)\n\n          const ids = notices.map(({ id }) => id)\n\n          prevNotices = prevNotices.map((notice) =>\n            ids.includes(notice.id) ? { ...notice, isDelete: true } : notice,\n          )\n        }\n\n        const notices = placement.includes(\"top\")\n          ? [notice, ...prevNotices]\n          : [...prevNotices, notice]\n\n        return { ...prev, [placement]: notices }\n      })\n\n      return id\n    },\n\n    update: (id, options) => {\n      setState((prev) => {\n        const next = { ...prev }\n        const { placement, index } = findNotice(next, id)\n\n        if (placement && index !== -1) {\n          next[placement][index] = {\n            ...next[placement][index],\n            ...options,\n            message: createRender(options),\n          }\n        }\n\n        return next\n      })\n    },\n\n    closeAll: ({ placement } = {}) => {\n      setState((prev) => {\n        let placements: NoticePlacement[] = [\n          \"bottom\",\n          \"bottom-right\",\n          \"bottom-left\",\n          \"top\",\n          \"top-left\",\n          \"top-right\",\n        ]\n\n        if (placement) placements = placement\n\n        return placements.reduce(\n          (acc, placement) => {\n            acc[placement] = prev[placement].map((notice) => ({\n              ...notice,\n              isDelete: true,\n            }))\n\n            return acc\n          },\n          { ...prev },\n        )\n      })\n    },\n\n    close: (id) => {\n      setState((prev) => {\n        const placement = getNoticePlacement(prev, id)\n\n        if (!placement) return prev\n\n        return {\n          ...prev,\n          [placement]: prev[placement].map((notice) =>\n            notice.id == id ? { ...notice, isDelete: true } : notice,\n          ),\n        }\n      })\n    },\n\n    isActive: (id) =>\n      Boolean(findNotice(noticeStore.getSnapshot(), id).placement),\n  }\n}\n\nexport const noticeStore = createNoticeStore(initialState)\n\nexport type NoticeProps = Omit<AlertProps, keyof UseNoticeOptions> &\n  UseNoticeOptions & {\n    onClose?: () => void\n  }\n\nconst Notice: FC<NoticeProps> = ({\n  variant = \"basic\",\n  colorScheme,\n  status,\n  icon,\n  title,\n  description,\n  isClosable,\n  className,\n  onClose,\n}) => {\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      colorScheme={colorScheme}\n      alignItems=\"start\"\n      boxShadow=\"fallback(lg, 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05))\"\n      className={cx(\"ui-notice\", className)}\n      pe={isClosable ? 8 : undefined}\n    >\n      <AlertIcon\n        variant={icon?.variant}\n        className=\"ui-notice__icon\"\n        {...(icon?.color ? { color: icon.color } : {})}\n      >\n        {icon?.children}\n      </AlertIcon>\n\n      <ui.div flex=\"1\">\n        {title ? (\n          <AlertTitle className=\"ui-notice__title\" lineClamp={1}>\n            {title}\n          </AlertTitle>\n        ) : null}\n        {description ? (\n          <AlertDescription className=\"ui-notice__desc\" lineClamp={3}>\n            {description}\n          </AlertDescription>\n        ) : null}\n      </ui.div>\n\n      {isClosable ? (\n        <CloseButton\n          className=\"ui-notice__close-button\"\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          top={2}\n          right={2}\n        />\n      ) : null}\n    </Alert>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}