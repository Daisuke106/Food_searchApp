{"ast":null,"code":"\"use client\";\n\n// src/indicator.tsx\nimport { ui, forwardRef, omitThemeProps, useComponentStyle } from \"@yamada-ui/core\";\nimport { useAnimation } from \"@yamada-ui/use-animation\";\nimport { useValue } from \"@yamada-ui/use-value\";\nimport { cx } from \"@yamada-ui/utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar getPlacementStyle = (placement, offset) => {\n  const styles = {};\n  let translateX = \"\";\n  let translateY = \"\";\n  if (placement.includes(\"top\")) {\n    styles.top = offset;\n    translateY = \"-50%\";\n  } else if (placement.includes(\"bottom\")) {\n    styles.bottom = offset;\n    translateY = \"50%\";\n  } else {\n    styles.top = \"50%\";\n    translateY = \"-50%\";\n  }\n  if (placement.includes(\"left\")) {\n    styles.left = offset;\n    translateX = \"-50%\";\n  } else if (placement.includes(\"right\")) {\n    styles.right = offset;\n    translateX = \"50%\";\n  } else {\n    styles.left = \"50%\";\n    translateX = \"-50%\";\n  }\n  styles.transform = `translate(${translateX}, ${translateY})`;\n  return styles;\n};\nvar Indicator = forwardRef((props, ref) => {\n  const [styles, mergedProps] = useComponentStyle(\"Indicator\", props);\n  let {\n    className,\n    inline = false,\n    placement = \"top-right\",\n    offset = 0,\n    label,\n    overflowCount = 99,\n    showZero = true,\n    children,\n    isDisabled,\n    containerProps,\n    ping,\n    pingColor = \"var(--ui-ping)\",\n    pingDuration = \"1.4s\",\n    pingCount = \"infinite\",\n    pingScale = 1.8,\n    ...rest\n  } = omitThemeProps(mergedProps, [\"withBorder\"]);\n  const animation = useAnimation({\n    keyframes: {\n      \"75%, 100%\": {\n        transform: `scale(${pingScale})`,\n        opacity: 0\n      }\n    },\n    fillMode: \"forwards\",\n    duration: pingDuration,\n    timingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n    iterationCount: pingCount\n  });\n  const isNumeric = typeof label === \"number\";\n  if (isNumeric && !showZero && label <= 0) isDisabled != null ? isDisabled : isDisabled = true;\n  const computedInline = useValue(inline);\n  const computedPlacement = useValue(placement);\n  const computedOffset = useValue(offset);\n  const renderLabel = useMemo(() => {\n    if (isNumeric) {\n      if (label > overflowCount) {\n        return /* @__PURE__ */jsxs(Fragment, {\n          children: [overflowCount, /* @__PURE__ */jsx(ui.span, {\n            lineHeight: 1,\n            children: \"+\"\n          })]\n        });\n      } else {\n        return label;\n      }\n    } else {\n      return label;\n    }\n  }, [isNumeric, label, overflowCount]);\n  const css = {\n    position: \"absolute\",\n    ...getPlacementStyle(computedPlacement, computedOffset),\n    ...(isNumeric ? {\n      fontWeight: \"medium\"\n    } : {}),\n    ...styles\n  };\n  return /* @__PURE__ */jsxs(ui.div, {\n    ref,\n    className: cx(\"ui-indicator\", className),\n    __css: {\n      position: \"relative\",\n      display: computedInline ? \"inline-block\" : \"block\"\n    },\n    ...containerProps,\n    children: [!isDisabled ? /* @__PURE__ */jsxs(ui.div, {\n      ref,\n      className: cx(\"ui-indicator__icon\", className),\n      __css: css,\n      ...rest,\n      children: [renderLabel, ping ? /* @__PURE__ */jsx(ui.div, {\n        className: \"ui-indicator__icon__ping\",\n        __css: {\n          position: \"absolute\",\n          boxSize: \"100%\",\n          rounded: \"fallback(full, 9999px)\",\n          opacity: 0.75,\n          zIndex: -1,\n          bg: pingColor\n        },\n        animation\n      }) : null]\n    }) : null, children]\n  });\n});\nexport { Indicator };","map":{"version":3,"names":["ui","forwardRef","omitThemeProps","useComponentStyle","useAnimation","useValue","cx","useMemo","Fragment","jsx","jsxs","getPlacementStyle","placement","offset","styles","translateX","translateY","includes","top","bottom","left","right","transform","Indicator","props","ref","mergedProps","className","inline","label","overflowCount","showZero","children","isDisabled","containerProps","ping","pingColor","pingDuration","pingCount","pingScale","rest","animation","keyframes","opacity","fillMode","duration","timingFunction","iterationCount","isNumeric","computedInline","computedPlacement","computedOffset","renderLabel","span","lineHeight","css","position","fontWeight","div","__css","display","boxSize","rounded","zIndex","bg"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\indicator\\src\\indicator.tsx"],"sourcesContent":["import type {\n  AnimationStyle,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  Token,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport { useAnimation } from \"@yamada-ui/use-animation\"\nimport { useValue } from \"@yamada-ui/use-value\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { ReactNode } from \"react\"\nimport { useMemo } from \"react\"\n\ntype IndicatorOptions = {\n  children: ReactNode\n  /**\n   * If `true`, set the indicator as an inline element.\n   *\n   * @default false\n   * */\n  inline?: Token<boolean>\n  /**\n   * The placement of the indicator.\n   *\n   * @default 'top-right'\n   */\n  placement?: Token<\n    | \"top\"\n    | \"top-left\"\n    | \"top-right\"\n    | \"left\"\n    | \"right\"\n    | \"bottom\"\n    | \"bottom-left\"\n    | \"bottom-right\"\n  >\n  /**\n   * Changes position offset, usually used when element has border-radius.\n   *\n   * @default 0\n   */\n  offset?: Token<number>\n  /**\n   * The indicator label to use.\n   */\n  label?: ReactNode\n  /**\n   * If `label` is of type number, the maximum number displayed.\n   *\n   * @default 99\n   */\n  overflowCount?: number\n  /**\n   * If `true`, display 0.\n   *\n   * @default true\n   */\n  showZero?: boolean\n  /**\n   * If `true`, the indicator will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, display the border of the indicator.\n   *\n   * @default false\n   */\n  withBorder?: boolean\n  /**\n   * Props for indicator wrapper element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * If `true`, make an element scale and fade like a radar ping or ripple of water.\n   *\n   * @default false\n   */\n  ping?: boolean\n  /**\n   * It is used for the color of the ping animation.\n   *\n   * @default \"var(--ui-ping)\"\n   */\n  pingColor?: HTMLUIProps<\"div\">[\"backgroundColor\"]\n  /**\n   * It is used for the scale of the ping animation.\n   *\n   * @default 1.8\n   */\n  pingScale?: number\n  /**\n   * It is used for the count of the ping animation.\n   *\n   * @default \"infinite\"\n   */\n  pingCount?: AnimationStyle[\"iterationCount\"]\n  /**\n   * It is used for the duration of the ping animation.\n   *\n   * @default \"1.4s\"\n   */\n  pingDuration?: AnimationStyle[\"direction\"]\n}\n\nexport type IndicatorProps = Omit<HTMLUIProps<\"div\">, \"children\" | \"offset\"> &\n  ThemeProps<\"Indicator\"> &\n  IndicatorOptions\n\nconst getPlacementStyle = (\n  placement:\n    | \"top\"\n    | \"top-left\"\n    | \"top-right\"\n    | \"left\"\n    | \"right\"\n    | \"bottom\"\n    | \"bottom-left\"\n    | \"bottom-right\",\n  offset: number,\n): CSSUIObject => {\n  const styles: CSSUIObject = {}\n  let translateX = \"\"\n  let translateY = \"\"\n\n  if (placement.includes(\"top\")) {\n    styles.top = offset\n    translateY = \"-50%\"\n  } else if (placement.includes(\"bottom\")) {\n    styles.bottom = offset\n    translateY = \"50%\"\n  } else {\n    styles.top = \"50%\"\n    translateY = \"-50%\"\n  }\n\n  if (placement.includes(\"left\")) {\n    styles.left = offset\n    translateX = \"-50%\"\n  } else if (placement.includes(\"right\")) {\n    styles.right = offset\n    translateX = \"50%\"\n  } else {\n    styles.left = \"50%\"\n    translateX = \"-50%\"\n  }\n\n  styles.transform = `translate(${translateX}, ${translateY})`\n\n  return styles\n}\n\n/**\n * `Indicator` is a component that displays at the corner of elements such as avatars.\n *\n * @see Docs https://yamada-ui.com/components/media-and-icons/indicator\n */\nexport const Indicator = forwardRef<IndicatorProps, \"div\">((props, ref) => {\n  const [styles, mergedProps] = useComponentStyle(\"Indicator\", props)\n  let {\n    className,\n    inline = false,\n    placement = \"top-right\",\n    offset = 0,\n    label,\n    overflowCount = 99,\n    showZero = true,\n    children,\n    isDisabled,\n    containerProps,\n    ping,\n    pingColor = \"var(--ui-ping)\",\n    pingDuration = \"1.4s\",\n    pingCount = \"infinite\",\n    pingScale = 1.8,\n    ...rest\n  } = omitThemeProps(mergedProps, [\"withBorder\"])\n  const animation = useAnimation({\n    keyframes: {\n      \"75%, 100%\": {\n        transform: `scale(${pingScale})`,\n        opacity: 0,\n      },\n    },\n    fillMode: \"forwards\",\n    duration: pingDuration,\n    timingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n    iterationCount: pingCount,\n  })\n\n  const isNumeric = typeof label === \"number\"\n\n  if (isNumeric && !showZero && (label as number) <= 0) isDisabled ??= true\n\n  const computedInline = useValue(inline)\n  const computedPlacement = useValue(placement)\n  const computedOffset = useValue(offset)\n\n  const renderLabel = useMemo(() => {\n    if (isNumeric) {\n      if ((label as number) > overflowCount) {\n        return (\n          <>\n            {overflowCount}\n            <ui.span lineHeight={1}>+</ui.span>\n          </>\n        )\n      } else {\n        return label\n      }\n    } else {\n      return label\n    }\n  }, [isNumeric, label, overflowCount])\n\n  const css: CSSUIObject = {\n    position: \"absolute\",\n    ...getPlacementStyle(computedPlacement, computedOffset),\n    ...(isNumeric ? { fontWeight: \"medium\" } : {}),\n    ...styles,\n  }\n\n  return (\n    <ui.div\n      ref={ref}\n      className={cx(\"ui-indicator\", className)}\n      __css={{\n        position: \"relative\",\n        display: computedInline ? \"inline-block\" : \"block\",\n      }}\n      {...containerProps}\n    >\n      {!isDisabled ? (\n        <ui.div\n          ref={ref}\n          className={cx(\"ui-indicator__icon\", className)}\n          __css={css}\n          {...rest}\n        >\n          {renderLabel}\n\n          {ping ? (\n            <ui.div\n              className=\"ui-indicator__icon__ping\"\n              __css={{\n                position: \"absolute\",\n                boxSize: \"100%\",\n                rounded: \"fallback(full, 9999px)\",\n                opacity: 0.75,\n                zIndex: -1,\n                bg: pingColor,\n              }}\n              animation={animation}\n            />\n          ) : null}\n        </ui.div>\n      ) : null}\n\n      {children}\n    </ui.div>\n  )\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}