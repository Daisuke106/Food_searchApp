{"ast":null,"code":"\"use client\";\n\n// src/input.tsx\nimport { ui, forwardRef, omitThemeProps, useMultiComponentStyle } from \"@yamada-ui/core\";\nimport { useFormControlProps } from \"@yamada-ui/form-control\";\nimport { cx } from \"@yamada-ui/utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Input = forwardRef((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Input\", props);\n  let {\n    className,\n    htmlSize,\n    __css,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  rest = useFormControlProps(rest);\n  const css = {\n    ...styles.field,\n    ...__css\n  };\n  return /* @__PURE__ */jsx(ui.input, {\n    ref,\n    className: cx(\"ui-input\", className),\n    size: htmlSize,\n    __css: css,\n    ...rest\n  });\n});\nexport { Input };","map":{"version":3,"names":["ui","forwardRef","omitThemeProps","useMultiComponentStyle","useFormControlProps","cx","jsx","Input","props","ref","styles","mergedProps","className","htmlSize","__css","rest","css","field","input","size"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\input\\src\\input.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  ColorModeToken,\n  CSS,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useMultiComponentStyle,\n} from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport { useFormControlProps } from \"@yamada-ui/form-control\"\nimport { cx } from \"@yamada-ui/utils\"\n\ntype InputOptions = {\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * The native HTML `size` attribute to be passed to the `input`.\n   */\n  htmlSize?: number\n}\n\nexport type InputProps = Omit<\n  HTMLUIProps<\"input\">,\n  \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n> &\n  ThemeProps<\"Input\"> &\n  InputOptions &\n  FormControlOptions\n\n/**\n * `Input` is a component used to obtain text input from the user.\n *\n * @see Docs https://yamada-ui.com/components/forms/input\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Input\", props)\n  let { className, htmlSize, __css, ...rest } = omitThemeProps(mergedProps)\n\n  rest = useFormControlProps(rest)\n\n  const css: CSSUIObject = { ...styles.field, ...__css }\n\n  return (\n    <ui.input\n      ref={ref}\n      className={cx(\"ui-input\", className)}\n      size={htmlSize}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;AAOA,SACEA,EAAA,EACAC,UAAA,EACAC,cAAA,EACAC,sBAAA,QACK;AAEP,SAASC,mBAAA,QAA2B;AACpC,SAASC,EAAA,QAAU;AAuCf,SAAAC,GAAA;AATG,IAAMC,KAAA,GAAQN,UAAA,CAAgC,CAACO,KAAA,EAAOC,GAAA,KAAQ;EACnE,MAAM,CAACC,MAAA,EAAQC,WAAW,IAAIR,sBAAA,CAAuB,SAASK,KAAK;EACnE,IAAI;IAAEI,SAAA;IAAWC,QAAA;IAAUC,KAAA;IAAO,GAAGC;EAAK,IAAIb,cAAA,CAAeS,WAAW;EAExEI,IAAA,GAAOX,mBAAA,CAAoBW,IAAI;EAE/B,MAAMC,GAAA,GAAmB;IAAE,GAAGN,MAAA,CAAOO,KAAA;IAAO,GAAGH;EAAM;EAErD,OACE,eAAAR,GAAA,CAACN,EAAA,CAAGkB,KAAA,EAAH;IACCT,GAAA;IACAG,SAAA,EAAWP,EAAA,CAAG,YAAYO,SAAS;IACnCO,IAAA,EAAMN,QAAA;IACNC,KAAA,EAAOE,GAAA;IACN,GAAGD;EAAA,CACN;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}