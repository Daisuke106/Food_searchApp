{"ast":null,"code":"\"use client\";\n\nimport { MenuGroup } from \"./chunk-JVRMLEOK.mjs\";\nimport { MenuOptionItem } from \"./chunk-UTYWCSIS.mjs\";\n\n// src/menu-option-group.tsx\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { cx, getValidChildren, isArray } from \"@yamada-ui/utils\";\nimport { cloneElement, forwardRef, useCallback } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar MenuOptionGroup = forwardRef(({\n  className,\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  type,\n  children,\n  ...rest\n}, ref) => {\n  const isRadio = type === \"radio\";\n  defaultValue != null ? defaultValue : defaultValue = isRadio ? \"\" : [];\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp\n  });\n  const onChange = useCallback(selectedValue => {\n    if (isRadio && typeof value === \"string\") setValue(selectedValue);\n    if (!isRadio && isArray(value)) {\n      const nextValue = value.includes(selectedValue) ? value.filter(item => item !== selectedValue) : value.concat(selectedValue);\n      setValue(nextValue);\n    }\n  }, [isRadio, value, setValue]);\n  const validChildren = getValidChildren(children);\n  const cloneChildren = validChildren.map(child => {\n    if (child.type !== MenuOptionItem) return child;\n    const onClick = ev => {\n      var _a, _b;\n      onChange(child.props.value);\n      (_b = (_a = child.props).onClick) == null ? void 0 : _b.call(_a, ev);\n    };\n    const isChecked = !isRadio && isArray(value) ? value.includes(child.props.value) : child.props.value === value;\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return /* @__PURE__ */jsx(MenuGroup, {\n    ref,\n    className: cx(\"ui-menu__item--group--option\", className),\n    ...rest,\n    children: cloneChildren\n  });\n});\nMenuOptionGroup.displayName = \"MenuOptionGroup\";\nexport { MenuOptionGroup };","map":{"version":3,"names":["useControllableState","cx","getValidChildren","isArray","cloneElement","forwardRef","useCallback","jsx","MenuOptionGroup","className","value","valueProp","defaultValue","onChange","onChangeProp","type","children","rest","ref","isRadio","setValue","selectedValue","nextValue","includes","filter","item","concat","validChildren","cloneChildren","map","child","MenuOptionItem","onClick","ev","_a","_b","props","call","isChecked","MenuGroup","displayName"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\menu\\src\\menu-option-group.tsx"],"sourcesContent":["import type { ComponentArgs, HTMLUIProps } from \"@yamada-ui/core\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport { cx, getValidChildren, isArray } from \"@yamada-ui/utils\"\nimport type { ForwardedRef, Ref } from \"react\"\nimport { cloneElement, forwardRef, useCallback } from \"react\"\nimport { MenuGroup } from \"./menu-group\"\nimport { MenuOptionItem } from \"./menu-item\"\n\ntype MenuOptionGroupOptions<Y extends string | string[] = string> = {\n  /**\n   * The label of the option group.\n   */\n  label?: string\n  /**\n   * The value of the menu item group.\n   */\n  value?: Y\n  /**\n   * The initial value of the menu item group.\n   */\n  defaultValue?: Y\n  /**\n   * The type of the menu option group.\n   *\n   * @default 'checkbox'\n   */\n  type?: \"radio\" | \"checkbox\"\n  /**\n   * The callback fired when any children checkbox is checked or unchecked.\n   */\n  onChange?: (value: Y) => void\n}\n\nexport type MenuOptionGroupProps<Y extends string | string[] = string> = Omit<\n  HTMLUIProps<\"div\">,\n  keyof MenuOptionGroupOptions\n> &\n  MenuOptionGroupOptions<Y>\n\nexport const MenuOptionGroup = forwardRef(\n  <Y extends string | string[] = string>(\n    {\n      className,\n      value: valueProp,\n      defaultValue,\n      onChange: onChangeProp,\n      type,\n      children,\n      ...rest\n    }: MenuOptionGroupProps<Y>,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const isRadio = type === \"radio\"\n\n    defaultValue ??= (isRadio ? \"\" : []) as Y\n\n    const [value, setValue] = useControllableState({\n      value: valueProp,\n      defaultValue,\n      onChange: onChangeProp,\n    })\n\n    const onChange = useCallback(\n      (selectedValue: string) => {\n        if (isRadio && typeof value === \"string\") setValue(selectedValue as Y)\n\n        if (!isRadio && isArray(value)) {\n          const nextValue = value.includes(selectedValue)\n            ? value.filter((item) => item !== selectedValue)\n            : value.concat(selectedValue)\n\n          setValue(nextValue as Y)\n        }\n      },\n      [isRadio, value, setValue],\n    )\n\n    const validChildren = getValidChildren(children)\n\n    const cloneChildren = validChildren.map((child) => {\n      if (child.type !== MenuOptionItem) return child\n\n      const onClick = (ev: MouseEvent) => {\n        onChange(child.props.value)\n        child.props.onClick?.(ev)\n      }\n\n      const isChecked =\n        !isRadio && isArray(value)\n          ? value.includes(child.props.value)\n          : child.props.value === value\n\n      return cloneElement(child, { type, onClick, isChecked })\n    })\n\n    return (\n      <MenuGroup\n        ref={ref}\n        className={cx(\"ui-menu__item--group--option\", className)}\n        {...rest}\n      >\n        {cloneChildren}\n      </MenuGroup>\n    )\n  },\n) as {\n  <Y extends string | string[] = string>(\n    props: MenuOptionGroupProps<Y> & { ref?: Ref<HTMLDivElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nMenuOptionGroup.displayName = \"MenuOptionGroup\"\n"],"mappings":";;;;;;AACA,SAASA,oBAAA,QAA4B;AACrC,SAASC,EAAA,EAAIC,gBAAA,EAAkBC,OAAA,QAAe;AAE9C,SAASC,YAAA,EAAcC,UAAA,EAAYC,WAAA,QAAmB;AA4FhD,SAAAC,GAAA;AAzDC,IAAMC,eAAA,GAAkBH,UAAA,CAC7B,CACE;EACEI,SAAA;EACAC,KAAA,EAAOC,SAAA;EACPC,YAAA;EACAC,QAAA,EAAUC,YAAA;EACVC,IAAA;EACAC,QAAA;EACA,GAAGC;AACL,GACAC,GAAA,KACG;EACH,MAAMC,OAAA,GAAUJ,IAAA,KAAS;EAEzBH,YAAA,WAAAA,YAAA,GAAAA,YAAA,GAAkBO,OAAA,GAAU,KAAK,EAAC;EAElC,MAAM,CAACT,KAAA,EAAOU,QAAQ,IAAIpB,oBAAA,CAAqB;IAC7CU,KAAA,EAAOC,SAAA;IACPC,YAAA;IACAC,QAAA,EAAUC;EACZ,CAAC;EAED,MAAMD,QAAA,GAAWP,WAAA,CACde,aAAA,IAA0B;IACzB,IAAIF,OAAA,IAAW,OAAOT,KAAA,KAAU,UAAUU,QAAA,CAASC,aAAkB;IAErE,IAAI,CAACF,OAAA,IAAWhB,OAAA,CAAQO,KAAK,GAAG;MAC9B,MAAMY,SAAA,GAAYZ,KAAA,CAAMa,QAAA,CAASF,aAAa,IAC1CX,KAAA,CAAMc,MAAA,CAAQC,IAAA,IAASA,IAAA,KAASJ,aAAa,IAC7CX,KAAA,CAAMgB,MAAA,CAAOL,aAAa;MAE9BD,QAAA,CAASE,SAAc;IACzB;EACF,GACA,CAACH,OAAA,EAAST,KAAA,EAAOU,QAAQ,CAC3B;EAEA,MAAMO,aAAA,GAAgBzB,gBAAA,CAAiBc,QAAQ;EAE/C,MAAMY,aAAA,GAAgBD,aAAA,CAAcE,GAAA,CAAKC,KAAA,IAAU;IACjD,IAAIA,KAAA,CAAMf,IAAA,KAASgB,cAAA,EAAgB,OAAOD,KAAA;IAE1C,MAAME,OAAA,GAAWC,EAAA,IAAmB;MAlF1C,IAAAC,EAAA,EAAAC,EAAA;MAmFQtB,QAAA,CAASiB,KAAA,CAAMM,KAAA,CAAM1B,KAAK;MAC1B,CAAAyB,EAAA,IAAAD,EAAA,GAAAJ,KAAA,CAAMM,KAAA,EAAMJ,OAAA,KAAZ,gBAAAG,EAAA,CAAAE,IAAA,CAAAH,EAAA,EAAsBD,EAAA;IACxB;IAEA,MAAMK,SAAA,GACJ,CAACnB,OAAA,IAAWhB,OAAA,CAAQO,KAAK,IACrBA,KAAA,CAAMa,QAAA,CAASO,KAAA,CAAMM,KAAA,CAAM1B,KAAK,IAChCoB,KAAA,CAAMM,KAAA,CAAM1B,KAAA,KAAUA,KAAA;IAE5B,OAAON,YAAA,CAAa0B,KAAA,EAAO;MAAEf,IAAA;MAAMiB,OAAA;MAASM;IAAU,CAAC;EACzD,CAAC;EAED,OACE,eAAA/B,GAAA,CAACgC,SAAA;IACCrB,GAAA;IACAT,SAAA,EAAWR,EAAA,CAAG,gCAAgCQ,SAAS;IACtD,GAAGQ,IAAA;IAEHD,QAAA,EAAAY;EAAA,CACH;AAEJ,CACF;AAMApB,eAAA,CAAgBgC,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}