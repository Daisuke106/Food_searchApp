{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { useCallbackRef } from \"@yamada-ui/utils\";\nimport { useEffect } from \"react\";\nvar useTimeout = (callback, delay) => {\n  const func = useCallbackRef(callback);\n  useEffect(() => {\n    if (delay == null) return void 0;\n    let timeoutId = null;\n    timeoutId = window.setTimeout(func, delay);\n    return () => {\n      if (timeoutId) window.clearTimeout(timeoutId);\n    };\n  }, [delay, func]);\n};\nexport { useTimeout };","map":{"version":3,"names":["useCallbackRef","useEffect","useTimeout","callback","delay","func","timeoutId","window","setTimeout","clearTimeout"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-timeout\\src\\index.ts"],"sourcesContent":["import { useCallbackRef } from \"@yamada-ui/utils\"\nimport { useEffect } from \"react\"\n\n/**\n * `useTimeout` is a custom hook that executes a function after a specified number of milliseconds.\n *\n * @see Docs https://yamada-ui.com/hooks/use-timeout\n */\nexport const useTimeout = (\n  callback: (...args: any[]) => void,\n  delay: number | null,\n) => {\n  const func = useCallbackRef(callback)\n\n  useEffect(() => {\n    if (delay == null) return undefined\n\n    let timeoutId: number | null = null\n\n    timeoutId = window.setTimeout(func, delay)\n\n    return () => {\n      if (timeoutId) window.clearTimeout(timeoutId)\n    }\n  }, [delay, func])\n}\n"],"mappings":";;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAASC,SAAA,QAAiB;AAOnB,IAAMC,UAAA,GAAaA,CACxBC,QAAA,EACAC,KAAA,KACG;EACH,MAAMC,IAAA,GAAOL,cAAA,CAAeG,QAAQ;EAEpCF,SAAA,CAAU,MAAM;IACd,IAAIG,KAAA,IAAS,MAAM,OAAO;IAE1B,IAAIE,SAAA,GAA2B;IAE/BA,SAAA,GAAYC,MAAA,CAAOC,UAAA,CAAWH,IAAA,EAAMD,KAAK;IAEzC,OAAO,MAAM;MACX,IAAIE,SAAA,EAAWC,MAAA,CAAOE,YAAA,CAAaH,SAAS;IAC9C;EACF,GAAG,CAACF,KAAA,EAAOC,IAAI,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}