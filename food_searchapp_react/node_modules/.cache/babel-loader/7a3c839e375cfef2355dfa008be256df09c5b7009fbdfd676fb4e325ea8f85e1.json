{"ast":null,"code":"\"use client\";\n\n// src/checkbox.tsx\nimport { ui, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { useFormControl as useFormControl2, useFormControlProps, formControlProperties } from \"@yamada-ui/form-control\";\nimport { AnimatePresence, motion } from \"@yamada-ui/motion\";\nimport { trackFocusVisible } from \"@yamada-ui/use-focus-visible\";\nimport { cx as cx2, useCallbackRef as useCallbackRef2, useSafeLayoutEffect, useUpdateEffect, handlerAll, dataAttr, mergeRefs, funcAll, splitObject } from \"@yamada-ui/utils\";\nimport { cloneElement, useCallback as useCallback2, useEffect, useRef, useState, forwardRef as forwardRef2, useId } from \"react\";\n\n// src/checkbox-group.tsx\nimport { useFormControl } from \"@yamada-ui/form-control\";\nimport { Flex } from \"@yamada-ui/layouts\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { createContext, cx, isObject, useCallbackRef, getValidChildren } from \"@yamada-ui/utils\";\nimport { forwardRef, useCallback } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar isEvent = value => value && isObject(value) && isObject(value.target);\nvar useCheckboxGroup = ({\n  value: valueProp,\n  defaultValue = [],\n  onChange: onChangeProp,\n  isNative,\n  ...props\n}) => {\n  const onChangeRef = useCallbackRef(onChangeProp);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeRef\n  });\n  const onChange = useCallback(evOrValue => {\n    const isChecked = isEvent(evOrValue) ? evOrValue.target.checked : !value.includes(evOrValue);\n    const selectedValue = isEvent(evOrValue) ? evOrValue.target.value : evOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [value, setValue]);\n  const getCheckboxProps = useCallback((props2, ref = null) => ({\n    ...props2,\n    ref,\n    [isNative ? \"checked\" : \"isChecked\"]: value.some(val => String(props2 == null ? void 0 : props2.value) === String(val)),\n    onChange\n  }), [onChange, isNative, value]);\n  return {\n    props,\n    value,\n    setValue,\n    onChange,\n    getCheckboxProps\n  };\n};\nvar [CheckboxGroupProvider, useCheckboxGroupContext] = createContext({\n  strict: false,\n  name: \"CheckboxGroupContext\"\n});\nvar CheckboxGroup = forwardRef(({\n  className,\n  size,\n  variant,\n  colorScheme,\n  children,\n  items = [],\n  direction = \"column\",\n  gap,\n  ...props\n}, ref) => {\n  const {\n    value,\n    onChange,\n    props: computedProps\n  } = useCheckboxGroup(props);\n  const {\n    isRequired,\n    isReadOnly,\n    isDisabled,\n    isInvalid,\n    ...rest\n  } = useFormControl(computedProps);\n  const validChildren = getValidChildren(children);\n  let computedChildren = [];\n  if (!validChildren.length && items.length) {\n    computedChildren = items.map(({\n      label,\n      value: value2,\n      ...props2\n    }, i) => /* @__PURE__ */jsx(Checkbox, {\n      value: value2,\n      ...props2,\n      children: label\n    }, i));\n  }\n  return /* @__PURE__ */jsx(CheckboxGroupProvider, {\n    value: {\n      size,\n      variant,\n      colorScheme,\n      isRequired,\n      isReadOnly,\n      isDisabled,\n      isInvalid,\n      value,\n      onChange\n    },\n    children: /* @__PURE__ */jsx(Flex, {\n      ref,\n      className: cx(\"ui-checkbox-group\", className),\n      role: \"group\",\n      direction,\n      gap: gap != null ? gap : direction === \"row\" ? \"1rem\" : void 0,\n      ...rest,\n      children: children != null ? children : computedChildren\n    })\n  });\n});\nCheckboxGroup.displayName = \"CheckboxGroup\";\n\n// src/checkbox.tsx\nimport { jsx as jsx2, jsxs } from \"react/jsx-runtime\";\nvar useCheckbox = ({\n  id,\n  ...props\n}) => {\n  id != null ? id : id = useId();\n  const {\n    id: _id,\n    name,\n    value,\n    isChecked: isCheckedProp,\n    defaultIsChecked,\n    tabIndex,\n    required,\n    disabled,\n    readOnly,\n    isIndeterminate,\n    onChange: onChangeProp,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    ...computedProps\n  } = useFormControlProps({\n    id,\n    ...props\n  });\n  const [{\n    \"aria-readonly\": _ariaReadonly,\n    ...formControlProps\n  }, rest] = splitObject(computedProps, formControlProperties);\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const [isActive, setActive] = useState(false);\n  const inputRef = useRef(null);\n  const [isLabel, setIsLabel] = useState(true);\n  const [isChecked, setIsChecked] = useState(!!defaultIsChecked);\n  const isControlled = isCheckedProp !== void 0;\n  const checked = isControlled ? isCheckedProp : isChecked;\n  const onChange = useCallbackRef2(ev => {\n    if (readOnly || disabled) {\n      ev.preventDefault();\n      return;\n    }\n    if (!isControlled) setIsChecked(!checked || isIndeterminate ? true : ev.target.checked);\n    onChangeProp == null ? void 0 : onChangeProp(ev);\n  }, [readOnly, disabled, isControlled, checked, isIndeterminate]);\n  const onFocus = useCallbackRef2(onFocusProp);\n  const onBlur = useCallbackRef2(onBlurProp);\n  const onKeyDown = useCallback2(({\n    key\n  }) => {\n    if (key === \" \") setActive(true);\n  }, [setActive]);\n  const onKeyUp = useCallback2(({\n    key\n  }) => {\n    if (key === \" \") setActive(false);\n  }, [setActive]);\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) inputRef.current.indeterminate = Boolean(isIndeterminate);\n  }, [isIndeterminate]);\n  useUpdateEffect(() => {\n    if (disabled) setFocused(false);\n  }, [disabled, setFocused]);\n  useSafeLayoutEffect(() => {\n    var _a;\n    if (!((_a = inputRef.current) == null ? void 0 : _a.form)) return;\n    inputRef.current.form.onreset = () => setIsChecked(!!defaultIsChecked);\n  }, []);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    if (inputRef.current.checked !== checked) setIsChecked(inputRef.current.checked);\n  }, [inputRef.current]);\n  const getContainerProps = useCallback2((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    ...props2,\n    ref: mergeRefs(ref, el => {\n      if (el) setIsLabel(el.tagName === \"LABEL\");\n    }),\n    \"data-checked\": dataAttr(checked),\n    onClick: handlerAll(props2.onClick, () => {\n      var _a;\n      if (isLabel) return;\n      (_a = inputRef.current) == null ? void 0 : _a.click();\n      requestAnimationFrame(() => {\n        var _a2;\n        return (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\n      });\n    })\n  }), [checked, isLabel, formControlProps]);\n  const getIconProps = useCallback2((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    ...props2,\n    ref,\n    \"data-active\": dataAttr(isActive),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-checked\": dataAttr(checked),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n    \"data-indeterminate\": dataAttr(isIndeterminate),\n    \"aria-hidden\": true,\n    onMouseDown: handlerAll(props2.onMouseDown, ev => {\n      if (isFocused) ev.preventDefault();\n      setActive(true);\n    }),\n    onMouseUp: handlerAll(props2.onMouseUp, () => setActive(false)),\n    onMouseEnter: handlerAll(props2.onMouseEnter, () => setHovered(true)),\n    onMouseLeave: handlerAll(props2.onMouseLeave, () => setHovered(false))\n  }), [isActive, checked, isFocused, isHovered, isFocusVisible, isIndeterminate, formControlProps]);\n  const getInputProps = useCallback2((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    ...props2,\n    ref: mergeRefs(inputRef, ref),\n    id,\n    type: \"checkbox\",\n    name,\n    value,\n    tabIndex,\n    required,\n    disabled,\n    readOnly,\n    checked,\n    style: {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    },\n    onChange: handlerAll(props2.onChange, onChange),\n    onBlur: handlerAll(props2.onBlur, onBlur, () => setFocused(false)),\n    onFocus: handlerAll(props2.onFocus, onFocus, () => setFocused(true)),\n    onKeyDown: handlerAll(props2.onKeyDown, onKeyDown),\n    onKeyUp: handlerAll(props2.onKeyUp, onKeyUp)\n  }), [formControlProps, id, name, value, tabIndex, required, disabled, readOnly, checked, onChange, onBlur, onFocus, onKeyDown, onKeyUp]);\n  const getLabelProps = useCallback2((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    ...props2,\n    ref,\n    \"data-checked\": dataAttr(checked),\n    onMouseDown: handlerAll(props2.onMouseDown, ev => {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }),\n    onTouchStart: handlerAll(props2.onTouchStart, ev => {\n      ev.preventDefault();\n      ev.stopPropagation();\n    })\n  }), [checked, formControlProps]);\n  return {\n    props: rest,\n    isFocusVisible,\n    isFocused,\n    isHovered,\n    isActive,\n    isChecked: checked,\n    isIndeterminate,\n    getContainerProps,\n    getIconProps,\n    getInputProps,\n    getLabelProps\n  };\n};\nvar Checkbox = forwardRef2((props, ref) => {\n  var _a, _b, _c, _d;\n  const group = useCheckboxGroupContext();\n  const {\n    value: groupValue,\n    ...groupProps\n  } = {\n    ...group\n  };\n  const control = useFormControl2(props);\n  const [styles, mergedProps] = useMultiComponentStyle(\"Checkbox\", {\n    ...groupProps,\n    ...props\n  });\n  const {\n    className,\n    gap = \"0.5rem\",\n    isRequired = (_a = groupProps.isRequired) != null ? _a : control.isRequired,\n    isReadOnly = (_b = groupProps.isReadOnly) != null ? _b : control.isReadOnly,\n    isDisabled = (_c = groupProps.isDisabled) != null ? _c : control.isDisabled,\n    isInvalid = (_d = groupProps.isInvalid) != null ? _d : control.isInvalid,\n    iconProps,\n    inputProps,\n    labelProps,\n    children,\n    ...computedProps\n  } = omitThemeProps(mergedProps);\n  const isCheckedProp = groupValue && computedProps.value ? groupValue.includes(computedProps.value) : computedProps.isChecked;\n  const onChange = groupProps.onChange && computedProps.value ? funcAll(groupProps.onChange, computedProps.onChange) : computedProps.onChange;\n  const {\n    isChecked,\n    isIndeterminate,\n    getContainerProps,\n    getInputProps,\n    getIconProps,\n    getLabelProps,\n    props: rest\n  } = useCheckbox({\n    ...computedProps,\n    isRequired,\n    isReadOnly,\n    isDisabled,\n    isInvalid,\n    isChecked: isCheckedProp,\n    onChange\n  });\n  const {\n    children: customIcon,\n    ...resolvedIconProps\n  } = {\n    ...iconProps\n  };\n  const cloneIcon = cloneElement(customIcon != null ? customIcon : /* @__PURE__ */jsx2(CheckboxIcon, {}), {\n    __css: {\n      opacity: isChecked || isIndeterminate ? 1 : 0,\n      transform: isChecked || isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      transitionProperty: \"transform\",\n      transitionDuration: \"normal\"\n    },\n    isIndeterminate,\n    isChecked,\n    isRequired,\n    isReadOnly,\n    isDisabled,\n    isInvalid\n  });\n  return /* @__PURE__ */jsxs(ui.label, {\n    className: cx2(\"ui-checkbox\", className),\n    ...getContainerProps(),\n    __css: {\n      cursor: \"pointer\",\n      position: \"relative\",\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      verticalAlign: \"top\",\n      gap,\n      ...styles.container\n    },\n    ...rest,\n    children: [/* @__PURE__ */jsx2(ui.input, {\n      className: \"ui-checkbox__input\",\n      ...getInputProps(inputProps, ref)\n    }), /* @__PURE__ */jsx2(ui.span, {\n      className: \"ui-checkbox__icon\",\n      __css: {\n        pointerEvents: isReadOnly ? \"none\" : void 0,\n        position: \"relative\",\n        display: \"inline-block\",\n        userSelect: \"none\",\n        ...styles.icon\n      },\n      ...getIconProps(resolvedIconProps),\n      children: cloneIcon\n    }), /* @__PURE__ */jsx2(ui.span, {\n      className: \"ui-checkbox__label\",\n      __css: {\n        ...styles.label\n      },\n      ...getLabelProps(labelProps),\n      children\n    })]\n  });\n});\nCheckbox.displayName = \"Checkbox\";\nvar CheckboxIcon = ({\n  isIndeterminate,\n  isChecked,\n  isRequired: _isRequired,\n  isReadOnly: _isReadOnly,\n  isDisabled: _isDisabled,\n  isInvalid: _isInvalid,\n  ...rest\n}) => {\n  return /* @__PURE__ */jsx2(AnimatePresence, {\n    initial: false,\n    children: isIndeterminate || isChecked ? /* @__PURE__ */jsx2(ui.div, {\n      __css: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\"\n      },\n      children: /* @__PURE__ */jsx2(ui.div, {\n        as: motion.div,\n        variants: {\n          unchecked: {\n            scale: 0.5\n          },\n          checked: {\n            scale: 1\n          }\n        },\n        initial: \"unchecked\",\n        animate: \"checked\",\n        exit: \"unchecked\",\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: isIndeterminate ? /* @__PURE__ */jsx2(IndeterminateIcon, {\n          ...rest\n        }) : /* @__PURE__ */jsx2(CheckIcon, {\n          ...rest\n        })\n      })\n    }) : null\n  });\n};\nvar CheckIcon = props => {\n  return /* @__PURE__ */jsx2(ui.svg, {\n    as: motion.svg,\n    width: \"1.2em\",\n    viewBox: \"0 0 12 10\",\n    variants: {\n      unchecked: {\n        opacity: 0,\n        strokeDashoffset: 16\n      },\n      checked: {\n        opacity: 1,\n        strokeDashoffset: 0,\n        transition: {\n          duration: 0.2\n        }\n      }\n    },\n    style: {\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16\n    },\n    ...props,\n    children: /* @__PURE__ */jsx2(\"polyline\", {\n      points: \"1.5 6 4.5 9 10.5 1\"\n    })\n  });\n};\nvar IndeterminateIcon = props => {\n  return /* @__PURE__ */jsx2(ui.svg, {\n    as: motion.svg,\n    width: \"1.2em\",\n    viewBox: \"0 0 24 24\",\n    variants: {\n      unchecked: {\n        scaleX: 0.65,\n        opacity: 0\n      },\n      checked: {\n        scaleX: 1,\n        opacity: 1,\n        transition: {\n          scaleX: {\n            duration: 0\n          },\n          opacity: {\n            duration: 0.02\n          }\n        }\n      }\n    },\n    style: {\n      stroke: \"currentColor\",\n      strokeWidth: 4\n    },\n    ...props,\n    children: /* @__PURE__ */jsx2(\"line\", {\n      x1: \"21\",\n      x2: \"3\",\n      y1: \"12\",\n      y2: \"12\"\n    })\n  });\n};\nexport { useCheckbox, Checkbox, CheckboxIcon, useCheckboxGroup, useCheckboxGroupContext, CheckboxGroup };","map":{"version":3,"names":["ui","useMultiComponentStyle","omitThemeProps","useFormControl","useFormControl2","useFormControlProps","formControlProperties","AnimatePresence","motion","trackFocusVisible","cx","cx2","useCallbackRef","useCallbackRef2","useSafeLayoutEffect","useUpdateEffect","handlerAll","dataAttr","mergeRefs","funcAll","splitObject","cloneElement","useCallback","useCallback2","useEffect","useRef","useState","forwardRef","forwardRef2","useId","Flex","useControllableState","createContext","isObject","getValidChildren","jsx","isEvent","value","target","useCheckboxGroup","valueProp","defaultValue","onChange","onChangeProp","isNative","props","onChangeRef","setValue","evOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","props2","ref","some","val","CheckboxGroupProvider","useCheckboxGroupContext","strict","name","CheckboxGroup","className","size","variant","colorScheme","children","items","direction","gap","computedProps","isRequired","isReadOnly","isDisabled","isInvalid","rest","validChildren","computedChildren","length","map","label","value2","i","Checkbox","role","displayName","jsx2","jsxs","useCheckbox","id","_id","isCheckedProp","defaultIsChecked","tabIndex","required","disabled","readOnly","isIndeterminate","onFocus","onFocusProp","onBlur","onBlurProp","_ariaReadonly","formControlProps","isFocusVisible","setIsFocusVisible","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","isLabel","setIsLabel","setIsChecked","isControlled","ev","preventDefault","onKeyDown","key","onKeyUp","current","indeterminate","Boolean","_a","form","onreset","getContainerProps","el","tagName","onClick","click","requestAnimationFrame","_a2","focus","getIconProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","type","style","border","clip","height","width","margin","padding","overflow","whiteSpace","position","getLabelProps","stopPropagation","onTouchStart","_b","_c","_d","group","groupValue","groupProps","control","styles","mergedProps","iconProps","inputProps","labelProps","customIcon","resolvedIconProps","cloneIcon","CheckboxIcon","__css","opacity","transform","transitionProperty","transitionDuration","cursor","display","alignItems","verticalAlign","container","input","span","pointerEvents","userSelect","icon","_isRequired","_isReadOnly","_isDisabled","_isInvalid","initial","div","top","left","as","variants","unchecked","scale","animate","exit","justifyContent","IndeterminateIcon","CheckIcon","svg","viewBox","strokeDashoffset","transition","duration","fill","strokeWidth","stroke","strokeDasharray","points","scaleX","x1","x2","y1","y2"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\checkbox\\src\\checkbox.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\checkbox\\src\\checkbox-group.tsx"],"sourcesContent":["import type {\n  HTMLUIProps,\n  ThemeProps,\n  ComponentArgs,\n  UIPropGetter,\n} from \"@yamada-ui/core\"\nimport { ui, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  useFormControl,\n  useFormControlProps,\n  formControlProperties,\n} from \"@yamada-ui/form-control\"\nimport type { SVGMotionProps } from \"@yamada-ui/motion\"\nimport { AnimatePresence, motion } from \"@yamada-ui/motion\"\nimport { trackFocusVisible } from \"@yamada-ui/use-focus-visible\"\nimport type { Dict, Merge, PropGetter } from \"@yamada-ui/utils\"\nimport {\n  cx,\n  useCallbackRef,\n  useSafeLayoutEffect,\n  useUpdateEffect,\n  handlerAll,\n  dataAttr,\n  mergeRefs,\n  funcAll,\n  splitObject,\n} from \"@yamada-ui/utils\"\nimport type {\n  ChangeEvent,\n  ChangeEventHandler,\n  CSSProperties,\n  FC,\n  FocusEventHandler,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  ReactElement,\n  SyntheticEvent,\n  ForwardedRef,\n  Ref,\n  DOMAttributes,\n} from \"react\"\nimport {\n  cloneElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  forwardRef,\n  useId,\n} from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\n\nexport type UseCheckboxProps<Y extends string | number = string> =\n  FormControlOptions & {\n    /**\n     * id assigned to input.\n     */\n    id?: string\n    /**\n     * The HTML `name` attribute used for forms.\n     */\n    name?: string\n    /**\n     * The value to be used in the checkbox input.\n     */\n    value?: Y\n    /**\n     * If `true`, the checkbox will be initially checked.\n     *\n     * @default false\n     */\n    defaultIsChecked?: boolean\n    /**\n     * If `true`, the checkbox will be checked.\n     *\n     * @default false\n     */\n    isChecked?: boolean\n    /**\n     * If `true`, the checkbox will be indeterminate.\n     *\n     * @default false\n     */\n    isIndeterminate?: boolean\n    /**\n     * The callback invoked when the checked state changes.\n     */\n    onChange?: ChangeEventHandler<HTMLInputElement>\n    /**\n     * The callback invoked when the checkbox is focused.\n     */\n    onFocus?: FocusEventHandler<HTMLInputElement>\n    /**\n     * The callback invoked when the checkbox is blurred.\n     */\n    onBlur?: FocusEventHandler<HTMLInputElement>\n    /**\n     * The tab-index property of the underlying input element.\n     */\n    tabIndex?: number\n  }\n\nexport const useCheckbox = <\n  Y extends string | number = string,\n  M extends Dict = Dict,\n>({\n  id,\n  ...props\n}: UseCheckboxProps<Y> & M) => {\n  id ??= useId()\n  const {\n    id: _id,\n    name,\n    value,\n    isChecked: isCheckedProp,\n    defaultIsChecked,\n    tabIndex,\n    required,\n    disabled,\n    readOnly,\n    isIndeterminate,\n    onChange: onChangeProp,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    ...computedProps\n  } = useFormControlProps({ id, ...props })\n  const [{ \"aria-readonly\": _ariaReadonly, ...formControlProps }, rest] =\n    splitObject(computedProps, formControlProperties)\n\n  const [isFocusVisible, setIsFocusVisible] = useState<boolean>(false)\n  const [isFocused, setFocused] = useState<boolean>(false)\n  const [isHovered, setHovered] = useState<boolean>(false)\n  const [isActive, setActive] = useState<boolean>(false)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [isLabel, setIsLabel] = useState<boolean>(true)\n\n  const [isChecked, setIsChecked] = useState<boolean>(!!defaultIsChecked)\n\n  const isControlled = isCheckedProp !== undefined\n  const checked = isControlled ? (isCheckedProp as boolean) : isChecked\n\n  const onChange = useCallbackRef(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (readOnly || disabled) {\n        ev.preventDefault()\n\n        return\n      }\n\n      if (!isControlled)\n        setIsChecked(!checked || isIndeterminate ? true : ev.target.checked)\n\n      onChangeProp?.(ev)\n    },\n    [readOnly, disabled, isControlled, checked, isIndeterminate],\n  )\n  const onFocus = useCallbackRef(onFocusProp)\n  const onBlur = useCallbackRef(onBlurProp)\n\n  const onKeyDown = useCallback(\n    ({ key }: KeyboardEvent<Element>) => {\n      if (key === \" \") setActive(true)\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    ({ key }: KeyboardEvent<Element>) => {\n      if (key === \" \") setActive(false)\n    },\n    [setActive],\n  )\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current)\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n  }, [isIndeterminate])\n\n  useUpdateEffect(() => {\n    if (disabled) setFocused(false)\n  }, [disabled, setFocused])\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current?.form) return\n\n    inputRef.current.form.onreset = () => setIsChecked(!!defaultIsChecked)\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n\n    if (inputRef.current.checked !== checked)\n      setIsChecked(inputRef.current.checked)\n  }, [inputRef.current])\n\n  const getContainerProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      ...props,\n      ref: mergeRefs(ref, (el: HTMLElement | undefined) => {\n        if (el) setIsLabel(el.tagName === \"LABEL\")\n      }),\n      \"data-checked\": dataAttr(checked),\n      onClick: handlerAll(props.onClick, () => {\n        if (isLabel) return\n\n        inputRef.current?.click()\n\n        requestAnimationFrame(() => inputRef.current?.focus())\n      }),\n    }),\n    [checked, isLabel, formControlProps],\n  )\n\n  const getIconProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(checked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"aria-hidden\": true,\n      onMouseDown: handlerAll(props.onMouseDown, (ev: React.MouseEvent) => {\n        if (isFocused) ev.preventDefault()\n\n        setActive(true)\n      }),\n      onMouseUp: handlerAll(props.onMouseUp, () => setActive(false)),\n      onMouseEnter: handlerAll(props.onMouseEnter, () => setHovered(true)),\n      onMouseLeave: handlerAll(props.onMouseLeave, () => setHovered(false)),\n    }),\n    [\n      isActive,\n      checked,\n      isFocused,\n      isHovered,\n      isFocusVisible,\n      isIndeterminate,\n      formControlProps,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      ...props,\n      ref: mergeRefs(inputRef, ref),\n      id,\n      type: \"checkbox\",\n      name,\n      value,\n      tabIndex,\n      required,\n      disabled,\n      readOnly,\n      checked,\n      style: {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      },\n      onChange: handlerAll(props.onChange, onChange),\n      onBlur: handlerAll(props.onBlur, onBlur, () => setFocused(false)),\n      onFocus: handlerAll(props.onFocus, onFocus, () => setFocused(true)),\n      onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n      onKeyUp: handlerAll(props.onKeyUp, onKeyUp),\n    }),\n    [\n      formControlProps,\n      id,\n      name,\n      value,\n      tabIndex,\n      required,\n      disabled,\n      readOnly,\n      checked,\n      onChange,\n      onBlur,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      ...props,\n      ref,\n      \"data-checked\": dataAttr(checked),\n      onMouseDown: handlerAll(props.onMouseDown, (ev: SyntheticEvent) => {\n        ev.preventDefault()\n        ev.stopPropagation()\n      }),\n      onTouchStart: handlerAll(props.onTouchStart, (ev: SyntheticEvent) => {\n        ev.preventDefault()\n        ev.stopPropagation()\n      }),\n    }),\n    [checked, formControlProps],\n  )\n\n  return {\n    props: rest,\n    isFocusVisible,\n    isFocused,\n    isHovered,\n    isActive,\n    isChecked: checked,\n    isIndeterminate,\n    getContainerProps,\n    getIconProps,\n    getInputProps,\n    getLabelProps,\n  }\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n\ntype CheckboxOptions = {\n  /**\n   * Props for icon component.\n   */\n  iconProps?: Omit<HTMLUIProps<\"span\">, \"children\"> & { children: ReactElement }\n  /**\n   * Props for input element.\n   */\n  inputProps?: InputHTMLAttributes<HTMLInputElement>\n  /**\n   * Props for label element.\n   */\n  labelProps?: HTMLUIProps<\"span\">\n}\n\nexport type CheckboxProps<Y extends string | number = string> = Omit<\n  Merge<HTMLUIProps<\"label\">, UseCheckboxProps<Y>>,\n  \"checked\"\n> &\n  ThemeProps<\"Checkbox\"> &\n  CheckboxOptions\n\n/**\n * `Checkbox` is a component used for allowing users to select multiple values from multiple options.\n *\n * @see Docs https://yamada-ui.com/components/forms/checkbox\n */\nexport const Checkbox = forwardRef(\n  <Y extends string | number = string>(\n    props: CheckboxProps<Y>,\n    ref: ForwardedRef<HTMLInputElement>,\n  ) => {\n    const group = useCheckboxGroupContext()\n    const { value: groupValue, ...groupProps } = { ...group }\n    const control = useFormControl(props)\n    const [styles, mergedProps] = useMultiComponentStyle(\"Checkbox\", {\n      ...groupProps,\n      ...props,\n    })\n    const {\n      className,\n      gap = \"0.5rem\",\n      isRequired = groupProps.isRequired ?? control.isRequired,\n      isReadOnly = groupProps.isReadOnly ?? control.isReadOnly,\n      isDisabled = groupProps.isDisabled ?? control.isDisabled,\n      isInvalid = groupProps.isInvalid ?? control.isInvalid,\n      iconProps,\n      inputProps,\n      labelProps,\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const isCheckedProp =\n      groupValue && computedProps.value\n        ? groupValue.includes(computedProps.value)\n        : computedProps.isChecked\n    const onChange =\n      groupProps.onChange && computedProps.value\n        ? funcAll(groupProps.onChange, computedProps.onChange)\n        : computedProps.onChange\n\n    const {\n      isChecked,\n      isIndeterminate,\n      getContainerProps,\n      getInputProps,\n      getIconProps,\n      getLabelProps,\n      props: rest,\n    } = useCheckbox({\n      ...computedProps,\n      isRequired,\n      isReadOnly,\n      isDisabled,\n      isInvalid,\n      isChecked: isCheckedProp,\n      onChange,\n    })\n\n    const { children: customIcon, ...resolvedIconProps } = { ...iconProps }\n    const cloneIcon = cloneElement(customIcon ?? <CheckboxIcon />, {\n      __css: {\n        opacity: isChecked || isIndeterminate ? 1 : 0,\n        transform: isChecked || isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n        transitionProperty: \"transform\",\n        transitionDuration: \"normal\",\n      },\n      isIndeterminate,\n      isChecked,\n      isRequired,\n      isReadOnly,\n      isDisabled,\n      isInvalid,\n    })\n\n    return (\n      <ui.label\n        className={cx(\"ui-checkbox\", className)}\n        {...getContainerProps()}\n        __css={{\n          cursor: \"pointer\",\n          position: \"relative\",\n          display: \"inline-flex\",\n          alignItems: \"center\",\n          verticalAlign: \"top\",\n          gap,\n          ...styles.container,\n        }}\n        {...rest}\n      >\n        <ui.input\n          className=\"ui-checkbox__input\"\n          {...getInputProps(inputProps, ref)}\n        />\n\n        <ui.span\n          className=\"ui-checkbox__icon\"\n          __css={{\n            pointerEvents: isReadOnly ? \"none\" : undefined,\n            position: \"relative\",\n            display: \"inline-block\",\n            userSelect: \"none\",\n            ...styles.icon,\n          }}\n          {...getIconProps(resolvedIconProps)}\n        >\n          {cloneIcon}\n        </ui.span>\n\n        <ui.span\n          className=\"ui-checkbox__label\"\n          __css={{ ...styles.label }}\n          {...getLabelProps(labelProps as DOMAttributes<HTMLElement>)}\n        >\n          {children}\n        </ui.span>\n      </ui.label>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: CheckboxProps<Y> & { ref?: Ref<HTMLInputElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nCheckbox.displayName = \"Checkbox\"\n\nexport type CheckboxIconProps = HTMLUIProps<\"svg\"> &\n  SVGMotionProps<SVGSVGElement> &\n  FormControlOptions & {\n    /**\n     * If `true`, the icon will be indeterminate.\n     *\n     * @default false\n     */\n    isIndeterminate?: boolean\n    /**\n     * If `true`, the icon will be checked.\n     *\n     * @default false\n     */\n    isChecked?: boolean\n  }\n\nexport const CheckboxIcon: FC<CheckboxIconProps> = ({\n  isIndeterminate,\n  isChecked,\n  isRequired: _isRequired,\n  isReadOnly: _isReadOnly,\n  isDisabled: _isDisabled,\n  isInvalid: _isInvalid,\n  ...rest\n}) => {\n  return (\n    <AnimatePresence initial={false}>\n      {isIndeterminate || isChecked ? (\n        <ui.div\n          __css={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n          }}\n        >\n          <ui.div\n            as={motion.div}\n            variants={{\n              unchecked: { scale: 0.5 },\n              checked: { scale: 1 },\n            }}\n            initial=\"unchecked\"\n            animate=\"checked\"\n            exit=\"unchecked\"\n            style={\n              {\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              } as CSSProperties\n            }\n          >\n            {isIndeterminate ? (\n              <IndeterminateIcon {...rest} />\n            ) : (\n              <CheckIcon {...rest} />\n            )}\n          </ui.div>\n        </ui.div>\n      ) : null}\n    </AnimatePresence>\n  )\n}\n\nconst CheckIcon: FC<HTMLUIProps<\"svg\"> & SVGMotionProps<SVGSVGElement>> = (\n  props,\n) => {\n  return (\n    <ui.svg\n      as={motion.svg}\n      width=\"1.2em\"\n      viewBox=\"0 0 12 10\"\n      variants={{\n        unchecked: {\n          opacity: 0,\n          strokeDashoffset: 16,\n        },\n        checked: {\n          opacity: 1,\n          strokeDashoffset: 0,\n          transition: { duration: 0.2 },\n        },\n      }}\n      style={{\n        fill: \"none\",\n        strokeWidth: 2,\n        stroke: \"currentColor\",\n        strokeDasharray: 16,\n      }}\n      {...props}\n    >\n      <polyline points=\"1.5 6 4.5 9 10.5 1\" />\n    </ui.svg>\n  )\n}\n\nconst IndeterminateIcon: FC<\n  HTMLUIProps<\"svg\"> & SVGMotionProps<SVGSVGElement>\n> = (props) => {\n  return (\n    <ui.svg\n      as={motion.svg}\n      width=\"1.2em\"\n      viewBox=\"0 0 24 24\"\n      variants={{\n        unchecked: {\n          scaleX: 0.65,\n          opacity: 0,\n        },\n        checked: {\n          scaleX: 1,\n          opacity: 1,\n          transition: {\n            scaleX: { duration: 0 },\n            opacity: { duration: 0.02 },\n          },\n        },\n      }}\n      style={{ stroke: \"currentColor\", strokeWidth: 4 }}\n      {...props}\n    >\n      <line x1=\"21\" x2=\"3\" y1=\"12\" y2=\"12\" />\n    </ui.svg>\n  )\n}\n","import type { ComponentArgs, ThemeProps, UIPropGetter } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport { useFormControl } from \"@yamada-ui/form-control\"\nimport type { FlexProps } from \"@yamada-ui/layouts\"\nimport { Flex } from \"@yamada-ui/layouts\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport {\n  createContext,\n  cx,\n  isObject,\n  useCallbackRef,\n  getValidChildren,\n} from \"@yamada-ui/utils\"\nimport type { ChangeEvent, ForwardedRef, ReactElement, Ref } from \"react\"\nimport { forwardRef, useCallback } from \"react\"\nimport type { CheckboxProps } from \"./checkbox\"\nimport { Checkbox } from \"./checkbox\"\n\nexport type CheckboxItem<Y extends string | number = string> =\n  CheckboxProps<Y> & {\n    label?: string\n  }\n\nconst isEvent = (value: any): value is { target: HTMLInputElement } =>\n  value && isObject(value) && isObject(value.target)\n\nexport type UseCheckboxGroupProps<Y extends string | number = string> = {\n  /**\n   * The value of the checkbox group.\n   */\n  value?: Y[]\n  /**\n   * The initial value of the checkbox group.\n   */\n  defaultValue?: Y[]\n  /**\n   * The callback fired when any children checkbox is checked or unchecked.\n   */\n  onChange?: (value: Y[]) => void\n  /**\n   * If `true`, input elements will receive `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs.\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\nexport const useCheckboxGroup = <\n  Y extends string | number = string,\n  M extends Dict = Dict,\n>({\n  value: valueProp,\n  defaultValue = [],\n  onChange: onChangeProp,\n  isNative,\n  ...props\n}: UseCheckboxGroupProps<Y> & M) => {\n  const onChangeRef = useCallbackRef(onChangeProp)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeRef,\n  })\n\n  const onChange = useCallback(\n    (evOrValue: ChangeEvent<HTMLInputElement> | Y) => {\n      const isChecked = isEvent(evOrValue)\n        ? evOrValue.target.checked\n        : !value.includes(evOrValue)\n\n      const selectedValue = (\n        isEvent(evOrValue) ? evOrValue.target.value : evOrValue\n      ) as Y\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [value, setValue],\n  )\n\n  const getCheckboxProps: UIPropGetter<\n    \"input\",\n    { value?: Y },\n    { value?: Y; isChecked?: boolean }\n  > = useCallback(\n    (props, ref = null) => ({\n      ...props,\n      ref,\n      [isNative ? \"checked\" : \"isChecked\"]: value.some(\n        (val) => String(props?.value) === String(val),\n      ),\n      onChange,\n    }),\n    [onChange, isNative, value],\n  )\n\n  return { props, value, setValue, onChange, getCheckboxProps }\n}\n\nexport type UseCheckboxGroupReturn<Y extends string | number = string> =\n  ReturnType<typeof useCheckboxGroup<Y>>\n\nexport type CheckboxGroupProps<Y extends string | number = string> =\n  ThemeProps<\"Checkbox\"> &\n    Omit<FlexProps, \"onChange\"> &\n    UseCheckboxGroupProps<Y> &\n    FormControlOptions & {\n      /**\n       * If provided, generate checkboxes based on items.\n       *\n       * @default '[]'\n       */\n      items?: CheckboxItem<Y>[]\n    }\n\ntype CheckboxContext = ThemeProps<\"Checkbox\"> &\n  FormControlOptions & {\n    value: (string | number)[]\n    onChange: (\n      evOrValue: ChangeEvent<HTMLInputElement> | string | number,\n    ) => void\n  }\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] = createContext<\n  CheckboxContext | undefined\n>({\n  strict: false,\n  name: \"CheckboxGroupContext\",\n})\n\nexport { useCheckboxGroupContext }\n\nexport const CheckboxGroup = forwardRef(\n  <Y extends string | number = string>(\n    {\n      className,\n      size,\n      variant,\n      colorScheme,\n      children,\n      items = [],\n      direction = \"column\",\n      gap,\n      ...props\n    }: CheckboxGroupProps<Y>,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const { value, onChange, props: computedProps } = useCheckboxGroup<Y>(props)\n    const { isRequired, isReadOnly, isDisabled, isInvalid, ...rest } =\n      useFormControl(computedProps)\n\n    const validChildren = getValidChildren(children)\n    let computedChildren: ReactElement[] = []\n\n    if (!validChildren.length && items.length) {\n      computedChildren = items.map(({ label, value, ...props }, i) => (\n        <Checkbox key={i} value={value} {...props}>\n          {label}\n        </Checkbox>\n      ))\n    }\n\n    return (\n      <CheckboxGroupProvider\n        value={\n          {\n            size,\n            variant,\n            colorScheme,\n            isRequired,\n            isReadOnly,\n            isDisabled,\n            isInvalid,\n            value,\n            onChange,\n          } as CheckboxContext\n        }\n      >\n        <Flex\n          ref={ref}\n          className={cx(\"ui-checkbox-group\", className)}\n          role=\"group\"\n          direction={direction}\n          gap={gap ?? (direction === \"row\" ? \"1rem\" : undefined)}\n          {...rest}\n        >\n          {children ?? computedChildren}\n        </Flex>\n      </CheckboxGroupProvider>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: CheckboxGroupProps<Y> & { ref?: Ref<HTMLDivElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nCheckboxGroup.displayName = \"CheckboxGroup\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}