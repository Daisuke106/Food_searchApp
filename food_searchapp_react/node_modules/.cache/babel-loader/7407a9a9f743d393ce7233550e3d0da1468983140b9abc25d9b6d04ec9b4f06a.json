{"ast":null,"code":"// src/number.ts\nvar toNumber = n => {\n  const num = parseFloat(n);\n  return typeof num !== \"number\" || Number.isNaN(num) ? 0 : num;\n};\nvar toPrecision = (n, precision) => {\n  n = toNumber(n);\n  const scale = 10 ** (precision != null ? precision : 10);\n  n = Math.round(n * scale) / scale;\n  return precision ? n.toFixed(precision) : n.toString();\n};\nvar countDecimal = n => {\n  if (!Number.isFinite(n)) return 0;\n  let e = 1;\n  let p = 0;\n  while (Math.round(n * e) / e !== n) {\n    e *= 10;\n    p += 1;\n  }\n  return p;\n};\nvar roundNumberToStep = (n, from, step) => {\n  const nextValue = Math.round((n - from) / step) * step + from;\n  const precision = countDecimal(step);\n  return toPrecision(nextValue, precision);\n};\nvar valueToPercent = (n, min, max) => (n - min) * 100 / (max - min);\nvar percentToValue = (n, min, max) => (max - min) * n + min;\nvar clampNumber = (n, min, max) => Math.min(Math.max(n, min), max);\nexport { toNumber, toPrecision, countDecimal, roundNumberToStep, valueToPercent, percentToValue, clampNumber };","map":{"version":3,"names":["toNumber","n","num","parseFloat","Number","isNaN","toPrecision","precision","scale","Math","round","toFixed","toString","countDecimal","isFinite","e","p","roundNumberToStep","from","step","nextValue","valueToPercent","min","max","percentToValue","clampNumber"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\utils\\src\\number.ts"],"sourcesContent":["export const toNumber = (n: any): number => {\n  const num = parseFloat(n)\n\n  return typeof num !== \"number\" || Number.isNaN(num) ? 0 : num\n}\n\nexport const toPrecision = (n: number, precision?: number): string => {\n  n = toNumber(n)\n\n  const scale = 10 ** (precision ?? 10)\n\n  n = Math.round(n * scale) / scale\n\n  return precision ? n.toFixed(precision) : n.toString()\n}\n\nexport const countDecimal = (n: number): number => {\n  if (!Number.isFinite(n)) return 0\n\n  let e = 1\n  let p = 0\n\n  while (Math.round(n * e) / e !== n) {\n    e *= 10\n    p += 1\n  }\n\n  return p\n}\n\nexport const roundNumberToStep = (n: number, from: number, step: number) => {\n  const nextValue = Math.round((n - from) / step) * step + from\n\n  const precision = countDecimal(step)\n\n  return toPrecision(nextValue, precision)\n}\n\nexport const valueToPercent = (n: number, min: number, max: number): number =>\n  ((n - min) * 100) / (max - min)\n\nexport const percentToValue = (n: number, min: number, max: number) =>\n  (max - min) * n + min\n\nexport const clampNumber = (n: number, min: number, max: number): number =>\n  Math.min(Math.max(n, min), max)\n"],"mappings":";AAAO,IAAMA,QAAA,GAAYC,CAAA,IAAmB;EAC1C,MAAMC,GAAA,GAAMC,UAAA,CAAWF,CAAC;EAExB,OAAO,OAAOC,GAAA,KAAQ,YAAYE,MAAA,CAAOC,KAAA,CAAMH,GAAG,IAAI,IAAIA,GAAA;AAC5D;AAEO,IAAMI,WAAA,GAAcA,CAACL,CAAA,EAAWM,SAAA,KAA+B;EACpEN,CAAA,GAAID,QAAA,CAASC,CAAC;EAEd,MAAMO,KAAA,GAAQ,OAAOD,SAAA,WAAAA,SAAA,GAAa;EAElCN,CAAA,GAAIQ,IAAA,CAAKC,KAAA,CAAMT,CAAA,GAAIO,KAAK,IAAIA,KAAA;EAE5B,OAAOD,SAAA,GAAYN,CAAA,CAAEU,OAAA,CAAQJ,SAAS,IAAIN,CAAA,CAAEW,QAAA,CAAS;AACvD;AAEO,IAAMC,YAAA,GAAgBZ,CAAA,IAAsB;EACjD,IAAI,CAACG,MAAA,CAAOU,QAAA,CAASb,CAAC,GAAG,OAAO;EAEhC,IAAIc,CAAA,GAAI;EACR,IAAIC,CAAA,GAAI;EAER,OAAOP,IAAA,CAAKC,KAAA,CAAMT,CAAA,GAAIc,CAAC,IAAIA,CAAA,KAAMd,CAAA,EAAG;IAClCc,CAAA,IAAK;IACLC,CAAA,IAAK;EACP;EAEA,OAAOA,CAAA;AACT;AAEO,IAAMC,iBAAA,GAAoBA,CAAChB,CAAA,EAAWiB,IAAA,EAAcC,IAAA,KAAiB;EAC1E,MAAMC,SAAA,GAAYX,IAAA,CAAKC,KAAA,EAAOT,CAAA,GAAIiB,IAAA,IAAQC,IAAI,IAAIA,IAAA,GAAOD,IAAA;EAEzD,MAAMX,SAAA,GAAYM,YAAA,CAAaM,IAAI;EAEnC,OAAOb,WAAA,CAAYc,SAAA,EAAWb,SAAS;AACzC;AAEO,IAAMc,cAAA,GAAiBA,CAACpB,CAAA,EAAWqB,GAAA,EAAaC,GAAA,MACnDtB,CAAA,GAAIqB,GAAA,IAAO,OAAQC,GAAA,GAAMD,GAAA;AAEtB,IAAME,cAAA,GAAiBA,CAACvB,CAAA,EAAWqB,GAAA,EAAaC,GAAA,MACpDA,GAAA,GAAMD,GAAA,IAAOrB,CAAA,GAAIqB,GAAA;AAEb,IAAMG,WAAA,GAAcA,CAACxB,CAAA,EAAWqB,GAAA,EAAaC,GAAA,KAClDd,IAAA,CAAKa,GAAA,CAAIb,IAAA,CAAKc,GAAA,CAAItB,CAAA,EAAGqB,GAAG,GAAGC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}