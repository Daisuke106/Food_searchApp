{"ast":null,"code":"\"use client\";\n\n// src/stack.tsx\nimport { ui, forwardRef } from \"@yamada-ui/core\";\nimport { getValidChildren, cx, replaceObject, mergeRefs } from \"@yamada-ui/utils\";\nimport { cloneElement, createRef, Fragment, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef(({\n  direction: flexDirection = \"column\",\n  justify: justifyContent,\n  align: alignItems,\n  wrap: flexWrap,\n  gap = \"fallback(md, 1rem)\",\n  divider,\n  className,\n  children,\n  ...rest\n}, ref) => {\n  const isColumn = value => value === \"column\" || value === \"column-reverse\";\n  const dividerCSS = useMemo(() => ({\n    w: replaceObject(flexDirection, value => isColumn(value) ? \"100%\" : \"fix-content\"),\n    h: replaceObject(flexDirection, value => isColumn(value) ? \"fix-content\" : \"100%\"),\n    borderLeftWidth: replaceObject(flexDirection, value => isColumn(value) ? 0 : \"1px\"),\n    borderBottomWidth: replaceObject(flexDirection, value => isColumn(value) ? \"1px\" : 0)\n  }), [flexDirection]);\n  const validChildren = getValidChildren(children);\n  const cloneChildren = divider ? validChildren.map((child, index) => {\n    const key = typeof child.key !== \"undefined\" ? child.key : index;\n    const cloneDivider = cloneElement(divider, {\n      __css: dividerCSS\n    });\n    return /* @__PURE__ */jsxs(Fragment, {\n      children: [!!index ? cloneDivider : null, child]\n    }, key);\n  }) : validChildren;\n  const css = useMemo(() => ({\n    display: \"flex\",\n    flexDirection,\n    justifyContent,\n    alignItems,\n    flexWrap,\n    gap\n  }), [alignItems, flexDirection, flexWrap, gap, justifyContent]);\n  return /* @__PURE__ */jsx(ui.div, {\n    ref,\n    className: cx(\"ui-stack\", className),\n    __css: css,\n    ...rest,\n    children: cloneChildren\n  });\n});\nvar HStack = forwardRef(({\n  className,\n  ...rest\n}, ref) => /* @__PURE__ */jsx(Stack, {\n  ref,\n  className: cx(\"ui-stack--horizontal\", className),\n  direction: \"row\",\n  align: \"center\",\n  ...rest\n}));\nvar VStack = forwardRef(({\n  className,\n  ...rest\n}, ref) => /* @__PURE__ */jsx(Stack, {\n  ref,\n  className: cx(\"ui-stack--vertical\", className),\n  direction: \"column\",\n  align: \"stretch\",\n  w: \"100%\",\n  ...rest\n}));\nvar ZStack = forwardRef(({\n  className,\n  direction = \"bottom\",\n  startIndex = 0,\n  gap = \"fallback(md, 1rem)\",\n  reverse = false,\n  fit = true,\n  children,\n  ...rest\n}, ref) => {\n  const refMap = useRef( /* @__PURE__ */new Map());\n  const [rect, setRect] = useState({\n    width: 0,\n    height: 0\n  });\n  const boxSize = {\n    minWidth: `${rect.width}px`,\n    minHeight: `${rect.height}px`\n  };\n  const css = {\n    position: \"relative\",\n    overflow: \"hidden\",\n    var: [{\n      __prefix: \"ui\",\n      name: \"space\",\n      token: \"spaces\",\n      value: gap\n    }],\n    ...(fit ? boxSize : {})\n  };\n  const vertical = useCallback(space => {\n    if (direction.includes(\"top\")) {\n      return {\n        [!reverse ? \"bottom\" : \"top\"]: space\n      };\n    } else if (direction.includes(\"bottom\")) {\n      return {\n        [!reverse ? \"top\" : \"bottom\"]: space\n      };\n    } else {\n      return {\n        [!reverse ? \"top\" : \"bottom\"]: 0\n      };\n    }\n  }, [direction, reverse]);\n  const horizontal = useCallback(space => {\n    if (direction.includes(\"left\")) {\n      return {\n        [!reverse ? \"right\" : \"left\"]: space\n      };\n    } else if (direction.includes(\"right\")) {\n      return {\n        [!reverse ? \"left\" : \"right\"]: space\n      };\n    } else {\n      return {\n        [!reverse ? \"left\" : \"right\"]: 0\n      };\n    }\n  }, [direction, reverse]);\n  const cloneChildren = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    const clonedChildren = validChildren.map((child, index) => {\n      var _a;\n      const ref2 = createRef();\n      refMap.current.set(index, ref2);\n      const key = (_a = child.key) != null ? _a : index;\n      const zIndex = startIndex + index;\n      const space = `calc(var(--ui-space) * ${index})`;\n      let css2 = {};\n      css2 = {\n        ...css2,\n        position: \"absolute\",\n        zIndex\n      };\n      css2 = {\n        ...css2,\n        ...vertical(space)\n      };\n      css2 = {\n        ...css2,\n        ...horizontal(space)\n      };\n      const props = {\n        ...child.props,\n        ref: mergeRefs(child.ref, ref2),\n        __css: css2\n      };\n      const clonedChild = cloneElement(child, props);\n      return /* @__PURE__ */jsx(Fragment, {\n        children: clonedChild\n      }, key);\n    });\n    return clonedChildren;\n  }, [children, startIndex, vertical, horizontal]);\n  useEffect(() => {\n    if (!fit) return;\n    let isNegativeLeft = direction.includes(\"left\");\n    let isNegativeTop = direction.includes(\"top\");\n    let width = 0;\n    let height = 0;\n    if (reverse) {\n      isNegativeLeft = !isNegativeLeft;\n      isNegativeTop = !isNegativeTop;\n    }\n    for (const ref2 of refMap.current.values()) {\n      if (!ref2.current) continue;\n      let {\n        offsetParent,\n        offsetWidth,\n        offsetHeight,\n        offsetTop,\n        offsetLeft\n      } = ref2.current;\n      if (!offsetParent) continue;\n      if (isNegativeLeft) {\n        offsetLeft = offsetParent.offsetWidth - offsetLeft - offsetWidth;\n      }\n      if (isNegativeTop) {\n        offsetTop = offsetParent.offsetHeight - offsetTop - offsetHeight;\n      }\n      offsetWidth += offsetLeft;\n      offsetHeight += offsetTop;\n      if (offsetWidth > width) width = offsetWidth;\n      if (offsetHeight > height) height = offsetHeight;\n    }\n    setRect({\n      width,\n      height\n    });\n  }, [cloneChildren, direction, reverse, fit]);\n  return /* @__PURE__ */jsx(ui.div, {\n    ref,\n    className: cx(\"ui-stack--depth\", className),\n    __css: css,\n    ...rest,\n    children: cloneChildren\n  });\n});\nexport { Stack, HStack, VStack, ZStack };","map":{"version":3,"names":["ui","forwardRef","getValidChildren","cx","replaceObject","mergeRefs","cloneElement","createRef","Fragment","useCallback","useEffect","useMemo","useRef","useState","jsx","jsxs","Stack","direction","flexDirection","justify","justifyContent","align","alignItems","wrap","flexWrap","gap","divider","className","children","rest","ref","isColumn","value","dividerCSS","w","h","borderLeftWidth","borderBottomWidth","validChildren","cloneChildren","map","child","index","key","cloneDivider","__css","css","display","div","HStack","VStack","ZStack","startIndex","reverse","fit","refMap","Map","rect","setRect","width","height","boxSize","minWidth","minHeight","position","overflow","var","__prefix","name","token","vertical","space","includes","horizontal","clonedChildren","_a","ref2","current","set","zIndex","css2","props","clonedChild","isNegativeLeft","isNegativeTop","values","offsetParent","offsetWidth","offsetHeight","offsetTop","offsetLeft"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\layouts\\src\\stack.tsx"],"sourcesContent":["import type { HTMLUIProps, CSSUIObject } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport {\n  getValidChildren,\n  cx,\n  replaceObject,\n  mergeRefs,\n} from \"@yamada-ui/utils\"\nimport type { ReactElement, RefObject } from \"react\"\nimport {\n  cloneElement,\n  createRef,\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\n\ntype StackOptions = {\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIObject[\"flexDirection\"]\n  /**\n   * The CSS `justify-content` property.\n   */\n  justify?: CSSUIObject[\"justifyContent\"]\n  /**\n   * The CSS `align-items` property.\n   */\n  align?: CSSUIObject[\"alignItems\"]\n  /**\n   * The CSS `flex-wrap` property.\n   */\n  wrap?: CSSUIObject[\"flexWrap\"]\n  /**\n   * If `true`, each stack item will show a divider.\n   */\n  divider?: ReactElement\n}\n\nexport type StackProps = Omit<HTMLUIProps<\"div\">, \"direction\"> & StackOptions\n\n/**\n * `Stack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const Stack = forwardRef<StackProps, \"div\">(\n  (\n    {\n      direction: flexDirection = \"column\",\n      justify: justifyContent,\n      align: alignItems,\n      wrap: flexWrap,\n      gap = \"fallback(md, 1rem)\",\n      divider,\n      className,\n      children,\n      ...rest\n    },\n    ref,\n  ) => {\n    const isColumn = (value: any) =>\n      value === \"column\" || value === \"column-reverse\"\n\n    const dividerCSS = useMemo(\n      () => ({\n        w: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? \"100%\" : \"fix-content\",\n        ),\n        h: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? \"fix-content\" : \"100%\",\n        ),\n        borderLeftWidth: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? 0 : \"1px\",\n        ),\n        borderBottomWidth: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? \"1px\" : 0,\n        ),\n      }),\n      [flexDirection],\n    )\n\n    const validChildren = getValidChildren(children)\n\n    const cloneChildren = divider\n      ? validChildren.map((child, index) => {\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n\n          const cloneDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerCSS,\n            },\n          )\n\n          return (\n            <Fragment key={key}>\n              {!!index ? cloneDivider : null}\n              {child}\n            </Fragment>\n          )\n        })\n      : validChildren\n\n    const css: CSSUIObject = useMemo(\n      () => ({\n        display: \"flex\",\n        flexDirection,\n        justifyContent,\n        alignItems,\n        flexWrap,\n        gap,\n      }),\n      [alignItems, flexDirection, flexWrap, gap, justifyContent],\n    )\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-stack\", className)}\n        __css={css}\n        {...rest}\n      >\n        {cloneChildren}\n      </ui.div>\n    )\n  },\n)\n\n/**\n * `HStack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const HStack = forwardRef<StackProps, \"div\">(\n  ({ className, ...rest }, ref) => (\n    <Stack\n      ref={ref}\n      className={cx(\"ui-stack--horizontal\", className)}\n      direction=\"row\"\n      align=\"center\"\n      {...rest}\n    />\n  ),\n)\n\n/**\n * `VStack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">(\n  ({ className, ...rest }, ref) => (\n    <Stack\n      ref={ref}\n      className={cx(\"ui-stack--vertical\", className)}\n      direction=\"column\"\n      align=\"stretch\"\n      w=\"100%\"\n      {...rest}\n    />\n  ),\n)\n\ntype ZStackOptions = {\n  /**\n   * If set the stack will start from the given index.\n   *\n   * @default 0\n   */\n  startIndex?: number\n  /**\n   * Stack in the specified direction.\n   *\n   * @default \"bottom\"\n   */\n  direction?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"top-left\"\n    | \"top-right\"\n    | \"bottom-left\"\n    | \"bottom-right\"\n  /**\n   * If `true`, reverse direction.\n   *\n   * @default false\n   */\n  reverse?: boolean\n  /**\n   * If `true`, calculate the `width` and `height` of the element and assign container.\n   *\n   * @default true\n   */\n  fit?: boolean\n}\n\nexport type ZStackProps = Omit<HTMLUIProps<\"div\">, \"direction\"> & ZStackOptions\n\n/**\n * `ZStack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const ZStack = forwardRef<ZStackProps, \"div\">(\n  (\n    {\n      className,\n      direction = \"bottom\",\n      startIndex = 0,\n      gap = \"fallback(md, 1rem)\",\n      reverse = false,\n      fit = true,\n      children,\n      ...rest\n    },\n    ref,\n  ) => {\n    const refMap = useRef<Map<number, RefObject<HTMLDivElement>>>(new Map())\n    const [rect, setRect] = useState<{ width: number; height: number }>({\n      width: 0,\n      height: 0,\n    })\n\n    const boxSize: CSSUIObject = {\n      minWidth: `${rect.width}px`,\n      minHeight: `${rect.height}px`,\n    }\n\n    const css: CSSUIObject = {\n      position: \"relative\",\n      overflow: \"hidden\",\n      var: [{ __prefix: \"ui\", name: \"space\", token: \"spaces\", value: gap }],\n      ...(fit ? boxSize : {}),\n    }\n\n    const vertical = useCallback(\n      (space: string) => {\n        if (direction.includes(\"top\")) {\n          return { [!reverse ? \"bottom\" : \"top\"]: space }\n        } else if (direction.includes(\"bottom\")) {\n          return { [!reverse ? \"top\" : \"bottom\"]: space }\n        } else {\n          return { [!reverse ? \"top\" : \"bottom\"]: 0 }\n        }\n      },\n      [direction, reverse],\n    )\n\n    const horizontal = useCallback(\n      (space: string) => {\n        if (direction.includes(\"left\")) {\n          return { [!reverse ? \"right\" : \"left\"]: space }\n        } else if (direction.includes(\"right\")) {\n          return { [!reverse ? \"left\" : \"right\"]: space }\n        } else {\n          return { [!reverse ? \"left\" : \"right\"]: 0 }\n        }\n      },\n      [direction, reverse],\n    )\n\n    const cloneChildren = useMemo(() => {\n      const validChildren = getValidChildren(children) as (ReactElement & {\n        ref: RefObject<any>\n      })[]\n\n      const clonedChildren = validChildren.map((child, index) => {\n        const ref = createRef<HTMLDivElement>()\n\n        refMap.current.set(index, ref)\n\n        const key = child.key ?? index\n\n        const zIndex = startIndex + index\n        const space = `calc(var(--ui-space) * ${index})`\n\n        let css: CSSUIObject = {}\n\n        css = {\n          ...css,\n          position: \"absolute\",\n          zIndex,\n        }\n\n        css = { ...css, ...vertical(space) }\n        css = { ...css, ...horizontal(space) }\n\n        const props = {\n          ...child.props,\n          ref: mergeRefs(child.ref, ref),\n          __css: css,\n        }\n\n        const clonedChild = cloneElement(child, props)\n\n        return <Fragment key={key}>{clonedChild}</Fragment>\n      })\n\n      return clonedChildren\n    }, [children, startIndex, vertical, horizontal])\n\n    useEffect(() => {\n      if (!fit) return\n\n      let isNegativeLeft = direction.includes(\"left\")\n      let isNegativeTop = direction.includes(\"top\")\n      let width = 0\n      let height = 0\n\n      if (reverse) {\n        isNegativeLeft = !isNegativeLeft\n        isNegativeTop = !isNegativeTop\n      }\n\n      for (const ref of refMap.current.values()) {\n        if (!ref.current) continue\n\n        let { offsetParent, offsetWidth, offsetHeight, offsetTop, offsetLeft } =\n          ref.current\n\n        if (!offsetParent) continue\n\n        if (isNegativeLeft) {\n          offsetLeft =\n            (offsetParent as HTMLDivElement).offsetWidth -\n            offsetLeft -\n            offsetWidth\n        }\n\n        if (isNegativeTop) {\n          offsetTop =\n            (offsetParent as HTMLDivElement).offsetHeight -\n            offsetTop -\n            offsetHeight\n        }\n\n        offsetWidth += offsetLeft\n        offsetHeight += offsetTop\n\n        if (offsetWidth > width) width = offsetWidth\n        if (offsetHeight > height) height = offsetHeight\n      }\n\n      setRect({ width, height })\n    }, [cloneChildren, direction, reverse, fit])\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-stack--depth\", className)}\n        __css={css}\n        {...rest}\n      >\n        {cloneChildren}\n      </ui.div>\n    )\n  },\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}