{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { cast, createContext, isElement, mergeRefs, useSafeLayoutEffect } from \"@yamada-ui/utils\";\nimport { useRef, useState } from \"react\";\nvar sortNodes = nodes => nodes.sort((a, b) => {\n  const compare = a.compareDocumentPosition(b);\n  if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) return -1;\n  if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) return 1;\n  if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {\n    throw Error(\"Cannot sort the given nodes.\");\n  } else {\n    return 0;\n  }\n});\nvar getNextIndex = (current, max, loop) => {\n  let next = current + 1;\n  if (loop && next >= max) next = 0;\n  return next;\n};\nvar getPrevIndex = (current, max, loop) => {\n  let next = current - 1;\n  if (loop && next < 0) next = max;\n  return next;\n};\nvar descendantsManager = () => {\n  const descendants = /* @__PURE__ */new Map();\n  const assignIndex = newDescendants => {\n    descendants.forEach(descendant => {\n      const index = newDescendants.indexOf(descendant.node);\n      descendant.index = index;\n      descendant.node.dataset.index = descendant.index.toString();\n    });\n  };\n  const setDescendants = (node, options) => {\n    if (!node || descendants.has(node)) return;\n    const keys = Array.from(descendants.keys()).concat(node);\n    const sorted = sortNodes(keys);\n    if (options == null ? void 0 : options.disabled) options.disabled = !!options.disabled;\n    const descendant = {\n      node,\n      index: -1,\n      ...options\n    };\n    descendants.set(node, descendant);\n    assignIndex(sorted);\n  };\n  const register = nodeOrOptions => {\n    if (nodeOrOptions == null) return;\n    if (isElement(nodeOrOptions)) return setDescendants(nodeOrOptions);\n    return node => setDescendants(node, nodeOrOptions);\n  };\n  const unregister = node => {\n    descendants.delete(node);\n    const sorted = sortNodes(Array.from(descendants.keys()));\n    assignIndex(sorted);\n  };\n  const destroy = () => descendants.clear();\n  const count = filter => values(filter).length;\n  const enabledCount = filter => enabledValues(filter).length;\n  const indexOf = node => {\n    var _a, _b;\n    return !node ? -1 : (_b = (_a = descendants.get(node)) == null ? void 0 : _a.index) != null ? _b : -1;\n  };\n  const enabledIndexOf = (node, filter) => node == null ? -1 : enabledValues(filter).findIndex(i => i.node.isSameNode(node));\n  const values = filter => {\n    const values2 = Array.from(descendants.values());\n    if (filter) {\n      return values2.filter(filter).sort((a, b) => a.index - b.index);\n    } else {\n      return values2.sort((a, b) => a.index - b.index);\n    }\n  };\n  const enabledValues = filter => values(filter).filter(({\n    disabled\n  }) => !disabled);\n  const value = (index, filter) => {\n    if (count(filter) === 0) return void 0;\n    return values(filter)[index];\n  };\n  const enabledValue = (index, filter) => {\n    if (enabledCount(filter) === 0) return void 0;\n    return enabledValues(filter)[index];\n  };\n  const firstValue = filter => value(0, filter);\n  const enabledFirstValue = filter => enabledValue(0, filter);\n  const lastValue = filter => value(descendants.size - 1, filter);\n  const enabledLastValue = filter => enabledValue(enabledValues(filter).length - 1, filter);\n  const prevValue = (index, filter, loop = true) => {\n    const prev = getPrevIndex(index, count(filter) - 1, loop);\n    return value(prev, filter);\n  };\n  const enabledPrevValue = (index, filter, loop = true) => {\n    const target = value(index);\n    if (!target) return;\n    const enabledIndex = enabledIndexOf(target.node, filter);\n    const prevEnabledIndex = getPrevIndex(enabledIndex, enabledCount(filter) - 1, loop);\n    return enabledValue(prevEnabledIndex, filter);\n  };\n  const nextValue = (index, filter, loop = true) => {\n    const next = getNextIndex(index, count(filter), loop);\n    return value(next, filter);\n  };\n  const enabledNextValue = (index, filter, loop = true) => {\n    const target = value(index);\n    if (!target) return;\n    const enabledIndex = enabledIndexOf(target.node, filter);\n    const nextEnabledIndex = getNextIndex(enabledIndex, enabledCount(filter), loop);\n    return enabledValue(nextEnabledIndex, filter);\n  };\n  return {\n    register,\n    unregister,\n    destroy,\n    count,\n    values,\n    value,\n    indexOf,\n    firstValue,\n    lastValue,\n    prevValue,\n    nextValue,\n    enabledCount,\n    enabledValues,\n    enabledValue,\n    enabledIndexOf,\n    enabledFirstValue,\n    enabledLastValue,\n    enabledPrevValue,\n    enabledNextValue\n  };\n};\nvar useDescendants = () => {\n  const descendants = useRef(descendantsManager());\n  useSafeLayoutEffect(() => {\n    return () => descendants.current.destroy();\n  });\n  return descendants.current;\n};\nvar [DescendantsContextProvider, useDescendantsContext] = createContext({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsContextProvider\"\n});\nvar useDescendant = options => {\n  const descendants = useDescendantsContext();\n  const [index, setIndex] = useState(-1);\n  const ref = useRef(null);\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return;\n      descendants.unregister(ref.current);\n    };\n  }, []);\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    const dataIndex = Number(ref.current.dataset.index);\n    if (index != dataIndex && !Number.isNaN(dataIndex)) setIndex(dataIndex);\n  });\n  const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current, options == null ? void 0 : options.filter),\n    register: mergeRefs(refCallback, ref)\n  };\n};\nvar createDescendant = () => ({\n  DescendantsContextProvider: cast(DescendantsContextProvider),\n  useDescendantsContext: () => cast(useDescendantsContext()),\n  useDescendants: () => useDescendants(),\n  useDescendant: options => useDescendant(options)\n});\nexport { createDescendant };","map":{"version":3,"names":["cast","createContext","isElement","mergeRefs","useSafeLayoutEffect","useRef","useState","sortNodes","nodes","sort","a","b","compare","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_PRECEDING","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","Error","getNextIndex","current","max","loop","next","getPrevIndex","descendantsManager","descendants","Map","assignIndex","newDescendants","forEach","descendant","index","indexOf","node","dataset","toString","setDescendants","options","has","keys","Array","from","concat","sorted","disabled","set","register","nodeOrOptions","unregister","delete","destroy","clear","count","filter","values","length","enabledCount","enabledValues","_a","_b","get","enabledIndexOf","findIndex","i","isSameNode","values2","value","enabledValue","firstValue","enabledFirstValue","lastValue","size","enabledLastValue","prevValue","prev","enabledPrevValue","target","enabledIndex","prevEnabledIndex","nextValue","enabledNextValue","nextEnabledIndex","useDescendants","DescendantsContextProvider","useDescendantsContext","name","errorMessage","useDescendant","setIndex","ref","dataIndex","Number","isNaN","refCallback","createDescendant"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-descendant\\src\\index.ts"],"sourcesContent":["import {\n  cast,\n  createContext,\n  isElement,\n  mergeRefs,\n  useSafeLayoutEffect,\n} from \"@yamada-ui/utils\"\nimport type { Provider, RefCallback } from \"react\"\nimport { useRef, useState } from \"react\"\n\nconst sortNodes = (nodes: Node[]) =>\n  nodes.sort((a, b) => {\n    const compare = a.compareDocumentPosition(b)\n\n    if (\n      compare & Node.DOCUMENT_POSITION_FOLLOWING ||\n      compare & Node.DOCUMENT_POSITION_CONTAINED_BY\n    )\n      return -1\n\n    if (\n      compare & Node.DOCUMENT_POSITION_PRECEDING ||\n      compare & Node.DOCUMENT_POSITION_CONTAINS\n    )\n      return 1\n\n    if (\n      compare & Node.DOCUMENT_POSITION_DISCONNECTED ||\n      compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\n    ) {\n      throw Error(\"Cannot sort the given nodes.\")\n    } else {\n      return 0\n    }\n  })\n\nconst getNextIndex = (current: number, max: number, loop: boolean) => {\n  let next = current + 1\n\n  if (loop && next >= max) next = 0\n\n  return next\n}\n\nconst getPrevIndex = (current: number, max: number, loop: boolean) => {\n  let next = current - 1\n\n  if (loop && next < 0) next = max\n\n  return next\n}\n\nexport type DescendantOptions<\n  T extends HTMLElement = HTMLElement,\n  K = {},\n> = K & {\n  disabled?: boolean\n  id?: string\n  filter?: FilterDescendant<T, K>\n}\n\nexport type Descendant<\n  T extends HTMLElement = HTMLElement,\n  K = {},\n> = DescendantOptions<T, K> & {\n  node: T\n  index: number\n}\n\nexport type FilterDescendant<T extends HTMLElement = HTMLElement, K = {}> = (\n  value: Descendant<T, K>,\n  index: number,\n  array: Descendant<T, K>[],\n) => boolean\n\nconst descendantsManager = <T extends HTMLElement = HTMLElement, K = {}>() => {\n  const descendants = new Map<T, Descendant<T, K>>()\n\n  const assignIndex = (newDescendants: Node[]) => {\n    descendants.forEach((descendant) => {\n      const index = newDescendants.indexOf(descendant.node)\n\n      descendant.index = index\n      descendant.node.dataset.index = descendant.index.toString()\n    })\n  }\n\n  const setDescendants = (\n    node: T | null,\n    options?: DescendantOptions<T, K>,\n  ) => {\n    if (!node || descendants.has(node)) return\n\n    const keys = Array.from(descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) options.disabled = !!options.disabled\n\n    const descendant = { node, index: -1, ...options }\n\n    descendants.set(node, descendant as Descendant<T, K>)\n\n    assignIndex(sorted)\n  }\n\n  const register = (nodeOrOptions: T | null | DescendantOptions<T, K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) return setDescendants(nodeOrOptions)\n\n    return (node: T | null) => setDescendants(node, nodeOrOptions)\n  }\n\n  const unregister = (node: T) => {\n    descendants.delete(node)\n\n    const sorted = sortNodes(Array.from(descendants.keys()))\n\n    assignIndex(sorted)\n  }\n\n  const destroy = () => descendants.clear()\n\n  const count = (filter?: FilterDescendant<T, K>) => values(filter).length\n\n  const enabledCount = (filter?: FilterDescendant<T, K>) =>\n    enabledValues(filter).length\n\n  const indexOf = (node: T | null) =>\n    !node ? -1 : descendants.get(node)?.index ?? -1\n\n  const enabledIndexOf = (node: T | null, filter?: FilterDescendant<T, K>) =>\n    node == null\n      ? -1\n      : enabledValues(filter).findIndex((i) => i.node.isSameNode(node))\n\n  const values = (filter?: FilterDescendant<T, K>) => {\n    const values = Array.from(descendants.values())\n\n    if (filter) {\n      return values.filter(filter).sort((a, b) => a.index - b.index)\n    } else {\n      return values.sort((a, b) => a.index - b.index)\n    }\n  }\n\n  const enabledValues = (filter?: FilterDescendant<T, K>) =>\n    values(filter).filter(({ disabled }) => !disabled)\n\n  const value = (index: number, filter?: FilterDescendant<T, K>) => {\n    if (count(filter) === 0) return undefined\n\n    return values(filter)[index]\n  }\n\n  const enabledValue = (index: number, filter?: FilterDescendant<T, K>) => {\n    if (enabledCount(filter) === 0) return undefined\n\n    return enabledValues(filter)[index]\n  }\n\n  const firstValue = (filter?: FilterDescendant<T, K>) => value(0, filter)\n\n  const enabledFirstValue = (filter?: FilterDescendant<T, K>) =>\n    enabledValue(0, filter)\n\n  const lastValue = (filter?: FilterDescendant<T, K>) =>\n    value(descendants.size - 1, filter)\n\n  const enabledLastValue = (filter?: FilterDescendant<T, K>) =>\n    enabledValue(enabledValues(filter).length - 1, filter)\n\n  const prevValue = (\n    index: number,\n    filter?: FilterDescendant<T, K>,\n    loop = true,\n  ) => {\n    const prev = getPrevIndex(index, count(filter) - 1, loop)\n\n    return value(prev, filter)\n  }\n\n  const enabledPrevValue = (\n    index: number,\n    filter?: FilterDescendant<T, K>,\n    loop = true,\n  ) => {\n    const target = value(index)\n\n    if (!target) return\n\n    const enabledIndex = enabledIndexOf(target.node, filter)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      enabledCount(filter) - 1,\n      loop,\n    )\n\n    return enabledValue(prevEnabledIndex, filter)\n  }\n\n  const nextValue = (\n    index: number,\n    filter?: FilterDescendant<T, K>,\n    loop = true,\n  ) => {\n    const next = getNextIndex(index, count(filter), loop)\n\n    return value(next, filter)\n  }\n\n  const enabledNextValue = (\n    index: number,\n    filter?: FilterDescendant<T, K>,\n    loop = true,\n  ) => {\n    const target = value(index)\n\n    if (!target) return\n\n    const enabledIndex = enabledIndexOf(target.node, filter)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      enabledCount(filter),\n      loop,\n    )\n\n    return enabledValue(nextEnabledIndex, filter)\n  }\n\n  return {\n    register,\n    unregister,\n    destroy,\n    count,\n    values,\n    value,\n    indexOf,\n    firstValue,\n    lastValue,\n    prevValue,\n    nextValue,\n    enabledCount,\n    enabledValues,\n    enabledValue,\n    enabledIndexOf,\n    enabledFirstValue,\n    enabledLastValue,\n    enabledPrevValue,\n    enabledNextValue,\n  }\n}\n\nexport type DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {},\n> = ReturnType<typeof descendantsManager<T, K>>\n\nconst useDescendants = <\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() => {\n  const descendants = useRef(descendantsManager<T, K>())\n\n  useSafeLayoutEffect(() => {\n    return () => descendants.current.destroy()\n  })\n\n  return descendants.current\n}\n\ntype UseDescendantsReturn = ReturnType<typeof useDescendants>\n\nconst [DescendantsContextProvider, useDescendantsContext] =\n  createContext<UseDescendantsReturn>({\n    name: \"DescendantsProvider\",\n    errorMessage:\n      \"useDescendantsContext must be used within DescendantsContextProvider\",\n  })\n\nconst useDescendant = <\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>(\n  options?: DescendantOptions<T, K>,\n) => {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState<number>(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n\n    const dataIndex = Number(ref.current.dataset.index)\n\n    if (index != dataIndex && !Number.isNaN(dataIndex)) setIndex(dataIndex)\n  })\n\n  const refCallback = options\n    ? cast<RefCallback<T>>(descendants.register(options))\n    : cast<RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(\n      ref.current,\n      options?.filter as any,\n    ),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\nexport const createDescendant = <\n  T extends HTMLElement = HTMLElement,\n  K extends Record<string, any> = {},\n>() =>\n  ({\n    DescendantsContextProvider: cast<Provider<DescendantsManager<T, K>>>(\n      DescendantsContextProvider,\n    ),\n    useDescendantsContext: () =>\n      cast<DescendantsManager<T, K>>(useDescendantsContext()),\n    useDescendants: () => useDescendants<T, K>(),\n    useDescendant: (options?: DescendantOptions<T, K>) =>\n      useDescendant<T, K>(options),\n  }) as const\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}