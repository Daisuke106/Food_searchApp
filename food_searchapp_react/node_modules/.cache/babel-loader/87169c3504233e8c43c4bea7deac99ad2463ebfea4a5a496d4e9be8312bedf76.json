{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { useCallback, useState } from \"react\";\nvar useBoolean = (init = false) => {\n  const [flg, setFlg] = useState(init);\n  const on = useCallback(() => setFlg(true), []);\n  const off = useCallback(() => setFlg(false), []);\n  const toggle = useCallback(() => setFlg(prev => !prev), []);\n  return [flg, {\n    on,\n    off,\n    toggle\n  }];\n};\nexport { useBoolean };","map":{"version":3,"names":["useCallback","useState","useBoolean","init","flg","setFlg","on","off","toggle","prev"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-boolean\\src\\index.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\n\n/**\n * `useBoolean` is a custom hook used to manage boolean values using `on`, `off`, and `toggle` functions.\n *\n * @see Docs https://yamada-ui.com/hooks/use-boolean\n */\nexport const useBoolean = (init: boolean = false): UseBooleanReturn => {\n  const [flg, setFlg] = useState<boolean>(init)\n\n  const on = useCallback(() => setFlg(true), [])\n\n  const off = useCallback(() => setFlg(false), [])\n\n  const toggle = useCallback(() => setFlg((prev) => !prev), [])\n\n  return [flg, { on, off, toggle }]\n}\n\nexport type UseBooleanReturn = [\n  flg: boolean,\n  setFlg: { on: () => void; off: () => void; toggle: () => void },\n]\n"],"mappings":";;;AAAA,SAASA,WAAA,EAAaC,QAAA,QAAgB;AAO/B,IAAMC,UAAA,GAAaA,CAACC,IAAA,GAAgB,UAA4B;EACrE,MAAM,CAACC,GAAA,EAAKC,MAAM,IAAIJ,QAAA,CAAkBE,IAAI;EAE5C,MAAMG,EAAA,GAAKN,WAAA,CAAY,MAAMK,MAAA,CAAO,IAAI,GAAG,EAAE;EAE7C,MAAME,GAAA,GAAMP,WAAA,CAAY,MAAMK,MAAA,CAAO,KAAK,GAAG,EAAE;EAE/C,MAAMG,MAAA,GAASR,WAAA,CAAY,MAAMK,MAAA,CAAQI,IAAA,IAAS,CAACA,IAAI,GAAG,EAAE;EAE5D,OAAO,CAACL,GAAA,EAAK;IAAEE,EAAA;IAAIC,GAAA;IAAKC;EAAO,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}