{"ast":null,"code":"// src/components/dropzone.ts\nimport { mode } from \"@yamada-ui/core\";\nimport { getColor, isArray, transparentizeColor } from \"@yamada-ui/utils\";\nvar Dropzone = {\n  baseStyle: _ref => {\n    let {\n      theme: t,\n      colorMode: m\n    } = _ref;\n    return {\n      container: {\n        color: [\"blackAlpha.700\", \"whiteAlpha.600\"],\n        rounded: \"md\",\n        w: \"100%\",\n        bg: [\"blackAlpha.50\", \"whiteAlpha.50\"],\n        outline: 0,\n        overflow: \"hidden\",\n        transitionProperty: \"common\",\n        transitionDuration: \"normal\",\n        _disabled: {\n          opacity: 0.4,\n          cursor: \"not-allowed\"\n        },\n        _hover: {\n          cursor: \"pointer\",\n          bg: [\"blackAlpha.100\", \"whiteAlpha.100\"]\n        },\n        _loading: {\n          cursor: \"not-allowed\",\n          bg: [\"blackAlpha.100\", \"whiteAlpha.100\"]\n        },\n        _accept: {\n          bg: [\"success.50\", transparentizeColor(\"success.400\", 0.12)(t, m)],\n          borderColor: [\"success.500\", \"success.400\"]\n        },\n        _reject: {\n          bg: [\"danger.50\", transparentizeColor(\"danger.400\", 0.12)(t, m)],\n          borderColor: [\"danger.500\", \"danger.400\"]\n        }\n      },\n      overlay: {\n        bg: [\"whiteAlpha.600\", \"blackAlpha.600\"],\n        zIndex: \"kurillin\"\n      }\n    };\n  },\n  variants: {\n    solid: _ref2 => {\n      let {\n        theme: t,\n        colorMode: m,\n        focusBorderColor: fc = \"focus\",\n        errorBorderColor: ec = [\"danger.500\", \"danger.400\"]\n      } = _ref2;\n      const focusBorderColor = isArray(fc) ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m) : getColor(fc, fc)(t, m);\n      const errorBorderColor = isArray(ec) ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m) : getColor(ec, ec)(t, m);\n      return {\n        container: {\n          borderWidth: \"1px\",\n          borderStyle: \"solid\",\n          _invalid: {\n            borderColor: errorBorderColor,\n            boxShadow: \"0 0 0 1px \".concat(errorBorderColor)\n          },\n          _focus: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: \"0 0 0 1px \".concat(focusBorderColor)\n          },\n          _focusVisible: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: \"0 0 0 1px \".concat(focusBorderColor)\n          }\n        }\n      };\n    },\n    dashed: _ref3 => {\n      let {\n        theme: t,\n        colorMode: m,\n        focusBorderColor: fc = \"focus\",\n        errorBorderColor: ec = [\"danger.500\", \"danger.400\"]\n      } = _ref3;\n      const focusBorderColor = isArray(fc) ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m) : getColor(fc, fc)(t, m);\n      const errorBorderColor = isArray(ec) ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m) : getColor(ec, ec)(t, m);\n      return {\n        container: {\n          borderWidth: \"1px\",\n          borderStyle: \"dashed\",\n          _invalid: {\n            borderColor: errorBorderColor,\n            boxShadow: \"0 0 0 1px \".concat(errorBorderColor)\n          },\n          _focus: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: \"0 0 0 1px \".concat(focusBorderColor)\n          },\n          _focusVisible: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: \"0 0 0 1px \".concat(focusBorderColor)\n          }\n        }\n      };\n    },\n    unstyled: {\n      container: {\n        color: \"inherit\",\n        rounded: \"inherit\",\n        bg: \"transparent\",\n        h: \"auto\",\n        _hover: {\n          cursor: \"inherit\",\n          bg: \"transparent\"\n        },\n        _loading: {\n          cursor: \"auto\",\n          bg: \"transparent\"\n        },\n        _accept: {\n          bg: \"transparent\",\n          borderColor: \"inherit\"\n        },\n        _reject: {\n          bg: \"transparent\",\n          borderColor: \"inherit\"\n        }\n      },\n      overlay: {\n        bg: \"transparent\"\n      }\n    }\n  },\n  sizes: {\n    xs: {\n      container: {\n        h: \"xs\"\n      }\n    },\n    sm: {\n      container: {\n        h: \"sm\"\n      }\n    },\n    md: {\n      container: {\n        h: \"md\"\n      }\n    },\n    lg: {\n      container: {\n        h: \"lg\"\n      }\n    },\n    full: {\n      container: {\n        h: \"full\"\n      }\n    }\n  },\n  defaultProps: {\n    size: \"sm\",\n    variant: \"dashed\"\n  }\n};\nexport { Dropzone };","map":{"version":3,"names":["mode","getColor","isArray","transparentizeColor","Dropzone","baseStyle","_ref","theme","t","colorMode","m","container","color","rounded","w","bg","outline","overflow","transitionProperty","transitionDuration","_disabled","opacity","cursor","_hover","_loading","_accept","borderColor","_reject","overlay","zIndex","variants","solid","_ref2","focusBorderColor","fc","errorBorderColor","ec","borderWidth","borderStyle","_invalid","boxShadow","concat","_focus","_focusVisible","dashed","_ref3","unstyled","h","sizes","xs","sm","md","lg","full","defaultProps","size","variant"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\theme\\src\\components\\dropzone.ts"],"sourcesContent":["import type { ComponentMultiStyle } from \"@yamada-ui/core\"\nimport { mode } from \"@yamada-ui/core\"\nimport { getColor, isArray, transparentizeColor } from \"@yamada-ui/utils\"\n\nexport const Dropzone: ComponentMultiStyle = {\n  baseStyle: ({ theme: t, colorMode: m }) => ({\n    container: {\n      color: [\"blackAlpha.700\", \"whiteAlpha.600\"],\n      rounded: \"md\",\n      w: \"100%\",\n      bg: [\"blackAlpha.50\", \"whiteAlpha.50\"],\n      outline: 0,\n      overflow: \"hidden\",\n      transitionProperty: \"common\",\n      transitionDuration: \"normal\",\n      _disabled: {\n        opacity: 0.4,\n        cursor: \"not-allowed\",\n      },\n      _hover: {\n        cursor: \"pointer\",\n        bg: [\"blackAlpha.100\", \"whiteAlpha.100\"],\n      },\n      _loading: {\n        cursor: \"not-allowed\",\n        bg: [\"blackAlpha.100\", \"whiteAlpha.100\"],\n      },\n      _accept: {\n        bg: [\"success.50\", transparentizeColor(\"success.400\", 0.12)(t, m)],\n        borderColor: [\"success.500\", \"success.400\"],\n      },\n      _reject: {\n        bg: [\"danger.50\", transparentizeColor(\"danger.400\", 0.12)(t, m)],\n        borderColor: [\"danger.500\", \"danger.400\"],\n      },\n    },\n\n    overlay: {\n      bg: [\"whiteAlpha.600\", \"blackAlpha.600\"],\n      zIndex: \"kurillin\",\n    },\n  }),\n\n  variants: {\n    solid: ({\n      theme: t,\n      colorMode: m,\n      focusBorderColor: fc = \"focus\",\n      errorBorderColor: ec = [\"danger.500\", \"danger.400\"],\n    }) => {\n      const focusBorderColor = isArray(fc)\n        ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m)\n        : getColor(fc, fc)(t, m)\n      const errorBorderColor = isArray(ec)\n        ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m)\n        : getColor(ec, ec)(t, m)\n\n      return {\n        container: {\n          borderWidth: \"1px\",\n          borderStyle: \"solid\",\n          _invalid: {\n            borderColor: errorBorderColor,\n            boxShadow: `0 0 0 1px ${errorBorderColor}`,\n          },\n          _focus: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n          _focusVisible: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n        },\n      }\n    },\n    dashed: ({\n      theme: t,\n      colorMode: m,\n      focusBorderColor: fc = \"focus\",\n      errorBorderColor: ec = [\"danger.500\", \"danger.400\"],\n    }) => {\n      const focusBorderColor = isArray(fc)\n        ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m)\n        : getColor(fc, fc)(t, m)\n      const errorBorderColor = isArray(ec)\n        ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m)\n        : getColor(ec, ec)(t, m)\n\n      return {\n        container: {\n          borderWidth: \"1px\",\n          borderStyle: \"dashed\",\n          _invalid: {\n            borderColor: errorBorderColor,\n            boxShadow: `0 0 0 1px ${errorBorderColor}`,\n          },\n          _focus: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n          _focusVisible: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n        },\n      }\n    },\n    unstyled: {\n      container: {\n        color: \"inherit\",\n        rounded: \"inherit\",\n        bg: \"transparent\",\n        h: \"auto\",\n        _hover: {\n          cursor: \"inherit\",\n          bg: \"transparent\",\n        },\n        _loading: {\n          cursor: \"auto\",\n          bg: \"transparent\",\n        },\n        _accept: {\n          bg: \"transparent\",\n          borderColor: \"inherit\",\n        },\n        _reject: {\n          bg: \"transparent\",\n          borderColor: \"inherit\",\n        },\n      },\n      overlay: {\n        bg: \"transparent\",\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      container: { h: \"xs\" },\n    },\n    sm: {\n      container: { h: \"sm\" },\n    },\n    md: {\n      container: { h: \"md\" },\n    },\n    lg: {\n      container: { h: \"lg\" },\n    },\n    full: {\n      container: { h: \"full\" },\n    },\n  },\n\n  defaultProps: {\n    size: \"sm\",\n    variant: \"dashed\",\n  },\n}\n"],"mappings":";AACA,SAASA,IAAA,QAAY;AACrB,SAASC,QAAA,EAAUC,OAAA,EAASC,mBAAA,QAA2B;AAEhD,IAAMC,QAAA,GAAgC;EAC3CC,SAAA,EAAWC,IAAA;IAAA,IAAC;MAAEC,KAAA,EAAOC,CAAA;MAAGC,SAAA,EAAWC;IAAE,IAAAJ,IAAA;IAAA,OAAO;MAC1CK,SAAA,EAAW;QACTC,KAAA,EAAO,CAAC,kBAAkB,gBAAgB;QAC1CC,OAAA,EAAS;QACTC,CAAA,EAAG;QACHC,EAAA,EAAI,CAAC,iBAAiB,eAAe;QACrCC,OAAA,EAAS;QACTC,QAAA,EAAU;QACVC,kBAAA,EAAoB;QACpBC,kBAAA,EAAoB;QACpBC,SAAA,EAAW;UACTC,OAAA,EAAS;UACTC,MAAA,EAAQ;QACV;QACAC,MAAA,EAAQ;UACND,MAAA,EAAQ;UACRP,EAAA,EAAI,CAAC,kBAAkB,gBAAgB;QACzC;QACAS,QAAA,EAAU;UACRF,MAAA,EAAQ;UACRP,EAAA,EAAI,CAAC,kBAAkB,gBAAgB;QACzC;QACAU,OAAA,EAAS;UACPV,EAAA,EAAI,CAAC,cAAcZ,mBAAA,CAAoB,eAAe,IAAI,EAAEK,CAAA,EAAGE,CAAC,CAAC;UACjEgB,WAAA,EAAa,CAAC,eAAe,aAAa;QAC5C;QACAC,OAAA,EAAS;UACPZ,EAAA,EAAI,CAAC,aAAaZ,mBAAA,CAAoB,cAAc,IAAI,EAAEK,CAAA,EAAGE,CAAC,CAAC;UAC/DgB,WAAA,EAAa,CAAC,cAAc,YAAY;QAC1C;MACF;MAEAE,OAAA,EAAS;QACPb,EAAA,EAAI,CAAC,kBAAkB,gBAAgB;QACvCc,MAAA,EAAQ;MACV;IACF;EAAA;EAEAC,QAAA,EAAU;IACRC,KAAA,EAAOC,KAAA,IAKD;MAAA,IALE;QACNzB,KAAA,EAAOC,CAAA;QACPC,SAAA,EAAWC,CAAA;QACXuB,gBAAA,EAAkBC,EAAA,GAAK;QACvBC,gBAAA,EAAkBC,EAAA,GAAK,CAAC,cAAc,YAAY;MACpD,IAAAJ,KAAA;MACE,MAAMC,gBAAA,GAAmB/B,OAAA,CAAQgC,EAAE,IAC/BlC,IAAA,CAAKC,QAAA,CAASiC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE1B,CAAA,EAAGE,CAAC,GAAGT,QAAA,CAASiC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE1B,CAAA,EAAGE,CAAC,CAAC,EAAEA,CAAC,IAClET,QAAA,CAASiC,EAAA,EAAIA,EAAE,EAAE1B,CAAA,EAAGE,CAAC;MACzB,MAAMyB,gBAAA,GAAmBjC,OAAA,CAAQkC,EAAE,IAC/BpC,IAAA,CAAKC,QAAA,CAASmC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE5B,CAAA,EAAGE,CAAC,GAAGT,QAAA,CAASmC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE5B,CAAA,EAAGE,CAAC,CAAC,EAAEA,CAAC,IAClET,QAAA,CAASmC,EAAA,EAAIA,EAAE,EAAE5B,CAAA,EAAGE,CAAC;MAEzB,OAAO;QACLC,SAAA,EAAW;UACT0B,WAAA,EAAa;UACbC,WAAA,EAAa;UACbC,QAAA,EAAU;YACRb,WAAA,EAAaS,gBAAA;YACbK,SAAA,eAAAC,MAAA,CAAwBN,gBAAgB;UAC1C;UACAO,MAAA,EAAQ;YACNb,MAAA,EAAQ;YACRH,WAAA,EAAaO,gBAAA;YACbO,SAAA,eAAAC,MAAA,CAAwBR,gBAAgB;UAC1C;UACAU,aAAA,EAAe;YACbd,MAAA,EAAQ;YACRH,WAAA,EAAaO,gBAAA;YACbO,SAAA,eAAAC,MAAA,CAAwBR,gBAAgB;UAC1C;QACF;MACF;IACF;IACAW,MAAA,EAAQC,KAAA,IAKF;MAAA,IALG;QACPtC,KAAA,EAAOC,CAAA;QACPC,SAAA,EAAWC,CAAA;QACXuB,gBAAA,EAAkBC,EAAA,GAAK;QACvBC,gBAAA,EAAkBC,EAAA,GAAK,CAAC,cAAc,YAAY;MACpD,IAAAS,KAAA;MACE,MAAMZ,gBAAA,GAAmB/B,OAAA,CAAQgC,EAAE,IAC/BlC,IAAA,CAAKC,QAAA,CAASiC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE1B,CAAA,EAAGE,CAAC,GAAGT,QAAA,CAASiC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE1B,CAAA,EAAGE,CAAC,CAAC,EAAEA,CAAC,IAClET,QAAA,CAASiC,EAAA,EAAIA,EAAE,EAAE1B,CAAA,EAAGE,CAAC;MACzB,MAAMyB,gBAAA,GAAmBjC,OAAA,CAAQkC,EAAE,IAC/BpC,IAAA,CAAKC,QAAA,CAASmC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE5B,CAAA,EAAGE,CAAC,GAAGT,QAAA,CAASmC,EAAA,CAAG,CAAC,GAAGA,EAAA,CAAG,CAAC,CAAC,EAAE5B,CAAA,EAAGE,CAAC,CAAC,EAAEA,CAAC,IAClET,QAAA,CAASmC,EAAA,EAAIA,EAAE,EAAE5B,CAAA,EAAGE,CAAC;MAEzB,OAAO;QACLC,SAAA,EAAW;UACT0B,WAAA,EAAa;UACbC,WAAA,EAAa;UACbC,QAAA,EAAU;YACRb,WAAA,EAAaS,gBAAA;YACbK,SAAA,eAAAC,MAAA,CAAwBN,gBAAgB;UAC1C;UACAO,MAAA,EAAQ;YACNb,MAAA,EAAQ;YACRH,WAAA,EAAaO,gBAAA;YACbO,SAAA,eAAAC,MAAA,CAAwBR,gBAAgB;UAC1C;UACAU,aAAA,EAAe;YACbd,MAAA,EAAQ;YACRH,WAAA,EAAaO,gBAAA;YACbO,SAAA,eAAAC,MAAA,CAAwBR,gBAAgB;UAC1C;QACF;MACF;IACF;IACAa,QAAA,EAAU;MACRnC,SAAA,EAAW;QACTC,KAAA,EAAO;QACPC,OAAA,EAAS;QACTE,EAAA,EAAI;QACJgC,CAAA,EAAG;QACHxB,MAAA,EAAQ;UACND,MAAA,EAAQ;UACRP,EAAA,EAAI;QACN;QACAS,QAAA,EAAU;UACRF,MAAA,EAAQ;UACRP,EAAA,EAAI;QACN;QACAU,OAAA,EAAS;UACPV,EAAA,EAAI;UACJW,WAAA,EAAa;QACf;QACAC,OAAA,EAAS;UACPZ,EAAA,EAAI;UACJW,WAAA,EAAa;QACf;MACF;MACAE,OAAA,EAAS;QACPb,EAAA,EAAI;MACN;IACF;EACF;EAEAiC,KAAA,EAAO;IACLC,EAAA,EAAI;MACFtC,SAAA,EAAW;QAAEoC,CAAA,EAAG;MAAK;IACvB;IACAG,EAAA,EAAI;MACFvC,SAAA,EAAW;QAAEoC,CAAA,EAAG;MAAK;IACvB;IACAI,EAAA,EAAI;MACFxC,SAAA,EAAW;QAAEoC,CAAA,EAAG;MAAK;IACvB;IACAK,EAAA,EAAI;MACFzC,SAAA,EAAW;QAAEoC,CAAA,EAAG;MAAK;IACvB;IACAM,IAAA,EAAM;MACJ1C,SAAA,EAAW;QAAEoC,CAAA,EAAG;MAAO;IACzB;EACF;EAEAO,YAAA,EAAc;IACZC,IAAA,EAAM;IACNC,OAAA,EAAS;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}