{"ast":null,"code":"\"use client\";\n\n// src/focus-lock.tsx\nimport { getAllFocusable, interopDefault } from \"@yamada-ui/utils\";\nimport { useCallback } from \"react\";\nimport ReactFocusLock from \"react-focus-lock\";\nimport { jsx } from \"react/jsx-runtime\";\nvar InternalFocusLock = interopDefault(ReactFocusLock);\nvar FocusLock = ({\n  initialFocusRef,\n  finalFocusRef,\n  contentRef,\n  restoreFocus,\n  children,\n  isDisabled,\n  autoFocus,\n  persistentFocus,\n  lockFocusAcrossFrames\n}) => {\n  const onActivation = useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      const focusables = getAllFocusable(contentRef.current);\n      if (focusables.length === 0) requestAnimationFrame(() => {\n        var _a;\n        (_a = contentRef.current) == null ? void 0 : _a.focus();\n      });\n    }\n  }, [initialFocusRef, contentRef]);\n  const onDeactivation = useCallback(() => {\n    var _a;\n    (_a = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a.focus();\n  }, [finalFocusRef]);\n  const returnFocus = restoreFocus && !finalFocusRef;\n  return /* @__PURE__ */jsx(InternalFocusLock, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus,\n    autoFocus,\n    disabled: isDisabled,\n    onActivation,\n    onDeactivation,\n    returnFocus,\n    children\n  });\n};\nexport { FocusLock };","map":{"version":3,"names":["getAllFocusable","interopDefault","useCallback","ReactFocusLock","jsx","InternalFocusLock","FocusLock","initialFocusRef","finalFocusRef","contentRef","restoreFocus","children","isDisabled","autoFocus","persistentFocus","lockFocusAcrossFrames","onActivation","current","focus","focusables","length","requestAnimationFrame","_a","onDeactivation","returnFocus","crossFrame","disabled"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\focus-lock\\src\\focus-lock.tsx"],"sourcesContent":["import type { FocusableElement } from \"@yamada-ui/utils\"\nimport { getAllFocusable, interopDefault } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode, RefObject } from \"react\"\nimport { useCallback } from \"react\"\nimport ReactFocusLock from \"react-focus-lock\"\n\nconst InternalFocusLock = interopDefault(ReactFocusLock)\n\nexport type FocusLockProps = {\n  /**\n   * `ref` of the element to receive focus initially.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * `ref` of the element to return focus to when `FocusLock` unmounts.\n   */\n  finalFocusRef?: RefObject<FocusableElement>\n  /**\n   * The `ref` of the wrapper for which the focus-lock wraps.\n   */\n  contentRef?: RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be restored to the element that triggered the `FocusLock` once it unmounts.\n   *\n   * @default false\n   */\n  restoreFocus?: boolean\n  children: ReactNode\n  /**\n   * If `true`, focus trapping will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the first focusable element within the `children` will auto-focused once `FocusLock` mounts.\n   *\n   * @default false\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, disables text selections inside, and outside focus lock.\n   *\n   * @default false\n   */\n  persistentFocus?: boolean\n  /**\n   * Enables aggressive focus capturing within iframes.\n   * - If `true`: keep focus in the lock, no matter where lock is active.\n   * - If `false`:  allows focus to move outside of iframe.\n   *\n   * @default false\n   */\n  lockFocusAcrossFrames?: boolean\n}\n\n/**\n * `FocusLock` is a component that improves accessibility by restricting focus within elements such as modals and dialogs, and locking the focus within that range.\n *\n * @see Docs https://yamada-ui.com/components/other/focus-lock\n */\n\nexport const FocusLock: FC<FocusLockProps> = ({\n  initialFocusRef,\n  finalFocusRef,\n  contentRef,\n  restoreFocus,\n  children,\n  isDisabled,\n  autoFocus,\n  persistentFocus,\n  lockFocusAcrossFrames,\n}) => {\n  const onActivation = useCallback(() => {\n    if (initialFocusRef?.current) {\n      initialFocusRef.current.focus()\n    } else if (contentRef?.current) {\n      const focusables = getAllFocusable(contentRef.current)\n\n      if (focusables.length === 0)\n        requestAnimationFrame(() => {\n          contentRef.current?.focus()\n        })\n    }\n  }, [initialFocusRef, contentRef])\n\n  const onDeactivation = useCallback(() => {\n    finalFocusRef?.current?.focus()\n  }, [finalFocusRef])\n\n  const returnFocus = restoreFocus && !finalFocusRef\n\n  return (\n    <InternalFocusLock\n      crossFrame={lockFocusAcrossFrames}\n      persistentFocus={persistentFocus}\n      autoFocus={autoFocus}\n      disabled={isDisabled}\n      onActivation={onActivation}\n      onDeactivation={onDeactivation}\n      returnFocus={returnFocus}\n    >\n      {children}\n    </InternalFocusLock>\n  )\n}\n"],"mappings":";;;AACA,SAASA,eAAA,EAAiBC,cAAA,QAAsB;AAEhD,SAASC,WAAA,QAAmB;AAC5B,OAAOC,cAAA,MAAoB;AAyFvB,SAAAC,GAAA;AAvFJ,IAAMC,iBAAA,GAAoBJ,cAAA,CAAeE,cAAc;AAwDhD,IAAMG,SAAA,GAAgCA,CAAC;EAC5CC,eAAA;EACAC,aAAA;EACAC,UAAA;EACAC,YAAA;EACAC,QAAA;EACAC,UAAA;EACAC,SAAA;EACAC,eAAA;EACAC;AACF,MAAM;EACJ,MAAMC,YAAA,GAAed,WAAA,CAAY,MAAM;IACrC,IAAIK,eAAA,oBAAAA,eAAA,CAAiBU,OAAA,EAAS;MAC5BV,eAAA,CAAgBU,OAAA,CAAQC,KAAA,CAAM;IAChC,WAAWT,UAAA,oBAAAA,UAAA,CAAYQ,OAAA,EAAS;MAC9B,MAAME,UAAA,GAAanB,eAAA,CAAgBS,UAAA,CAAWQ,OAAO;MAErD,IAAIE,UAAA,CAAWC,MAAA,KAAW,GACxBC,qBAAA,CAAsB,MAAM;QAhFpC,IAAAC,EAAA;QAiFU,CAAAA,EAAA,GAAAb,UAAA,CAAWQ,OAAA,KAAX,gBAAAK,EAAA,CAAoBJ,KAAA;MACtB,CAAC;IACL;EACF,GAAG,CAACX,eAAA,EAAiBE,UAAU,CAAC;EAEhC,MAAMc,cAAA,GAAiBrB,WAAA,CAAY,MAAM;IAtF3C,IAAAoB,EAAA;IAuFI,CAAAA,EAAA,GAAAd,aAAA,oBAAAA,aAAA,CAAeS,OAAA,KAAf,gBAAAK,EAAA,CAAwBJ,KAAA;EAC1B,GAAG,CAACV,aAAa,CAAC;EAElB,MAAMgB,WAAA,GAAcd,YAAA,IAAgB,CAACF,aAAA;EAErC,OACE,eAAAJ,GAAA,CAACC,iBAAA;IACCoB,UAAA,EAAYV,qBAAA;IACZD,eAAA;IACAD,SAAA;IACAa,QAAA,EAAUd,UAAA;IACVI,YAAA;IACAO,cAAA;IACAC,WAAA;IAECb;EAAA,CACH;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}