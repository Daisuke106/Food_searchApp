{"ast":null,"code":"\"use client\";\n\nimport { Puff } from \"./chunk-ENUKQWPP.mjs\";\nimport { Rings } from \"./chunk-4JKPWQSY.mjs\";\nimport { Audio } from \"./chunk-EYRZLOPC.mjs\";\nimport { Circles } from \"./chunk-TP5LE3DK.mjs\";\nimport { Dots } from \"./chunk-TIRPNXA7.mjs\";\nimport { Grid } from \"./chunk-TIONMRJE.mjs\";\nimport { Oval } from \"./chunk-MNPPARYC.mjs\";\n\n// src/loading.tsx\nimport { forwardRef, useComponentStyle } from \"@yamada-ui/core\";\nimport { cx } from \"@yamada-ui/utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Loading = forwardRef((props, ref) => {\n  const [styles, {\n    className,\n    variant = \"oval\",\n    color,\n    secondaryColor,\n    colorScheme = \"primary\",\n    size = \"1em\",\n    dur,\n    duration,\n    ...rest\n  }] = useComponentStyle(\"Loading\", props);\n  const computedProps = useMemo(() => ({\n    className: cx(\"ui-loading\", className),\n    size,\n    var: [{\n      __prefix: \"ui\",\n      name: \"color\",\n      token: \"colors\",\n      value: color != null ? color : colorScheme\n    }, {\n      __prefix: \"ui\",\n      name: \"secondary-color\",\n      token: \"colors\",\n      value: secondaryColor\n    }],\n    color: \"var(--ui-color)\",\n    ...(secondaryColor ? {\n      secondaryColor: \"var(--ui-secondary-color)\"\n    } : {}),\n    duration: duration != null ? duration : dur,\n    __css: {\n      ...styles\n    },\n    ...rest\n  }), [className, color, secondaryColor, colorScheme, size, duration, dur, rest, styles]);\n  switch (variant) {\n    case \"grid\":\n      return /* @__PURE__ */jsx(Grid, {\n        ref,\n        ...computedProps\n      });\n    case \"audio\":\n      return /* @__PURE__ */jsx(Audio, {\n        ref,\n        ...computedProps\n      });\n    case \"dots\":\n      return /* @__PURE__ */jsx(Dots, {\n        ref,\n        ...computedProps\n      });\n    case \"puff\":\n      return /* @__PURE__ */jsx(Puff, {\n        ref,\n        ...computedProps\n      });\n    case \"rings\":\n      return /* @__PURE__ */jsx(Rings, {\n        ref,\n        ...computedProps\n      });\n    case \"circles\":\n      return /* @__PURE__ */jsx(Circles, {\n        ref,\n        ...computedProps\n      });\n    default:\n      return /* @__PURE__ */jsx(Oval, {\n        ref,\n        ...computedProps\n      });\n  }\n});\nexport { Loading };","map":{"version":3,"names":["forwardRef","useComponentStyle","cx","useMemo","jsx","Loading","props","ref","styles","className","variant","color","secondaryColor","colorScheme","size","dur","duration","rest","computedProps","var","__prefix","name","token","value","__css","Grid","Audio","Dots","Puff","Rings","Circles","Oval"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\loading\\src\\loading.tsx"],"sourcesContent":["import type { CSSUIProps, ThemeProps, UIProps } from \"@yamada-ui/core\"\nimport { forwardRef, useComponentStyle } from \"@yamada-ui/core\"\nimport type { IconProps } from \"@yamada-ui/icon\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useMemo } from \"react\"\nimport { Audio } from \"./audio\"\nimport { Circles } from \"./circles\"\nimport { Dots } from \"./dots\"\nimport { Grid } from \"./grid\"\nimport { Oval } from \"./oval\"\nimport { Puff } from \"./puff\"\nimport { Rings } from \"./rings\"\n\ntype ComponentProps = Omit<UIProps, \"color\"> & {\n  color: string\n  secondaryColor?: string\n}\n\ntype LoadingOptions = {\n  /**\n   * The variant of the Loading.\n   *\n   * @default 'oval'\n   */\n  variant?: \"oval\" | \"grid\" | \"audio\" | \"dots\" | \"puff\" | \"rings\" | \"circles\"\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'primary'\n   */\n  secondaryColor?: CSSUIProps[\"color\"]\n  /**\n   * The CSS `dur` property.\n   */\n  duration?: IconProps[\"dur\"]\n}\n\nexport type LoadingProps = IconProps &\n  Pick<ThemeProps<\"Loading\">, \"colorScheme\"> &\n  LoadingOptions\n\n/**\n * `Loading` is a component displayed during waiting times, such as when data is being loaded.\n *\n * @see Docs https://yamada-ui.com/components/feedback/loading\n */\nexport const Loading = forwardRef<LoadingProps, \"svg\">((props, ref) => {\n  const [\n    styles,\n    {\n      className,\n      variant = \"oval\",\n      color,\n      secondaryColor,\n      colorScheme = \"primary\",\n      size = \"1em\",\n      dur,\n      duration,\n      ...rest\n    },\n  ] = useComponentStyle(\"Loading\", props)\n\n  const computedProps = useMemo<ComponentProps>(\n    () => ({\n      className: cx(\"ui-loading\", className),\n      size,\n      var: [\n        {\n          __prefix: \"ui\",\n          name: \"color\",\n          token: \"colors\",\n          value: color ?? colorScheme,\n        },\n        {\n          __prefix: \"ui\",\n          name: \"secondary-color\",\n          token: \"colors\",\n          value: secondaryColor,\n        },\n      ],\n      color: \"var(--ui-color)\",\n      ...(secondaryColor\n        ? { secondaryColor: \"var(--ui-secondary-color)\" }\n        : {}),\n      duration: duration ?? dur,\n      __css: { ...styles },\n      ...rest,\n    }),\n    [\n      className,\n      color,\n      secondaryColor,\n      colorScheme,\n      size,\n      duration,\n      dur,\n      rest,\n      styles,\n    ],\n  )\n\n  switch (variant) {\n    case \"grid\":\n      return <Grid ref={ref} {...computedProps} />\n\n    case \"audio\":\n      return <Audio ref={ref} {...computedProps} />\n\n    case \"dots\":\n      return <Dots ref={ref} {...computedProps} />\n\n    case \"puff\":\n      return <Puff ref={ref} {...computedProps} />\n\n    case \"rings\":\n      return <Rings ref={ref} {...computedProps} />\n\n    case \"circles\":\n      return <Circles ref={ref} {...computedProps} />\n\n    default:\n      return <Oval ref={ref} {...computedProps} />\n  }\n})\n"],"mappings":";;;;;;;;;;;AACA,SAASA,UAAA,EAAYC,iBAAA,QAAyB;AAE9C,SAASC,EAAA,QAAU;AACnB,SAASC,OAAA,QAAe;AAmGX,SAAAC,GAAA;AAzDN,IAAMC,OAAA,GAAUL,UAAA,CAAgC,CAACM,KAAA,EAAOC,GAAA,KAAQ;EACrE,MAAM,CACJC,MAAA,EACA;IACEC,SAAA;IACAC,OAAA,GAAU;IACVC,KAAA;IACAC,cAAA;IACAC,WAAA,GAAc;IACdC,IAAA,GAAO;IACPC,GAAA;IACAC,QAAA;IACA,GAAGC;EACL,EACF,GAAIhB,iBAAA,CAAkB,WAAWK,KAAK;EAEtC,MAAMY,aAAA,GAAgBf,OAAA,CACpB,OAAO;IACLM,SAAA,EAAWP,EAAA,CAAG,cAAcO,SAAS;IACrCK,IAAA;IACAK,GAAA,EAAK,CACH;MACEC,QAAA,EAAU;MACVC,IAAA,EAAM;MACNC,KAAA,EAAO;MACPC,KAAA,EAAOZ,KAAA,WAAAA,KAAA,GAASE;IAClB,GACA;MACEO,QAAA,EAAU;MACVC,IAAA,EAAM;MACNC,KAAA,EAAO;MACPC,KAAA,EAAOX;IACT,EACF;IACAD,KAAA,EAAO;IACP,IAAIC,cAAA,GACA;MAAEA,cAAA,EAAgB;IAA4B,IAC9C,CAAC;IACLI,QAAA,EAAUA,QAAA,WAAAA,QAAA,GAAYD,GAAA;IACtBS,KAAA,EAAO;MAAE,GAAGhB;IAAO;IACnB,GAAGS;EACL,IACA,CACER,SAAA,EACAE,KAAA,EACAC,cAAA,EACAC,WAAA,EACAC,IAAA,EACAE,QAAA,EACAD,GAAA,EACAE,IAAA,EACAT,MAAA,CAEJ;EAEA,QAAQE,OAAA;IACN,KAAK;MACH,OAAO,eAAAN,GAAA,CAACqB,IAAA;QAAKlB,GAAA;QAAW,GAAGW;MAAA,CAAe;IAE5C,KAAK;MACH,OAAO,eAAAd,GAAA,CAACsB,KAAA;QAAMnB,GAAA;QAAW,GAAGW;MAAA,CAAe;IAE7C,KAAK;MACH,OAAO,eAAAd,GAAA,CAACuB,IAAA;QAAKpB,GAAA;QAAW,GAAGW;MAAA,CAAe;IAE5C,KAAK;MACH,OAAO,eAAAd,GAAA,CAACwB,IAAA;QAAKrB,GAAA;QAAW,GAAGW;MAAA,CAAe;IAE5C,KAAK;MACH,OAAO,eAAAd,GAAA,CAACyB,KAAA;QAAMtB,GAAA;QAAW,GAAGW;MAAA,CAAe;IAE7C,KAAK;MACH,OAAO,eAAAd,GAAA,CAAC0B,OAAA;QAAQvB,GAAA;QAAW,GAAGW;MAAA,CAAe;IAE/C;MACE,OAAO,eAAAd,GAAA,CAAC2B,IAAA;QAAKxB,GAAA;QAAW,GAAGW;MAAA,CAAe;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}