{"ast":null,"code":"\"use client\";\n\n// src/grid.tsx\nimport { ui, forwardRef, useTheme, transforms } from \"@yamada-ui/core\";\nimport { replaceObject, getMemoizedObject as get } from \"@yamada-ui/utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Grid = forwardRef(({\n  templateColumns: gridTemplateColumns,\n  templateRows: gridTemplateRows,\n  templateAreas: gridTemplateAreas,\n  column: gridColumn,\n  row: gridRow,\n  area: gridArea,\n  gap,\n  rowGap,\n  columnGap,\n  autoFlow: gridAutoFlow,\n  autoColumns: gridAutoColumns,\n  autoRows: gridAutoRows,\n  ...rest\n}, ref) => {\n  const css = {\n    display: \"grid\",\n    gridTemplateColumns,\n    gridTemplateRows,\n    gridTemplateAreas,\n    gridColumn,\n    gridRow,\n    gridArea,\n    gap,\n    rowGap,\n    columnGap,\n    gridAutoFlow,\n    gridAutoColumns,\n    gridAutoRows\n  };\n  return /* @__PURE__ */jsx(ui.div, {\n    ref,\n    __css: css,\n    ...rest\n  });\n});\nvar transformColumns = (columns, minWidth) => theme => {\n  if (minWidth) {\n    return replaceObject(minWidth, value => {\n      value = get(theme, `sizes.${value}`, transforms.px(value));\n      return value != null ? `repeat(auto-fit, minmax(${value}, 1fr))` : void 0;\n    });\n  } else {\n    return replaceObject(columns, value => value != null ? `repeat(${value}, minmax(0, 1fr))` : void 0);\n  }\n};\nvar SimpleGrid = forwardRef(({\n  minChildWidth,\n  columns,\n  ...rest\n}, ref) => {\n  const {\n    theme\n  } = useTheme();\n  let templateColumns = transformColumns(columns, minChildWidth)(theme);\n  return /* @__PURE__ */jsx(Grid, {\n    ref,\n    templateColumns,\n    ...rest\n  });\n});\nvar GridItem = forwardRef(({\n  area: gridArea,\n  colSpan,\n  rowSpan,\n  colStart: gridColumnStart,\n  colEnd: gridColumnEnd,\n  rowStart: gridRowStart,\n  rowEnd: gridRowEnd,\n  ...rest\n}, ref) => {\n  const css = {\n    gridColumn: replaceObject(colSpan, value => value != null ? `span ${value}/span ${value}` : void 0),\n    gridRow: replaceObject(rowSpan, value => value != null ? `span ${value}/span ${value}` : void 0),\n    gridColumnStart,\n    gridColumnEnd,\n    gridRowStart,\n    gridRowEnd,\n    gridArea\n  };\n  return /* @__PURE__ */jsx(ui.div, {\n    ref,\n    __css: css,\n    ...rest\n  });\n});\nexport { Grid, SimpleGrid, GridItem };","map":{"version":3,"names":["ui","forwardRef","useTheme","transforms","replaceObject","getMemoizedObject","get","jsx","Grid","templateColumns","gridTemplateColumns","templateRows","gridTemplateRows","templateAreas","gridTemplateAreas","column","gridColumn","row","gridRow","area","gridArea","gap","rowGap","columnGap","autoFlow","gridAutoFlow","autoColumns","gridAutoColumns","autoRows","gridAutoRows","rest","ref","css","display","div","__css","transformColumns","columns","minWidth","theme","value","px","SimpleGrid","minChildWidth","GridItem","colSpan","rowSpan","colStart","gridColumnStart","colEnd","gridColumnEnd","rowStart","gridRowStart","rowEnd","gridRowEnd"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\layouts\\src\\grid.tsx"],"sourcesContent":["import type {\n  HTMLUIProps,\n  CSSUIObject,\n  Token,\n  StyledTheme,\n} from \"@yamada-ui/core\"\nimport { ui, forwardRef, useTheme, transforms } from \"@yamada-ui/core\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport { replaceObject, getMemoizedObject as get } from \"@yamada-ui/utils\"\ntype GridOptions = {\n  /**\n   * The CSS `grid-template-columns` property.\n   */\n  templateColumns?: CSSUIObject[\"gridTemplateColumns\"]\n  /**\n   * The CSS `grid-template-rows` property.\n   */\n  templateRows?: CSSUIObject[\"gridTemplateRows\"]\n  /**\n   * The CSS `grid-template-areas` property.\n   */\n  templateAreas?: CSSUIObject[\"gridTemplateAreas\"]\n  /**\n   * The CSS `grid-column` property.\n   */\n  column?: CSSUIObject[\"gridColumn\"]\n  /**\n   * The CSS `grid-row` property.\n   */\n  row?: CSSUIObject[\"gridRow\"]\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject[\"gridArea\"]\n  /**\n   * The CSS `grid-auto-flow` property.\n   */\n  autoFlow?: CSSUIObject[\"gridAutoFlow\"]\n  /**\n   * The CSS `grid-auto-columns` property.\n   */\n  autoColumns?: CSSUIObject[\"gridAutoColumns\"]\n  /**\n   * The CSS `grid-auto-rows` property.\n   */\n  autoRows?: CSSUIObject[\"gridAutoRows\"]\n}\n\nexport type GridProps = HTMLUIProps<\"div\"> & GridOptions\n\n/**\n * `Grid` is a component for managing grid layouts. It also comes with handy style shorthand.\n *\n * @see Docs https://yamada-ui.com/components/layouts/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(\n  (\n    {\n      templateColumns: gridTemplateColumns,\n      templateRows: gridTemplateRows,\n      templateAreas: gridTemplateAreas,\n      column: gridColumn,\n      row: gridRow,\n      area: gridArea,\n      gap,\n      rowGap,\n      columnGap,\n      autoFlow: gridAutoFlow,\n      autoColumns: gridAutoColumns,\n      autoRows: gridAutoRows,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      display: \"grid\",\n      gridTemplateColumns,\n      gridTemplateRows,\n      gridTemplateAreas,\n      gridColumn,\n      gridRow,\n      gridArea,\n      gap,\n      rowGap,\n      columnGap,\n      gridAutoFlow,\n      gridAutoColumns,\n      gridAutoRows,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n\nconst transformColumns =\n  (columns: Token<number> | undefined, minWidth?: GridProps[\"minWidth\"]) =>\n  (theme: StyledTheme<Dict>) => {\n    if (minWidth) {\n      return replaceObject(minWidth, (value) => {\n        value = get(theme, `sizes.${value}`, transforms.px(value))\n\n        return value != null\n          ? `repeat(auto-fit, minmax(${value}, 1fr))`\n          : undefined\n      }) as CSSUIObject[\"gridTemplateColumns\"]\n    } else {\n      return replaceObject(columns, (value) =>\n        value != null ? `repeat(${value}, minmax(0, 1fr))` : undefined,\n      ) as CSSUIObject[\"gridTemplateColumns\"]\n    }\n  }\n\ntype SimpleGridOptions = {\n  /**\n   * The width at which child elements will break into columns.\n   * Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns.\n   */\n  columns?: Token<number>\n}\n\nexport type SimpleGridProps = GridProps & SimpleGridOptions\n\n/**\n * `SimpleGrid` is a component that makes `Grid` simpler and more user-friendly.\n *\n * @see Docs https://yamada-ui.com/components/layouts/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  ({ minChildWidth, columns, ...rest }, ref) => {\n    const { theme } = useTheme()\n    let templateColumns = transformColumns(columns, minChildWidth)(theme)\n\n    return <Grid ref={ref} templateColumns={templateColumns} {...rest} />\n  },\n)\n\ntype GridItemOptions = {\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject[\"gridArea\"]\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  colSpan?: Token<number>\n  /**\n   * The number of rows the grid item should `span`.\n   */\n  rowSpan?: Token<number>\n  /**\n   * The CSS `grid-column-start` property.\n   */\n  colStart?: CSSUIObject[\"gridColumnStart\"]\n  /**\n   * The CSS `grid-column-end` property.\n   */\n  colEnd?: CSSUIObject[\"gridColumnEnd\"]\n  /**\n   * The CSS `grid-row-start` property.\n   */\n  rowStart?: CSSUIObject[\"gridRowStart\"]\n  /**\n   * The CSS `grid-row-end` property.\n   */\n  rowEnd?: CSSUIObject[\"gridRowEnd\"]\n}\n\nexport type GridItemProps = HTMLUIProps<\"div\"> & GridItemOptions\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">(\n  (\n    {\n      area: gridArea,\n      colSpan,\n      rowSpan,\n      colStart: gridColumnStart,\n      colEnd: gridColumnEnd,\n      rowStart: gridRowStart,\n      rowEnd: gridRowEnd,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      gridColumn: replaceObject(colSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridRow: replaceObject(rowSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridColumnStart,\n      gridColumnEnd,\n      gridRowStart,\n      gridRowEnd,\n      gridArea,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n"],"mappings":";;;AAMA,SAASA,EAAA,EAAIC,UAAA,EAAYC,QAAA,EAAUC,UAAA,QAAkB;AAErD,SAASC,aAAA,EAAeC,iBAAA,IAAqBC,GAAA,QAAW;AAkF7C,SAAAC,GAAA;AAnCJ,IAAMC,IAAA,GAAOP,UAAA,CAClB,CACE;EACEQ,eAAA,EAAiBC,mBAAA;EACjBC,YAAA,EAAcC,gBAAA;EACdC,aAAA,EAAeC,iBAAA;EACfC,MAAA,EAAQC,UAAA;EACRC,GAAA,EAAKC,OAAA;EACLC,IAAA,EAAMC,QAAA;EACNC,GAAA;EACAC,MAAA;EACAC,SAAA;EACAC,QAAA,EAAUC,YAAA;EACVC,WAAA,EAAaC,eAAA;EACbC,QAAA,EAAUC,YAAA;EACV,GAAGC;AACL,GACAC,GAAA,KACG;EACH,MAAMC,GAAA,GAAmB;IACvBC,OAAA,EAAS;IACTvB,mBAAA;IACAE,gBAAA;IACAE,iBAAA;IACAE,UAAA;IACAE,OAAA;IACAE,QAAA;IACAC,GAAA;IACAC,MAAA;IACAC,SAAA;IACAE,YAAA;IACAE,eAAA;IACAE;EACF;EAEA,OAAO,eAAAtB,GAAA,CAACP,EAAA,CAAGkC,GAAA,EAAH;IAAOH,GAAA;IAAUI,KAAA,EAAOH,GAAA;IAAM,GAAGF;EAAA,CAAM;AACjD,CACF;AAEA,IAAMM,gBAAA,GACJA,CAACC,OAAA,EAAoCC,QAAA,KACpCC,KAAA,IAA6B;EAC5B,IAAID,QAAA,EAAU;IACZ,OAAOlC,aAAA,CAAckC,QAAA,EAAWE,KAAA,IAAU;MACxCA,KAAA,GAAQlC,GAAA,CAAIiC,KAAA,EAAO,SAASC,KAAK,IAAIrC,UAAA,CAAWsC,EAAA,CAAGD,KAAK,CAAC;MAEzD,OAAOA,KAAA,IAAS,OACZ,2BAA2BA,KAAK,YAChC;IACN,CAAC;EACH,OAAO;IACL,OAAOpC,aAAA,CAAciC,OAAA,EAAUG,KAAA,IAC7BA,KAAA,IAAS,OAAO,UAAUA,KAAK,sBAAsB,MACvD;EACF;AACF;AAqBK,IAAME,UAAA,GAAazC,UAAA,CACxB,CAAC;EAAE0C,aAAA;EAAeN,OAAA;EAAS,GAAGP;AAAK,GAAGC,GAAA,KAAQ;EAC5C,MAAM;IAAEQ;EAAM,IAAIrC,QAAA,CAAS;EAC3B,IAAIO,eAAA,GAAkB2B,gBAAA,CAAiBC,OAAA,EAASM,aAAa,EAAEJ,KAAK;EAEpE,OAAO,eAAAhC,GAAA,CAACC,IAAA;IAAKuB,GAAA;IAAUtB,eAAA;IAAmC,GAAGqB;EAAA,CAAM;AACrE,CACF;AAmCO,IAAMc,QAAA,GAAW3C,UAAA,CACtB,CACE;EACEkB,IAAA,EAAMC,QAAA;EACNyB,OAAA;EACAC,OAAA;EACAC,QAAA,EAAUC,eAAA;EACVC,MAAA,EAAQC,aAAA;EACRC,QAAA,EAAUC,YAAA;EACVC,MAAA,EAAQC,UAAA;EACR,GAAGxB;AACL,GACAC,GAAA,KACG;EACH,MAAMC,GAAA,GAAmB;IACvBhB,UAAA,EAAYZ,aAAA,CAAcyC,OAAA,EAAUL,KAAA,IAClCA,KAAA,IAAS,OAAO,QAAQA,KAAK,SAASA,KAAK,KAAK,MAClD;IACAtB,OAAA,EAASd,aAAA,CAAc0C,OAAA,EAAUN,KAAA,IAC/BA,KAAA,IAAS,OAAO,QAAQA,KAAK,SAASA,KAAK,KAAK,MAClD;IACAQ,eAAA;IACAE,aAAA;IACAE,YAAA;IACAE,UAAA;IACAlC;EACF;EAEA,OAAO,eAAAb,GAAA,CAACP,EAAA,CAAGkC,GAAA,EAAH;IAAOH,GAAA;IAAUI,KAAA,EAAOH,GAAA;IAAM,GAAGF;EAAA,CAAM;AACjD,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}