{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { useCallbackRef, runIfFunc, isUndefined, isNull } from \"@yamada-ui/utils\";\nimport { useState } from \"react\";\nvar useControllableState = ({\n  value,\n  ...rest\n}) => {\n  var _a;\n  (_a = rest.onUpdate) != null ? _a : rest.onUpdate = (prev, next) => prev !== next;\n  const onChange = useCallbackRef(rest.onChange);\n  const onUpdate = useCallbackRef(rest.onUpdate);\n  const [defaultValue, setDefaultValue] = useState(rest.defaultValue);\n  const controlled = value !== void 0;\n  const resolvedValue = controlled ? value : defaultValue;\n  const setValue = useCallbackRef(next => {\n    const nextValue = runIfFunc(next, resolvedValue);\n    if (!onUpdate(resolvedValue, nextValue)) return;\n    if (!controlled || isUndefined(nextValue) || isNull(nextValue)) setDefaultValue(nextValue);\n    onChange(nextValue);\n  }, [controlled, resolvedValue, onChange, onUpdate]);\n  return [resolvedValue, setValue];\n};\nexport { useControllableState };","map":{"version":3,"names":["useCallbackRef","runIfFunc","isUndefined","isNull","useState","useControllableState","value","rest","_a","onUpdate","prev","next","onChange","defaultValue","setDefaultValue","controlled","resolvedValue","setValue","nextValue"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-controllable-state\\src\\index.ts"],"sourcesContent":["import {\n  useCallbackRef,\n  runIfFunc,\n  isUndefined,\n  isNull,\n} from \"@yamada-ui/utils\"\nimport type { Dispatch, SetStateAction } from \"react\"\nimport { useState } from \"react\"\n\nexport type UseControllableStateProps<T> = {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  onUpdate?: (prev: T, next: T) => boolean\n}\n\nexport const useControllableState = <T>({\n  value,\n  ...rest\n}: UseControllableStateProps<T>) => {\n  rest.onUpdate ??= (prev, next) => prev !== next\n\n  const onChange = useCallbackRef(rest.onChange)\n  const onUpdate = useCallbackRef(rest.onUpdate)\n\n  const [defaultValue, setDefaultValue] = useState(rest.defaultValue as T)\n  const controlled = value !== undefined\n  const resolvedValue = controlled ? value : defaultValue\n\n  const setValue = useCallbackRef(\n    (next: SetStateAction<T>) => {\n      const nextValue = runIfFunc(next, resolvedValue)\n\n      if (!onUpdate(resolvedValue, nextValue)) return\n\n      if (!controlled || isUndefined(nextValue) || isNull(nextValue))\n        setDefaultValue(nextValue)\n\n      onChange(nextValue)\n    },\n    [controlled, resolvedValue, onChange, onUpdate],\n  )\n\n  return [resolvedValue, setValue] as [T, Dispatch<SetStateAction<T>>]\n}\n"],"mappings":";;;AAAA,SACEA,cAAA,EACAC,SAAA,EACAC,WAAA,EACAC,MAAA,QACK;AAEP,SAASC,QAAA,QAAgB;AASlB,IAAMC,oBAAA,GAAuBA,CAAI;EACtCC,KAAA;EACA,GAAGC;AACL,MAAoC;EAnBpC,IAAAC,EAAA;EAoBE,CAAAA,EAAA,GAAAD,IAAA,CAAKE,QAAA,KAAL,OAAAD,EAAA,GAAAD,IAAA,CAAKE,QAAA,GAAa,CAACC,IAAA,EAAMC,IAAA,KAASD,IAAA,KAASC,IAAA;EAE3C,MAAMC,QAAA,GAAWZ,cAAA,CAAeO,IAAA,CAAKK,QAAQ;EAC7C,MAAMH,QAAA,GAAWT,cAAA,CAAeO,IAAA,CAAKE,QAAQ;EAE7C,MAAM,CAACI,YAAA,EAAcC,eAAe,IAAIV,QAAA,CAASG,IAAA,CAAKM,YAAiB;EACvE,MAAME,UAAA,GAAaT,KAAA,KAAU;EAC7B,MAAMU,aAAA,GAAgBD,UAAA,GAAaT,KAAA,GAAQO,YAAA;EAE3C,MAAMI,QAAA,GAAWjB,cAAA,CACdW,IAAA,IAA4B;IAC3B,MAAMO,SAAA,GAAYjB,SAAA,CAAUU,IAAA,EAAMK,aAAa;IAE/C,IAAI,CAACP,QAAA,CAASO,aAAA,EAAeE,SAAS,GAAG;IAEzC,IAAI,CAACH,UAAA,IAAcb,WAAA,CAAYgB,SAAS,KAAKf,MAAA,CAAOe,SAAS,GAC3DJ,eAAA,CAAgBI,SAAS;IAE3BN,QAAA,CAASM,SAAS;EACpB,GACA,CAACH,UAAA,EAAYC,aAAA,EAAeJ,QAAA,EAAUH,QAAQ,CAChD;EAEA,OAAO,CAACO,aAAA,EAAeC,QAAQ;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}