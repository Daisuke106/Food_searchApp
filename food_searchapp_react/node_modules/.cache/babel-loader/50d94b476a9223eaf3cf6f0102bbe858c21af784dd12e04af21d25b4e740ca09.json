{"ast":null,"code":"\"use client\";\n\n// src/file-input.tsx\nimport { ui, forwardRef, omitThemeProps, useMultiComponentStyle } from \"@yamada-ui/core\";\nimport { useFormControlProps, formControlProperties } from \"@yamada-ui/form-control\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { assignRef, cx, dataAttr, handlerAll, isNull, mergeRefs, pickObject } from \"@yamada-ui/utils\";\nimport { cloneElement, useCallback, useMemo, useRef } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar defaultFormat = _ref => {\n  let {\n    name\n  } = _ref;\n  return name;\n};\nvar FileInput = forwardRef((_ref2, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const [styles, mergedProps] = useMultiComponentStyle(\"FileInput\", props);\n  const {\n    className,\n    id,\n    name,\n    accept,\n    multiple,\n    form,\n    placeholder,\n    value,\n    defaultValue,\n    component,\n    format = defaultFormat,\n    lineClamp = 1,\n    separator = \",\",\n    resetRef,\n    \"aria-readonly\": ariaReadonly,\n    onChange: onChangeProp,\n    onClick: onClickProp,\n    ...rest\n  } = useFormControlProps(omitThemeProps(mergedProps));\n  const {\n    disabled,\n    readOnly\n  } = rest;\n  const inputRef = useRef(null);\n  const [values, setValues] = useControllableState({\n    value,\n    defaultValue,\n    onChange: onChangeProp\n  });\n  const onClick = useCallback(() => {\n    var _a;\n    if (disabled || readOnly) return;\n    (_a = inputRef.current) == null ? void 0 : _a.click();\n  }, [disabled, readOnly]);\n  const onChange = useCallback(ev => {\n    let files = !isNull(ev.currentTarget.files) ? Array.from(ev.currentTarget.files) : void 0;\n    if (!(files == null ? void 0 : files.length)) files = void 0;\n    setValues(files);\n  }, [setValues]);\n  const onReset = useCallback(() => {\n    if (inputRef.current) inputRef.current.value = \"\";\n    setValues(void 0);\n  }, [setValues]);\n  assignRef(resetRef, onReset);\n  const cloneChildren = useMemo(() => {\n    if (!(values == null ? void 0 : values.length)) return /* @__PURE__ */jsx(ui.span, {\n      lineClamp,\n      children: placeholder\n    });\n    if (children) return children(values);\n    if (component) {\n      return /* @__PURE__ */jsx(ui.span, {\n        lineClamp,\n        children: values.map((value2, index) => {\n          const el = component({\n            value: value2,\n            index\n          });\n          const style = {\n            marginBlockStart: \"0.125rem\",\n            marginBlockEnd: \"0.125rem\",\n            marginInlineEnd: \"0.25rem\"\n          };\n          return el ? cloneElement(el, {\n            style,\n            key: index\n          }) : null;\n        })\n      });\n    } else {\n      return /* @__PURE__ */jsx(ui.span, {\n        lineClamp,\n        children: values.map((value2, index) => {\n          const isLast = values.length === index + 1;\n          return /* @__PURE__ */jsxs(ui.span, {\n            display: \"inline-block\",\n            me: \"0.25rem\",\n            children: [format(value2, index), !isLast ? separator : null]\n          }, index);\n        })\n      });\n    }\n  }, [children, format, lineClamp, placeholder, separator, component, values]);\n  const css = {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: !readOnly ? \"pointer\" : \"auto\",\n    ...styles.field\n  };\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(ui.input, {\n      ref: mergeRefs(inputRef, ref),\n      type: \"file\",\n      \"aria-hidden\": true,\n      tabIndex: -1,\n      id,\n      name,\n      form,\n      accept,\n      multiple,\n      style: {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\"\n      },\n      onChange,\n      \"aria-readonly\": ariaReadonly,\n      ...pickObject(rest, formControlProperties)\n    }), /* @__PURE__ */jsx(ui.div, {\n      ref,\n      className: cx(\"ui-file-input\", className),\n      py: (values == null ? void 0 : values.length) && component ? \"0.125rem\" : void 0,\n      ...rest,\n      __css: css,\n      tabIndex: 0,\n      \"data-placeholder\": dataAttr(!(values == null ? void 0 : values.length)),\n      onClick: handlerAll(onClickProp, onClick),\n      children: cloneChildren\n    })]\n  });\n});\nexport { FileInput };","map":{"version":3,"names":["ui","forwardRef","omitThemeProps","useMultiComponentStyle","useFormControlProps","formControlProperties","useControllableState","assignRef","cx","dataAttr","handlerAll","isNull","mergeRefs","pickObject","cloneElement","useCallback","useMemo","useRef","Fragment","jsx","jsxs","defaultFormat","_ref","name","FileInput","_ref2","ref","children","props","styles","mergedProps","className","id","accept","multiple","form","placeholder","value","defaultValue","component","format","lineClamp","separator","resetRef","ariaReadonly","onChange","onChangeProp","onClick","onClickProp","rest","disabled","readOnly","inputRef","values","setValues","_a","current","click","ev","files","currentTarget","Array","from","length","onReset","cloneChildren","span","map","value2","index","el","style","marginBlockStart","marginBlockEnd","marginInlineEnd","key","isLast","display","me","css","alignItems","cursor","field","input","type","tabIndex","border","clip","height","width","margin","padding","overflow","whiteSpace","position","div","py","__css"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\file-input\\src\\file-input.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  ColorModeToken,\n  CSS,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useMultiComponentStyle,\n} from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  useFormControlProps,\n  formControlProperties,\n} from \"@yamada-ui/form-control\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport {\n  assignRef,\n  cx,\n  dataAttr,\n  handlerAll,\n  isNull,\n  mergeRefs,\n  pickObject,\n} from \"@yamada-ui/utils\"\nimport type {\n  ChangeEvent,\n  CSSProperties,\n  FC,\n  ForwardedRef,\n  ReactElement,\n  ReactNode,\n} from \"react\"\nimport { cloneElement, useCallback, useMemo, useRef } from \"react\"\n\ntype FileInputOptions = {\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * The value of the file input.\n   */\n  value?: File[]\n  /**\n   * The initial value of the file input.\n   */\n  defaultValue?: File[]\n  /**\n   * Function to be called when a file change event occurs.\n   */\n  onChange?: (files: File[] | undefined) => void\n  /**\n   * The component that displays uploaded files.\n   */\n  component?: FC<{ value: File; index: number }>\n  /**\n   * A callback that formats the name of the uploaded file.\n   */\n  format?: (value: File, index: number) => string\n  /**\n   * The string to separate uploaded files.\n   *\n   * @default ','\n   */\n  separator?: string\n  children?: (files: File[] | undefined) => ReactNode\n  /**\n   * Ref to a reset function.\n   */\n  resetRef?: ForwardedRef<() => void>\n}\n\ntype InputProps = Partial<Pick<HTMLInputElement, \"accept\" | \"multiple\">>\n\nexport type FileInputProps = Omit<HTMLUIProps<\"div\">, \"onChange\" | \"children\"> &\n  ThemeProps<\"Input\"> &\n  InputProps &\n  FileInputOptions &\n  FormControlOptions\n\nconst defaultFormat: (value: File, index: number) => string = ({ name }) => name\n\n/**\n * `FileInput` is a component used for users to select files.\n *\n * @see Docs https://yamada-ui.com/components/forms/file-input\n */\nexport const FileInput = forwardRef<FileInputProps, \"input\">(\n  ({ children, ...props }, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"FileInput\", props)\n    const {\n      className,\n      id,\n      name,\n      accept,\n      multiple,\n      form,\n      placeholder,\n      value,\n      defaultValue,\n      component,\n      format = defaultFormat,\n      lineClamp = 1,\n      separator = \",\",\n      resetRef,\n      \"aria-readonly\": ariaReadonly,\n      onChange: onChangeProp,\n      onClick: onClickProp,\n      ...rest\n    } = useFormControlProps(omitThemeProps(mergedProps))\n\n    const { disabled, readOnly } = rest\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const [values, setValues] = useControllableState<File[] | undefined>({\n      value,\n      defaultValue,\n      onChange: onChangeProp,\n    })\n\n    const onClick = useCallback(() => {\n      if (disabled || readOnly) return\n\n      inputRef.current?.click()\n    }, [disabled, readOnly])\n\n    const onChange = useCallback(\n      (ev: ChangeEvent<HTMLInputElement>) => {\n        let files = !isNull(ev.currentTarget.files)\n          ? Array.from(ev.currentTarget.files)\n          : undefined\n\n        if (!files?.length) files = undefined\n\n        setValues(files)\n      },\n      [setValues],\n    )\n\n    const onReset = useCallback(() => {\n      if (inputRef.current) inputRef.current.value = \"\"\n\n      setValues(undefined)\n    }, [setValues])\n\n    assignRef(resetRef, onReset)\n\n    const cloneChildren = useMemo(() => {\n      if (!values?.length)\n        return <ui.span lineClamp={lineClamp}>{placeholder}</ui.span>\n\n      if (children) return children(values)\n\n      if (component) {\n        return (\n          <ui.span lineClamp={lineClamp}>\n            {values.map((value, index) => {\n              const el = component({ value, index })\n\n              const style: CSSProperties = {\n                marginBlockStart: \"0.125rem\",\n                marginBlockEnd: \"0.125rem\",\n                marginInlineEnd: \"0.25rem\",\n              }\n\n              return el\n                ? cloneElement(el as ReactElement, { style, key: index })\n                : null\n            })}\n          </ui.span>\n        )\n      } else {\n        return (\n          <ui.span lineClamp={lineClamp}>\n            {values.map((value, index) => {\n              const isLast = values.length === index + 1\n\n              return (\n                <ui.span key={index} display=\"inline-block\" me=\"0.25rem\">\n                  {format(value, index)}\n                  {!isLast ? separator : null}\n                </ui.span>\n              )\n            })}\n          </ui.span>\n        )\n      }\n    }, [children, format, lineClamp, placeholder, separator, component, values])\n\n    const css: CSSUIObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      cursor: !readOnly ? \"pointer\" : \"auto\",\n      ...styles.field,\n    }\n\n    return (\n      <>\n        <ui.input\n          ref={mergeRefs(inputRef, ref)}\n          type=\"file\"\n          aria-hidden\n          tabIndex={-1}\n          id={id}\n          name={name}\n          form={form}\n          accept={accept}\n          multiple={multiple}\n          style={{\n            border: \"0px\",\n            clip: \"rect(0px, 0px, 0px, 0px)\",\n            height: \"1px\",\n            width: \"1px\",\n            margin: \"-1px\",\n            padding: \"0px\",\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            position: \"absolute\",\n          }}\n          onChange={onChange}\n          aria-readonly={ariaReadonly}\n          {...pickObject(rest, formControlProperties)}\n        />\n\n        <ui.div\n          ref={ref}\n          className={cx(\"ui-file-input\", className)}\n          py={values?.length && component ? \"0.125rem\" : undefined}\n          {...rest}\n          __css={css}\n          tabIndex={0}\n          data-placeholder={dataAttr(!values?.length)}\n          onClick={handlerAll(onClickProp, onClick)}\n        >\n          {cloneChildren}\n        </ui.div>\n      </>\n    )\n  },\n)\n"],"mappings":";;;AAOA,SACEA,EAAA,EACAC,UAAA,EACAC,cAAA,EACAC,sBAAA,QACK;AAEP,SACEC,mBAAA,EACAC,qBAAA,QACK;AACP,SAASC,oBAAA,QAA4B;AACrC,SACEC,SAAA,EACAC,EAAA,EACAC,QAAA,EACAC,UAAA,EACAC,MAAA,EACAC,SAAA,EACAC,UAAA,QACK;AASP,SAASC,YAAA,EAAcC,WAAA,EAAaC,OAAA,EAASC,MAAA,QAAc;AA0H5C,SAgDTC,QAAA,EAhDSC,GAAA,EA6BCC,IAAA,QA7BD;AAtEf,IAAMC,aAAA,GAAwDC,IAAA;EAAA,IAAC;IAAEC;EAAK,IAAAD,IAAA;EAAA,OAAMC,IAAA;AAAA;AAOrE,IAAMC,SAAA,GAAYvB,UAAA,CACvB,CAAAwB,KAAA,EAAyBC,GAAA,KAAQ;EAAA,IAAhC;IAAEC,QAAA;IAAU,GAAGC;EAAM,IAAAH,KAAA;EACpB,MAAM,CAACI,MAAA,EAAQC,WAAW,IAAI3B,sBAAA,CAAuB,aAAayB,KAAK;EACvE,MAAM;IACJG,SAAA;IACAC,EAAA;IACAT,IAAA;IACAU,MAAA;IACAC,QAAA;IACAC,IAAA;IACAC,WAAA;IACAC,KAAA;IACAC,YAAA;IACAC,SAAA;IACAC,MAAA,GAASnB,aAAA;IACToB,SAAA,GAAY;IACZC,SAAA,GAAY;IACZC,QAAA;IACA,iBAAiBC,YAAA;IACjBC,QAAA,EAAUC,YAAA;IACVC,OAAA,EAASC,WAAA;IACT,GAAGC;EACL,IAAI7C,mBAAA,CAAoBF,cAAA,CAAe4B,WAAW,CAAC;EAEnD,MAAM;IAAEoB,QAAA;IAAUC;EAAS,IAAIF,IAAA;EAE/B,MAAMG,QAAA,GAAWnC,MAAA,CAAyB,IAAI;EAE9C,MAAM,CAACoC,MAAA,EAAQC,SAAS,IAAIhD,oBAAA,CAAyC;IACnE+B,KAAA;IACAC,YAAA;IACAO,QAAA,EAAUC;EACZ,CAAC;EAED,MAAMC,OAAA,GAAUhC,WAAA,CAAY,MAAM;IAjItC,IAAAwC,EAAA;IAkIM,IAAIL,QAAA,IAAYC,QAAA,EAAU;IAE1B,CAAAI,EAAA,GAAAH,QAAA,CAASI,OAAA,KAAT,gBAAAD,EAAA,CAAkBE,KAAA;EACpB,GAAG,CAACP,QAAA,EAAUC,QAAQ,CAAC;EAEvB,MAAMN,QAAA,GAAW9B,WAAA,CACd2C,EAAA,IAAsC;IACrC,IAAIC,KAAA,GAAQ,CAAChD,MAAA,CAAO+C,EAAA,CAAGE,aAAA,CAAcD,KAAK,IACtCE,KAAA,CAAMC,IAAA,CAAKJ,EAAA,CAAGE,aAAA,CAAcD,KAAK,IACjC;IAEJ,IAAI,EAACA,KAAA,oBAAAA,KAAA,CAAOI,MAAA,GAAQJ,KAAA,GAAQ;IAE5BL,SAAA,CAAUK,KAAK;EACjB,GACA,CAACL,SAAS,CACZ;EAEA,MAAMU,OAAA,GAAUjD,WAAA,CAAY,MAAM;IAChC,IAAIqC,QAAA,CAASI,OAAA,EAASJ,QAAA,CAASI,OAAA,CAAQnB,KAAA,GAAQ;IAE/CiB,SAAA,CAAU,MAAS;EACrB,GAAG,CAACA,SAAS,CAAC;EAEd/C,SAAA,CAAUoC,QAAA,EAAUqB,OAAO;EAE3B,MAAMC,aAAA,GAAgBjD,OAAA,CAAQ,MAAM;IAClC,IAAI,EAACqC,MAAA,oBAAAA,MAAA,CAAQU,MAAA,GACX,OAAO,eAAA5C,GAAA,CAACnB,EAAA,CAAGkE,IAAA,EAAH;MAAQzB,SAAA;MAAuBd,QAAA,EAAAS;IAAA,CAAY;IAErD,IAAIT,QAAA,EAAU,OAAOA,QAAA,CAAS0B,MAAM;IAEpC,IAAId,SAAA,EAAW;MACb,OACE,eAAApB,GAAA,CAACnB,EAAA,CAAGkE,IAAA,EAAH;QAAQzB,SAAA;QACNd,QAAA,EAAA0B,MAAA,CAAOc,GAAA,CAAI,CAACC,MAAA,EAAOC,KAAA,KAAU;UAC5B,MAAMC,EAAA,GAAK/B,SAAA,CAAU;YAAEF,KAAA,EAAA+B,MAAA;YAAOC;UAAM,CAAC;UAErC,MAAME,KAAA,GAAuB;YAC3BC,gBAAA,EAAkB;YAClBC,cAAA,EAAgB;YAChBC,eAAA,EAAiB;UACnB;UAEA,OAAOJ,EAAA,GACHxD,YAAA,CAAawD,EAAA,EAAoB;YAAEC,KAAA;YAAOI,GAAA,EAAKN;UAAM,CAAC,IACtD;QACN,CAAC;MAAA,CACH;IAEJ,OAAO;MACL,OACE,eAAAlD,GAAA,CAACnB,EAAA,CAAGkE,IAAA,EAAH;QAAQzB,SAAA;QACNd,QAAA,EAAA0B,MAAA,CAAOc,GAAA,CAAI,CAACC,MAAA,EAAOC,KAAA,KAAU;UAC5B,MAAMO,MAAA,GAASvB,MAAA,CAAOU,MAAA,KAAWM,KAAA,GAAQ;UAEzC,OACE,eAAAjD,IAAA,CAACpB,EAAA,CAAGkE,IAAA,EAAH;YAAoBW,OAAA,EAAQ;YAAeC,EAAA,EAAG;YAC5CnD,QAAA,GAAAa,MAAA,CAAO4B,MAAA,EAAOC,KAAK,GACnB,CAACO,MAAA,GAASlC,SAAA,GAAY;UAAA,GAFX2B,KAGd;QAEJ,CAAC;MAAA,CACH;IAEJ;EACF,GAAG,CAAC1C,QAAA,EAAUa,MAAA,EAAQC,SAAA,EAAWL,WAAA,EAAaM,SAAA,EAAWH,SAAA,EAAWc,MAAM,CAAC;EAE3E,MAAM0B,GAAA,GAAmB;IACvBF,OAAA,EAAS;IACTG,UAAA,EAAY;IACZC,MAAA,EAAQ,CAAC9B,QAAA,GAAW,YAAY;IAChC,GAAGtB,MAAA,CAAOqD;EACZ;EAEA,OACE,eAAA9D,IAAA,CAAAF,QAAA;IACES,QAAA,kBAAAR,GAAA,CAACnB,EAAA,CAAGmF,KAAA,EAAH;MACCzD,GAAA,EAAKd,SAAA,CAAUwC,QAAA,EAAU1B,GAAG;MAC5B0D,IAAA,EAAK;MACL,eAAW;MACXC,QAAA,EAAU;MACVrD,EAAA;MACAT,IAAA;MACAY,IAAA;MACAF,MAAA;MACAC,QAAA;MACAqC,KAAA,EAAO;QACLe,MAAA,EAAQ;QACRC,IAAA,EAAM;QACNC,MAAA,EAAQ;QACRC,KAAA,EAAO;QACPC,MAAA,EAAQ;QACRC,OAAA,EAAS;QACTC,QAAA,EAAU;QACVC,UAAA,EAAY;QACZC,QAAA,EAAU;MACZ;MACAjD,QAAA;MACA,iBAAeD,YAAA;MACd,GAAG/B,UAAA,CAAWoC,IAAA,EAAM5C,qBAAqB;IAAA,CAC5C,GAEA,eAAAc,GAAA,CAACnB,EAAA,CAAG+F,GAAA,EAAH;MACCrE,GAAA;MACAK,SAAA,EAAWvB,EAAA,CAAG,iBAAiBuB,SAAS;MACxCiE,EAAA,GAAI3C,MAAA,oBAAAA,MAAA,CAAQU,MAAA,KAAUxB,SAAA,GAAY,aAAa;MAC9C,GAAGU,IAAA;MACJgD,KAAA,EAAOlB,GAAA;MACPM,QAAA,EAAU;MACV,oBAAkB5E,QAAA,CAAS,EAAC4C,MAAA,oBAAAA,MAAA,CAAQU,MAAA,CAAM;MAC1ChB,OAAA,EAASrC,UAAA,CAAWsC,WAAA,EAAaD,OAAO;MAEvCpB,QAAA,EAAAsC;IAAA,CACH;EAAA,CACF;AAEJ,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}