{"ast":null,"code":"\"use client\";\n\nimport { use_autosize_default } from \"./chunk-H3EGLDRH.mjs\";\n\n// src/textarea.tsx\nimport { ui, forwardRef, omitThemeProps, useComponentStyle } from \"@yamada-ui/core\";\nimport { useFormControlProps } from \"@yamada-ui/form-control\";\nimport { addDomEvent, assignRef, createdDom, cx, handlerAll, mergeRefs, noop, useSafeLayoutEffect, useUpdateEffect } from \"@yamada-ui/utils\";\nimport { useRef } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Textarea = forwardRef((props, ref) => {\n  var _a, _b;\n  const [{\n    h,\n    height,\n    minH,\n    minHeight,\n    maxH,\n    maxHeight,\n    ...styles\n  }, mergedProps] = useComponentStyle(\"Textarea\", props);\n  let {\n    className,\n    rows,\n    resize = \"none\",\n    autosize,\n    maxRows = Infinity,\n    minRows = 1,\n    resizeRef,\n    onChange,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  rest = useFormControlProps(rest);\n  const isBrowser = createdDom();\n  const textareaRef = useRef(null);\n  const value = (_b = (_a = textareaRef.current) == null ? void 0 : _a.value) != null ? _b : \"\";\n  const resizeTextarea = use_autosize_default(textareaRef, maxRows, minRows);\n  let css;\n  if (rows || autosize) {\n    css = styles;\n  } else {\n    css = {\n      h,\n      height,\n      minH,\n      minHeight,\n      maxH,\n      maxHeight,\n      ...styles\n    };\n  }\n  useSafeLayoutEffect(() => {\n    if (!isBrowser || !autosize) return;\n    resizeTextarea();\n    const unsubscribeResize = addDomEvent(window, \"resize\", resizeTextarea);\n    const unsubscribeLoadingdone = addDomEvent(document.fonts, \"loadingdone\", resizeTextarea);\n    return () => {\n      unsubscribeResize();\n      unsubscribeLoadingdone();\n    };\n  }, []);\n  useUpdateEffect(() => {\n    if (!autosize) return;\n    resizeTextarea();\n  }, [value]);\n  assignRef(resizeRef, resizeTextarea);\n  return /* @__PURE__ */jsx(ui.textarea, {\n    ref: mergeRefs(ref, textareaRef),\n    className: cx(\"ui-textarea\", className),\n    __css: css,\n    resize,\n    rows,\n    onChange: handlerAll(autosize ? resizeTextarea : noop, onChange),\n    ...rest\n  });\n});\nexport { Textarea };","map":{"version":3,"names":["ui","forwardRef","omitThemeProps","useComponentStyle","useFormControlProps","addDomEvent","assignRef","createdDom","cx","handlerAll","mergeRefs","noop","useSafeLayoutEffect","useUpdateEffect","useRef","jsx","Textarea","props","ref","_a","_b","h","height","minH","minHeight","maxH","maxHeight","styles","mergedProps","className","rows","resize","autosize","maxRows","Infinity","minRows","resizeRef","onChange","rest","isBrowser","textareaRef","value","current","resizeTextarea","use_autosize_default","css","unsubscribeResize","window","unsubscribeLoadingdone","document","fonts","textarea","__css"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\textarea\\src\\textarea.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  ColorModeToken,\n  CSS,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport { useFormControlProps } from \"@yamada-ui/form-control\"\nimport {\n  addDomEvent,\n  assignRef,\n  createdDom,\n  cx,\n  handlerAll,\n  mergeRefs,\n  noop,\n  useSafeLayoutEffect,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type { ForwardedRef } from \"react\"\nimport { useRef } from \"react\"\nimport useAutosize from \"./use-autosize\"\n\ntype TextareaOptions = {\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * If `true`, the Textarea height auto-adjusts to text height.\n   */\n  autosize?: boolean\n  /**\n   * Autosize up to maxRows rows.\n   *\n   * @default Infinity\n   */\n  maxRows?: number\n  /**\n   * Autosize up to minRows rows.\n   *\n   * @default 1\n   */\n  minRows?: number\n  /**\n   * Ref to a resize function.\n   */\n  resizeRef?: ForwardedRef<() => void>\n}\n\nexport type TextareaProps = Omit<\n  HTMLUIProps<\"textarea\">,\n  \"disabled\" | \"required\" | \"readOnly\"\n> &\n  ThemeProps<\"Textarea\"> &\n  TextareaOptions &\n  FormControlOptions\n\n/**\n * `Textarea` is a component used to obtain multi-line text input.\n *\n * @see Docs https://yamada-ui.com/components/forms/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const [\n    { h, height, minH, minHeight, maxH, maxHeight, ...styles },\n    mergedProps,\n  ] = useComponentStyle(\"Textarea\", props)\n  let {\n    className,\n    rows,\n    resize = \"none\",\n    autosize,\n    maxRows = Infinity,\n    minRows = 1,\n    resizeRef,\n    onChange,\n    ...rest\n  } = omitThemeProps(mergedProps)\n  rest = useFormControlProps(rest)\n\n  const isBrowser = createdDom()\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  const value = textareaRef.current?.value ?? \"\"\n  const resizeTextarea = useAutosize(textareaRef, maxRows, minRows)\n\n  let css: CSSUIObject\n\n  if (rows || autosize) {\n    css = styles\n  } else {\n    css = { h, height, minH, minHeight, maxH, maxHeight, ...styles }\n  }\n\n  useSafeLayoutEffect(() => {\n    if (!isBrowser || !autosize) return\n\n    resizeTextarea()\n\n    const unsubscribeResize = addDomEvent(window, \"resize\", resizeTextarea)\n    const unsubscribeLoadingdone = addDomEvent(\n      document.fonts,\n      \"loadingdone\",\n      resizeTextarea,\n    )\n\n    return () => {\n      unsubscribeResize()\n      unsubscribeLoadingdone()\n    }\n  }, [])\n\n  useUpdateEffect(() => {\n    if (!autosize) return\n    resizeTextarea()\n  }, [value])\n\n  assignRef(resizeRef, resizeTextarea)\n\n  return (\n    <ui.textarea\n      ref={mergeRefs(ref, textareaRef)}\n      className={cx(\"ui-textarea\", className)}\n      __css={css}\n      resize={resize}\n      rows={rows}\n      onChange={handlerAll(autosize ? resizeTextarea : noop, onChange)}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;;;AAOA,SACEA,EAAA,EACAC,UAAA,EACAC,cAAA,EACAC,iBAAA,QACK;AAEP,SAASC,mBAAA,QAA2B;AACpC,SACEC,WAAA,EACAC,SAAA,EACAC,UAAA,EACAC,EAAA,EACAC,UAAA,EACAC,SAAA,EACAC,IAAA,EACAC,mBAAA,EACAC,eAAA,QACK;AAEP,SAASC,MAAA,QAAc;AAwGnB,SAAAC,GAAA;AAzDG,IAAMC,QAAA,GAAWf,UAAA,CAAsC,CAACgB,KAAA,EAAOC,GAAA,KAAQ;EA1E9E,IAAAC,EAAA,EAAAC,EAAA;EA2EE,MAAM,CACJ;IAAEC,CAAA;IAAGC,MAAA;IAAQC,IAAA;IAAMC,SAAA;IAAWC,IAAA;IAAMC,SAAA;IAAW,GAAGC;EAAO,GACzDC,WAAA,CACF,GAAIzB,iBAAA,CAAkB,YAAYc,KAAK;EACvC,IAAI;IACFY,SAAA;IACAC,IAAA;IACAC,MAAA,GAAS;IACTC,QAAA;IACAC,OAAA,GAAUC,QAAA;IACVC,OAAA,GAAU;IACVC,SAAA;IACAC,QAAA;IACA,GAAGC;EACL,IAAIpC,cAAA,CAAe0B,WAAW;EAC9BU,IAAA,GAAOlC,mBAAA,CAAoBkC,IAAI;EAE/B,MAAMC,SAAA,GAAYhC,UAAA,CAAW;EAC7B,MAAMiC,WAAA,GAAc1B,MAAA,CAA4B,IAAI;EACpD,MAAM2B,KAAA,IAAQrB,EAAA,IAAAD,EAAA,GAAAqB,WAAA,CAAYE,OAAA,KAAZ,gBAAAvB,EAAA,CAAqBsB,KAAA,KAArB,OAAArB,EAAA,GAA8B;EAC5C,MAAMuB,cAAA,GAAiBC,oBAAA,CAAYJ,WAAA,EAAaP,OAAA,EAASE,OAAO;EAEhE,IAAIU,GAAA;EAEJ,IAAIf,IAAA,IAAQE,QAAA,EAAU;IACpBa,GAAA,GAAMlB,MAAA;EACR,OAAO;IACLkB,GAAA,GAAM;MAAExB,CAAA;MAAGC,MAAA;MAAQC,IAAA;MAAMC,SAAA;MAAWC,IAAA;MAAMC,SAAA;MAAW,GAAGC;IAAO;EACjE;EAEAf,mBAAA,CAAoB,MAAM;IACxB,IAAI,CAAC2B,SAAA,IAAa,CAACP,QAAA,EAAU;IAE7BW,cAAA,CAAe;IAEf,MAAMG,iBAAA,GAAoBzC,WAAA,CAAY0C,MAAA,EAAQ,UAAUJ,cAAc;IACtE,MAAMK,sBAAA,GAAyB3C,WAAA,CAC7B4C,QAAA,CAASC,KAAA,EACT,eACAP,cACF;IAEA,OAAO,MAAM;MACXG,iBAAA,CAAkB;MAClBE,sBAAA,CAAuB;IACzB;EACF,GAAG,EAAE;EAELnC,eAAA,CAAgB,MAAM;IACpB,IAAI,CAACmB,QAAA,EAAU;IACfW,cAAA,CAAe;EACjB,GAAG,CAACF,KAAK,CAAC;EAEVnC,SAAA,CAAU8B,SAAA,EAAWO,cAAc;EAEnC,OACE,eAAA5B,GAAA,CAACf,EAAA,CAAGmD,QAAA,EAAH;IACCjC,GAAA,EAAKR,SAAA,CAAUQ,GAAA,EAAKsB,WAAW;IAC/BX,SAAA,EAAWrB,EAAA,CAAG,eAAeqB,SAAS;IACtCuB,KAAA,EAAOP,GAAA;IACPd,MAAA;IACAD,IAAA;IACAO,QAAA,EAAU5B,UAAA,CAAWuB,QAAA,GAAWW,cAAA,GAAiBhC,IAAA,EAAM0B,QAAQ;IAC9D,GAAGC;EAAA,CACN;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}