{"ast":null,"code":"// src/calc.ts\nvar toExpression = (operator, ...args) => args.join(` ${operator} `).replace(/calc/g, \"\");\nvar add = (...args) => `calc(${toExpression(\"+\", ...args)})`;\nvar subtract = (...args) => `calc(${toExpression(\"-\", ...args)})`;\nvar multiply = (...args) => `calc(${toExpression(\"*\", ...args)})`;\nvar divide = (...args) => `calc(${toExpression(\"/\", ...args)})`;\nvar negate = value => {\n  if (value != null && !isNaN(parseFloat(value.toString()))) return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  return multiply(value, -1);\n};\nvar calc = Object.assign(x => ({\n  add: (...args) => calc(add(x, ...args)),\n  subtract: (...args) => calc(subtract(x, ...args)),\n  multiply: (...args) => calc(multiply(x, ...args)),\n  divide: (...args) => calc(divide(x, ...args)),\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"names":["toExpression","operator","args","join","replace","add","subtract","multiply","divide","negate","value","isNaN","parseFloat","toString","String","startsWith","slice","calc","Object","assign","x"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\utils\\src\\calc.ts"],"sourcesContent":["type Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nexport type Operand = string | number\n\nconst toExpression = (operator: Operator, ...args: Operand[]) =>\n  args.join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...args: Operand[]) => `calc(${toExpression(\"+\", ...args)})`\n\nconst subtract = (...args: Operand[]) => `calc(${toExpression(\"-\", ...args)})`\n\nconst multiply = (...args: Operand[]) => `calc(${toExpression(\"*\", ...args)})`\n\nconst divide = (...args: Operand[]) => `calc(${toExpression(\"/\", ...args)})`\n\nconst negate = (value: Operand) => {\n  if (value != null && !isNaN(parseFloat(value.toString())))\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n\n  return multiply(value, -1)\n}\n\ntype Calc = {\n  add: (...args: Operand[]) => Calc\n  subtract: (...args: Operand[]) => Calc\n  multiply: (...args: Operand[]) => Calc\n  divide: (...args: Operand[]) => Calc\n  negate: () => Calc\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): Calc => ({\n    add: (...args) => calc(add(x, ...args)),\n    subtract: (...args) => calc(subtract(x, ...args)),\n    multiply: (...args) => calc(multiply(x, ...args)),\n    divide: (...args) => calc(divide(x, ...args)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"mappings":";AAIA,IAAMA,YAAA,GAAeA,CAACC,QAAA,KAAuBC,IAAA,KAC3CA,IAAA,CAAKC,IAAA,CAAK,IAAIF,QAAQ,GAAG,EAAEG,OAAA,CAAQ,SAAS,EAAE;AAEhD,IAAMC,GAAA,GAAMA,CAAA,GAAIH,IAAA,KAAoB,QAAQF,YAAA,CAAa,KAAK,GAAGE,IAAI,CAAC;AAEtE,IAAMI,QAAA,GAAWA,CAAA,GAAIJ,IAAA,KAAoB,QAAQF,YAAA,CAAa,KAAK,GAAGE,IAAI,CAAC;AAE3E,IAAMK,QAAA,GAAWA,CAAA,GAAIL,IAAA,KAAoB,QAAQF,YAAA,CAAa,KAAK,GAAGE,IAAI,CAAC;AAE3E,IAAMM,MAAA,GAASA,CAAA,GAAIN,IAAA,KAAoB,QAAQF,YAAA,CAAa,KAAK,GAAGE,IAAI,CAAC;AAEzE,IAAMO,MAAA,GAAUC,KAAA,IAAmB;EACjC,IAAIA,KAAA,IAAS,QAAQ,CAACC,KAAA,CAAMC,UAAA,CAAWF,KAAA,CAAMG,QAAA,CAAS,CAAC,CAAC,GACtD,OAAOC,MAAA,CAAOJ,KAAK,EAAEK,UAAA,CAAW,GAAG,IAAID,MAAA,CAAOJ,KAAK,EAAEM,KAAA,CAAM,CAAC,IAAI,IAAIN,KAAK;EAE3E,OAAOH,QAAA,CAASG,KAAA,EAAO,EAAE;AAC3B;AAWO,IAAMO,IAAA,GAAOC,MAAA,CAAOC,MAAA,CACxBC,CAAA,KAAsB;EACrBf,GAAA,EAAKA,CAAA,GAAIH,IAAA,KAASe,IAAA,CAAKZ,GAAA,CAAIe,CAAA,EAAG,GAAGlB,IAAI,CAAC;EACtCI,QAAA,EAAUA,CAAA,GAAIJ,IAAA,KAASe,IAAA,CAAKX,QAAA,CAASc,CAAA,EAAG,GAAGlB,IAAI,CAAC;EAChDK,QAAA,EAAUA,CAAA,GAAIL,IAAA,KAASe,IAAA,CAAKV,QAAA,CAASa,CAAA,EAAG,GAAGlB,IAAI,CAAC;EAChDM,MAAA,EAAQA,CAAA,GAAIN,IAAA,KAASe,IAAA,CAAKT,MAAA,CAAOY,CAAA,EAAG,GAAGlB,IAAI,CAAC;EAC5CO,MAAA,EAAQA,CAAA,KAAMQ,IAAA,CAAKR,MAAA,CAAOW,CAAC,CAAC;EAC5BP,QAAA,EAAUA,CAAA,KAAMO,CAAA,CAAEP,QAAA,CAAS;AAC7B,IACA;EACER,GAAA;EACAC,QAAA;EACAC,QAAA;EACAC,MAAA;EACAC;AACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}