{"ast":null,"code":"\"use client\";\n\nimport { EnvironmentProvider } from \"./chunk-4UFTGRYY.mjs\";\n\n// src/ui-provider.tsx\nimport { ThemeProvider, ColorModeProvider, ResetStyle, GlobalStyle } from \"@yamada-ui/core\";\nimport { LoadingProvider } from \"@yamada-ui/loading\";\nimport { MotionConfig } from \"@yamada-ui/motion\";\nimport { NoticeProvider } from \"@yamada-ui/notice\";\nimport { defaultTheme, defaultConfig } from \"@yamada-ui/theme\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar UIProvider = ({\n  theme = defaultTheme,\n  config = defaultConfig,\n  disableResetStyle,\n  disableGlobalStyle,\n  colorModeManager,\n  colorModeStorageKey,\n  themeSchemeManager,\n  themeSchemeStorageKey,\n  environment,\n  disableEnvironment,\n  children\n}) => {\n  var _a;\n  return /* @__PURE__ */jsx(ThemeProvider, {\n    theme,\n    config,\n    themeSchemeManager,\n    storageKey: themeSchemeStorageKey,\n    children: /* @__PURE__ */jsx(ColorModeProvider, {\n      colorModeManager,\n      storageKey: colorModeStorageKey,\n      config,\n      children: /* @__PURE__ */jsx(EnvironmentProvider, {\n        environment,\n        disabled: disableEnvironment,\n        children: /* @__PURE__ */jsx(MotionConfig, {\n          ...((_a = config.motion) == null ? void 0 : _a.config),\n          children: /* @__PURE__ */jsxs(LoadingProvider, {\n            ...config.loading,\n            children: [!disableResetStyle ? /* @__PURE__ */jsx(ResetStyle, {}) : null, !disableGlobalStyle ? /* @__PURE__ */jsx(GlobalStyle, {}) : null, children, /* @__PURE__ */jsx(NoticeProvider, {\n              ...config.notice\n            })]\n          })\n        })\n      })\n    })\n  });\n};\nexport { UIProvider };","map":{"version":3,"names":["ThemeProvider","ColorModeProvider","ResetStyle","GlobalStyle","LoadingProvider","MotionConfig","NoticeProvider","defaultTheme","defaultConfig","jsx","jsxs","UIProvider","theme","config","disableResetStyle","disableGlobalStyle","colorModeManager","colorModeStorageKey","themeSchemeManager","themeSchemeStorageKey","environment","disableEnvironment","children","_a","storageKey","EnvironmentProvider","disabled","motion","loading","notice"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\providers\\src\\ui-provider.tsx"],"sourcesContent":["import type {\n  ThemeConfig,\n  ColorModeManager,\n  ThemeSchemeManager,\n} from \"@yamada-ui/core\"\nimport {\n  ThemeProvider,\n  ColorModeProvider,\n  ResetStyle,\n  GlobalStyle,\n} from \"@yamada-ui/core\"\nimport { LoadingProvider } from \"@yamada-ui/loading\"\nimport { MotionConfig } from \"@yamada-ui/motion\"\nimport { NoticeProvider } from \"@yamada-ui/notice\"\nimport { defaultTheme, defaultConfig } from \"@yamada-ui/theme\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode } from \"react\"\nimport type { Environment } from \"./environment-provider\"\nimport { EnvironmentProvider } from \"./environment-provider\"\n\nexport type UIProviderProps = {\n  /**\n   * The theme of the yamada ui.\n   *\n   * If omitted, uses the default theme provided by yamada ui.\n   */\n  theme?: Dict\n  /**\n   * The config of the yamada ui.\n   *\n   * If omitted, uses the default config provided by yamada ui.\n   */\n  config?: ThemeConfig\n  /**\n   * If `true`, `ResetStyle` component will be mounted to help reset browser styles.\n   *\n   * @default true\n   */\n  disableResetStyle?: boolean\n  /**\n   * If `true`, will not mount the global styles defined in the theme.\n   *\n   * @default true\n   */\n  disableGlobalStyle?: boolean\n  /**\n   * Manager to persist a user's color mode preference.\n   *\n   * Omit if you don't render server-side.\n   * For SSR, choose `colorModeManager.ssr`.\n   *\n   * @default 'colorModeManager.localStorage'\n   */\n  colorModeManager?: ColorModeManager\n  /**\n   * Manager to persist a user's theme scheme preference.\n   *\n   * Omit if you don't render server-side.\n   * For SSR, choose `themeSchemeManager.ssr`.\n   *\n   * @default 'themeSchemeManager.localStorage'\n   */\n  themeSchemeManager?: ThemeSchemeManager\n  /**\n   * The environment `window` and `document` to be used by all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `UIProvider` is rendered.\n   */\n  environment?: Environment\n  /**\n   * If `true`,  the use of automatic window and document detection will be disabled.\n   *\n   * @default false\n   */\n  disableEnvironment?: boolean\n  /**\n   * Application content.\n   */\n  children: ReactNode\n  /**\n   * Key of value saved in storage.\n   * By default, it is saved to `local storage`.\n   */\n  colorModeStorageKey?: string\n  /**\n   * Key of value saved in storage.\n   * By default, it is saved to `local storage`.\n   */\n  themeSchemeStorageKey?: string\n}\n\n/**\n * The global provider that must be added to make all Yamada UI components work correctly.\n */\nexport const UIProvider: FC<UIProviderProps> = ({\n  theme = defaultTheme,\n  config = defaultConfig,\n  disableResetStyle,\n  disableGlobalStyle,\n  colorModeManager,\n  colorModeStorageKey,\n  themeSchemeManager,\n  themeSchemeStorageKey,\n  environment,\n  disableEnvironment,\n  children,\n}) => {\n  return (\n    <ThemeProvider\n      theme={theme}\n      config={config}\n      themeSchemeManager={themeSchemeManager}\n      storageKey={themeSchemeStorageKey}\n    >\n      <ColorModeProvider\n        colorModeManager={colorModeManager}\n        storageKey={colorModeStorageKey}\n        config={config}\n      >\n        <EnvironmentProvider\n          environment={environment}\n          disabled={disableEnvironment}\n        >\n          <MotionConfig {...config.motion?.config}>\n            <LoadingProvider {...config.loading}>\n              {!disableResetStyle ? <ResetStyle /> : null}\n              {!disableGlobalStyle ? <GlobalStyle /> : null}\n\n              {children}\n\n              <NoticeProvider {...config.notice} />\n            </LoadingProvider>\n          </MotionConfig>\n        </EnvironmentProvider>\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n"],"mappings":";;;;;AAKA,SACEA,aAAA,EACAC,iBAAA,EACAC,UAAA,EACAC,WAAA,QACK;AACP,SAASC,eAAA,QAAuB;AAChC,SAASC,YAAA,QAAoB;AAC7B,SAASC,cAAA,QAAsB;AAC/B,SAASC,YAAA,EAAcC,aAAA,QAAqB;AA+GhC,SACwBC,GAAA,EADxBC,IAAA;AA9BL,IAAMC,UAAA,GAAkCA,CAAC;EAC9CC,KAAA,GAAQL,YAAA;EACRM,MAAA,GAASL,aAAA;EACTM,iBAAA;EACAC,kBAAA;EACAC,gBAAA;EACAC,mBAAA;EACAC,kBAAA;EACAC,qBAAA;EACAC,WAAA;EACAC,kBAAA;EACAC;AACF,MAAM;EA3GN,IAAAC,EAAA;EA4GE,OACE,eAAAd,GAAA,CAACT,aAAA;IACCY,KAAA;IACAC,MAAA;IACAK,kBAAA;IACAM,UAAA,EAAYL,qBAAA;IAEZG,QAAA,iBAAAb,GAAA,CAACR,iBAAA;MACCe,gBAAA;MACAQ,UAAA,EAAYP,mBAAA;MACZJ,MAAA;MAEAS,QAAA,iBAAAb,GAAA,CAACgB,mBAAA;QACCL,WAAA;QACAM,QAAA,EAAUL,kBAAA;QAEVC,QAAA,iBAAAb,GAAA,CAACJ,YAAA;UAAc,KAAGkB,EAAA,GAAAV,MAAA,CAAOc,MAAA,KAAP,gBAAAJ,EAAA,CAAeV,MAAA;UAC/BS,QAAA,iBAAAZ,IAAA,CAACN,eAAA;YAAiB,GAAGS,MAAA,CAAOe,OAAA;YACzBN,QAAA,IAACR,iBAAA,GAAoB,eAAAL,GAAA,CAACP,UAAA,IAAW,IAAK,MACtC,CAACa,kBAAA,GAAqB,eAAAN,GAAA,CAACN,WAAA,IAAY,IAAK,MAExCmB,QAAA,EAED,eAAAb,GAAA,CAACH,cAAA;cAAgB,GAAGO,MAAA,CAAOgB;YAAA,CAAQ;UAAA,CACrC;QAAA,CACF;MAAA,CACF;IAAA,CACF;EAAA,CACF;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}