{"ast":null,"code":"\"use client\";\n\n// src/text.tsx\nimport { ui, forwardRef, omitThemeProps, useComponentStyle } from \"@yamada-ui/core\";\nimport { cx, filterUndefined } from \"@yamada-ui/utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef((props, ref) => {\n  const [css, mergedProps] = useComponentStyle(\"Text\", props);\n  const {\n    className,\n    align: textAlign,\n    decoration: textDecoration,\n    casing: textTransform,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  const textProps = filterUndefined({\n    textAlign,\n    textDecoration,\n    textTransform\n  });\n  return /* @__PURE__ */jsx(ui.p, {\n    ref,\n    className: cx(\"ui-text\", className),\n    __css: css,\n    ...textProps,\n    ...rest\n  });\n});\nexport { Text };","map":{"version":3,"names":["ui","forwardRef","omitThemeProps","useComponentStyle","cx","filterUndefined","jsx","Text","props","ref","css","mergedProps","className","align","textAlign","decoration","textDecoration","casing","textTransform","rest","textProps","p","__css"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\typography\\src\\text.tsx"],"sourcesContent":["import type { HTMLUIProps, ThemeProps, CSSUIProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport { cx, filterUndefined } from \"@yamada-ui/utils\"\n\ntype TextOptions = {\n  /**\n   * The CSS `text-align` property.\n   */\n  align?: CSSUIProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property.\n   */\n  decoration?: CSSUIProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property.\n   */\n  casing?: CSSUIProps[\"textTransform\"]\n}\n\nexport type TextProps = HTMLUIProps<\"p\"> & ThemeProps<\"Text\"> & TextOptions\n\n/**\n * `Text` is a component that represents a paragraph of text. By default, it renders a `p` element.\n *\n * @see Docs https://yamada-ui.com/components/typography/text\n */\nexport const Text = forwardRef<TextProps, \"p\">((props, ref) => {\n  const [css, mergedProps] = useComponentStyle(\"Text\", props)\n  const {\n    className,\n    align: textAlign,\n    decoration: textDecoration,\n    casing: textTransform,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const textProps = filterUndefined({\n    textAlign,\n    textDecoration,\n    textTransform,\n  })\n\n  return (\n    <ui.p\n      ref={ref}\n      className={cx(\"ui-text\", className)}\n      __css={css}\n      {...textProps}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;AACA,SACEA,EAAA,EACAC,UAAA,EACAC,cAAA,EACAC,iBAAA,QACK;AACP,SAASC,EAAA,EAAIC,eAAA,QAAuB;AAyChC,SAAAC,GAAA;AAjBG,IAAMC,IAAA,GAAON,UAAA,CAA2B,CAACO,KAAA,EAAOC,GAAA,KAAQ;EAC7D,MAAM,CAACC,GAAA,EAAKC,WAAW,IAAIR,iBAAA,CAAkB,QAAQK,KAAK;EAC1D,MAAM;IACJI,SAAA;IACAC,KAAA,EAAOC,SAAA;IACPC,UAAA,EAAYC,cAAA;IACZC,MAAA,EAAQC,aAAA;IACR,GAAGC;EACL,IAAIjB,cAAA,CAAeS,WAAW;EAE9B,MAAMS,SAAA,GAAYf,eAAA,CAAgB;IAChCS,SAAA;IACAE,cAAA;IACAE;EACF,CAAC;EAED,OACE,eAAAZ,GAAA,CAACN,EAAA,CAAGqB,CAAA,EAAH;IACCZ,GAAA;IACAG,SAAA,EAAWR,EAAA,CAAG,WAAWQ,SAAS;IAClCU,KAAA,EAAOZ,GAAA;IACN,GAAGU,SAAA;IACH,GAAGD;EAAA,CACN;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}