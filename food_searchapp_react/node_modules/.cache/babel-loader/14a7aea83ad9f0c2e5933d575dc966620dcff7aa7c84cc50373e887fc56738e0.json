{"ast":null,"code":"\"use client\";\n\n// src/file-button.tsx\nimport { Button } from \"@yamada-ui/button\";\nimport { ui, forwardRef } from \"@yamada-ui/core\";\nimport { formControlProperties, useFormControlProps } from \"@yamada-ui/form-control\";\nimport { assignRef, cx, handlerAll, isFunction, isNull, mergeRefs, pickObject } from \"@yamada-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar FileButton = forwardRef((_ref, ref) => {\n  let {\n    className,\n    resetRef,\n    as: As,\n    children,\n    ...props\n  } = _ref;\n  const {\n    id,\n    name,\n    accept,\n    multiple,\n    form,\n    \"aria-readonly\": ariaReadonly,\n    onClick: onClickProp,\n    onChange: onChangeProp,\n    ...rest\n  } = useFormControlProps(props);\n  const {\n    disabled,\n    readOnly,\n    required,\n    \"aria-invalid\": isInvalid\n  } = rest;\n  const inputRef = useRef(null);\n  const onClick = useCallback(() => {\n    var _a;\n    if (disabled || readOnly) return;\n    (_a = inputRef.current) == null ? void 0 : _a.click();\n  }, [disabled, readOnly]);\n  const onChange = useCallback(ev => {\n    const files = !isNull(ev.currentTarget.files) ? Array.from(ev.currentTarget.files) : void 0;\n    onChangeProp == null ? void 0 : onChangeProp(files);\n  }, [onChangeProp]);\n  const onReset = useCallback(() => {\n    if (inputRef.current) inputRef.current.value = \"\";\n  }, []);\n  if (!isFunction(children)) {\n    const Component = As || Button;\n    children = /* @__PURE__ */jsx(Component, {\n      className: cx(\"ui-file-button\", className),\n      ...rest,\n      onClick: handlerAll(onClickProp, onClick),\n      children\n    });\n  }\n  assignRef(resetRef, onReset);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(ui.input, {\n      ref: mergeRefs(inputRef, ref),\n      type: \"file\",\n      \"aria-hidden\": true,\n      tabIndex: -1,\n      id,\n      name,\n      form,\n      accept,\n      multiple,\n      style: {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\"\n      },\n      onChange,\n      \"aria-readonly\": ariaReadonly,\n      ...pickObject(rest, formControlProperties)\n    }), isFunction(children) ? children({\n      onClick,\n      disabled,\n      readOnly,\n      required,\n      isDisabled: disabled,\n      isReadOnly: readOnly,\n      isRequired: required,\n      isInvalid\n    }) : children]\n  });\n});\nexport { FileButton };","map":{"version":3,"names":["Button","ui","forwardRef","formControlProperties","useFormControlProps","assignRef","cx","handlerAll","isFunction","isNull","mergeRefs","pickObject","useCallback","useRef","Fragment","jsx","jsxs","FileButton","_ref","ref","className","resetRef","as","As","children","props","id","name","accept","multiple","form","ariaReadonly","onClick","onClickProp","onChange","onChangeProp","rest","disabled","readOnly","required","isInvalid","inputRef","_a","current","click","ev","files","currentTarget","Array","from","onReset","value","Component","input","type","tabIndex","style","border","clip","height","width","margin","padding","overflow","whiteSpace","position","isDisabled","isReadOnly","isRequired"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\file-button\\src\\file-button.tsx"],"sourcesContent":["import type { ButtonProps } from \"@yamada-ui/button\"\nimport { Button } from \"@yamada-ui/button\"\nimport type { ColorModeToken, CSS } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  formControlProperties,\n  useFormControlProps,\n} from \"@yamada-ui/form-control\"\nimport {\n  assignRef,\n  cx,\n  handlerAll,\n  isFunction,\n  isNull,\n  mergeRefs,\n  pickObject,\n} from \"@yamada-ui/utils\"\nimport type { ChangeEvent, ForwardedRef, ReactNode } from \"react\"\nimport { useCallback, useRef } from \"react\"\n\ntype Props = {\n  onClick: () => void\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n} & FormControlOptions\n\ntype FileButtonOptions = {\n  /**\n   * The border color when the button is invalid.\n   */\n  errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * Function to be called when a file change event occurs.\n   */\n  onChange?: (files: File[] | undefined) => void\n  children?: ReactNode | ((props: Props) => ReactNode)\n  /**\n   * Ref to a reset function.\n   */\n  resetRef?: ForwardedRef<() => void>\n}\n\ntype InputProps = Partial<Pick<HTMLInputElement, \"accept\" | \"multiple\">>\n\nexport type FileButtonProps = Omit<ButtonProps, \"onChange\" | \"children\"> &\n  InputProps &\n  FileButtonOptions &\n  FormControlOptions\n\n/**\n * `FileButton` is a button component used for users to select files.\n *\n * @see Docs https://yamada-ui.com/components/forms/file-button\n */\nexport const FileButton = forwardRef<FileButtonProps, \"input\">(\n  ({ className, resetRef, as: As, children, ...props }, ref) => {\n    const {\n      id,\n      name,\n      accept,\n      multiple,\n      form,\n      \"aria-readonly\": ariaReadonly,\n      onClick: onClickProp,\n      onChange: onChangeProp,\n      ...rest\n    } = useFormControlProps(props)\n\n    const { disabled, readOnly, required, \"aria-invalid\": isInvalid } = rest\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const onClick = useCallback(() => {\n      if (disabled || readOnly) return\n\n      inputRef.current?.click()\n    }, [disabled, readOnly])\n\n    const onChange = useCallback(\n      (ev: ChangeEvent<HTMLInputElement>) => {\n        const files = !isNull(ev.currentTarget.files)\n          ? Array.from(ev.currentTarget.files)\n          : undefined\n\n        onChangeProp?.(files)\n      },\n      [onChangeProp],\n    )\n\n    const onReset = useCallback(() => {\n      if (inputRef.current) inputRef.current.value = \"\"\n    }, [])\n\n    if (!isFunction(children)) {\n      const Component = As || Button\n\n      children = (\n        <Component\n          className={cx(\"ui-file-button\", className)}\n          {...rest}\n          onClick={handlerAll(onClickProp, onClick)}\n        >\n          {children}\n        </Component>\n      ) as ReactNode\n    }\n\n    assignRef(resetRef, onReset)\n\n    return (\n      <>\n        <ui.input\n          ref={mergeRefs(inputRef, ref)}\n          type=\"file\"\n          aria-hidden\n          tabIndex={-1}\n          id={id}\n          name={name}\n          form={form}\n          accept={accept}\n          multiple={multiple}\n          style={{\n            border: \"0px\",\n            clip: \"rect(0px, 0px, 0px, 0px)\",\n            height: \"1px\",\n            width: \"1px\",\n            margin: \"-1px\",\n            padding: \"0px\",\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            position: \"absolute\",\n          }}\n          onChange={onChange}\n          aria-readonly={ariaReadonly}\n          {...pickObject(rest, formControlProperties)}\n        />\n\n        {isFunction(children)\n          ? children({\n              onClick,\n              disabled,\n              readOnly,\n              required,\n              isDisabled: disabled,\n              isReadOnly: readOnly,\n              isRequired: required,\n              isInvalid,\n            })\n          : children}\n      </>\n    )\n  },\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}