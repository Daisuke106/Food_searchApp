{"ast":null,"code":"\"use client\";\n\n// src/native-select.tsx\nimport { ui, forwardRef, useMultiComponentStyle, omitThemeProps, layoutStyleProperties } from \"@yamada-ui/core\";\nimport { formControlProperties, useFormControlProps } from \"@yamada-ui/form-control\";\nimport { ChevronIcon } from \"@yamada-ui/icon\";\nimport { createContext, cx, splitObject, getValidChildren, isValidElement, pickObject, omitObject } from \"@yamada-ui/utils\";\nimport { cloneElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar [NativeSelectProvider, useNativeSelect] = createContext({\n  name: \"NativeSelectContext\",\n  errorMessage: `useNativeSelect returned is 'undefined'. Seems you forgot to wrap the components in \"<NativeSelect />\"`\n});\nvar NativeSelect = forwardRef((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"NativeSelect\", props);\n  let {\n    className,\n    children,\n    placeholderInOptions = true,\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    items = [],\n    placeholder,\n    containerProps,\n    iconProps,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  rest = useFormControlProps(rest);\n  const {\n    \"aria-readonly\": _ariaReadonly,\n    ...formControlProps\n  } = pickObject(rest, formControlProperties);\n  const [layoutProps, selectProps] = splitObject(omitObject(rest, [\"aria-readonly\"]), layoutStyleProperties);\n  let computedChildren = [];\n  if (!children && items.length) {\n    computedChildren = items.map((item, i) => {\n      if (\"value\" in item) {\n        const {\n          label,\n          value,\n          ...props2\n        } = item;\n        return /* @__PURE__ */jsx(NativeOption, {\n          value,\n          ...props2,\n          children: label\n        }, i);\n      } else if (\"items\" in item) {\n        const {\n          label,\n          items: items2 = [],\n          ...props2\n        } = item;\n        return /* @__PURE__ */jsx(NativeOptionGroup, {\n          label,\n          ...props2,\n          children: items2.map(({\n            label: label2,\n            value,\n            ...props3\n          }, i2) => /* @__PURE__ */jsx(NativeOption, {\n            value,\n            ...props3,\n            children: label2\n          }, i2))\n        }, i);\n      }\n    }).filter(Boolean);\n  }\n  return /* @__PURE__ */jsx(NativeSelectProvider, {\n    value: styles,\n    children: /* @__PURE__ */jsxs(ui.div, {\n      className: \"ui-select\",\n      __css: {\n        position: \"relative\",\n        w: \"100%\",\n        h: \"fit-content\",\n        color,\n        ...styles.container\n      },\n      ...layoutProps,\n      ...containerProps,\n      ...formControlProps,\n      children: [/* @__PURE__ */jsxs(ui.select, {\n        ref,\n        className: cx(\"ui-select__field\", className),\n        __css: {\n          pe: \"2rem\",\n          h: h != null ? h : height,\n          minH: minH != null ? minH : minHeight,\n          ...styles.field\n        },\n        ...selectProps,\n        children: [placeholder ? /* @__PURE__ */jsx(NativeOption, {\n          value: \"\",\n          hidden: !placeholderInOptions,\n          children: placeholder\n        }) : null, children != null ? children : computedChildren]\n      }), /* @__PURE__ */jsx(NativeSelectIcon, {\n        ...iconProps,\n        ...formControlProps\n      })]\n    })\n  });\n});\nvar NativeSelectIcon = ({\n  className,\n  children,\n  ...rest\n}) => {\n  const styles = useNativeSelect();\n  const css = {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    ...styles.icon\n  };\n  const validChildren = getValidChildren(children);\n  const cloneChildren = validChildren.map(child => cloneElement(child, {\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  }));\n  return /* @__PURE__ */jsx(ui.div, {\n    className: cx(\"ui-select__icon\", className),\n    __css: css,\n    ...rest,\n    children: isValidElement(children) ? cloneChildren : /* @__PURE__ */jsx(ChevronIcon, {})\n  });\n};\nvar NativeOptionGroup = forwardRef((props, ref) => /* @__PURE__ */jsx(ui.optgroup, {\n  ref,\n  ...props\n}));\nvar NativeOption = forwardRef((props, ref) => /* @__PURE__ */jsx(ui.option, {\n  ref,\n  ...props\n}));\nexport { NativeSelect, NativeOptionGroup, NativeOption };","map":{"version":3,"names":["ui","forwardRef","useMultiComponentStyle","omitThemeProps","layoutStyleProperties","formControlProperties","useFormControlProps","ChevronIcon","createContext","cx","splitObject","getValidChildren","isValidElement","pickObject","omitObject","cloneElement","jsx","jsxs","NativeSelectProvider","useNativeSelect","name","errorMessage","NativeSelect","props","ref","styles","mergedProps","className","children","placeholderInOptions","color","h","height","minH","minHeight","items","placeholder","containerProps","iconProps","rest","_ariaReadonly","formControlProps","layoutProps","selectProps","computedChildren","length","map","item","i","label","value","props2","NativeOption","items2","NativeOptionGroup","label2","props3","i2","filter","Boolean","div","__css","position","w","container","select","pe","field","hidden","NativeSelectIcon","css","display","alignItems","justifyContent","pointerEvents","top","transform","icon","validChildren","cloneChildren","child","focusable","style","width","optgroup","option"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\native-select\\src\\native-select.tsx"],"sourcesContent":["import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  layoutStyleProperties,\n} from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  formControlProperties,\n  useFormControlProps,\n} from \"@yamada-ui/form-control\"\nimport { ChevronIcon } from \"@yamada-ui/icon\"\nimport {\n  createContext,\n  cx,\n  splitObject,\n  getValidChildren,\n  isValidElement,\n  pickObject,\n  omitObject,\n} from \"@yamada-ui/utils\"\nimport type {\n  DetailedHTMLProps,\n  FC,\n  OptionHTMLAttributes,\n  ReactElement,\n} from \"react\"\nimport { cloneElement } from \"react\"\n\ntype NativeSelectBaseItem = Omit<\n  DetailedHTMLProps<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>,\n  \"label\" | \"children\" | \"value\"\n> & { label?: string }\n\ntype Value = DetailedHTMLProps<\n  OptionHTMLAttributes<HTMLOptionElement>,\n  HTMLOptionElement\n>[\"value\"]\n\ntype NativeSelectItemWithValue = NativeSelectBaseItem & { value?: Value }\n\ntype NativeSelectItemWithItems = NativeSelectBaseItem & {\n  items?: NativeSelectItemWithValue[]\n}\n\nexport type NativeSelectItem = NativeSelectItemWithValue &\n  NativeSelectItemWithItems\n\ntype NativeSelectContext = Record<string, CSSUIObject>\n\nconst [NativeSelectProvider, useNativeSelect] =\n  createContext<NativeSelectContext>({\n    name: \"NativeSelectContext\",\n    errorMessage: `useNativeSelect returned is 'undefined'. Seems you forgot to wrap the components in \"<NativeSelect />\"`,\n  })\n\ntype NativeSelectOptions = {\n  /**\n   * If provided, generate options based on items.\n   *\n   * @default '[]'\n   */\n  items?: NativeSelectItem[]\n  /**\n   * The placeholder for select.\n   */\n  placeholder?: string\n  /**\n   * If `true`, include placeholders in options.\n   *\n   * @default true\n   */\n  placeholderInOptions?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for icon element.\n   */\n  iconProps?: HTMLUIProps<\"div\">\n}\n\nexport type NativeSelectProps = Omit<HTMLUIProps<\"select\">, \"size\"> &\n  ThemeProps<\"NativeSelect\"> &\n  NativeSelectOptions &\n  FormControlOptions\n\n/**\n * `NativeSelect` is a component used for allowing users to select one option from a list. It displays a native dropdown list provided by the browser (user agent).\n *\n * @see Docs https://yamada-ui.com/components/forms/native-select\n */\nexport const NativeSelect = forwardRef<NativeSelectProps, \"select\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"NativeSelect\", props)\n    let {\n      className,\n      children,\n      placeholderInOptions = true,\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      items = [],\n      placeholder,\n      containerProps,\n      iconProps,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    rest = useFormControlProps(rest)\n\n    const { \"aria-readonly\": _ariaReadonly, ...formControlProps } = pickObject(\n      rest,\n      formControlProperties,\n    )\n    const [layoutProps, selectProps] = splitObject(\n      omitObject(rest, [\"aria-readonly\"]),\n      layoutStyleProperties,\n    )\n\n    let computedChildren: ReactElement[] = []\n\n    if (!children && items.length) {\n      computedChildren = items\n        .map((item, i) => {\n          if (\"value\" in item) {\n            const { label, value, ...props } = item\n\n            return (\n              <NativeOption key={i} value={value} {...props}>\n                {label}\n              </NativeOption>\n            )\n          } else if (\"items\" in item) {\n            const { label, items = [], ...props } = item\n\n            return (\n              <NativeOptionGroup key={i} label={label} {...props}>\n                {items.map(({ label, value, ...props }, i) => (\n                  <NativeOption key={i} value={value} {...props}>\n                    {label}\n                  </NativeOption>\n                ))}\n              </NativeOptionGroup>\n            )\n          }\n        })\n        .filter(Boolean) as ReactElement[]\n    }\n\n    return (\n      <NativeSelectProvider value={styles}>\n        <ui.div\n          className=\"ui-select\"\n          __css={{\n            position: \"relative\",\n            w: \"100%\",\n            h: \"fit-content\",\n            color,\n            ...styles.container,\n          }}\n          {...layoutProps}\n          {...containerProps}\n          {...formControlProps}\n        >\n          <ui.select\n            ref={ref}\n            className={cx(\"ui-select__field\", className)}\n            __css={{\n              pe: \"2rem\",\n              h: h ?? height,\n              minH: minH ?? minHeight,\n              ...styles.field,\n            }}\n            {...selectProps}\n          >\n            {placeholder ? (\n              <NativeOption value=\"\" hidden={!placeholderInOptions}>\n                {placeholder}\n              </NativeOption>\n            ) : null}\n            {children ?? computedChildren}\n          </ui.select>\n\n          <NativeSelectIcon {...iconProps} {...formControlProps} />\n        </ui.div>\n      </NativeSelectProvider>\n    )\n  },\n)\n\ntype NativeSelectIconProps = HTMLUIProps<\"div\">\n\nconst NativeSelectIcon: FC<NativeSelectIconProps> = ({\n  className,\n  children,\n  ...rest\n}) => {\n  const styles = useNativeSelect()\n\n  const css: CSSUIObject = {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    ...styles.icon,\n  }\n\n  const validChildren = getValidChildren(children)\n\n  const cloneChildren = validChildren.map((child) =>\n    cloneElement(child, {\n      focusable: false,\n      \"aria-hidden\": true,\n      style: {\n        width: \"1em\",\n        height: \"1em\",\n        color: \"currentColor\",\n      },\n    }),\n  )\n\n  return (\n    <ui.div className={cx(\"ui-select__icon\", className)} __css={css} {...rest}>\n      {isValidElement(children) ? cloneChildren : <ChevronIcon />}\n    </ui.div>\n  )\n}\n\nexport type NativeOptionGroupProps = HTMLUIProps<\"optgroup\">\n\nexport const NativeOptionGroup = forwardRef<NativeOptionGroupProps, \"optgroup\">(\n  (props, ref) => <ui.optgroup ref={ref} {...props} />,\n)\n\nexport type NativeOptionProps = Omit<HTMLUIProps<\"option\">, \"children\"> & {\n  children?: string\n}\n\nexport const NativeOption = forwardRef<NativeOptionProps, \"option\">(\n  (props, ref) => <ui.option ref={ref} {...props} />,\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}