{"ast":null,"code":"\"use client\";\n\n// src/circle-progress.tsx\nimport { ui, forwardRef } from \"@yamada-ui/core\";\nimport { useAnimation } from \"@yamada-ui/use-animation\";\nimport { useToken } from \"@yamada-ui/use-token\";\nimport { useValue } from \"@yamada-ui/use-value\";\nimport { cx, valueToPercent } from \"@yamada-ui/utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar CircleProgress = forwardRef((_ref, ref) => {\n  let {\n    className,\n    children,\n    size = \"6rem\",\n    thickness = \"0.625rem\",\n    color = \"primary\",\n    trackColor = \"border\",\n    value = 0,\n    min = 0,\n    max = 100,\n    isAnimation = false,\n    isRounded,\n    speed = [\"1.4s\", \"2s\"],\n    ...rest\n  } = _ref;\n  var _a, _b;\n  size = (_a = useToken(\"sizes\", useValue(size))) != null ? _a : size;\n  thickness = (_b = useToken(\"sizes\", useValue(thickness))) != null ? _b : thickness;\n  const isTransparent = value === 0 && !isAnimation;\n  const percent = valueToPercent(value, min, max);\n  const interval = !isAnimation ? percent * 2.64 : void 0;\n  const animation = useAnimation({\n    keyframes: {\n      \"0%\": {\n        strokeDasharray: \"1, 400\",\n        strokeDashoffset: \"0\"\n      },\n      \"50%\": {\n        strokeDasharray: \"400, 400\",\n        strokeDashoffset: \"-100\"\n      },\n      \"100%\": {\n        strokeDasharray: \"400, 400\",\n        strokeDashoffset: \"-260\"\n      }\n    },\n    duration: typeof speed[0] === \"string\" ? speed[0] : \"\".concat(speed[0], \"s\"),\n    iterationCount: \"infinite\",\n    timingFunction: \"linear\"\n  });\n  const css = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  const props = isAnimation ? {\n    animation\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray: interval == null ? void 0 : \"\".concat(interval, \" \").concat(264 - interval),\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  return /* @__PURE__ */jsxs(ui.div, {\n    ref,\n    className: cx(\"ui-circle-progress\", className),\n    __css: css,\n    ...rest,\n    children: [/* @__PURE__ */jsxs(Shape, {\n      size,\n      isAnimation,\n      speed,\n      children: [/* @__PURE__ */jsx(Circle, {\n        stroke: trackColor,\n        strokeWidth: thickness\n      }), /* @__PURE__ */jsx(Circle, {\n        stroke: color,\n        strokeWidth: thickness,\n        strokeLinecap: isRounded ? \"round\" : void 0,\n        opacity: isTransparent ? 0 : void 0,\n        ...props\n      })]\n    }), children]\n  });\n});\nvar Circle = _ref2 => {\n  let {\n    ...rest\n  } = _ref2;\n  return /* @__PURE__ */jsx(ui.circle, {\n    cx: 50,\n    cy: 50,\n    r: 42,\n    fill: \"transparent\",\n    ...rest\n  });\n};\nvar Shape = _ref3 => {\n  let {\n    size,\n    isAnimation,\n    speed,\n    ...rest\n  } = _ref3;\n  const animation = useAnimation({\n    keyframes: {\n      \"0%\": {\n        transform: \"rotate(0deg)\"\n      },\n      \"100%\": {\n        transform: \"rotate(360deg)\"\n      }\n    },\n    duration: typeof speed[1] === \"string\" ? speed[1] : \"\".concat(speed[1], \"s\"),\n    iterationCount: \"infinite\",\n    timingFunction: \"linear\"\n  });\n  const css = {\n    display: \"block\",\n    boxSize: size,\n    ...(isAnimation ? {\n      animation\n    } : {})\n  };\n  return /* @__PURE__ */jsx(ui.svg, {\n    viewBox: \"0 0 100 100\",\n    __css: css,\n    ...rest\n  });\n};\nvar CircleProgressLabel = ui(\"span\", {\n  baseStyle: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"100%\",\n    fontSize: \"0.25em\",\n    textAlign: \"center\"\n  }\n});\nexport { CircleProgress, CircleProgressLabel };","map":{"version":3,"names":["ui","forwardRef","useAnimation","useToken","useValue","cx","valueToPercent","jsx","jsxs","CircleProgress","_ref","ref","className","children","size","thickness","color","trackColor","value","min","max","isAnimation","isRounded","speed","rest","_a","_b","isTransparent","percent","interval","animation","keyframes","strokeDasharray","strokeDashoffset","duration","concat","iterationCount","timingFunction","css","display","position","verticalAlign","fontSize","props","transitionProperty","transitionDuration","transitionTimingFunction","div","__css","Shape","Circle","stroke","strokeWidth","strokeLinecap","opacity","_ref2","circle","cy","r","fill","_ref3","transform","boxSize","svg","viewBox","CircleProgressLabel","baseStyle","top","left","width","textAlign"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\progress\\src\\circle-progress.tsx"],"sourcesContent":["import type { HTMLUIProps, CSSUIObject, CSSUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { useAnimation } from \"@yamada-ui/use-animation\"\nimport { useToken } from \"@yamada-ui/use-token\"\nimport { useValue } from \"@yamada-ui/use-value\"\nimport { cx, valueToPercent } from \"@yamada-ui/utils\"\nimport type { FC } from \"react\"\n\ntype CircleProgressOptions = {\n  /**\n   * The CSS `box-size` property.\n   *\n   * @default '6rem'\n   */\n  size?: CSSUIProps[\"boxSize\"]\n  /**\n   * The CSS `width` property.\n   *\n   * @default '0.625ewm'\n   */\n  thickness?: CSSUIProps[\"width\"]\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'primary'\n   */\n  color?: CSSUIProps[\"color\"]\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'border'\n   */\n  trackColor?: CSSUIProps[\"color\"]\n  /**\n   * The value of the progress.\n   *\n   * @default 0\n   */\n  value?: number\n  /**\n   * The minimum value of the progress.\n   *\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress.\n   *\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value` prop will be ignored.\n   *\n   * @default false\n   */\n  isAnimation?: boolean\n  /**\n   * The animation speed in seconds.\n   *\n   * @default '[1.4s, 2s]'\n   */\n  speed?: [string | number, string | number]\n}\n\nexport type CircleProgressProps = Omit<HTMLUIProps<\"div\">, \"color\"> &\n  CircleProgressOptions\n\n/**\n * `CircleProgress` is a component that displays progress in a circular progress bar.\n *\n * @see Docs https://yamada-ui.com/components/feedback/circle-progress\n */\nexport const CircleProgress = forwardRef<CircleProgressProps, \"div\">(\n  (\n    {\n      className,\n      children,\n      size = \"6rem\",\n      thickness = \"0.625rem\",\n      color = \"primary\",\n      trackColor = \"border\",\n      value = 0,\n      min = 0,\n      max = 100,\n      isAnimation = false,\n      isRounded,\n      speed = [\"1.4s\", \"2s\"],\n      ...rest\n    },\n    ref,\n  ) => {\n    size = (useToken(\"sizes\", useValue(size)) ?? size) as string | number\n    thickness = (useToken(\"sizes\", useValue(thickness)) ?? thickness) as\n      | string\n      | number\n\n    const isTransparent = value === 0 && !isAnimation\n    const percent = valueToPercent(value, min, max)\n\n    const interval = !isAnimation ? percent * 2.64 : undefined\n\n    const animation = useAnimation({\n      keyframes: {\n        \"0%\": {\n          strokeDasharray: \"1, 400\",\n          strokeDashoffset: \"0\",\n        },\n        \"50%\": {\n          strokeDasharray: \"400, 400\",\n          strokeDashoffset: \"-100\",\n        },\n        \"100%\": {\n          strokeDasharray: \"400, 400\",\n          strokeDashoffset: \"-260\",\n        },\n      },\n      duration: typeof speed[0] === \"string\" ? speed[0] : `${speed[0]}s`,\n      iterationCount: \"infinite\",\n      timingFunction: \"linear\",\n    })\n\n    const css: CSSUIObject = {\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      fontSize: size,\n    }\n\n    const props: CircleProps = isAnimation\n      ? {\n          animation,\n        }\n      : {\n          strokeDashoffset: 66,\n          strokeDasharray:\n            interval == null ? undefined : `${interval} ${264 - interval}`,\n          transitionProperty: \"stroke-dasharray, stroke\",\n          transitionDuration: \"0.6s\",\n          transitionTimingFunction: \"ease\",\n        }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-circle-progress\", className)}\n        __css={css}\n        {...rest}\n      >\n        <Shape size={size} isAnimation={isAnimation} speed={speed}>\n          <Circle stroke={trackColor} strokeWidth={thickness} />\n          <Circle\n            stroke={color}\n            strokeWidth={thickness}\n            strokeLinecap={isRounded ? \"round\" : undefined}\n            opacity={isTransparent ? 0 : undefined}\n            {...props}\n          />\n        </Shape>\n        {children}\n      </ui.div>\n    )\n  },\n)\n\ntype CircleProps = HTMLUIProps<\"circle\">\n\nconst Circle: FC<CircleProps> = ({ ...rest }) => (\n  <ui.circle cx={50} cy={50} r={42} fill=\"transparent\" {...rest} />\n)\n\ntype ShapeProps = Omit<HTMLUIProps<\"svg\">, \"speed\"> &\n  Pick<\n    Required<CircleProgressProps>,\n    \"children\" | \"size\" | \"isAnimation\" | \"speed\"\n  >\n\nconst Shape: FC<ShapeProps> = ({ size, isAnimation, speed, ...rest }) => {\n  const animation = useAnimation({\n    keyframes: {\n      \"0%\": {\n        transform: \"rotate(0deg)\",\n      },\n      \"100%\": {\n        transform: \"rotate(360deg)\",\n      },\n    },\n    duration: typeof speed[1] === \"string\" ? speed[1] : `${speed[1]}s`,\n    iterationCount: \"infinite\",\n    timingFunction: \"linear\",\n  })\n\n  const css: CSSUIObject = {\n    display: \"block\",\n    boxSize: size,\n    ...(isAnimation ? { animation } : {}),\n  }\n\n  return <ui.svg viewBox=\"0 0 100 100\" __css={css} {...rest} />\n}\n\nexport const CircleProgressLabel = ui(\"span\", {\n  baseStyle: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"100%\",\n    fontSize: \"0.25em\",\n    textAlign: \"center\",\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}