{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { isNumber, isString } from \"@yamada-ui/utils\";\nimport copy from \"copy-to-clipboard\";\nimport { useState, useCallback, useEffect } from \"react\";\nvar useClipboard = (defaultValue = \"\", timeoutOrOptions = {}) => {\n  const [hasCopied, setHasCopied] = useState(false);\n  const [value, setValue] = useState(defaultValue);\n  useEffect(() => setValue(defaultValue), [defaultValue]);\n  const {\n    timeout = 1500,\n    ...copyOptions\n  } = isNumber(timeoutOrOptions) ? {\n    timeout: timeoutOrOptions\n  } : timeoutOrOptions;\n  const onCopy = useCallback(newValue => {\n    if (!isString(newValue)) {\n      newValue = value;\n    } else {\n      setValue(newValue);\n    }\n    const hasCopied2 = copy(newValue, copyOptions);\n    setHasCopied(hasCopied2);\n  }, [value, copyOptions]);\n  useEffect(() => {\n    let timeoutId = null;\n    if (hasCopied) timeoutId = window.setTimeout(() => {\n      setHasCopied(false);\n    }, timeout);\n    return () => {\n      if (timeoutId) window.clearTimeout(timeoutId);\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value,\n    setValue,\n    onCopy,\n    hasCopied\n  };\n};\nexport { useClipboard };","map":{"version":3,"names":["isNumber","isString","copy","useState","useCallback","useEffect","useClipboard","defaultValue","timeoutOrOptions","hasCopied","setHasCopied","value","setValue","timeout","copyOptions","onCopy","newValue","hasCopied2","timeoutId","window","setTimeout","clearTimeout"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-clipboard\\src\\index.ts"],"sourcesContent":["import { isNumber, isString } from \"@yamada-ui/utils\"\nimport copy from \"copy-to-clipboard\"\nimport { useState, useCallback, useEffect } from \"react\"\n\nexport type UseClipboardOptions = {\n  timeout?: number\n  format?: string\n}\n\n/**\n * `useClipboard` is a custom hook that performs the operation of copying a value to the clipboard.\n *\n * @see Docs https://yamada-ui.com/hooks/use-clipboard\n */\nexport const useClipboard = (\n  defaultValue: string = \"\",\n  timeoutOrOptions: number | UseClipboardOptions = {},\n) => {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const [value, setValue] = useState(defaultValue)\n\n  useEffect(() => setValue(defaultValue), [defaultValue])\n\n  const { timeout = 1500, ...copyOptions } = isNumber(timeoutOrOptions)\n    ? { timeout: timeoutOrOptions }\n    : timeoutOrOptions\n\n  const onCopy = useCallback(\n    (newValue?: any) => {\n      if (!isString(newValue)) {\n        newValue = value\n      } else {\n        setValue(newValue)\n      }\n\n      const hasCopied = copy(newValue, copyOptions)\n\n      setHasCopied(hasCopied)\n    },\n    [value, copyOptions],\n  )\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied)\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n\n    return () => {\n      if (timeoutId) window.clearTimeout(timeoutId)\n    }\n  }, [timeout, hasCopied])\n\n  return {\n    value,\n    setValue,\n    onCopy,\n    hasCopied,\n  }\n}\n"],"mappings":";;;AAAA,SAASA,QAAA,EAAUC,QAAA,QAAgB;AACnC,OAAOC,IAAA,MAAU;AACjB,SAASC,QAAA,EAAUC,WAAA,EAAaC,SAAA,QAAiB;AAY1C,IAAMC,YAAA,GAAeA,CAC1BC,YAAA,GAAuB,IACvBC,gBAAA,GAAiD,CAAC,MAC/C;EACH,MAAM,CAACC,SAAA,EAAWC,YAAY,IAAIP,QAAA,CAAS,KAAK;EAEhD,MAAM,CAACQ,KAAA,EAAOC,QAAQ,IAAIT,QAAA,CAASI,YAAY;EAE/CF,SAAA,CAAU,MAAMO,QAAA,CAASL,YAAY,GAAG,CAACA,YAAY,CAAC;EAEtD,MAAM;IAAEM,OAAA,GAAU;IAAM,GAAGC;EAAY,IAAId,QAAA,CAASQ,gBAAgB,IAChE;IAAEK,OAAA,EAASL;EAAiB,IAC5BA,gBAAA;EAEJ,MAAMO,MAAA,GAASX,WAAA,CACZY,QAAA,IAAmB;IAClB,IAAI,CAACf,QAAA,CAASe,QAAQ,GAAG;MACvBA,QAAA,GAAWL,KAAA;IACb,OAAO;MACLC,QAAA,CAASI,QAAQ;IACnB;IAEA,MAAMC,UAAA,GAAYf,IAAA,CAAKc,QAAA,EAAUF,WAAW;IAE5CJ,YAAA,CAAaO,UAAS;EACxB,GACA,CAACN,KAAA,EAAOG,WAAW,CACrB;EAEAT,SAAA,CAAU,MAAM;IACd,IAAIa,SAAA,GAA2B;IAE/B,IAAIT,SAAA,EACFS,SAAA,GAAYC,MAAA,CAAOC,UAAA,CAAW,MAAM;MAClCV,YAAA,CAAa,KAAK;IACpB,GAAGG,OAAO;IAEZ,OAAO,MAAM;MACX,IAAIK,SAAA,EAAWC,MAAA,CAAOE,YAAA,CAAaH,SAAS;IAC9C;EACF,GAAG,CAACL,OAAA,EAASJ,SAAS,CAAC;EAEvB,OAAO;IACLE,KAAA;IACAC,QAAA;IACAG,MAAA;IACAN;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}