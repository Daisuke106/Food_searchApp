{"ast":null,"code":"\"use client\";\n\n// src/divider.tsx\nimport { ui, forwardRef, useComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { cx } from \"@yamada-ui/utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Divider = forwardRef((props, ref) => {\n  const [{\n    borderRightWidth,\n    borderLeftWidth,\n    borderTopWidth,\n    borderBottomWidth,\n    borderWidth,\n    borderStyle,\n    borderColor,\n    ...styles\n  }, mergedProps] = useComponentStyle(\"Divider\", props);\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  const customStyles = useMemo(() => ({\n    vertical: {\n      border: \"0\",\n      borderStyle,\n      borderColor,\n      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n      height: \"100%\"\n    },\n    horizontal: {\n      border: \"0\",\n      borderStyle,\n      borderColor,\n      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n      width: \"100%\"\n    }\n  }), [borderBottomWidth, borderColor, borderLeftWidth, borderRightWidth, borderStyle, borderTopWidth, borderWidth]);\n  const dividerStyles = useMemo(() => customStyles[orientation], [customStyles, orientation]);\n  const css = {\n    ...styles,\n    ...dividerStyles,\n    ...__css\n  };\n  return /* @__PURE__ */jsx(ui.hr, {\n    ref,\n    className: cx(\"ui-divider\", className),\n    __css: css,\n    ...rest\n  });\n});\nexport { Divider };","map":{"version":3,"names":["ui","forwardRef","useComponentStyle","omitThemeProps","cx","useMemo","jsx","Divider","props","ref","borderRightWidth","borderLeftWidth","borderTopWidth","borderBottomWidth","borderWidth","borderStyle","borderColor","styles","mergedProps","className","orientation","__css","rest","customStyles","vertical","border","height","horizontal","width","dividerStyles","css","hr"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\layouts\\src\\divider.tsx"],"sourcesContent":["import type { HTMLUIProps, ThemeProps, CSSUIObject } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useMemo } from \"react\"\n\ntype DividerOptions = {\n  /**\n   * The orientation of the divider.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n}\n\nexport type DividerProps = HTMLUIProps<\"hr\"> &\n  ThemeProps<\"Divider\"> &\n  DividerOptions\n\n/**\n * `Divider` is a component that represents a division between elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/divider\n */\nexport const Divider = forwardRef<DividerProps, \"hr\">((props, ref) => {\n  const [\n    {\n      borderRightWidth,\n      borderLeftWidth,\n      borderTopWidth,\n      borderBottomWidth,\n      borderWidth,\n      borderStyle,\n      borderColor,\n      ...styles\n    },\n    mergedProps,\n  ] = useComponentStyle(\"Divider\", props)\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const customStyles = useMemo(\n    () => ({\n      vertical: {\n        border: \"0\",\n        borderStyle,\n        borderColor,\n        borderLeftWidth:\n          borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n        height: \"100%\",\n      },\n      horizontal: {\n        border: \"0\",\n        borderStyle,\n        borderColor,\n        borderBottomWidth:\n          borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n        width: \"100%\",\n      },\n    }),\n    [\n      borderBottomWidth,\n      borderColor,\n      borderLeftWidth,\n      borderRightWidth,\n      borderStyle,\n      borderTopWidth,\n      borderWidth,\n    ],\n  )\n\n  const dividerStyles = useMemo(\n    () => customStyles[orientation],\n    [customStyles, orientation],\n  ) as CSSUIObject\n\n  const css = {\n    ...styles,\n    ...dividerStyles,\n    ...__css,\n  }\n\n  return (\n    <ui.hr\n      ref={ref}\n      className={cx(\"ui-divider\", className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;AACA,SACEA,EAAA,EACAC,UAAA,EACAC,iBAAA,EACAC,cAAA,QACK;AACP,SAASC,EAAA,QAAU;AACnB,SAASC,OAAA,QAAe;AAmFpB,SAAAC,GAAA;AA/DG,IAAMC,OAAA,GAAUN,UAAA,CAA+B,CAACO,KAAA,EAAOC,GAAA,KAAQ;EACpE,MAAM,CACJ;IACEC,gBAAA;IACAC,eAAA;IACAC,cAAA;IACAC,iBAAA;IACAC,WAAA;IACAC,WAAA;IACAC,WAAA;IACA,GAAGC;EACL,GACAC,WAAA,CACF,GAAIhB,iBAAA,CAAkB,WAAWM,KAAK;EACtC,MAAM;IACJW,SAAA;IACAC,WAAA,GAAc;IACdC,KAAA;IACA,GAAGC;EACL,IAAInB,cAAA,CAAee,WAAW;EAE9B,MAAMK,YAAA,GAAelB,OAAA,CACnB,OAAO;IACLmB,QAAA,EAAU;MACRC,MAAA,EAAQ;MACRV,WAAA;MACAC,WAAA;MACAL,eAAA,EACEA,eAAA,IAAmBD,gBAAA,IAAoBI,WAAA,IAAe;MACxDY,MAAA,EAAQ;IACV;IACAC,UAAA,EAAY;MACVF,MAAA,EAAQ;MACRV,WAAA;MACAC,WAAA;MACAH,iBAAA,EACEA,iBAAA,IAAqBD,cAAA,IAAkBE,WAAA,IAAe;MACxDc,KAAA,EAAO;IACT;EACF,IACA,CACEf,iBAAA,EACAG,WAAA,EACAL,eAAA,EACAD,gBAAA,EACAK,WAAA,EACAH,cAAA,EACAE,WAAA,CAEJ;EAEA,MAAMe,aAAA,GAAgBxB,OAAA,CACpB,MAAMkB,YAAA,CAAaH,WAAW,GAC9B,CAACG,YAAA,EAAcH,WAAW,CAC5B;EAEA,MAAMU,GAAA,GAAM;IACV,GAAGb,MAAA;IACH,GAAGY,aAAA;IACH,GAAGR;EACL;EAEA,OACE,eAAAf,GAAA,CAACN,EAAA,CAAG+B,EAAA,EAAH;IACCtB,GAAA;IACAU,SAAA,EAAWf,EAAA,CAAG,cAAce,SAAS;IACrCE,KAAA,EAAOS,GAAA;IACN,GAAGR;EAAA,CACN;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}