{"ast":null,"code":"import * as React from 'react';\n\n// This module exists to work around Webpack issue https://github.com/webpack/webpack/issues/14814\n\n// eslint-disable-next-line no-restricted-imports\n\nconst {\n  createElement,\n  createContext,\n  createRef,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} = React;\n\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\nconst useId = React[\"useId\".toString()];\nconst useLayoutEffect_do_not_use_directly = useLayoutEffect;\n\n// The \"contextmenu\" event is not supported as a PointerEvent in all browsers yet, so MouseEvent still need to be handled\n\nconst PanelGroupContext = createContext(null);\nPanelGroupContext.displayName = \"PanelGroupContext\";\nconst useIsomorphicLayoutEffect = useLayoutEffect_do_not_use_directly;\nconst wrappedUseId = typeof useId === \"function\" ? useId : () => null;\nlet counter = 0;\nfunction useUniqueId() {\n  let idFromParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  const idFromUseId = wrappedUseId();\n  const idRef = useRef(idFromParams || idFromUseId || null);\n  if (idRef.current === null) {\n    idRef.current = \"\" + counter++;\n  }\n  return idFromParams !== null && idFromParams !== void 0 ? idFromParams : idRef.current;\n}\nfunction PanelWithForwardedRef(_ref) {\n  let {\n    children,\n    className: classNameFromProps = \"\",\n    collapsedSize,\n    collapsible,\n    defaultSize,\n    forwardedRef,\n    id: idFromProps,\n    maxSize,\n    minSize,\n    onCollapse,\n    onExpand,\n    onResize,\n    order,\n    style: styleFromProps,\n    tagName: Type = \"div\",\n    ...rest\n  } = _ref;\n  const context = useContext(PanelGroupContext);\n  if (context === null) {\n    throw Error(\"Panel components must be rendered within a PanelGroup container\");\n  }\n  const {\n    collapsePanel,\n    expandPanel,\n    getPanelSize,\n    getPanelStyle,\n    groupId,\n    isPanelCollapsed,\n    reevaluatePanelConstraints,\n    registerPanel,\n    resizePanel,\n    unregisterPanel\n  } = context;\n  const panelId = useUniqueId(idFromProps);\n  const panelDataRef = useRef({\n    callbacks: {\n      onCollapse,\n      onExpand,\n      onResize\n    },\n    constraints: {\n      collapsedSize,\n      collapsible,\n      defaultSize,\n      maxSize,\n      minSize\n    },\n    id: panelId,\n    idIsFromProps: idFromProps !== undefined,\n    order\n  });\n  useRef({\n    didLogMissingDefaultSizeWarning: false\n  });\n  useIsomorphicLayoutEffect(() => {\n    const {\n      callbacks,\n      constraints\n    } = panelDataRef.current;\n    const prevConstraints = {\n      ...constraints\n    };\n    panelDataRef.current.id = panelId;\n    panelDataRef.current.idIsFromProps = idFromProps !== undefined;\n    panelDataRef.current.order = order;\n    callbacks.onCollapse = onCollapse;\n    callbacks.onExpand = onExpand;\n    callbacks.onResize = onResize;\n    constraints.collapsedSize = collapsedSize;\n    constraints.collapsible = collapsible;\n    constraints.defaultSize = defaultSize;\n    constraints.maxSize = maxSize;\n    constraints.minSize = minSize;\n\n    // If constraints have changed, we should revisit panel sizes.\n    // This is uncommon but may happen if people are trying to implement pixel based constraints.\n    if (prevConstraints.collapsedSize !== constraints.collapsedSize || prevConstraints.collapsible !== constraints.collapsible || prevConstraints.maxSize !== constraints.maxSize || prevConstraints.minSize !== constraints.minSize) {\n      reevaluatePanelConstraints(panelDataRef.current, prevConstraints);\n    }\n  });\n  useIsomorphicLayoutEffect(() => {\n    const panelData = panelDataRef.current;\n    registerPanel(panelData);\n    return () => {\n      unregisterPanel(panelData);\n    };\n  }, [order, panelId, registerPanel, unregisterPanel]);\n  useImperativeHandle(forwardedRef, () => ({\n    collapse: () => {\n      collapsePanel(panelDataRef.current);\n    },\n    expand: minSize => {\n      expandPanel(panelDataRef.current, minSize);\n    },\n    getId() {\n      return panelId;\n    },\n    getSize() {\n      return getPanelSize(panelDataRef.current);\n    },\n    isCollapsed() {\n      return isPanelCollapsed(panelDataRef.current);\n    },\n    isExpanded() {\n      return !isPanelCollapsed(panelDataRef.current);\n    },\n    resize: size => {\n      resizePanel(panelDataRef.current, size);\n    }\n  }), [collapsePanel, expandPanel, getPanelSize, isPanelCollapsed, panelId, resizePanel]);\n  const style = getPanelStyle(panelDataRef.current, defaultSize);\n  return createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    id: idFromProps,\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    // CSS selectors\n    \"data-panel\": \"\",\n    \"data-panel-collapsible\": collapsible || undefined,\n    \"data-panel-group-id\": groupId,\n    \"data-panel-id\": panelId,\n    \"data-panel-size\": parseFloat(\"\" + style.flexGrow).toFixed(1)\n  });\n}\nconst Panel = forwardRef((props, ref) => createElement(PanelWithForwardedRef, {\n  ...props,\n  forwardedRef: ref\n}));\nPanelWithForwardedRef.displayName = \"Panel\";\nPanel.displayName = \"forwardRef(Panel)\";\nlet currentCursorStyle = null;\nlet styleElement = null;\nfunction getCursorStyle(state, constraintFlags) {\n  if (constraintFlags) {\n    const horizontalMin = (constraintFlags & EXCEEDED_HORIZONTAL_MIN) !== 0;\n    const horizontalMax = (constraintFlags & EXCEEDED_HORIZONTAL_MAX) !== 0;\n    const verticalMin = (constraintFlags & EXCEEDED_VERTICAL_MIN) !== 0;\n    const verticalMax = (constraintFlags & EXCEEDED_VERTICAL_MAX) !== 0;\n    if (horizontalMin) {\n      if (verticalMin) {\n        return \"se-resize\";\n      } else if (verticalMax) {\n        return \"ne-resize\";\n      } else {\n        return \"e-resize\";\n      }\n    } else if (horizontalMax) {\n      if (verticalMin) {\n        return \"sw-resize\";\n      } else if (verticalMax) {\n        return \"nw-resize\";\n      } else {\n        return \"w-resize\";\n      }\n    } else if (verticalMin) {\n      return \"s-resize\";\n    } else if (verticalMax) {\n      return \"n-resize\";\n    }\n  }\n  switch (state) {\n    case \"horizontal\":\n      return \"ew-resize\";\n    case \"intersection\":\n      return \"move\";\n    case \"vertical\":\n      return \"ns-resize\";\n  }\n}\nfunction resetGlobalCursorStyle() {\n  if (styleElement !== null) {\n    document.head.removeChild(styleElement);\n    currentCursorStyle = null;\n    styleElement = null;\n  }\n}\nfunction setGlobalCursorStyle(state, constraintFlags) {\n  const style = getCursorStyle(state, constraintFlags);\n  if (currentCursorStyle === style) {\n    return;\n  }\n  currentCursorStyle = style;\n  if (styleElement === null) {\n    styleElement = document.createElement(\"style\");\n    document.head.appendChild(styleElement);\n  }\n  styleElement.innerHTML = \"*{cursor: \".concat(style, \"!important;}\");\n}\nfunction isKeyDown(event) {\n  return event.type === \"keydown\";\n}\nfunction isPointerEvent(event) {\n  return event.type.startsWith(\"pointer\");\n}\nfunction isMouseEvent(event) {\n  return event.type.startsWith(\"mouse\");\n}\nfunction getResizeEventCoordinates(event) {\n  if (isPointerEvent(event)) {\n    if (event.isPrimary) {\n      return {\n        x: event.clientX,\n        y: event.clientY\n      };\n    }\n  } else if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n  return {\n    x: Infinity,\n    y: Infinity\n  };\n}\nfunction getInputType() {\n  if (typeof matchMedia === \"function\") {\n    return matchMedia(\"(pointer:coarse)\").matches ? \"coarse\" : \"fine\";\n  }\n}\nfunction intersects(rectOne, rectTwo, strict) {\n  if (strict) {\n    return rectOne.x < rectTwo.x + rectTwo.width && rectOne.x + rectOne.width > rectTwo.x && rectOne.y < rectTwo.y + rectTwo.height && rectOne.y + rectOne.height > rectTwo.y;\n  } else {\n    return rectOne.x <= rectTwo.x + rectTwo.width && rectOne.x + rectOne.width >= rectTwo.x && rectOne.y <= rectTwo.y + rectTwo.height && rectOne.y + rectOne.height >= rectTwo.y;\n  }\n}\n\n// Forked from NPM stacking-order@2.0.0\n\n/**\n * Determine which of two nodes appears in front of the other —\n * if `a` is in front, returns 1, otherwise returns -1\n * @param {HTMLElement} a\n * @param {HTMLElement} b\n */\nfunction compare(a, b) {\n  if (a === b) throw new Error(\"Cannot compare node with itself\");\n  const ancestors = {\n    a: get_ancestors(a),\n    b: get_ancestors(b)\n  };\n  let common_ancestor;\n\n  // remove shared ancestors\n  while (ancestors.a.at(-1) === ancestors.b.at(-1)) {\n    a = ancestors.a.pop();\n    b = ancestors.b.pop();\n    common_ancestor = a;\n  }\n  assert(common_ancestor, \"Stacking order can only be calculated for elements with a common ancestor\");\n  const z_indexes = {\n    a: get_z_index(find_stacking_context(ancestors.a)),\n    b: get_z_index(find_stacking_context(ancestors.b))\n  };\n  if (z_indexes.a === z_indexes.b) {\n    const children = common_ancestor.childNodes;\n    const furthest_ancestors = {\n      a: ancestors.a.at(-1),\n      b: ancestors.b.at(-1)\n    };\n    let i = children.length;\n    while (i--) {\n      const child = children[i];\n      if (child === furthest_ancestors.a) return 1;\n      if (child === furthest_ancestors.b) return -1;\n    }\n  }\n  return Math.sign(z_indexes.a - z_indexes.b);\n}\nconst props = /\\b(?:position|zIndex|opacity|transform|webkitTransform|mixBlendMode|filter|webkitFilter|isolation)\\b/;\n\n/** @param {HTMLElement} node */\nfunction is_flex_item(node) {\n  var _get_parent;\n  // @ts-ignore\n  const display = getComputedStyle((_get_parent = get_parent(node)) !== null && _get_parent !== void 0 ? _get_parent : node).display;\n  return display === \"flex\" || display === \"inline-flex\";\n}\n\n/** @param {HTMLElement} node */\nfunction creates_stacking_context(node) {\n  const style = getComputedStyle(node);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n  if (style.position === \"fixed\") return true;\n  // Forked to fix upstream bug https://github.com/Rich-Harris/stacking-order/issues/3\n  // if (\n  //   (style.zIndex !== \"auto\" && style.position !== \"static\") ||\n  //   is_flex_item(node)\n  // )\n  if (style.zIndex !== \"auto\" && (style.position !== \"static\" || is_flex_item(node))) return true;\n  if (+style.opacity < 1) return true;\n  if (\"transform\" in style && style.transform !== \"none\") return true;\n  if (\"webkitTransform\" in style && style.webkitTransform !== \"none\") return true;\n  if (\"mixBlendMode\" in style && style.mixBlendMode !== \"normal\") return true;\n  if (\"filter\" in style && style.filter !== \"none\") return true;\n  if (\"webkitFilter\" in style && style.webkitFilter !== \"none\") return true;\n  if (\"isolation\" in style && style.isolation === \"isolate\") return true;\n  if (props.test(style.willChange)) return true;\n  // @ts-expect-error\n  if (style.webkitOverflowScrolling === \"touch\") return true;\n  return false;\n}\n\n/** @param {HTMLElement[]} nodes */\nfunction find_stacking_context(nodes) {\n  let i = nodes.length;\n  while (i--) {\n    const node = nodes[i];\n    assert(node, \"Missing node\");\n    if (creates_stacking_context(node)) return node;\n  }\n  return null;\n}\n\n/** @param {HTMLElement} node */\nfunction get_z_index(node) {\n  return node && Number(getComputedStyle(node).zIndex) || 0;\n}\n\n/** @param {HTMLElement} node */\nfunction get_ancestors(node) {\n  const ancestors = [];\n  while (node) {\n    ancestors.push(node);\n    // @ts-ignore\n    node = get_parent(node);\n  }\n  return ancestors; // [ node, ... <body>, <html>, document ]\n}\n\n/** @param {HTMLElement} node */\nfunction get_parent(node) {\n  const {\n    parentNode\n  } = node;\n  if (parentNode && parentNode instanceof ShadowRoot) {\n    return parentNode.host;\n  }\n  return parentNode;\n}\nconst EXCEEDED_HORIZONTAL_MIN = 0b0001;\nconst EXCEEDED_HORIZONTAL_MAX = 0b0010;\nconst EXCEEDED_VERTICAL_MIN = 0b0100;\nconst EXCEEDED_VERTICAL_MAX = 0b1000;\nconst isCoarsePointer = getInputType() === \"coarse\";\nlet intersectingHandles = [];\nlet isPointerDown = false;\nlet ownerDocumentCounts = new Map();\nlet panelConstraintFlags = new Map();\nconst registeredResizeHandlers = new Set();\nfunction registerResizeHandle(resizeHandleId, element, direction, hitAreaMargins, setResizeHandlerState) {\n  var _ownerDocumentCounts$;\n  const {\n    ownerDocument\n  } = element;\n  const data = {\n    direction,\n    element,\n    hitAreaMargins,\n    setResizeHandlerState\n  };\n  const count = (_ownerDocumentCounts$ = ownerDocumentCounts.get(ownerDocument)) !== null && _ownerDocumentCounts$ !== void 0 ? _ownerDocumentCounts$ : 0;\n  ownerDocumentCounts.set(ownerDocument, count + 1);\n  registeredResizeHandlers.add(data);\n  updateListeners();\n  return function unregisterResizeHandle() {\n    var _ownerDocumentCounts$2;\n    panelConstraintFlags.delete(resizeHandleId);\n    registeredResizeHandlers.delete(data);\n    const count = (_ownerDocumentCounts$2 = ownerDocumentCounts.get(ownerDocument)) !== null && _ownerDocumentCounts$2 !== void 0 ? _ownerDocumentCounts$2 : 1;\n    ownerDocumentCounts.set(ownerDocument, count - 1);\n    updateListeners();\n    if (count === 1) {\n      ownerDocumentCounts.delete(ownerDocument);\n    }\n  };\n}\nfunction handlePointerDown(event) {\n  const {\n    target\n  } = event;\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  isPointerDown = true;\n  recalculateIntersectingHandles({\n    target,\n    x,\n    y\n  });\n  updateListeners();\n  if (intersectingHandles.length > 0) {\n    updateResizeHandlerStates(\"down\", event);\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\nfunction handlePointerMove(event) {\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  if (!isPointerDown) {\n    const {\n      target\n    } = event;\n\n    // Recalculate intersecting handles whenever the pointer moves, except if it has already been pressed\n    // at that point, the handles may not move with the pointer (depending on constraints)\n    // but the same set of active handles should be locked until the pointer is released\n    recalculateIntersectingHandles({\n      target,\n      x,\n      y\n    });\n  }\n  updateResizeHandlerStates(\"move\", event);\n\n  // Update cursor based on return value(s) from active handles\n  updateCursor();\n  if (intersectingHandles.length > 0) {\n    event.preventDefault();\n  }\n}\nfunction handlePointerUp(event) {\n  const {\n    target\n  } = event;\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  panelConstraintFlags.clear();\n  isPointerDown = false;\n  if (intersectingHandles.length > 0) {\n    event.preventDefault();\n  }\n  updateResizeHandlerStates(\"up\", event);\n  recalculateIntersectingHandles({\n    target,\n    x,\n    y\n  });\n  updateCursor();\n  updateListeners();\n}\nfunction recalculateIntersectingHandles(_ref2) {\n  let {\n    target,\n    x,\n    y\n  } = _ref2;\n  intersectingHandles.splice(0);\n  let targetElement = null;\n  if (target instanceof HTMLElement) {\n    targetElement = target;\n  }\n  registeredResizeHandlers.forEach(data => {\n    const {\n      element: dragHandleElement,\n      hitAreaMargins\n    } = data;\n    const dragHandleRect = dragHandleElement.getBoundingClientRect();\n    const {\n      bottom,\n      left,\n      right,\n      top\n    } = dragHandleRect;\n    const margin = isCoarsePointer ? hitAreaMargins.coarse : hitAreaMargins.fine;\n    const eventIntersects = x >= left - margin && x <= right + margin && y >= top - margin && y <= bottom + margin;\n    if (eventIntersects) {\n      // TRICKY\n      // We listen for pointers events at the root in order to support hit area margins\n      // (determining when the pointer is close enough to an element to be considered a \"hit\")\n      // Clicking on an element \"above\" a handle (e.g. a modal) should prevent a hit though\n      // so at this point we need to compare stacking order of a potentially intersecting drag handle,\n      // and the element that was actually clicked/touched\n      if (targetElement !== null && dragHandleElement !== targetElement && !dragHandleElement.contains(targetElement) && !targetElement.contains(dragHandleElement) &&\n      // Calculating stacking order has a cost, so we should avoid it if possible\n      // That is why we only check potentially intersecting handles,\n      // and why we skip if the event target is within the handle's DOM\n      compare(targetElement, dragHandleElement) > 0) {\n        // If the target is above the drag handle, then we also need to confirm they overlap\n        // If they are beside each other (e.g. a panel and its drag handle) then the handle is still interactive\n        //\n        // It's not enough to compare only the target\n        // The target might be a small element inside of a larger container\n        // (For example, a SPAN or a DIV inside of a larger modal dialog)\n        let currentElement = targetElement;\n        let didIntersect = false;\n        while (currentElement) {\n          if (currentElement.contains(dragHandleElement)) {\n            break;\n          } else if (intersects(currentElement.getBoundingClientRect(), dragHandleRect, true)) {\n            didIntersect = true;\n            break;\n          }\n          currentElement = currentElement.parentElement;\n        }\n        if (didIntersect) {\n          return;\n        }\n      }\n      intersectingHandles.push(data);\n    }\n  });\n}\nfunction reportConstraintsViolation(resizeHandleId, flag) {\n  panelConstraintFlags.set(resizeHandleId, flag);\n}\nfunction updateCursor() {\n  let intersectsHorizontal = false;\n  let intersectsVertical = false;\n  intersectingHandles.forEach(data => {\n    const {\n      direction\n    } = data;\n    if (direction === \"horizontal\") {\n      intersectsHorizontal = true;\n    } else {\n      intersectsVertical = true;\n    }\n  });\n  let constraintFlags = 0;\n  panelConstraintFlags.forEach(flag => {\n    constraintFlags |= flag;\n  });\n  if (intersectsHorizontal && intersectsVertical) {\n    setGlobalCursorStyle(\"intersection\", constraintFlags);\n  } else if (intersectsHorizontal) {\n    setGlobalCursorStyle(\"horizontal\", constraintFlags);\n  } else if (intersectsVertical) {\n    setGlobalCursorStyle(\"vertical\", constraintFlags);\n  } else {\n    resetGlobalCursorStyle();\n  }\n}\nfunction updateListeners() {\n  ownerDocumentCounts.forEach((_, ownerDocument) => {\n    const {\n      body\n    } = ownerDocument;\n    body.removeEventListener(\"contextmenu\", handlePointerUp);\n    body.removeEventListener(\"pointerdown\", handlePointerDown);\n    body.removeEventListener(\"pointerleave\", handlePointerMove);\n    body.removeEventListener(\"pointermove\", handlePointerMove);\n  });\n  window.removeEventListener(\"pointerup\", handlePointerUp);\n  window.removeEventListener(\"pointercancel\", handlePointerUp);\n  if (registeredResizeHandlers.size > 0) {\n    if (isPointerDown) {\n      if (intersectingHandles.length > 0) {\n        ownerDocumentCounts.forEach((count, ownerDocument) => {\n          const {\n            body\n          } = ownerDocument;\n          if (count > 0) {\n            body.addEventListener(\"contextmenu\", handlePointerUp);\n            body.addEventListener(\"pointerleave\", handlePointerMove);\n            body.addEventListener(\"pointermove\", handlePointerMove);\n          }\n        });\n      }\n      window.addEventListener(\"pointerup\", handlePointerUp);\n      window.addEventListener(\"pointercancel\", handlePointerUp);\n    } else {\n      ownerDocumentCounts.forEach((count, ownerDocument) => {\n        const {\n          body\n        } = ownerDocument;\n        if (count > 0) {\n          body.addEventListener(\"pointerdown\", handlePointerDown, {\n            capture: true\n          });\n          body.addEventListener(\"pointermove\", handlePointerMove);\n        }\n      });\n    }\n  }\n}\nfunction updateResizeHandlerStates(action, event) {\n  registeredResizeHandlers.forEach(data => {\n    const {\n      setResizeHandlerState\n    } = data;\n    const isActive = intersectingHandles.includes(data);\n    setResizeHandlerState(action, isActive, event);\n  });\n}\nfunction assert(expectedCondition, message) {\n  if (!expectedCondition) {\n    console.error(message);\n    throw Error(message);\n  }\n}\nconst PRECISION = 10;\nfunction fuzzyCompareNumbers(actual, expected) {\n  let fractionDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PRECISION;\n  if (actual.toFixed(fractionDigits) === expected.toFixed(fractionDigits)) {\n    return 0;\n  } else {\n    return actual > expected ? 1 : -1;\n  }\n}\nfunction fuzzyNumbersEqual$1(actual, expected) {\n  let fractionDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PRECISION;\n  return fuzzyCompareNumbers(actual, expected, fractionDigits) === 0;\n}\nfunction fuzzyNumbersEqual(actual, expected, fractionDigits) {\n  return fuzzyCompareNumbers(actual, expected, fractionDigits) === 0;\n}\nfunction fuzzyLayoutsEqual(actual, expected, fractionDigits) {\n  if (actual.length !== expected.length) {\n    return false;\n  }\n  for (let index = 0; index < actual.length; index++) {\n    const actualSize = actual[index];\n    const expectedSize = expected[index];\n    if (!fuzzyNumbersEqual(actualSize, expectedSize, fractionDigits)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Panel size must be in percentages; pixel values should be pre-converted\nfunction resizePanel(_ref3) {\n  let {\n    panelConstraints: panelConstraintsArray,\n    panelIndex,\n    size\n  } = _ref3;\n  const panelConstraints = panelConstraintsArray[panelIndex];\n  assert(panelConstraints != null, \"Panel constraints not found for index \".concat(panelIndex));\n  let {\n    collapsedSize = 0,\n    collapsible,\n    maxSize = 100,\n    minSize = 0\n  } = panelConstraints;\n  if (fuzzyCompareNumbers(size, minSize) < 0) {\n    if (collapsible) {\n      // Collapsible panels should snap closed or open only once they cross the halfway point between collapsed and min size.\n      const halfwayPoint = (collapsedSize + minSize) / 2;\n      if (fuzzyCompareNumbers(size, halfwayPoint) < 0) {\n        size = collapsedSize;\n      } else {\n        size = minSize;\n      }\n    } else {\n      size = minSize;\n    }\n  }\n  size = Math.min(maxSize, size);\n  size = parseFloat(size.toFixed(PRECISION));\n  return size;\n}\n\n// All units must be in percentages; pixel values should be pre-converted\nfunction adjustLayoutByDelta(_ref4) {\n  let {\n    delta,\n    initialLayout,\n    panelConstraints: panelConstraintsArray,\n    pivotIndices,\n    prevLayout,\n    trigger\n  } = _ref4;\n  if (fuzzyNumbersEqual(delta, 0)) {\n    return initialLayout;\n  }\n  const nextLayout = [...initialLayout];\n  const [firstPivotIndex, secondPivotIndex] = pivotIndices;\n  assert(firstPivotIndex != null, \"Invalid first pivot index\");\n  assert(secondPivotIndex != null, \"Invalid second pivot index\");\n  let deltaApplied = 0;\n\n  // const DEBUG = [];\n  // DEBUG.push(`adjustLayoutByDelta()`);\n  // DEBUG.push(`  initialLayout: ${initialLayout.join(\", \")}`);\n  // DEBUG.push(`  prevLayout: ${prevLayout.join(\", \")}`);\n  // DEBUG.push(`  delta: ${delta}`);\n  // DEBUG.push(`  pivotIndices: ${pivotIndices.join(\", \")}`);\n  // DEBUG.push(`  trigger: ${trigger}`);\n  // DEBUG.push(\"\");\n\n  // A resizing panel affects the panels before or after it.\n  //\n  // A negative delta means the panel(s) immediately after the resize handle should grow/expand by decreasing its offset.\n  // Other panels may also need to shrink/contract (and shift) to make room, depending on the min weights.\n  //\n  // A positive delta means the panel(s) immediately before the resize handle should \"expand\".\n  // This is accomplished by shrinking/contracting (and shifting) one or more of the panels after the resize handle.\n\n  {\n    // If this is a resize triggered by a keyboard event, our logic for expanding/collapsing is different.\n    // We no longer check the halfway threshold because this may prevent the panel from expanding at all.\n    if (trigger === \"keyboard\") {\n      {\n        // Check if we should expand a collapsed panel\n        const index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n        const panelConstraints = panelConstraintsArray[index];\n        assert(panelConstraints, \"Panel constraints not found for index \".concat(index));\n        const {\n          collapsedSize = 0,\n          collapsible,\n          minSize = 0\n        } = panelConstraints;\n\n        // DEBUG.push(`edge case check 1: ${index}`);\n        // DEBUG.push(`  -> collapsible? ${collapsible}`);\n        if (collapsible) {\n          const prevSize = initialLayout[index];\n          assert(prevSize != null, \"Previous layout not found for panel index \".concat(index));\n          if (fuzzyNumbersEqual(prevSize, collapsedSize)) {\n            const localDelta = minSize - prevSize;\n            // DEBUG.push(`  -> expand delta: ${localDelta}`);\n\n            if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n              delta = delta < 0 ? 0 - localDelta : localDelta;\n              // DEBUG.push(`  -> delta: ${delta}`);\n            }\n          }\n        }\n      }\n      {\n        // Check if we should collapse a panel at its minimum size\n        const index = delta < 0 ? firstPivotIndex : secondPivotIndex;\n        const panelConstraints = panelConstraintsArray[index];\n        assert(panelConstraints, \"No panel constraints found for index \".concat(index));\n        const {\n          collapsedSize = 0,\n          collapsible,\n          minSize = 0\n        } = panelConstraints;\n\n        // DEBUG.push(`edge case check 2: ${index}`);\n        // DEBUG.push(`  -> collapsible? ${collapsible}`);\n        if (collapsible) {\n          const prevSize = initialLayout[index];\n          assert(prevSize != null, \"Previous layout not found for panel index \".concat(index));\n          if (fuzzyNumbersEqual(prevSize, minSize)) {\n            const localDelta = prevSize - collapsedSize;\n            // DEBUG.push(`  -> expand delta: ${localDelta}`);\n\n            if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n              delta = delta < 0 ? 0 - localDelta : localDelta;\n              // DEBUG.push(`  -> delta: ${delta}`);\n            }\n          }\n        }\n      }\n    }\n    // DEBUG.push(\"\");\n  }\n  {\n    // Pre-calculate max available delta in the opposite direction of our pivot.\n    // This will be the maximum amount we're allowed to expand/contract the panels in the primary direction.\n    // If this amount is less than the requested delta, adjust the requested delta.\n    // If this amount is greater than the requested delta, that's useful information too–\n    // as an expanding panel might change from collapsed to min size.\n\n    const increment = delta < 0 ? 1 : -1;\n    let index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n    let maxAvailableDelta = 0;\n\n    // DEBUG.push(\"pre calc...\");\n    while (true) {\n      const prevSize = initialLayout[index];\n      assert(prevSize != null, \"Previous layout not found for panel index \".concat(index));\n      const maxSafeSize = resizePanel({\n        panelConstraints: panelConstraintsArray,\n        panelIndex: index,\n        size: 100\n      });\n      const delta = maxSafeSize - prevSize;\n      // DEBUG.push(`  ${index}: ${prevSize} -> ${maxSafeSize}`);\n\n      maxAvailableDelta += delta;\n      index += increment;\n      if (index < 0 || index >= panelConstraintsArray.length) {\n        break;\n      }\n    }\n\n    // DEBUG.push(`  -> max available delta: ${maxAvailableDelta}`);\n    const minAbsDelta = Math.min(Math.abs(delta), Math.abs(maxAvailableDelta));\n    delta = delta < 0 ? 0 - minAbsDelta : minAbsDelta;\n    // DEBUG.push(`  -> adjusted delta: ${delta}`);\n    // DEBUG.push(\"\");\n  }\n  {\n    // Delta added to a panel needs to be subtracted from other panels (within the constraints that those panels allow).\n\n    const pivotIndex = delta < 0 ? firstPivotIndex : secondPivotIndex;\n    let index = pivotIndex;\n    while (index >= 0 && index < panelConstraintsArray.length) {\n      const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied);\n      const prevSize = initialLayout[index];\n      assert(prevSize != null, \"Previous layout not found for panel index \".concat(index));\n      const unsafeSize = prevSize - deltaRemaining;\n      const safeSize = resizePanel({\n        panelConstraints: panelConstraintsArray,\n        panelIndex: index,\n        size: unsafeSize\n      });\n      if (!fuzzyNumbersEqual(prevSize, safeSize)) {\n        deltaApplied += prevSize - safeSize;\n        nextLayout[index] = safeSize;\n        if (deltaApplied.toPrecision(3).localeCompare(Math.abs(delta).toPrecision(3), undefined, {\n          numeric: true\n        }) >= 0) {\n          break;\n        }\n      }\n      if (delta < 0) {\n        index--;\n      } else {\n        index++;\n      }\n    }\n  }\n  // DEBUG.push(`after 1: ${nextLayout.join(\", \")}`);\n  // DEBUG.push(`  deltaApplied: ${deltaApplied}`);\n  // DEBUG.push(\"\");\n\n  // If we were unable to resize any of the panels panels, return the previous state.\n  // This will essentially bailout and ignore e.g. drags past a panel's boundaries\n  if (fuzzyLayoutsEqual(prevLayout, nextLayout)) {\n    // DEBUG.push(`bailout to previous layout: ${prevLayout.join(\", \")}`);\n    // console.log(DEBUG.join(\"\\n\"));\n\n    return prevLayout;\n  }\n  {\n    // Now distribute the applied delta to the panels in the other direction\n    const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n    const prevSize = initialLayout[pivotIndex];\n    assert(prevSize != null, \"Previous layout not found for panel index \".concat(pivotIndex));\n    const unsafeSize = prevSize + deltaApplied;\n    const safeSize = resizePanel({\n      panelConstraints: panelConstraintsArray,\n      panelIndex: pivotIndex,\n      size: unsafeSize\n    });\n\n    // Adjust the pivot panel before, but only by the amount that surrounding panels were able to shrink/contract.\n    nextLayout[pivotIndex] = safeSize;\n\n    // Edge case where expanding or contracting one panel caused another one to change collapsed state\n    if (!fuzzyNumbersEqual(safeSize, unsafeSize)) {\n      let deltaRemaining = unsafeSize - safeSize;\n      const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n      let index = pivotIndex;\n      while (index >= 0 && index < panelConstraintsArray.length) {\n        const prevSize = nextLayout[index];\n        assert(prevSize != null, \"Previous layout not found for panel index \".concat(index));\n        const unsafeSize = prevSize + deltaRemaining;\n        const safeSize = resizePanel({\n          panelConstraints: panelConstraintsArray,\n          panelIndex: index,\n          size: unsafeSize\n        });\n        if (!fuzzyNumbersEqual(prevSize, safeSize)) {\n          deltaRemaining -= safeSize - prevSize;\n          nextLayout[index] = safeSize;\n        }\n        if (fuzzyNumbersEqual(deltaRemaining, 0)) {\n          break;\n        }\n        if (delta > 0) {\n          index--;\n        } else {\n          index++;\n        }\n      }\n    }\n  }\n  // DEBUG.push(`after 2: ${nextLayout.join(\", \")}`);\n  // DEBUG.push(`  deltaApplied: ${deltaApplied}`);\n  // DEBUG.push(\"\");\n\n  const totalSize = nextLayout.reduce((total, size) => size + total, 0);\n  // DEBUG.push(`total size: ${totalSize}`);\n\n  // If our new layout doesn't add up to 100%, that means the requested delta can't be applied\n  // In that case, fall back to our most recent valid layout\n  if (!fuzzyNumbersEqual(totalSize, 100)) {\n    // DEBUG.push(`bailout to previous layout: ${prevLayout.join(\", \")}`);\n    // console.log(DEBUG.join(\"\\n\"));\n\n    return prevLayout;\n  }\n\n  // console.log(DEBUG.join(\"\\n\"));\n  return nextLayout;\n}\nfunction calculateAriaValues(_ref5) {\n  let {\n    layout,\n    panelsArray,\n    pivotIndices\n  } = _ref5;\n  let currentMinSize = 0;\n  let currentMaxSize = 100;\n  let totalMinSize = 0;\n  let totalMaxSize = 0;\n  const firstIndex = pivotIndices[0];\n  assert(firstIndex != null, \"No pivot index found\");\n\n  // A panel's effective min/max sizes also need to account for other panel's sizes.\n  panelsArray.forEach((panelData, index) => {\n    const {\n      constraints\n    } = panelData;\n    const {\n      maxSize = 100,\n      minSize = 0\n    } = constraints;\n    if (index === firstIndex) {\n      currentMinSize = minSize;\n      currentMaxSize = maxSize;\n    } else {\n      totalMinSize += minSize;\n      totalMaxSize += maxSize;\n    }\n  });\n  const valueMax = Math.min(currentMaxSize, 100 - totalMinSize);\n  const valueMin = Math.max(currentMinSize, 100 - totalMaxSize);\n  const valueNow = layout[firstIndex];\n  return {\n    valueMax,\n    valueMin,\n    valueNow\n  };\n}\nfunction getResizeHandleElementsForGroup(groupId) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  return Array.from(scope.querySelectorAll(\"[data-panel-resize-handle-id][data-panel-group-id=\\\"\".concat(groupId, \"\\\"]\")));\n}\nfunction getResizeHandleElementIndex(groupId, id) {\n  let scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  const handles = getResizeHandleElementsForGroup(groupId, scope);\n  const index = handles.findIndex(handle => handle.getAttribute(\"data-panel-resize-handle-id\") === id);\n  return index !== null && index !== void 0 ? index : null;\n}\nfunction determinePivotIndices(groupId, dragHandleId, panelGroupElement) {\n  const index = getResizeHandleElementIndex(groupId, dragHandleId, panelGroupElement);\n  return index != null ? [index, index + 1] : [-1, -1];\n}\nfunction getPanelGroupElement(id) {\n  let rootElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  var _dataset;\n  //If the root element is the PanelGroup\n  if (rootElement instanceof HTMLElement && (rootElement === null || rootElement === void 0 ? void 0 : (_dataset = rootElement.dataset) === null || _dataset === void 0 ? void 0 : _dataset.panelGroupId) == id) {\n    return rootElement;\n  }\n\n  //Else query children\n  const element = rootElement.querySelector(\"[data-panel-group][data-panel-group-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) {\n    return element;\n  }\n  return null;\n}\nfunction getResizeHandleElement(id) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  const element = scope.querySelector(\"[data-panel-resize-handle-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) {\n    return element;\n  }\n  return null;\n}\nfunction getResizeHandlePanelIds(groupId, handleId, panelsArray) {\n  let scope = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;\n  var _panelsArray$index$id, _panelsArray$index, _panelsArray$id, _panelsArray;\n  const handle = getResizeHandleElement(handleId, scope);\n  const handles = getResizeHandleElementsForGroup(groupId, scope);\n  const index = handle ? handles.indexOf(handle) : -1;\n  const idBefore = (_panelsArray$index$id = (_panelsArray$index = panelsArray[index]) === null || _panelsArray$index === void 0 ? void 0 : _panelsArray$index.id) !== null && _panelsArray$index$id !== void 0 ? _panelsArray$index$id : null;\n  const idAfter = (_panelsArray$id = (_panelsArray = panelsArray[index + 1]) === null || _panelsArray === void 0 ? void 0 : _panelsArray.id) !== null && _panelsArray$id !== void 0 ? _panelsArray$id : null;\n  return [idBefore, idAfter];\n}\n\n// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\n\nfunction useWindowSplitterPanelGroupBehavior(_ref6) {\n  let {\n    committedValuesRef,\n    eagerValuesRef,\n    groupId,\n    layout,\n    panelDataArray,\n    panelGroupElement,\n    setLayout\n  } = _ref6;\n  useRef({\n    didWarnAboutMissingResizeHandle: false\n  });\n  useIsomorphicLayoutEffect(() => {\n    if (!panelGroupElement) {\n      return;\n    }\n    const resizeHandleElements = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n    for (let index = 0; index < panelDataArray.length - 1; index++) {\n      const {\n        valueMax,\n        valueMin,\n        valueNow\n      } = calculateAriaValues({\n        layout,\n        panelsArray: panelDataArray,\n        pivotIndices: [index, index + 1]\n      });\n      const resizeHandleElement = resizeHandleElements[index];\n      if (resizeHandleElement == null) ;else {\n        const panelData = panelDataArray[index];\n        assert(panelData, \"No panel data found for index \\\"\".concat(index, \"\\\"\"));\n        resizeHandleElement.setAttribute(\"aria-controls\", panelData.id);\n        resizeHandleElement.setAttribute(\"aria-valuemax\", \"\" + Math.round(valueMax));\n        resizeHandleElement.setAttribute(\"aria-valuemin\", \"\" + Math.round(valueMin));\n        resizeHandleElement.setAttribute(\"aria-valuenow\", valueNow != null ? \"\" + Math.round(valueNow) : \"\");\n      }\n    }\n    return () => {\n      resizeHandleElements.forEach((resizeHandleElement, index) => {\n        resizeHandleElement.removeAttribute(\"aria-controls\");\n        resizeHandleElement.removeAttribute(\"aria-valuemax\");\n        resizeHandleElement.removeAttribute(\"aria-valuemin\");\n        resizeHandleElement.removeAttribute(\"aria-valuenow\");\n      });\n    };\n  }, [groupId, layout, panelDataArray, panelGroupElement]);\n  useEffect(() => {\n    if (!panelGroupElement) {\n      return;\n    }\n    const eagerValues = eagerValuesRef.current;\n    assert(eagerValues, \"Eager values not found\");\n    const {\n      panelDataArray\n    } = eagerValues;\n    const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n    assert(groupElement != null, \"No group found for id \\\"\".concat(groupId, \"\\\"\"));\n    const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n    assert(handles, \"No resize handles found for group id \\\"\".concat(groupId, \"\\\"\"));\n    const cleanupFunctions = handles.map(handle => {\n      const handleId = handle.getAttribute(\"data-panel-resize-handle-id\");\n      assert(handleId, \"Resize handle element has no handle id attribute\");\n      const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelDataArray, panelGroupElement);\n      if (idBefore == null || idAfter == null) {\n        return () => {};\n      }\n      const onKeyDown = event => {\n        if (event.defaultPrevented) {\n          return;\n        }\n        switch (event.key) {\n          case \"Enter\":\n            {\n              event.preventDefault();\n              const index = panelDataArray.findIndex(panelData => panelData.id === idBefore);\n              if (index >= 0) {\n                const panelData = panelDataArray[index];\n                assert(panelData, \"No panel data found for index \".concat(index));\n                const size = layout[index];\n                const {\n                  collapsedSize = 0,\n                  collapsible,\n                  minSize = 0\n                } = panelData.constraints;\n                if (size != null && collapsible) {\n                  const nextLayout = adjustLayoutByDelta({\n                    delta: fuzzyNumbersEqual(size, collapsedSize) ? minSize - collapsedSize : collapsedSize - size,\n                    initialLayout: layout,\n                    panelConstraints: panelDataArray.map(panelData => panelData.constraints),\n                    pivotIndices: determinePivotIndices(groupId, handleId, panelGroupElement),\n                    prevLayout: layout,\n                    trigger: \"keyboard\"\n                  });\n                  if (layout !== nextLayout) {\n                    setLayout(nextLayout);\n                  }\n                }\n              }\n              break;\n            }\n        }\n      };\n      handle.addEventListener(\"keydown\", onKeyDown);\n      return () => {\n        handle.removeEventListener(\"keydown\", onKeyDown);\n      };\n    });\n    return () => {\n      cleanupFunctions.forEach(cleanupFunction => cleanupFunction());\n    };\n  }, [panelGroupElement, committedValuesRef, eagerValuesRef, groupId, layout, panelDataArray, setLayout]);\n}\nfunction areEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n  for (let index = 0; index < arrayA.length; index++) {\n    if (arrayA[index] !== arrayB[index]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getResizeEventCursorPosition(direction, event) {\n  const isHorizontal = direction === \"horizontal\";\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  return isHorizontal ? x : y;\n}\nfunction calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement) {\n  const isHorizontal = direction === \"horizontal\";\n  const handleElement = getResizeHandleElement(dragHandleId, panelGroupElement);\n  assert(handleElement, \"No resize handle element found for id \\\"\".concat(dragHandleId, \"\\\"\"));\n  const groupId = handleElement.getAttribute(\"data-panel-group-id\");\n  assert(groupId, \"Resize handle element has no group id attribute\");\n  let {\n    initialCursorPosition\n  } = initialDragState;\n  const cursorPosition = getResizeEventCursorPosition(direction, event);\n  const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n  assert(groupElement, \"No group element found for id \\\"\".concat(groupId, \"\\\"\"));\n  const groupRect = groupElement.getBoundingClientRect();\n  const groupSizeInPixels = isHorizontal ? groupRect.width : groupRect.height;\n  const offsetPixels = cursorPosition - initialCursorPosition;\n  const offsetPercentage = offsetPixels / groupSizeInPixels * 100;\n  return offsetPercentage;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX\nfunction calculateDeltaPercentage(event, dragHandleId, direction, initialDragState, keyboardResizeBy, panelGroupElement) {\n  if (isKeyDown(event)) {\n    const isHorizontal = direction === \"horizontal\";\n    let delta = 0;\n    if (event.shiftKey) {\n      delta = 100;\n    } else if (keyboardResizeBy != null) {\n      delta = keyboardResizeBy;\n    } else {\n      delta = 10;\n    }\n    let movement = 0;\n    switch (event.key) {\n      case \"ArrowDown\":\n        movement = isHorizontal ? 0 : delta;\n        break;\n      case \"ArrowLeft\":\n        movement = isHorizontal ? -delta : 0;\n        break;\n      case \"ArrowRight\":\n        movement = isHorizontal ? delta : 0;\n        break;\n      case \"ArrowUp\":\n        movement = isHorizontal ? 0 : -delta;\n        break;\n      case \"End\":\n        movement = 100;\n        break;\n      case \"Home\":\n        movement = -100;\n        break;\n    }\n    return movement;\n  } else {\n    if (initialDragState == null) {\n      return 0;\n    }\n    return calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement);\n  }\n}\nfunction calculateUnsafeDefaultLayout(_ref7) {\n  let {\n    panelDataArray\n  } = _ref7;\n  const layout = Array(panelDataArray.length);\n  const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n  let numPanelsWithSizes = 0;\n  let remainingSize = 100;\n\n  // Distribute default sizes first\n  for (let index = 0; index < panelDataArray.length; index++) {\n    const panelConstraints = panelConstraintsArray[index];\n    assert(panelConstraints, \"Panel constraints not found for index \".concat(index));\n    const {\n      defaultSize\n    } = panelConstraints;\n    if (defaultSize != null) {\n      numPanelsWithSizes++;\n      layout[index] = defaultSize;\n      remainingSize -= defaultSize;\n    }\n  }\n\n  // Remaining size should be distributed evenly between panels without default sizes\n  for (let index = 0; index < panelDataArray.length; index++) {\n    const panelConstraints = panelConstraintsArray[index];\n    assert(panelConstraints, \"Panel constraints not found for index \".concat(index));\n    const {\n      defaultSize\n    } = panelConstraints;\n    if (defaultSize != null) {\n      continue;\n    }\n    const numRemainingPanels = panelDataArray.length - numPanelsWithSizes;\n    const size = remainingSize / numRemainingPanels;\n    numPanelsWithSizes++;\n    layout[index] = size;\n    remainingSize -= size;\n  }\n  return layout;\n}\n\n// Layout should be pre-converted into percentages\nfunction callPanelCallbacks(panelsArray, layout, panelIdToLastNotifiedSizeMap) {\n  layout.forEach((size, index) => {\n    const panelData = panelsArray[index];\n    assert(panelData, \"Panel data not found for index \".concat(index));\n    const {\n      callbacks,\n      constraints,\n      id: panelId\n    } = panelData;\n    const {\n      collapsedSize = 0,\n      collapsible\n    } = constraints;\n    const lastNotifiedSize = panelIdToLastNotifiedSizeMap[panelId];\n    if (lastNotifiedSize == null || size !== lastNotifiedSize) {\n      panelIdToLastNotifiedSizeMap[panelId] = size;\n      const {\n        onCollapse,\n        onExpand,\n        onResize\n      } = callbacks;\n      if (onResize) {\n        onResize(size, lastNotifiedSize);\n      }\n      if (collapsible && (onCollapse || onExpand)) {\n        if (onExpand && (lastNotifiedSize == null || fuzzyNumbersEqual$1(lastNotifiedSize, collapsedSize)) && !fuzzyNumbersEqual$1(size, collapsedSize)) {\n          onExpand();\n        }\n        if (onCollapse && (lastNotifiedSize == null || !fuzzyNumbersEqual$1(lastNotifiedSize, collapsedSize)) && fuzzyNumbersEqual$1(size, collapsedSize)) {\n          onCollapse();\n        }\n      }\n    }\n  });\n}\nfunction compareLayouts(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  } else {\n    for (let index = 0; index < a.length; index++) {\n      if (a[index] != b[index]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n// This method returns a number between 1 and 100 representing\n\n// the % of the group's overall space this panel should occupy.\nfunction computePanelFlexBoxStyle(_ref8) {\n  let {\n    defaultSize,\n    dragState,\n    layout,\n    panelData,\n    panelIndex,\n    precision = 3\n  } = _ref8;\n  const size = layout[panelIndex];\n  let flexGrow;\n  if (size == null) {\n    // Initial render (before panels have registered themselves)\n    // In order to support server rendering, fall back to default size if provided\n    flexGrow = defaultSize != undefined ? defaultSize.toPrecision(precision) : \"1\";\n  } else if (panelData.length === 1) {\n    // Special case: Single panel group should always fill full width/height\n    flexGrow = \"1\";\n  } else {\n    flexGrow = size.toPrecision(precision);\n  }\n  return {\n    flexBasis: 0,\n    flexGrow,\n    flexShrink: 1,\n    // Without this, Panel sizes may be unintentionally overridden by their content\n    overflow: \"hidden\",\n    // Disable pointer events inside of a panel during resize\n    // This avoid edge cases like nested iframes\n    pointerEvents: dragState !== null ? \"none\" : undefined\n  };\n}\nfunction debounce(callback) {\n  let durationMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let timeoutId = null;\n  let callable = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      callback(...args);\n    }, durationMs);\n  };\n  return callable;\n}\n\n// PanelGroup might be rendering in a server-side environment where localStorage is not available\n// or on a browser with cookies/storage disabled.\n// In either case, this function avoids accessing localStorage until needed,\n// and avoids throwing user-visible errors.\nfunction initializeDefaultStorage(storageObject) {\n  try {\n    if (typeof localStorage !== \"undefined\") {\n      // Bypass this check for future calls\n      storageObject.getItem = name => {\n        return localStorage.getItem(name);\n      };\n      storageObject.setItem = (name, value) => {\n        localStorage.setItem(name, value);\n      };\n    } else {\n      throw new Error(\"localStorage not supported in this environment\");\n    }\n  } catch (error) {\n    console.error(error);\n    storageObject.getItem = () => null;\n    storageObject.setItem = () => {};\n  }\n}\nfunction getPanelGroupKey(autoSaveId) {\n  return \"react-resizable-panels:\".concat(autoSaveId);\n}\n\n// Note that Panel ids might be user-provided (stable) or useId generated (non-deterministic)\n// so they should not be used as part of the serialization key.\n// Using the min/max size attributes should work well enough as a backup.\n// Pre-sorting by minSize allows remembering layouts even if panels are re-ordered/dragged.\nfunction getPanelKey(panels) {\n  return panels.map(panel => {\n    const {\n      constraints,\n      id,\n      idIsFromProps,\n      order\n    } = panel;\n    if (idIsFromProps) {\n      return id;\n    } else {\n      return order ? \"\".concat(order, \":\").concat(JSON.stringify(constraints)) : JSON.stringify(constraints);\n    }\n  }).sort((a, b) => a.localeCompare(b)).join(\",\");\n}\nfunction loadSerializedPanelGroupState(autoSaveId, storage) {\n  try {\n    const panelGroupKey = getPanelGroupKey(autoSaveId);\n    const serialized = storage.getItem(panelGroupKey);\n    if (serialized) {\n      const parsed = JSON.parse(serialized);\n      if (typeof parsed === \"object\" && parsed != null) {\n        return parsed;\n      }\n    }\n  } catch (error) {}\n  return null;\n}\nfunction loadPanelGroupState(autoSaveId, panels, storage) {\n  var _loadSerializedPanelG, _state$panelKey;\n  const state = (_loadSerializedPanelG = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG !== void 0 ? _loadSerializedPanelG : {};\n  const panelKey = getPanelKey(panels);\n  return (_state$panelKey = state[panelKey]) !== null && _state$panelKey !== void 0 ? _state$panelKey : null;\n}\nfunction savePanelGroupState(autoSaveId, panels, panelSizesBeforeCollapse, sizes, storage) {\n  var _loadSerializedPanelG2;\n  const panelGroupKey = getPanelGroupKey(autoSaveId);\n  const panelKey = getPanelKey(panels);\n  const state = (_loadSerializedPanelG2 = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG2 !== void 0 ? _loadSerializedPanelG2 : {};\n  state[panelKey] = {\n    expandToSizes: Object.fromEntries(panelSizesBeforeCollapse.entries()),\n    layout: sizes\n  };\n  try {\n    storage.setItem(panelGroupKey, JSON.stringify(state));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// All units must be in percentages; pixel values should be pre-converted\nfunction validatePanelGroupLayout(_ref9) {\n  let {\n    layout: prevLayout,\n    panelConstraints\n  } = _ref9;\n  const nextLayout = [...prevLayout];\n  const nextLayoutTotalSize = nextLayout.reduce((accumulated, current) => accumulated + current, 0);\n\n  // Validate layout expectations\n  if (nextLayout.length !== panelConstraints.length) {\n    throw Error(\"Invalid \".concat(panelConstraints.length, \" panel layout: \").concat(nextLayout.map(size => \"\".concat(size, \"%\")).join(\", \")));\n  } else if (!fuzzyNumbersEqual(nextLayoutTotalSize, 100)) {\n    for (let index = 0; index < panelConstraints.length; index++) {\n      const unsafeSize = nextLayout[index];\n      assert(unsafeSize != null, \"No layout data found for index \".concat(index));\n      const safeSize = 100 / nextLayoutTotalSize * unsafeSize;\n      nextLayout[index] = safeSize;\n    }\n  }\n  let remainingSize = 0;\n\n  // First pass: Validate the proposed layout given each panel's constraints\n  for (let index = 0; index < panelConstraints.length; index++) {\n    const unsafeSize = nextLayout[index];\n    assert(unsafeSize != null, \"No layout data found for index \".concat(index));\n    const safeSize = resizePanel({\n      panelConstraints,\n      panelIndex: index,\n      size: unsafeSize\n    });\n    if (unsafeSize != safeSize) {\n      remainingSize += unsafeSize - safeSize;\n      nextLayout[index] = safeSize;\n    }\n  }\n\n  // If there is additional, left over space, assign it to any panel(s) that permits it\n  // (It's not worth taking multiple additional passes to evenly distribute)\n  if (!fuzzyNumbersEqual(remainingSize, 0)) {\n    for (let index = 0; index < panelConstraints.length; index++) {\n      const prevSize = nextLayout[index];\n      assert(prevSize != null, \"No layout data found for index \".concat(index));\n      const unsafeSize = prevSize + remainingSize;\n      const safeSize = resizePanel({\n        panelConstraints,\n        panelIndex: index,\n        size: unsafeSize\n      });\n      if (prevSize !== safeSize) {\n        remainingSize -= safeSize - prevSize;\n        nextLayout[index] = safeSize;\n\n        // Once we've used up the remainder, bail\n        if (fuzzyNumbersEqual(remainingSize, 0)) {\n          break;\n        }\n      }\n    }\n  }\n  return nextLayout;\n}\nconst LOCAL_STORAGE_DEBOUNCE_INTERVAL = 100;\nconst defaultStorage = {\n  getItem: name => {\n    initializeDefaultStorage(defaultStorage);\n    return defaultStorage.getItem(name);\n  },\n  setItem: (name, value) => {\n    initializeDefaultStorage(defaultStorage);\n    defaultStorage.setItem(name, value);\n  }\n};\nconst debounceMap = {};\nfunction PanelGroupWithForwardedRef(_ref10) {\n  let {\n    autoSaveId = null,\n    children,\n    className: classNameFromProps = \"\",\n    direction,\n    forwardedRef,\n    id: idFromProps = null,\n    onLayout = null,\n    keyboardResizeBy = null,\n    storage = defaultStorage,\n    style: styleFromProps,\n    tagName: Type = \"div\",\n    ...rest\n  } = _ref10;\n  const groupId = useUniqueId(idFromProps);\n  const panelGroupElementRef = useRef(null);\n  const [dragState, setDragState] = useState(null);\n  const [layout, setLayout] = useState([]);\n  const panelIdToLastNotifiedSizeMapRef = useRef({});\n  const panelSizeBeforeCollapseRef = useRef(new Map());\n  const prevDeltaRef = useRef(0);\n  const committedValuesRef = useRef({\n    autoSaveId,\n    direction,\n    dragState,\n    id: groupId,\n    keyboardResizeBy,\n    onLayout,\n    storage\n  });\n  const eagerValuesRef = useRef({\n    layout,\n    panelDataArray: [],\n    panelDataArrayChanged: false\n  });\n  useRef({\n    didLogIdAndOrderWarning: false,\n    didLogPanelConstraintsWarning: false,\n    prevPanelIds: []\n  });\n  useImperativeHandle(forwardedRef, () => ({\n    getId: () => committedValuesRef.current.id,\n    getLayout: () => {\n      const {\n        layout\n      } = eagerValuesRef.current;\n      return layout;\n    },\n    setLayout: unsafeLayout => {\n      const {\n        onLayout\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n      const safeLayout = validatePanelGroupLayout({\n        layout: unsafeLayout,\n        panelConstraints: panelDataArray.map(panelData => panelData.constraints)\n      });\n      if (!areEqual(prevLayout, safeLayout)) {\n        setLayout(safeLayout);\n        eagerValuesRef.current.layout = safeLayout;\n        if (onLayout) {\n          onLayout(safeLayout);\n        }\n        callPanelCallbacks(panelDataArray, safeLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    }\n  }), []);\n  useIsomorphicLayoutEffect(() => {\n    committedValuesRef.current.autoSaveId = autoSaveId;\n    committedValuesRef.current.direction = direction;\n    committedValuesRef.current.dragState = dragState;\n    committedValuesRef.current.id = groupId;\n    committedValuesRef.current.onLayout = onLayout;\n    committedValuesRef.current.storage = storage;\n  });\n  useWindowSplitterPanelGroupBehavior({\n    committedValuesRef,\n    eagerValuesRef,\n    groupId,\n    layout,\n    panelDataArray: eagerValuesRef.current.panelDataArray,\n    setLayout,\n    panelGroupElement: panelGroupElementRef.current\n  });\n  useEffect(() => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n\n    // If this panel has been configured to persist sizing information, save sizes to local storage.\n    if (autoSaveId) {\n      if (layout.length === 0 || layout.length !== panelDataArray.length) {\n        return;\n      }\n      let debouncedSave = debounceMap[autoSaveId];\n\n      // Limit the frequency of localStorage updates.\n      if (debouncedSave == null) {\n        debouncedSave = debounce(savePanelGroupState, LOCAL_STORAGE_DEBOUNCE_INTERVAL);\n        debounceMap[autoSaveId] = debouncedSave;\n      }\n\n      // Clone mutable data before passing to the debounced function,\n      // else we run the risk of saving an incorrect combination of mutable and immutable values to state.\n      const clonedPanelDataArray = [...panelDataArray];\n      const clonedPanelSizesBeforeCollapse = new Map(panelSizeBeforeCollapseRef.current);\n      debouncedSave(autoSaveId, clonedPanelDataArray, clonedPanelSizesBeforeCollapse, layout, storage);\n    }\n  }, [autoSaveId, layout, storage]);\n\n  // DEV warnings\n  useEffect(() => {});\n\n  // External APIs are safe to memoize via committed values ref\n  const collapsePanel = useCallback(panelData => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    if (panelData.constraints.collapsible) {\n      const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n      const {\n        collapsedSize = 0,\n        panelSize,\n        pivotIndices\n      } = panelDataHelper(panelDataArray, panelData, prevLayout);\n      assert(panelSize != null, \"Panel size not found for panel \\\"\".concat(panelData.id, \"\\\"\"));\n      if (!fuzzyNumbersEqual$1(panelSize, collapsedSize)) {\n        // Store size before collapse;\n        // This is the size that gets restored if the expand() API is used.\n        panelSizeBeforeCollapseRef.current.set(panelData.id, panelSize);\n        const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n        const delta = isLastPanel ? panelSize - collapsedSize : collapsedSize - panelSize;\n        const nextLayout = adjustLayoutByDelta({\n          delta,\n          initialLayout: prevLayout,\n          panelConstraints: panelConstraintsArray,\n          pivotIndices,\n          prevLayout,\n          trigger: \"imperative-api\"\n        });\n        if (!compareLayouts(prevLayout, nextLayout)) {\n          setLayout(nextLayout);\n          eagerValuesRef.current.layout = nextLayout;\n          if (onLayout) {\n            onLayout(nextLayout);\n          }\n          callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n        }\n      }\n    }\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const expandPanel = useCallback((panelData, minSizeOverride) => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    if (panelData.constraints.collapsible) {\n      const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n      const {\n        collapsedSize = 0,\n        panelSize = 0,\n        minSize: minSizeFromProps = 0,\n        pivotIndices\n      } = panelDataHelper(panelDataArray, panelData, prevLayout);\n      const minSize = minSizeOverride !== null && minSizeOverride !== void 0 ? minSizeOverride : minSizeFromProps;\n      if (fuzzyNumbersEqual$1(panelSize, collapsedSize)) {\n        // Restore this panel to the size it was before it was collapsed, if possible.\n        const prevPanelSize = panelSizeBeforeCollapseRef.current.get(panelData.id);\n        const baseSize = prevPanelSize != null && prevPanelSize >= minSize ? prevPanelSize : minSize;\n        const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n        const delta = isLastPanel ? panelSize - baseSize : baseSize - panelSize;\n        const nextLayout = adjustLayoutByDelta({\n          delta,\n          initialLayout: prevLayout,\n          panelConstraints: panelConstraintsArray,\n          pivotIndices,\n          prevLayout,\n          trigger: \"imperative-api\"\n        });\n        if (!compareLayouts(prevLayout, nextLayout)) {\n          setLayout(nextLayout);\n          eagerValuesRef.current.layout = nextLayout;\n          if (onLayout) {\n            onLayout(nextLayout);\n          }\n          callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n        }\n      }\n    }\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const getPanelSize = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null, \"Panel size not found for panel \\\"\".concat(panelData.id, \"\\\"\"));\n    return panelSize;\n  }, []);\n\n  // This API should never read from committedValuesRef\n  const getPanelStyle = useCallback((panelData, defaultSize) => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n    return computePanelFlexBoxStyle({\n      defaultSize,\n      dragState,\n      layout,\n      panelData: panelDataArray,\n      panelIndex\n    });\n  }, [dragState, layout]);\n\n  // External APIs are safe to memoize via committed values ref\n  const isPanelCollapsed = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize = 0,\n      collapsible,\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null, \"Panel size not found for panel \\\"\".concat(panelData.id, \"\\\"\"));\n    return collapsible === true && fuzzyNumbersEqual$1(panelSize, collapsedSize);\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const isPanelExpanded = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize = 0,\n      collapsible,\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null, \"Panel size not found for panel \\\"\".concat(panelData.id, \"\\\"\"));\n    return !collapsible || fuzzyCompareNumbers(panelSize, collapsedSize) > 0;\n  }, []);\n  const registerPanel = useCallback(panelData => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    panelDataArray.push(panelData);\n    panelDataArray.sort((panelA, panelB) => {\n      const orderA = panelA.order;\n      const orderB = panelB.order;\n      if (orderA == null && orderB == null) {\n        return 0;\n      } else if (orderA == null) {\n        return -1;\n      } else if (orderB == null) {\n        return 1;\n      } else {\n        return orderA - orderB;\n      }\n    });\n    eagerValuesRef.current.panelDataArrayChanged = true;\n  }, []);\n\n  // (Re)calculate group layout whenever panels are registered or unregistered.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useIsomorphicLayoutEffect(() => {\n    if (eagerValuesRef.current.panelDataArrayChanged) {\n      eagerValuesRef.current.panelDataArrayChanged = false;\n      const {\n        autoSaveId,\n        onLayout,\n        storage\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n\n      // If this panel has been configured to persist sizing information,\n      // default size should be restored from local storage if possible.\n      let unsafeLayout = null;\n      if (autoSaveId) {\n        const state = loadPanelGroupState(autoSaveId, panelDataArray, storage);\n        if (state) {\n          panelSizeBeforeCollapseRef.current = new Map(Object.entries(state.expandToSizes));\n          unsafeLayout = state.layout;\n        }\n      }\n      if (unsafeLayout == null) {\n        unsafeLayout = calculateUnsafeDefaultLayout({\n          panelDataArray\n        });\n      }\n\n      // Validate even saved layouts in case something has changed since last render\n      // e.g. for pixel groups, this could be the size of the window\n      const nextLayout = validatePanelGroupLayout({\n        layout: unsafeLayout,\n        panelConstraints: panelDataArray.map(panelData => panelData.constraints)\n      });\n      if (!areEqual(prevLayout, nextLayout)) {\n        setLayout(nextLayout);\n        eagerValuesRef.current.layout = nextLayout;\n        if (onLayout) {\n          onLayout(nextLayout);\n        }\n        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    }\n  });\n\n  // Reset the cached layout if hidden by the Activity/Offscreen API\n  useIsomorphicLayoutEffect(() => {\n    const eagerValues = eagerValuesRef.current;\n    return () => {\n      eagerValues.layout = [];\n    };\n  }, []);\n  const registerResizeHandle = useCallback(dragHandleId => {\n    return function resizeHandler(event) {\n      event.preventDefault();\n      const panelGroupElement = panelGroupElementRef.current;\n      if (!panelGroupElement) {\n        return () => null;\n      }\n      const {\n        direction,\n        dragState,\n        id: groupId,\n        keyboardResizeBy,\n        onLayout\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n      const {\n        initialLayout\n      } = dragState !== null && dragState !== void 0 ? dragState : {};\n      const pivotIndices = determinePivotIndices(groupId, dragHandleId, panelGroupElement);\n      let delta = calculateDeltaPercentage(event, dragHandleId, direction, dragState, keyboardResizeBy, panelGroupElement);\n      if (delta === 0) {\n        return;\n      }\n\n      // Support RTL layouts\n      const isHorizontal = direction === \"horizontal\";\n      if (document.dir === \"rtl\" && isHorizontal) {\n        delta = -delta;\n      }\n      const panelConstraints = panelDataArray.map(panelData => panelData.constraints);\n      const nextLayout = adjustLayoutByDelta({\n        delta,\n        initialLayout: initialLayout !== null && initialLayout !== void 0 ? initialLayout : prevLayout,\n        panelConstraints,\n        pivotIndices,\n        prevLayout,\n        trigger: isKeyDown(event) ? \"keyboard\" : \"mouse-or-touch\"\n      });\n      const layoutChanged = !compareLayouts(prevLayout, nextLayout);\n\n      // Only update the cursor for layout changes triggered by touch/mouse events (not keyboard)\n      // Update the cursor even if the layout hasn't changed (we may need to show an invalid cursor state)\n      if (isPointerEvent(event) || isMouseEvent(event)) {\n        // Watch for multiple subsequent deltas; this might occur for tiny cursor movements.\n        // In this case, Panel sizes might not change–\n        // but updating cursor in this scenario would cause a flicker.\n        if (prevDeltaRef.current != delta) {\n          prevDeltaRef.current = delta;\n          if (!layoutChanged) {\n            // If the pointer has moved too far to resize the panel any further, note this so we can update the cursor.\n            // This mimics VS Code behavior.\n            if (isHorizontal) {\n              reportConstraintsViolation(dragHandleId, delta < 0 ? EXCEEDED_HORIZONTAL_MIN : EXCEEDED_HORIZONTAL_MAX);\n            } else {\n              reportConstraintsViolation(dragHandleId, delta < 0 ? EXCEEDED_VERTICAL_MIN : EXCEEDED_VERTICAL_MAX);\n            }\n          } else {\n            reportConstraintsViolation(dragHandleId, 0);\n          }\n        }\n      }\n      if (layoutChanged) {\n        setLayout(nextLayout);\n        eagerValuesRef.current.layout = nextLayout;\n        if (onLayout) {\n          onLayout(nextLayout);\n        }\n        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    };\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const resizePanel = useCallback((panelData, unsafePanelSize) => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n    const {\n      panelSize,\n      pivotIndices\n    } = panelDataHelper(panelDataArray, panelData, prevLayout);\n    assert(panelSize != null, \"Panel size not found for panel \\\"\".concat(panelData.id, \"\\\"\"));\n    const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n    const delta = isLastPanel ? panelSize - unsafePanelSize : unsafePanelSize - panelSize;\n    const nextLayout = adjustLayoutByDelta({\n      delta,\n      initialLayout: prevLayout,\n      panelConstraints: panelConstraintsArray,\n      pivotIndices,\n      prevLayout,\n      trigger: \"imperative-api\"\n    });\n    if (!compareLayouts(prevLayout, nextLayout)) {\n      setLayout(nextLayout);\n      eagerValuesRef.current.layout = nextLayout;\n      if (onLayout) {\n        onLayout(nextLayout);\n      }\n      callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n    }\n  }, []);\n  const reevaluatePanelConstraints = useCallback((panelData, prevConstraints) => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize: prevCollapsedSize = 0,\n      collapsible: prevCollapsible\n    } = prevConstraints;\n    const {\n      collapsedSize: nextCollapsedSize = 0,\n      collapsible: nextCollapsible,\n      maxSize: nextMaxSize = 100,\n      minSize: nextMinSize = 0\n    } = panelData.constraints;\n    const {\n      panelSize: prevPanelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    if (prevPanelSize == null) {\n      // It's possible that the panels in this group have changed since the last render\n      return;\n    }\n    if (prevCollapsible && nextCollapsible && fuzzyNumbersEqual$1(prevPanelSize, prevCollapsedSize)) {\n      if (!fuzzyNumbersEqual$1(prevCollapsedSize, nextCollapsedSize)) {\n        resizePanel(panelData, nextCollapsedSize);\n      }\n    } else if (prevPanelSize < nextMinSize) {\n      resizePanel(panelData, nextMinSize);\n    } else if (prevPanelSize > nextMaxSize) {\n      resizePanel(panelData, nextMaxSize);\n    }\n  }, [resizePanel]);\n  const startDragging = useCallback((dragHandleId, event) => {\n    const {\n      direction\n    } = committedValuesRef.current;\n    const {\n      layout\n    } = eagerValuesRef.current;\n    if (!panelGroupElementRef.current) {\n      return;\n    }\n    const handleElement = getResizeHandleElement(dragHandleId, panelGroupElementRef.current);\n    assert(handleElement, \"Drag handle element not found for id \\\"\".concat(dragHandleId, \"\\\"\"));\n    const initialCursorPosition = getResizeEventCursorPosition(direction, event);\n    setDragState({\n      dragHandleId,\n      dragHandleRect: handleElement.getBoundingClientRect(),\n      initialCursorPosition,\n      initialLayout: layout\n    });\n  }, []);\n  const stopDragging = useCallback(() => {\n    setDragState(null);\n  }, []);\n  const unregisterPanel = useCallback(panelData => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    const index = findPanelDataIndex(panelDataArray, panelData);\n    if (index >= 0) {\n      panelDataArray.splice(index, 1);\n\n      // TRICKY\n      // When a panel is removed from the group, we should delete the most recent prev-size entry for it.\n      // If we don't do this, then a conditionally rendered panel might not call onResize when it's re-mounted.\n      // Strict effects mode makes this tricky though because all panels will be registered, unregistered, then re-registered on mount.\n      delete panelIdToLastNotifiedSizeMapRef.current[panelData.id];\n      eagerValuesRef.current.panelDataArrayChanged = true;\n    }\n  }, []);\n  const context = useMemo(() => ({\n    collapsePanel,\n    direction,\n    dragState,\n    expandPanel,\n    getPanelSize,\n    getPanelStyle,\n    groupId,\n    isPanelCollapsed,\n    isPanelExpanded,\n    reevaluatePanelConstraints,\n    registerPanel,\n    registerResizeHandle,\n    resizePanel,\n    startDragging,\n    stopDragging,\n    unregisterPanel,\n    panelGroupElement: panelGroupElementRef.current\n  }), [collapsePanel, dragState, direction, expandPanel, getPanelSize, getPanelStyle, groupId, isPanelCollapsed, isPanelExpanded, reevaluatePanelConstraints, registerPanel, registerResizeHandle, resizePanel, startDragging, stopDragging, unregisterPanel]);\n  const style = {\n    display: \"flex\",\n    flexDirection: direction === \"horizontal\" ? \"row\" : \"column\",\n    height: \"100%\",\n    overflow: \"hidden\",\n    width: \"100%\"\n  };\n  return createElement(PanelGroupContext.Provider, {\n    value: context\n  }, createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    id: idFromProps,\n    ref: panelGroupElementRef,\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    // CSS selectors\n    \"data-panel-group\": \"\",\n    \"data-panel-group-direction\": direction,\n    \"data-panel-group-id\": groupId\n  }));\n}\nconst PanelGroup = forwardRef((props, ref) => createElement(PanelGroupWithForwardedRef, {\n  ...props,\n  forwardedRef: ref\n}));\nPanelGroupWithForwardedRef.displayName = \"PanelGroup\";\nPanelGroup.displayName = \"forwardRef(PanelGroup)\";\nfunction findPanelDataIndex(panelDataArray, panelData) {\n  return panelDataArray.findIndex(prevPanelData => prevPanelData === panelData || prevPanelData.id === panelData.id);\n}\nfunction panelDataHelper(panelDataArray, panelData, layout) {\n  const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n  const isLastPanel = panelIndex === panelDataArray.length - 1;\n  const pivotIndices = isLastPanel ? [panelIndex - 1, panelIndex] : [panelIndex, panelIndex + 1];\n  const panelSize = layout[panelIndex];\n  return {\n    ...panelData.constraints,\n    panelSize,\n    pivotIndices\n  };\n}\n\n// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\n\nfunction useWindowSplitterResizeHandlerBehavior(_ref11) {\n  let {\n    disabled,\n    handleId,\n    resizeHandler,\n    panelGroupElement\n  } = _ref11;\n  useEffect(() => {\n    if (disabled || resizeHandler == null || panelGroupElement == null) {\n      return;\n    }\n    const handleElement = getResizeHandleElement(handleId, panelGroupElement);\n    if (handleElement == null) {\n      return;\n    }\n    const onKeyDown = event => {\n      if (event.defaultPrevented) {\n        return;\n      }\n      switch (event.key) {\n        case \"ArrowDown\":\n        case \"ArrowLeft\":\n        case \"ArrowRight\":\n        case \"ArrowUp\":\n        case \"End\":\n        case \"Home\":\n          {\n            event.preventDefault();\n            resizeHandler(event);\n            break;\n          }\n        case \"F6\":\n          {\n            event.preventDefault();\n            const groupId = handleElement.getAttribute(\"data-panel-group-id\");\n            assert(groupId, \"No group element found for id \\\"\".concat(groupId, \"\\\"\"));\n            const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n            const index = getResizeHandleElementIndex(groupId, handleId, panelGroupElement);\n            assert(index !== null, \"No resize element found for id \\\"\".concat(handleId, \"\\\"\"));\n            const nextIndex = event.shiftKey ? index > 0 ? index - 1 : handles.length - 1 : index + 1 < handles.length ? index + 1 : 0;\n            const nextHandle = handles[nextIndex];\n            nextHandle.focus();\n            break;\n          }\n      }\n    };\n    handleElement.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      handleElement.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [panelGroupElement, disabled, handleId, resizeHandler]);\n}\nfunction PanelResizeHandle(_ref12) {\n  let {\n    children = null,\n    className: classNameFromProps = \"\",\n    disabled = false,\n    hitAreaMargins,\n    id: idFromProps,\n    onDragging,\n    style: styleFromProps = {},\n    tabIndex = 0,\n    tagName: Type = \"div\",\n    ...rest\n  } = _ref12;\n  var _hitAreaMargins$coars, _hitAreaMargins$fine;\n  const elementRef = useRef(null);\n\n  // Use a ref to guard against users passing inline props\n  const callbacksRef = useRef({\n    onDragging\n  });\n  useEffect(() => {\n    callbacksRef.current.onDragging = onDragging;\n  });\n  const panelGroupContext = useContext(PanelGroupContext);\n  if (panelGroupContext === null) {\n    throw Error(\"PanelResizeHandle components must be rendered within a PanelGroup container\");\n  }\n  const {\n    direction,\n    groupId,\n    registerResizeHandle: registerResizeHandleWithParentGroup,\n    startDragging,\n    stopDragging,\n    panelGroupElement\n  } = panelGroupContext;\n  const resizeHandleId = useUniqueId(idFromProps);\n  const [state, setState] = useState(\"inactive\");\n  const [isFocused, setIsFocused] = useState(false);\n  const [resizeHandler, setResizeHandler] = useState(null);\n  const committedValuesRef = useRef({\n    state\n  });\n  useIsomorphicLayoutEffect(() => {\n    committedValuesRef.current.state = state;\n  });\n  useEffect(() => {\n    if (disabled) {\n      setResizeHandler(null);\n    } else {\n      const resizeHandler = registerResizeHandleWithParentGroup(resizeHandleId);\n      setResizeHandler(() => resizeHandler);\n    }\n  }, [disabled, resizeHandleId, registerResizeHandleWithParentGroup]);\n\n  // Extract hit area margins before passing them to the effect's dependency array\n  // so that inline object values won't trigger re-renders\n  const coarseHitAreaMargins = (_hitAreaMargins$coars = hitAreaMargins === null || hitAreaMargins === void 0 ? void 0 : hitAreaMargins.coarse) !== null && _hitAreaMargins$coars !== void 0 ? _hitAreaMargins$coars : 15;\n  const fineHitAreaMargins = (_hitAreaMargins$fine = hitAreaMargins === null || hitAreaMargins === void 0 ? void 0 : hitAreaMargins.fine) !== null && _hitAreaMargins$fine !== void 0 ? _hitAreaMargins$fine : 5;\n  useEffect(() => {\n    if (disabled || resizeHandler == null) {\n      return;\n    }\n    const element = elementRef.current;\n    assert(element, \"Element ref not attached\");\n    const setResizeHandlerState = (action, isActive, event) => {\n      if (isActive) {\n        switch (action) {\n          case \"down\":\n            {\n              setState(\"drag\");\n              startDragging(resizeHandleId, event);\n              const {\n                onDragging\n              } = callbacksRef.current;\n              if (onDragging) {\n                onDragging(true);\n              }\n              break;\n            }\n          case \"move\":\n            {\n              const {\n                state\n              } = committedValuesRef.current;\n              if (state !== \"drag\") {\n                setState(\"hover\");\n              }\n              resizeHandler(event);\n              break;\n            }\n          case \"up\":\n            {\n              setState(\"hover\");\n              stopDragging();\n              const {\n                onDragging\n              } = callbacksRef.current;\n              if (onDragging) {\n                onDragging(false);\n              }\n              break;\n            }\n        }\n      } else {\n        setState(\"inactive\");\n      }\n    };\n    return registerResizeHandle(resizeHandleId, element, direction, {\n      coarse: coarseHitAreaMargins,\n      fine: fineHitAreaMargins\n    }, setResizeHandlerState);\n  }, [coarseHitAreaMargins, direction, disabled, fineHitAreaMargins, registerResizeHandleWithParentGroup, resizeHandleId, resizeHandler, startDragging, stopDragging]);\n  useWindowSplitterResizeHandlerBehavior({\n    disabled,\n    handleId: resizeHandleId,\n    resizeHandler,\n    panelGroupElement\n  });\n  const style = {\n    touchAction: \"none\",\n    userSelect: \"none\"\n  };\n  return createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    id: idFromProps,\n    onBlur: () => setIsFocused(false),\n    onFocus: () => setIsFocused(true),\n    ref: elementRef,\n    role: \"separator\",\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    tabIndex,\n    // CSS selectors\n    \"data-panel-group-direction\": direction,\n    \"data-panel-group-id\": groupId,\n    \"data-resize-handle\": \"\",\n    \"data-resize-handle-active\": state === \"drag\" ? \"pointer\" : isFocused ? \"keyboard\" : undefined,\n    \"data-resize-handle-state\": state,\n    \"data-panel-resize-handle-enabled\": !disabled,\n    \"data-panel-resize-handle-id\": resizeHandleId\n  });\n}\nPanelResizeHandle.displayName = \"PanelResizeHandle\";\nfunction getPanelElement(id) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  const element = scope.querySelector(\"[data-panel-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) {\n    return element;\n  }\n  return null;\n}\nfunction getPanelElementsForGroup(groupId) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  return Array.from(scope.querySelectorAll(\"[data-panel][data-panel-group-id=\\\"\".concat(groupId, \"\\\"]\")));\n}\nfunction getIntersectingRectangle(rectOne, rectTwo, strict) {\n  if (!intersects(rectOne, rectTwo, strict)) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  return {\n    x: Math.max(rectOne.x, rectTwo.x),\n    y: Math.max(rectOne.y, rectTwo.y),\n    width: Math.min(rectOne.x + rectOne.width, rectTwo.x + rectTwo.width) - Math.max(rectOne.x, rectTwo.x),\n    height: Math.min(rectOne.y + rectOne.height, rectTwo.y + rectTwo.height) - Math.max(rectOne.y, rectTwo.y)\n  };\n}\nexport { Panel, PanelGroup, PanelResizeHandle, assert, getIntersectingRectangle, getPanelElement, getPanelElementsForGroup, getPanelGroupElement, getResizeHandleElement, getResizeHandleElementIndex, getResizeHandleElementsForGroup, getResizeHandlePanelIds, intersects };","map":{"version":3,"names":["React","createElement","createContext","createRef","forwardRef","useCallback","useContext","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useRef","useState","useId","toString","useLayoutEffect_do_not_use_directly","PanelGroupContext","displayName","useIsomorphicLayoutEffect","wrappedUseId","counter","useUniqueId","idFromParams","arguments","length","undefined","idFromUseId","idRef","current","PanelWithForwardedRef","_ref","children","className","classNameFromProps","collapsedSize","collapsible","defaultSize","forwardedRef","id","idFromProps","maxSize","minSize","onCollapse","onExpand","onResize","order","style","styleFromProps","tagName","Type","rest","context","Error","collapsePanel","expandPanel","getPanelSize","getPanelStyle","groupId","isPanelCollapsed","reevaluatePanelConstraints","registerPanel","resizePanel","unregisterPanel","panelId","panelDataRef","callbacks","constraints","idIsFromProps","didLogMissingDefaultSizeWarning","prevConstraints","panelData","collapse","expand","getId","getSize","isCollapsed","isExpanded","resize","size","parseFloat","flexGrow","toFixed","Panel","props","ref","currentCursorStyle","styleElement","getCursorStyle","state","constraintFlags","horizontalMin","EXCEEDED_HORIZONTAL_MIN","horizontalMax","EXCEEDED_HORIZONTAL_MAX","verticalMin","EXCEEDED_VERTICAL_MIN","verticalMax","EXCEEDED_VERTICAL_MAX","resetGlobalCursorStyle","document","head","removeChild","setGlobalCursorStyle","appendChild","innerHTML","concat","isKeyDown","event","type","isPointerEvent","startsWith","isMouseEvent","getResizeEventCoordinates","isPrimary","x","clientX","y","clientY","Infinity","getInputType","matchMedia","matches","intersects","rectOne","rectTwo","strict","width","height","compare","a","b","ancestors","get_ancestors","common_ancestor","at","pop","assert","z_indexes","get_z_index","find_stacking_context","childNodes","furthest_ancestors","i","child","Math","sign","is_flex_item","node","_get_parent","display","getComputedStyle","get_parent","creates_stacking_context","position","zIndex","opacity","transform","webkitTransform","mixBlendMode","filter","webkitFilter","isolation","test","willChange","webkitOverflowScrolling","nodes","Number","push","parentNode","ShadowRoot","host","isCoarsePointer","intersectingHandles","isPointerDown","ownerDocumentCounts","Map","panelConstraintFlags","registeredResizeHandlers","Set","registerResizeHandle","resizeHandleId","element","direction","hitAreaMargins","setResizeHandlerState","_ownerDocumentCounts$","ownerDocument","data","count","get","set","add","updateListeners","unregisterResizeHandle","_ownerDocumentCounts$2","delete","handlePointerDown","target","recalculateIntersectingHandles","updateResizeHandlerStates","preventDefault","stopPropagation","handlePointerMove","updateCursor","handlePointerUp","clear","_ref2","splice","targetElement","HTMLElement","forEach","dragHandleElement","dragHandleRect","getBoundingClientRect","bottom","left","right","top","margin","coarse","fine","eventIntersects","contains","currentElement","didIntersect","parentElement","reportConstraintsViolation","flag","intersectsHorizontal","intersectsVertical","_","body","removeEventListener","window","addEventListener","capture","action","isActive","includes","expectedCondition","message","console","error","PRECISION","fuzzyCompareNumbers","actual","expected","fractionDigits","fuzzyNumbersEqual$1","fuzzyNumbersEqual","fuzzyLayoutsEqual","index","actualSize","expectedSize","_ref3","panelConstraints","panelConstraintsArray","panelIndex","halfwayPoint","min","adjustLayoutByDelta","_ref4","delta","initialLayout","pivotIndices","prevLayout","trigger","nextLayout","firstPivotIndex","secondPivotIndex","deltaApplied","prevSize","localDelta","abs","increment","maxAvailableDelta","maxSafeSize","minAbsDelta","pivotIndex","deltaRemaining","unsafeSize","safeSize","toPrecision","localeCompare","numeric","totalSize","reduce","total","calculateAriaValues","_ref5","layout","panelsArray","currentMinSize","currentMaxSize","totalMinSize","totalMaxSize","firstIndex","valueMax","valueMin","max","valueNow","getResizeHandleElementsForGroup","scope","Array","from","querySelectorAll","getResizeHandleElementIndex","handles","findIndex","handle","getAttribute","determinePivotIndices","dragHandleId","panelGroupElement","getPanelGroupElement","rootElement","_dataset","dataset","panelGroupId","querySelector","getResizeHandleElement","getResizeHandlePanelIds","handleId","_panelsArray$index$id","_panelsArray$index","_panelsArray$id","_panelsArray","indexOf","idBefore","idAfter","useWindowSplitterPanelGroupBehavior","_ref6","committedValuesRef","eagerValuesRef","panelDataArray","setLayout","didWarnAboutMissingResizeHandle","resizeHandleElements","resizeHandleElement","setAttribute","round","removeAttribute","eagerValues","groupElement","cleanupFunctions","map","onKeyDown","defaultPrevented","key","cleanupFunction","areEqual","arrayA","arrayB","getResizeEventCursorPosition","isHorizontal","calculateDragOffsetPercentage","initialDragState","handleElement","initialCursorPosition","cursorPosition","groupRect","groupSizeInPixels","offsetPixels","offsetPercentage","calculateDeltaPercentage","keyboardResizeBy","shiftKey","movement","calculateUnsafeDefaultLayout","_ref7","numPanelsWithSizes","remainingSize","numRemainingPanels","callPanelCallbacks","panelIdToLastNotifiedSizeMap","lastNotifiedSize","compareLayouts","computePanelFlexBoxStyle","_ref8","dragState","precision","flexBasis","flexShrink","overflow","pointerEvents","debounce","callback","durationMs","timeoutId","callable","_len","args","_key","clearTimeout","setTimeout","initializeDefaultStorage","storageObject","localStorage","getItem","name","setItem","value","getPanelGroupKey","autoSaveId","getPanelKey","panels","panel","JSON","stringify","sort","join","loadSerializedPanelGroupState","storage","panelGroupKey","serialized","parsed","parse","loadPanelGroupState","_loadSerializedPanelG","_state$panelKey","panelKey","savePanelGroupState","panelSizesBeforeCollapse","sizes","_loadSerializedPanelG2","expandToSizes","Object","fromEntries","entries","validatePanelGroupLayout","_ref9","nextLayoutTotalSize","accumulated","LOCAL_STORAGE_DEBOUNCE_INTERVAL","defaultStorage","debounceMap","PanelGroupWithForwardedRef","_ref10","onLayout","panelGroupElementRef","setDragState","panelIdToLastNotifiedSizeMapRef","panelSizeBeforeCollapseRef","prevDeltaRef","panelDataArrayChanged","didLogIdAndOrderWarning","didLogPanelConstraintsWarning","prevPanelIds","getLayout","unsafeLayout","safeLayout","debouncedSave","clonedPanelDataArray","clonedPanelSizesBeforeCollapse","panelSize","panelDataHelper","isLastPanel","findPanelDataIndex","minSizeOverride","minSizeFromProps","prevPanelSize","baseSize","isPanelExpanded","panelA","panelB","orderA","orderB","resizeHandler","dir","layoutChanged","unsafePanelSize","prevCollapsedSize","prevCollapsible","nextCollapsedSize","nextCollapsible","nextMaxSize","nextMinSize","startDragging","stopDragging","flexDirection","Provider","PanelGroup","prevPanelData","useWindowSplitterResizeHandlerBehavior","_ref11","disabled","nextIndex","nextHandle","focus","PanelResizeHandle","_ref12","onDragging","tabIndex","_hitAreaMargins$coars","_hitAreaMargins$fine","elementRef","callbacksRef","panelGroupContext","registerResizeHandleWithParentGroup","setState","isFocused","setIsFocused","setResizeHandler","coarseHitAreaMargins","fineHitAreaMargins","touchAction","userSelect","onBlur","onFocus","role","getPanelElement","getPanelElementsForGroup","getIntersectingRectangle"],"sources":["C:/チーム開発/Food_searchApp/food_searchapp_react/node_modules/react-resizable-panels/dist/react-resizable-panels.browser.esm.js"],"sourcesContent":["import * as React from 'react';\n\n// This module exists to work around Webpack issue https://github.com/webpack/webpack/issues/14814\n\n// eslint-disable-next-line no-restricted-imports\n\nconst {\n  createElement,\n  createContext,\n  createRef,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} = React;\n\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\nconst useId = React[\"useId\".toString()];\nconst useLayoutEffect_do_not_use_directly = useLayoutEffect;\n\n// The \"contextmenu\" event is not supported as a PointerEvent in all browsers yet, so MouseEvent still need to be handled\n\nconst PanelGroupContext = createContext(null);\nPanelGroupContext.displayName = \"PanelGroupContext\";\n\nconst useIsomorphicLayoutEffect = useLayoutEffect_do_not_use_directly ;\n\nconst wrappedUseId = typeof useId === \"function\" ? useId : () => null;\nlet counter = 0;\nfunction useUniqueId(idFromParams = null) {\n  const idFromUseId = wrappedUseId();\n  const idRef = useRef(idFromParams || idFromUseId || null);\n  if (idRef.current === null) {\n    idRef.current = \"\" + counter++;\n  }\n  return idFromParams !== null && idFromParams !== void 0 ? idFromParams : idRef.current;\n}\n\nfunction PanelWithForwardedRef({\n  children,\n  className: classNameFromProps = \"\",\n  collapsedSize,\n  collapsible,\n  defaultSize,\n  forwardedRef,\n  id: idFromProps,\n  maxSize,\n  minSize,\n  onCollapse,\n  onExpand,\n  onResize,\n  order,\n  style: styleFromProps,\n  tagName: Type = \"div\",\n  ...rest\n}) {\n  const context = useContext(PanelGroupContext);\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`);\n  }\n  const {\n    collapsePanel,\n    expandPanel,\n    getPanelSize,\n    getPanelStyle,\n    groupId,\n    isPanelCollapsed,\n    reevaluatePanelConstraints,\n    registerPanel,\n    resizePanel,\n    unregisterPanel\n  } = context;\n  const panelId = useUniqueId(idFromProps);\n  const panelDataRef = useRef({\n    callbacks: {\n      onCollapse,\n      onExpand,\n      onResize\n    },\n    constraints: {\n      collapsedSize,\n      collapsible,\n      defaultSize,\n      maxSize,\n      minSize\n    },\n    id: panelId,\n    idIsFromProps: idFromProps !== undefined,\n    order\n  });\n  useRef({\n    didLogMissingDefaultSizeWarning: false\n  });\n  useIsomorphicLayoutEffect(() => {\n    const {\n      callbacks,\n      constraints\n    } = panelDataRef.current;\n    const prevConstraints = {\n      ...constraints\n    };\n    panelDataRef.current.id = panelId;\n    panelDataRef.current.idIsFromProps = idFromProps !== undefined;\n    panelDataRef.current.order = order;\n    callbacks.onCollapse = onCollapse;\n    callbacks.onExpand = onExpand;\n    callbacks.onResize = onResize;\n    constraints.collapsedSize = collapsedSize;\n    constraints.collapsible = collapsible;\n    constraints.defaultSize = defaultSize;\n    constraints.maxSize = maxSize;\n    constraints.minSize = minSize;\n\n    // If constraints have changed, we should revisit panel sizes.\n    // This is uncommon but may happen if people are trying to implement pixel based constraints.\n    if (prevConstraints.collapsedSize !== constraints.collapsedSize || prevConstraints.collapsible !== constraints.collapsible || prevConstraints.maxSize !== constraints.maxSize || prevConstraints.minSize !== constraints.minSize) {\n      reevaluatePanelConstraints(panelDataRef.current, prevConstraints);\n    }\n  });\n  useIsomorphicLayoutEffect(() => {\n    const panelData = panelDataRef.current;\n    registerPanel(panelData);\n    return () => {\n      unregisterPanel(panelData);\n    };\n  }, [order, panelId, registerPanel, unregisterPanel]);\n  useImperativeHandle(forwardedRef, () => ({\n    collapse: () => {\n      collapsePanel(panelDataRef.current);\n    },\n    expand: minSize => {\n      expandPanel(panelDataRef.current, minSize);\n    },\n    getId() {\n      return panelId;\n    },\n    getSize() {\n      return getPanelSize(panelDataRef.current);\n    },\n    isCollapsed() {\n      return isPanelCollapsed(panelDataRef.current);\n    },\n    isExpanded() {\n      return !isPanelCollapsed(panelDataRef.current);\n    },\n    resize: size => {\n      resizePanel(panelDataRef.current, size);\n    }\n  }), [collapsePanel, expandPanel, getPanelSize, isPanelCollapsed, panelId, resizePanel]);\n  const style = getPanelStyle(panelDataRef.current, defaultSize);\n  return createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    id: idFromProps,\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    // CSS selectors\n    \"data-panel\": \"\",\n    \"data-panel-collapsible\": collapsible || undefined,\n    \"data-panel-group-id\": groupId,\n    \"data-panel-id\": panelId,\n    \"data-panel-size\": parseFloat(\"\" + style.flexGrow).toFixed(1)\n  });\n}\nconst Panel = forwardRef((props, ref) => createElement(PanelWithForwardedRef, {\n  ...props,\n  forwardedRef: ref\n}));\nPanelWithForwardedRef.displayName = \"Panel\";\nPanel.displayName = \"forwardRef(Panel)\";\n\nlet currentCursorStyle = null;\nlet styleElement = null;\nfunction getCursorStyle(state, constraintFlags) {\n  if (constraintFlags) {\n    const horizontalMin = (constraintFlags & EXCEEDED_HORIZONTAL_MIN) !== 0;\n    const horizontalMax = (constraintFlags & EXCEEDED_HORIZONTAL_MAX) !== 0;\n    const verticalMin = (constraintFlags & EXCEEDED_VERTICAL_MIN) !== 0;\n    const verticalMax = (constraintFlags & EXCEEDED_VERTICAL_MAX) !== 0;\n    if (horizontalMin) {\n      if (verticalMin) {\n        return \"se-resize\";\n      } else if (verticalMax) {\n        return \"ne-resize\";\n      } else {\n        return \"e-resize\";\n      }\n    } else if (horizontalMax) {\n      if (verticalMin) {\n        return \"sw-resize\";\n      } else if (verticalMax) {\n        return \"nw-resize\";\n      } else {\n        return \"w-resize\";\n      }\n    } else if (verticalMin) {\n      return \"s-resize\";\n    } else if (verticalMax) {\n      return \"n-resize\";\n    }\n  }\n  switch (state) {\n    case \"horizontal\":\n      return \"ew-resize\";\n    case \"intersection\":\n      return \"move\";\n    case \"vertical\":\n      return \"ns-resize\";\n  }\n}\nfunction resetGlobalCursorStyle() {\n  if (styleElement !== null) {\n    document.head.removeChild(styleElement);\n    currentCursorStyle = null;\n    styleElement = null;\n  }\n}\nfunction setGlobalCursorStyle(state, constraintFlags) {\n  const style = getCursorStyle(state, constraintFlags);\n  if (currentCursorStyle === style) {\n    return;\n  }\n  currentCursorStyle = style;\n  if (styleElement === null) {\n    styleElement = document.createElement(\"style\");\n    document.head.appendChild(styleElement);\n  }\n  styleElement.innerHTML = `*{cursor: ${style}!important;}`;\n}\n\nfunction isKeyDown(event) {\n  return event.type === \"keydown\";\n}\nfunction isPointerEvent(event) {\n  return event.type.startsWith(\"pointer\");\n}\nfunction isMouseEvent(event) {\n  return event.type.startsWith(\"mouse\");\n}\n\nfunction getResizeEventCoordinates(event) {\n  if (isPointerEvent(event)) {\n    if (event.isPrimary) {\n      return {\n        x: event.clientX,\n        y: event.clientY\n      };\n    }\n  } else if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n  return {\n    x: Infinity,\n    y: Infinity\n  };\n}\n\nfunction getInputType() {\n  if (typeof matchMedia === \"function\") {\n    return matchMedia(\"(pointer:coarse)\").matches ? \"coarse\" : \"fine\";\n  }\n}\n\nfunction intersects(rectOne, rectTwo, strict) {\n  if (strict) {\n    return rectOne.x < rectTwo.x + rectTwo.width && rectOne.x + rectOne.width > rectTwo.x && rectOne.y < rectTwo.y + rectTwo.height && rectOne.y + rectOne.height > rectTwo.y;\n  } else {\n    return rectOne.x <= rectTwo.x + rectTwo.width && rectOne.x + rectOne.width >= rectTwo.x && rectOne.y <= rectTwo.y + rectTwo.height && rectOne.y + rectOne.height >= rectTwo.y;\n  }\n}\n\n// Forked from NPM stacking-order@2.0.0\n\n/**\n * Determine which of two nodes appears in front of the other —\n * if `a` is in front, returns 1, otherwise returns -1\n * @param {HTMLElement} a\n * @param {HTMLElement} b\n */\nfunction compare(a, b) {\n  if (a === b) throw new Error(\"Cannot compare node with itself\");\n  const ancestors = {\n    a: get_ancestors(a),\n    b: get_ancestors(b)\n  };\n  let common_ancestor;\n\n  // remove shared ancestors\n  while (ancestors.a.at(-1) === ancestors.b.at(-1)) {\n    a = ancestors.a.pop();\n    b = ancestors.b.pop();\n    common_ancestor = a;\n  }\n  assert(common_ancestor, \"Stacking order can only be calculated for elements with a common ancestor\");\n  const z_indexes = {\n    a: get_z_index(find_stacking_context(ancestors.a)),\n    b: get_z_index(find_stacking_context(ancestors.b))\n  };\n  if (z_indexes.a === z_indexes.b) {\n    const children = common_ancestor.childNodes;\n    const furthest_ancestors = {\n      a: ancestors.a.at(-1),\n      b: ancestors.b.at(-1)\n    };\n    let i = children.length;\n    while (i--) {\n      const child = children[i];\n      if (child === furthest_ancestors.a) return 1;\n      if (child === furthest_ancestors.b) return -1;\n    }\n  }\n  return Math.sign(z_indexes.a - z_indexes.b);\n}\nconst props = /\\b(?:position|zIndex|opacity|transform|webkitTransform|mixBlendMode|filter|webkitFilter|isolation)\\b/;\n\n/** @param {HTMLElement} node */\nfunction is_flex_item(node) {\n  var _get_parent;\n  // @ts-ignore\n  const display = getComputedStyle((_get_parent = get_parent(node)) !== null && _get_parent !== void 0 ? _get_parent : node).display;\n  return display === \"flex\" || display === \"inline-flex\";\n}\n\n/** @param {HTMLElement} node */\nfunction creates_stacking_context(node) {\n  const style = getComputedStyle(node);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n  if (style.position === \"fixed\") return true;\n  // Forked to fix upstream bug https://github.com/Rich-Harris/stacking-order/issues/3\n  // if (\n  //   (style.zIndex !== \"auto\" && style.position !== \"static\") ||\n  //   is_flex_item(node)\n  // )\n  if (style.zIndex !== \"auto\" && (style.position !== \"static\" || is_flex_item(node))) return true;\n  if (+style.opacity < 1) return true;\n  if (\"transform\" in style && style.transform !== \"none\") return true;\n  if (\"webkitTransform\" in style && style.webkitTransform !== \"none\") return true;\n  if (\"mixBlendMode\" in style && style.mixBlendMode !== \"normal\") return true;\n  if (\"filter\" in style && style.filter !== \"none\") return true;\n  if (\"webkitFilter\" in style && style.webkitFilter !== \"none\") return true;\n  if (\"isolation\" in style && style.isolation === \"isolate\") return true;\n  if (props.test(style.willChange)) return true;\n  // @ts-expect-error\n  if (style.webkitOverflowScrolling === \"touch\") return true;\n  return false;\n}\n\n/** @param {HTMLElement[]} nodes */\nfunction find_stacking_context(nodes) {\n  let i = nodes.length;\n  while (i--) {\n    const node = nodes[i];\n    assert(node, \"Missing node\");\n    if (creates_stacking_context(node)) return node;\n  }\n  return null;\n}\n\n/** @param {HTMLElement} node */\nfunction get_z_index(node) {\n  return node && Number(getComputedStyle(node).zIndex) || 0;\n}\n\n/** @param {HTMLElement} node */\nfunction get_ancestors(node) {\n  const ancestors = [];\n  while (node) {\n    ancestors.push(node);\n    // @ts-ignore\n    node = get_parent(node);\n  }\n  return ancestors; // [ node, ... <body>, <html>, document ]\n}\n\n/** @param {HTMLElement} node */\nfunction get_parent(node) {\n  const {\n    parentNode\n  } = node;\n  if (parentNode && parentNode instanceof ShadowRoot) {\n    return parentNode.host;\n  }\n  return parentNode;\n}\n\nconst EXCEEDED_HORIZONTAL_MIN = 0b0001;\nconst EXCEEDED_HORIZONTAL_MAX = 0b0010;\nconst EXCEEDED_VERTICAL_MIN = 0b0100;\nconst EXCEEDED_VERTICAL_MAX = 0b1000;\nconst isCoarsePointer = getInputType() === \"coarse\";\nlet intersectingHandles = [];\nlet isPointerDown = false;\nlet ownerDocumentCounts = new Map();\nlet panelConstraintFlags = new Map();\nconst registeredResizeHandlers = new Set();\nfunction registerResizeHandle(resizeHandleId, element, direction, hitAreaMargins, setResizeHandlerState) {\n  var _ownerDocumentCounts$;\n  const {\n    ownerDocument\n  } = element;\n  const data = {\n    direction,\n    element,\n    hitAreaMargins,\n    setResizeHandlerState\n  };\n  const count = (_ownerDocumentCounts$ = ownerDocumentCounts.get(ownerDocument)) !== null && _ownerDocumentCounts$ !== void 0 ? _ownerDocumentCounts$ : 0;\n  ownerDocumentCounts.set(ownerDocument, count + 1);\n  registeredResizeHandlers.add(data);\n  updateListeners();\n  return function unregisterResizeHandle() {\n    var _ownerDocumentCounts$2;\n    panelConstraintFlags.delete(resizeHandleId);\n    registeredResizeHandlers.delete(data);\n    const count = (_ownerDocumentCounts$2 = ownerDocumentCounts.get(ownerDocument)) !== null && _ownerDocumentCounts$2 !== void 0 ? _ownerDocumentCounts$2 : 1;\n    ownerDocumentCounts.set(ownerDocument, count - 1);\n    updateListeners();\n    if (count === 1) {\n      ownerDocumentCounts.delete(ownerDocument);\n    }\n  };\n}\nfunction handlePointerDown(event) {\n  const {\n    target\n  } = event;\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  isPointerDown = true;\n  recalculateIntersectingHandles({\n    target,\n    x,\n    y\n  });\n  updateListeners();\n  if (intersectingHandles.length > 0) {\n    updateResizeHandlerStates(\"down\", event);\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\nfunction handlePointerMove(event) {\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  if (!isPointerDown) {\n    const {\n      target\n    } = event;\n\n    // Recalculate intersecting handles whenever the pointer moves, except if it has already been pressed\n    // at that point, the handles may not move with the pointer (depending on constraints)\n    // but the same set of active handles should be locked until the pointer is released\n    recalculateIntersectingHandles({\n      target,\n      x,\n      y\n    });\n  }\n  updateResizeHandlerStates(\"move\", event);\n\n  // Update cursor based on return value(s) from active handles\n  updateCursor();\n  if (intersectingHandles.length > 0) {\n    event.preventDefault();\n  }\n}\nfunction handlePointerUp(event) {\n  const {\n    target\n  } = event;\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  panelConstraintFlags.clear();\n  isPointerDown = false;\n  if (intersectingHandles.length > 0) {\n    event.preventDefault();\n  }\n  updateResizeHandlerStates(\"up\", event);\n  recalculateIntersectingHandles({\n    target,\n    x,\n    y\n  });\n  updateCursor();\n  updateListeners();\n}\nfunction recalculateIntersectingHandles({\n  target,\n  x,\n  y\n}) {\n  intersectingHandles.splice(0);\n  let targetElement = null;\n  if (target instanceof HTMLElement) {\n    targetElement = target;\n  }\n  registeredResizeHandlers.forEach(data => {\n    const {\n      element: dragHandleElement,\n      hitAreaMargins\n    } = data;\n    const dragHandleRect = dragHandleElement.getBoundingClientRect();\n    const {\n      bottom,\n      left,\n      right,\n      top\n    } = dragHandleRect;\n    const margin = isCoarsePointer ? hitAreaMargins.coarse : hitAreaMargins.fine;\n    const eventIntersects = x >= left - margin && x <= right + margin && y >= top - margin && y <= bottom + margin;\n    if (eventIntersects) {\n      // TRICKY\n      // We listen for pointers events at the root in order to support hit area margins\n      // (determining when the pointer is close enough to an element to be considered a \"hit\")\n      // Clicking on an element \"above\" a handle (e.g. a modal) should prevent a hit though\n      // so at this point we need to compare stacking order of a potentially intersecting drag handle,\n      // and the element that was actually clicked/touched\n      if (targetElement !== null && dragHandleElement !== targetElement && !dragHandleElement.contains(targetElement) && !targetElement.contains(dragHandleElement) &&\n      // Calculating stacking order has a cost, so we should avoid it if possible\n      // That is why we only check potentially intersecting handles,\n      // and why we skip if the event target is within the handle's DOM\n      compare(targetElement, dragHandleElement) > 0) {\n        // If the target is above the drag handle, then we also need to confirm they overlap\n        // If they are beside each other (e.g. a panel and its drag handle) then the handle is still interactive\n        //\n        // It's not enough to compare only the target\n        // The target might be a small element inside of a larger container\n        // (For example, a SPAN or a DIV inside of a larger modal dialog)\n        let currentElement = targetElement;\n        let didIntersect = false;\n        while (currentElement) {\n          if (currentElement.contains(dragHandleElement)) {\n            break;\n          } else if (intersects(currentElement.getBoundingClientRect(), dragHandleRect, true)) {\n            didIntersect = true;\n            break;\n          }\n          currentElement = currentElement.parentElement;\n        }\n        if (didIntersect) {\n          return;\n        }\n      }\n      intersectingHandles.push(data);\n    }\n  });\n}\nfunction reportConstraintsViolation(resizeHandleId, flag) {\n  panelConstraintFlags.set(resizeHandleId, flag);\n}\nfunction updateCursor() {\n  let intersectsHorizontal = false;\n  let intersectsVertical = false;\n  intersectingHandles.forEach(data => {\n    const {\n      direction\n    } = data;\n    if (direction === \"horizontal\") {\n      intersectsHorizontal = true;\n    } else {\n      intersectsVertical = true;\n    }\n  });\n  let constraintFlags = 0;\n  panelConstraintFlags.forEach(flag => {\n    constraintFlags |= flag;\n  });\n  if (intersectsHorizontal && intersectsVertical) {\n    setGlobalCursorStyle(\"intersection\", constraintFlags);\n  } else if (intersectsHorizontal) {\n    setGlobalCursorStyle(\"horizontal\", constraintFlags);\n  } else if (intersectsVertical) {\n    setGlobalCursorStyle(\"vertical\", constraintFlags);\n  } else {\n    resetGlobalCursorStyle();\n  }\n}\nfunction updateListeners() {\n  ownerDocumentCounts.forEach((_, ownerDocument) => {\n    const {\n      body\n    } = ownerDocument;\n    body.removeEventListener(\"contextmenu\", handlePointerUp);\n    body.removeEventListener(\"pointerdown\", handlePointerDown);\n    body.removeEventListener(\"pointerleave\", handlePointerMove);\n    body.removeEventListener(\"pointermove\", handlePointerMove);\n  });\n  window.removeEventListener(\"pointerup\", handlePointerUp);\n  window.removeEventListener(\"pointercancel\", handlePointerUp);\n  if (registeredResizeHandlers.size > 0) {\n    if (isPointerDown) {\n      if (intersectingHandles.length > 0) {\n        ownerDocumentCounts.forEach((count, ownerDocument) => {\n          const {\n            body\n          } = ownerDocument;\n          if (count > 0) {\n            body.addEventListener(\"contextmenu\", handlePointerUp);\n            body.addEventListener(\"pointerleave\", handlePointerMove);\n            body.addEventListener(\"pointermove\", handlePointerMove);\n          }\n        });\n      }\n      window.addEventListener(\"pointerup\", handlePointerUp);\n      window.addEventListener(\"pointercancel\", handlePointerUp);\n    } else {\n      ownerDocumentCounts.forEach((count, ownerDocument) => {\n        const {\n          body\n        } = ownerDocument;\n        if (count > 0) {\n          body.addEventListener(\"pointerdown\", handlePointerDown, {\n            capture: true\n          });\n          body.addEventListener(\"pointermove\", handlePointerMove);\n        }\n      });\n    }\n  }\n}\nfunction updateResizeHandlerStates(action, event) {\n  registeredResizeHandlers.forEach(data => {\n    const {\n      setResizeHandlerState\n    } = data;\n    const isActive = intersectingHandles.includes(data);\n    setResizeHandlerState(action, isActive, event);\n  });\n}\n\nfunction assert(expectedCondition, message) {\n  if (!expectedCondition) {\n    console.error(message);\n    throw Error(message);\n  }\n}\n\nconst PRECISION = 10;\n\nfunction fuzzyCompareNumbers(actual, expected, fractionDigits = PRECISION) {\n  if (actual.toFixed(fractionDigits) === expected.toFixed(fractionDigits)) {\n    return 0;\n  } else {\n    return actual > expected ? 1 : -1;\n  }\n}\nfunction fuzzyNumbersEqual$1(actual, expected, fractionDigits = PRECISION) {\n  return fuzzyCompareNumbers(actual, expected, fractionDigits) === 0;\n}\n\nfunction fuzzyNumbersEqual(actual, expected, fractionDigits) {\n  return fuzzyCompareNumbers(actual, expected, fractionDigits) === 0;\n}\n\nfunction fuzzyLayoutsEqual(actual, expected, fractionDigits) {\n  if (actual.length !== expected.length) {\n    return false;\n  }\n  for (let index = 0; index < actual.length; index++) {\n    const actualSize = actual[index];\n    const expectedSize = expected[index];\n    if (!fuzzyNumbersEqual(actualSize, expectedSize, fractionDigits)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Panel size must be in percentages; pixel values should be pre-converted\nfunction resizePanel({\n  panelConstraints: panelConstraintsArray,\n  panelIndex,\n  size\n}) {\n  const panelConstraints = panelConstraintsArray[panelIndex];\n  assert(panelConstraints != null, `Panel constraints not found for index ${panelIndex}`);\n  let {\n    collapsedSize = 0,\n    collapsible,\n    maxSize = 100,\n    minSize = 0\n  } = panelConstraints;\n  if (fuzzyCompareNumbers(size, minSize) < 0) {\n    if (collapsible) {\n      // Collapsible panels should snap closed or open only once they cross the halfway point between collapsed and min size.\n      const halfwayPoint = (collapsedSize + minSize) / 2;\n      if (fuzzyCompareNumbers(size, halfwayPoint) < 0) {\n        size = collapsedSize;\n      } else {\n        size = minSize;\n      }\n    } else {\n      size = minSize;\n    }\n  }\n  size = Math.min(maxSize, size);\n  size = parseFloat(size.toFixed(PRECISION));\n  return size;\n}\n\n// All units must be in percentages; pixel values should be pre-converted\nfunction adjustLayoutByDelta({\n  delta,\n  initialLayout,\n  panelConstraints: panelConstraintsArray,\n  pivotIndices,\n  prevLayout,\n  trigger\n}) {\n  if (fuzzyNumbersEqual(delta, 0)) {\n    return initialLayout;\n  }\n  const nextLayout = [...initialLayout];\n  const [firstPivotIndex, secondPivotIndex] = pivotIndices;\n  assert(firstPivotIndex != null, \"Invalid first pivot index\");\n  assert(secondPivotIndex != null, \"Invalid second pivot index\");\n  let deltaApplied = 0;\n\n  // const DEBUG = [];\n  // DEBUG.push(`adjustLayoutByDelta()`);\n  // DEBUG.push(`  initialLayout: ${initialLayout.join(\", \")}`);\n  // DEBUG.push(`  prevLayout: ${prevLayout.join(\", \")}`);\n  // DEBUG.push(`  delta: ${delta}`);\n  // DEBUG.push(`  pivotIndices: ${pivotIndices.join(\", \")}`);\n  // DEBUG.push(`  trigger: ${trigger}`);\n  // DEBUG.push(\"\");\n\n  // A resizing panel affects the panels before or after it.\n  //\n  // A negative delta means the panel(s) immediately after the resize handle should grow/expand by decreasing its offset.\n  // Other panels may also need to shrink/contract (and shift) to make room, depending on the min weights.\n  //\n  // A positive delta means the panel(s) immediately before the resize handle should \"expand\".\n  // This is accomplished by shrinking/contracting (and shifting) one or more of the panels after the resize handle.\n\n  {\n    // If this is a resize triggered by a keyboard event, our logic for expanding/collapsing is different.\n    // We no longer check the halfway threshold because this may prevent the panel from expanding at all.\n    if (trigger === \"keyboard\") {\n      {\n        // Check if we should expand a collapsed panel\n        const index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n        const panelConstraints = panelConstraintsArray[index];\n        assert(panelConstraints, `Panel constraints not found for index ${index}`);\n        const {\n          collapsedSize = 0,\n          collapsible,\n          minSize = 0\n        } = panelConstraints;\n\n        // DEBUG.push(`edge case check 1: ${index}`);\n        // DEBUG.push(`  -> collapsible? ${collapsible}`);\n        if (collapsible) {\n          const prevSize = initialLayout[index];\n          assert(prevSize != null, `Previous layout not found for panel index ${index}`);\n          if (fuzzyNumbersEqual(prevSize, collapsedSize)) {\n            const localDelta = minSize - prevSize;\n            // DEBUG.push(`  -> expand delta: ${localDelta}`);\n\n            if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n              delta = delta < 0 ? 0 - localDelta : localDelta;\n              // DEBUG.push(`  -> delta: ${delta}`);\n            }\n          }\n        }\n      }\n\n      {\n        // Check if we should collapse a panel at its minimum size\n        const index = delta < 0 ? firstPivotIndex : secondPivotIndex;\n        const panelConstraints = panelConstraintsArray[index];\n        assert(panelConstraints, `No panel constraints found for index ${index}`);\n        const {\n          collapsedSize = 0,\n          collapsible,\n          minSize = 0\n        } = panelConstraints;\n\n        // DEBUG.push(`edge case check 2: ${index}`);\n        // DEBUG.push(`  -> collapsible? ${collapsible}`);\n        if (collapsible) {\n          const prevSize = initialLayout[index];\n          assert(prevSize != null, `Previous layout not found for panel index ${index}`);\n          if (fuzzyNumbersEqual(prevSize, minSize)) {\n            const localDelta = prevSize - collapsedSize;\n            // DEBUG.push(`  -> expand delta: ${localDelta}`);\n\n            if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n              delta = delta < 0 ? 0 - localDelta : localDelta;\n              // DEBUG.push(`  -> delta: ${delta}`);\n            }\n          }\n        }\n      }\n    }\n    // DEBUG.push(\"\");\n  }\n\n  {\n    // Pre-calculate max available delta in the opposite direction of our pivot.\n    // This will be the maximum amount we're allowed to expand/contract the panels in the primary direction.\n    // If this amount is less than the requested delta, adjust the requested delta.\n    // If this amount is greater than the requested delta, that's useful information too–\n    // as an expanding panel might change from collapsed to min size.\n\n    const increment = delta < 0 ? 1 : -1;\n    let index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n    let maxAvailableDelta = 0;\n\n    // DEBUG.push(\"pre calc...\");\n    while (true) {\n      const prevSize = initialLayout[index];\n      assert(prevSize != null, `Previous layout not found for panel index ${index}`);\n      const maxSafeSize = resizePanel({\n        panelConstraints: panelConstraintsArray,\n        panelIndex: index,\n        size: 100\n      });\n      const delta = maxSafeSize - prevSize;\n      // DEBUG.push(`  ${index}: ${prevSize} -> ${maxSafeSize}`);\n\n      maxAvailableDelta += delta;\n      index += increment;\n      if (index < 0 || index >= panelConstraintsArray.length) {\n        break;\n      }\n    }\n\n    // DEBUG.push(`  -> max available delta: ${maxAvailableDelta}`);\n    const minAbsDelta = Math.min(Math.abs(delta), Math.abs(maxAvailableDelta));\n    delta = delta < 0 ? 0 - minAbsDelta : minAbsDelta;\n    // DEBUG.push(`  -> adjusted delta: ${delta}`);\n    // DEBUG.push(\"\");\n  }\n\n  {\n    // Delta added to a panel needs to be subtracted from other panels (within the constraints that those panels allow).\n\n    const pivotIndex = delta < 0 ? firstPivotIndex : secondPivotIndex;\n    let index = pivotIndex;\n    while (index >= 0 && index < panelConstraintsArray.length) {\n      const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied);\n      const prevSize = initialLayout[index];\n      assert(prevSize != null, `Previous layout not found for panel index ${index}`);\n      const unsafeSize = prevSize - deltaRemaining;\n      const safeSize = resizePanel({\n        panelConstraints: panelConstraintsArray,\n        panelIndex: index,\n        size: unsafeSize\n      });\n      if (!fuzzyNumbersEqual(prevSize, safeSize)) {\n        deltaApplied += prevSize - safeSize;\n        nextLayout[index] = safeSize;\n        if (deltaApplied.toPrecision(3).localeCompare(Math.abs(delta).toPrecision(3), undefined, {\n          numeric: true\n        }) >= 0) {\n          break;\n        }\n      }\n      if (delta < 0) {\n        index--;\n      } else {\n        index++;\n      }\n    }\n  }\n  // DEBUG.push(`after 1: ${nextLayout.join(\", \")}`);\n  // DEBUG.push(`  deltaApplied: ${deltaApplied}`);\n  // DEBUG.push(\"\");\n\n  // If we were unable to resize any of the panels panels, return the previous state.\n  // This will essentially bailout and ignore e.g. drags past a panel's boundaries\n  if (fuzzyLayoutsEqual(prevLayout, nextLayout)) {\n    // DEBUG.push(`bailout to previous layout: ${prevLayout.join(\", \")}`);\n    // console.log(DEBUG.join(\"\\n\"));\n\n    return prevLayout;\n  }\n  {\n    // Now distribute the applied delta to the panels in the other direction\n    const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n    const prevSize = initialLayout[pivotIndex];\n    assert(prevSize != null, `Previous layout not found for panel index ${pivotIndex}`);\n    const unsafeSize = prevSize + deltaApplied;\n    const safeSize = resizePanel({\n      panelConstraints: panelConstraintsArray,\n      panelIndex: pivotIndex,\n      size: unsafeSize\n    });\n\n    // Adjust the pivot panel before, but only by the amount that surrounding panels were able to shrink/contract.\n    nextLayout[pivotIndex] = safeSize;\n\n    // Edge case where expanding or contracting one panel caused another one to change collapsed state\n    if (!fuzzyNumbersEqual(safeSize, unsafeSize)) {\n      let deltaRemaining = unsafeSize - safeSize;\n      const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n      let index = pivotIndex;\n      while (index >= 0 && index < panelConstraintsArray.length) {\n        const prevSize = nextLayout[index];\n        assert(prevSize != null, `Previous layout not found for panel index ${index}`);\n        const unsafeSize = prevSize + deltaRemaining;\n        const safeSize = resizePanel({\n          panelConstraints: panelConstraintsArray,\n          panelIndex: index,\n          size: unsafeSize\n        });\n        if (!fuzzyNumbersEqual(prevSize, safeSize)) {\n          deltaRemaining -= safeSize - prevSize;\n          nextLayout[index] = safeSize;\n        }\n        if (fuzzyNumbersEqual(deltaRemaining, 0)) {\n          break;\n        }\n        if (delta > 0) {\n          index--;\n        } else {\n          index++;\n        }\n      }\n    }\n  }\n  // DEBUG.push(`after 2: ${nextLayout.join(\", \")}`);\n  // DEBUG.push(`  deltaApplied: ${deltaApplied}`);\n  // DEBUG.push(\"\");\n\n  const totalSize = nextLayout.reduce((total, size) => size + total, 0);\n  // DEBUG.push(`total size: ${totalSize}`);\n\n  // If our new layout doesn't add up to 100%, that means the requested delta can't be applied\n  // In that case, fall back to our most recent valid layout\n  if (!fuzzyNumbersEqual(totalSize, 100)) {\n    // DEBUG.push(`bailout to previous layout: ${prevLayout.join(\", \")}`);\n    // console.log(DEBUG.join(\"\\n\"));\n\n    return prevLayout;\n  }\n\n  // console.log(DEBUG.join(\"\\n\"));\n  return nextLayout;\n}\n\nfunction calculateAriaValues({\n  layout,\n  panelsArray,\n  pivotIndices\n}) {\n  let currentMinSize = 0;\n  let currentMaxSize = 100;\n  let totalMinSize = 0;\n  let totalMaxSize = 0;\n  const firstIndex = pivotIndices[0];\n  assert(firstIndex != null, \"No pivot index found\");\n\n  // A panel's effective min/max sizes also need to account for other panel's sizes.\n  panelsArray.forEach((panelData, index) => {\n    const {\n      constraints\n    } = panelData;\n    const {\n      maxSize = 100,\n      minSize = 0\n    } = constraints;\n    if (index === firstIndex) {\n      currentMinSize = minSize;\n      currentMaxSize = maxSize;\n    } else {\n      totalMinSize += minSize;\n      totalMaxSize += maxSize;\n    }\n  });\n  const valueMax = Math.min(currentMaxSize, 100 - totalMinSize);\n  const valueMin = Math.max(currentMinSize, 100 - totalMaxSize);\n  const valueNow = layout[firstIndex];\n  return {\n    valueMax,\n    valueMin,\n    valueNow\n  };\n}\n\nfunction getResizeHandleElementsForGroup(groupId, scope = document) {\n  return Array.from(scope.querySelectorAll(`[data-panel-resize-handle-id][data-panel-group-id=\"${groupId}\"]`));\n}\n\nfunction getResizeHandleElementIndex(groupId, id, scope = document) {\n  const handles = getResizeHandleElementsForGroup(groupId, scope);\n  const index = handles.findIndex(handle => handle.getAttribute(\"data-panel-resize-handle-id\") === id);\n  return index !== null && index !== void 0 ? index : null;\n}\n\nfunction determinePivotIndices(groupId, dragHandleId, panelGroupElement) {\n  const index = getResizeHandleElementIndex(groupId, dragHandleId, panelGroupElement);\n  return index != null ? [index, index + 1] : [-1, -1];\n}\n\nfunction getPanelGroupElement(id, rootElement = document) {\n  var _dataset;\n  //If the root element is the PanelGroup\n  if (rootElement instanceof HTMLElement && (rootElement === null || rootElement === void 0 ? void 0 : (_dataset = rootElement.dataset) === null || _dataset === void 0 ? void 0 : _dataset.panelGroupId) == id) {\n    return rootElement;\n  }\n\n  //Else query children\n  const element = rootElement.querySelector(`[data-panel-group][data-panel-group-id=\"${id}\"]`);\n  if (element) {\n    return element;\n  }\n  return null;\n}\n\nfunction getResizeHandleElement(id, scope = document) {\n  const element = scope.querySelector(`[data-panel-resize-handle-id=\"${id}\"]`);\n  if (element) {\n    return element;\n  }\n  return null;\n}\n\nfunction getResizeHandlePanelIds(groupId, handleId, panelsArray, scope = document) {\n  var _panelsArray$index$id, _panelsArray$index, _panelsArray$id, _panelsArray;\n  const handle = getResizeHandleElement(handleId, scope);\n  const handles = getResizeHandleElementsForGroup(groupId, scope);\n  const index = handle ? handles.indexOf(handle) : -1;\n  const idBefore = (_panelsArray$index$id = (_panelsArray$index = panelsArray[index]) === null || _panelsArray$index === void 0 ? void 0 : _panelsArray$index.id) !== null && _panelsArray$index$id !== void 0 ? _panelsArray$index$id : null;\n  const idAfter = (_panelsArray$id = (_panelsArray = panelsArray[index + 1]) === null || _panelsArray === void 0 ? void 0 : _panelsArray.id) !== null && _panelsArray$id !== void 0 ? _panelsArray$id : null;\n  return [idBefore, idAfter];\n}\n\n// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\n\nfunction useWindowSplitterPanelGroupBehavior({\n  committedValuesRef,\n  eagerValuesRef,\n  groupId,\n  layout,\n  panelDataArray,\n  panelGroupElement,\n  setLayout\n}) {\n  useRef({\n    didWarnAboutMissingResizeHandle: false\n  });\n  useIsomorphicLayoutEffect(() => {\n    if (!panelGroupElement) {\n      return;\n    }\n    const resizeHandleElements = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n    for (let index = 0; index < panelDataArray.length - 1; index++) {\n      const {\n        valueMax,\n        valueMin,\n        valueNow\n      } = calculateAriaValues({\n        layout,\n        panelsArray: panelDataArray,\n        pivotIndices: [index, index + 1]\n      });\n      const resizeHandleElement = resizeHandleElements[index];\n      if (resizeHandleElement == null) ; else {\n        const panelData = panelDataArray[index];\n        assert(panelData, `No panel data found for index \"${index}\"`);\n        resizeHandleElement.setAttribute(\"aria-controls\", panelData.id);\n        resizeHandleElement.setAttribute(\"aria-valuemax\", \"\" + Math.round(valueMax));\n        resizeHandleElement.setAttribute(\"aria-valuemin\", \"\" + Math.round(valueMin));\n        resizeHandleElement.setAttribute(\"aria-valuenow\", valueNow != null ? \"\" + Math.round(valueNow) : \"\");\n      }\n    }\n    return () => {\n      resizeHandleElements.forEach((resizeHandleElement, index) => {\n        resizeHandleElement.removeAttribute(\"aria-controls\");\n        resizeHandleElement.removeAttribute(\"aria-valuemax\");\n        resizeHandleElement.removeAttribute(\"aria-valuemin\");\n        resizeHandleElement.removeAttribute(\"aria-valuenow\");\n      });\n    };\n  }, [groupId, layout, panelDataArray, panelGroupElement]);\n  useEffect(() => {\n    if (!panelGroupElement) {\n      return;\n    }\n    const eagerValues = eagerValuesRef.current;\n    assert(eagerValues, `Eager values not found`);\n    const {\n      panelDataArray\n    } = eagerValues;\n    const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n    assert(groupElement != null, `No group found for id \"${groupId}\"`);\n    const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n    assert(handles, `No resize handles found for group id \"${groupId}\"`);\n    const cleanupFunctions = handles.map(handle => {\n      const handleId = handle.getAttribute(\"data-panel-resize-handle-id\");\n      assert(handleId, `Resize handle element has no handle id attribute`);\n      const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelDataArray, panelGroupElement);\n      if (idBefore == null || idAfter == null) {\n        return () => {};\n      }\n      const onKeyDown = event => {\n        if (event.defaultPrevented) {\n          return;\n        }\n        switch (event.key) {\n          case \"Enter\":\n            {\n              event.preventDefault();\n              const index = panelDataArray.findIndex(panelData => panelData.id === idBefore);\n              if (index >= 0) {\n                const panelData = panelDataArray[index];\n                assert(panelData, `No panel data found for index ${index}`);\n                const size = layout[index];\n                const {\n                  collapsedSize = 0,\n                  collapsible,\n                  minSize = 0\n                } = panelData.constraints;\n                if (size != null && collapsible) {\n                  const nextLayout = adjustLayoutByDelta({\n                    delta: fuzzyNumbersEqual(size, collapsedSize) ? minSize - collapsedSize : collapsedSize - size,\n                    initialLayout: layout,\n                    panelConstraints: panelDataArray.map(panelData => panelData.constraints),\n                    pivotIndices: determinePivotIndices(groupId, handleId, panelGroupElement),\n                    prevLayout: layout,\n                    trigger: \"keyboard\"\n                  });\n                  if (layout !== nextLayout) {\n                    setLayout(nextLayout);\n                  }\n                }\n              }\n              break;\n            }\n        }\n      };\n      handle.addEventListener(\"keydown\", onKeyDown);\n      return () => {\n        handle.removeEventListener(\"keydown\", onKeyDown);\n      };\n    });\n    return () => {\n      cleanupFunctions.forEach(cleanupFunction => cleanupFunction());\n    };\n  }, [panelGroupElement, committedValuesRef, eagerValuesRef, groupId, layout, panelDataArray, setLayout]);\n}\n\nfunction areEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n  for (let index = 0; index < arrayA.length; index++) {\n    if (arrayA[index] !== arrayB[index]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getResizeEventCursorPosition(direction, event) {\n  const isHorizontal = direction === \"horizontal\";\n  const {\n    x,\n    y\n  } = getResizeEventCoordinates(event);\n  return isHorizontal ? x : y;\n}\n\nfunction calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement) {\n  const isHorizontal = direction === \"horizontal\";\n  const handleElement = getResizeHandleElement(dragHandleId, panelGroupElement);\n  assert(handleElement, `No resize handle element found for id \"${dragHandleId}\"`);\n  const groupId = handleElement.getAttribute(\"data-panel-group-id\");\n  assert(groupId, `Resize handle element has no group id attribute`);\n  let {\n    initialCursorPosition\n  } = initialDragState;\n  const cursorPosition = getResizeEventCursorPosition(direction, event);\n  const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n  assert(groupElement, `No group element found for id \"${groupId}\"`);\n  const groupRect = groupElement.getBoundingClientRect();\n  const groupSizeInPixels = isHorizontal ? groupRect.width : groupRect.height;\n  const offsetPixels = cursorPosition - initialCursorPosition;\n  const offsetPercentage = offsetPixels / groupSizeInPixels * 100;\n  return offsetPercentage;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX\nfunction calculateDeltaPercentage(event, dragHandleId, direction, initialDragState, keyboardResizeBy, panelGroupElement) {\n  if (isKeyDown(event)) {\n    const isHorizontal = direction === \"horizontal\";\n    let delta = 0;\n    if (event.shiftKey) {\n      delta = 100;\n    } else if (keyboardResizeBy != null) {\n      delta = keyboardResizeBy;\n    } else {\n      delta = 10;\n    }\n    let movement = 0;\n    switch (event.key) {\n      case \"ArrowDown\":\n        movement = isHorizontal ? 0 : delta;\n        break;\n      case \"ArrowLeft\":\n        movement = isHorizontal ? -delta : 0;\n        break;\n      case \"ArrowRight\":\n        movement = isHorizontal ? delta : 0;\n        break;\n      case \"ArrowUp\":\n        movement = isHorizontal ? 0 : -delta;\n        break;\n      case \"End\":\n        movement = 100;\n        break;\n      case \"Home\":\n        movement = -100;\n        break;\n    }\n    return movement;\n  } else {\n    if (initialDragState == null) {\n      return 0;\n    }\n    return calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement);\n  }\n}\n\nfunction calculateUnsafeDefaultLayout({\n  panelDataArray\n}) {\n  const layout = Array(panelDataArray.length);\n  const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n  let numPanelsWithSizes = 0;\n  let remainingSize = 100;\n\n  // Distribute default sizes first\n  for (let index = 0; index < panelDataArray.length; index++) {\n    const panelConstraints = panelConstraintsArray[index];\n    assert(panelConstraints, `Panel constraints not found for index ${index}`);\n    const {\n      defaultSize\n    } = panelConstraints;\n    if (defaultSize != null) {\n      numPanelsWithSizes++;\n      layout[index] = defaultSize;\n      remainingSize -= defaultSize;\n    }\n  }\n\n  // Remaining size should be distributed evenly between panels without default sizes\n  for (let index = 0; index < panelDataArray.length; index++) {\n    const panelConstraints = panelConstraintsArray[index];\n    assert(panelConstraints, `Panel constraints not found for index ${index}`);\n    const {\n      defaultSize\n    } = panelConstraints;\n    if (defaultSize != null) {\n      continue;\n    }\n    const numRemainingPanels = panelDataArray.length - numPanelsWithSizes;\n    const size = remainingSize / numRemainingPanels;\n    numPanelsWithSizes++;\n    layout[index] = size;\n    remainingSize -= size;\n  }\n  return layout;\n}\n\n// Layout should be pre-converted into percentages\nfunction callPanelCallbacks(panelsArray, layout, panelIdToLastNotifiedSizeMap) {\n  layout.forEach((size, index) => {\n    const panelData = panelsArray[index];\n    assert(panelData, `Panel data not found for index ${index}`);\n    const {\n      callbacks,\n      constraints,\n      id: panelId\n    } = panelData;\n    const {\n      collapsedSize = 0,\n      collapsible\n    } = constraints;\n    const lastNotifiedSize = panelIdToLastNotifiedSizeMap[panelId];\n    if (lastNotifiedSize == null || size !== lastNotifiedSize) {\n      panelIdToLastNotifiedSizeMap[panelId] = size;\n      const {\n        onCollapse,\n        onExpand,\n        onResize\n      } = callbacks;\n      if (onResize) {\n        onResize(size, lastNotifiedSize);\n      }\n      if (collapsible && (onCollapse || onExpand)) {\n        if (onExpand && (lastNotifiedSize == null || fuzzyNumbersEqual$1(lastNotifiedSize, collapsedSize)) && !fuzzyNumbersEqual$1(size, collapsedSize)) {\n          onExpand();\n        }\n        if (onCollapse && (lastNotifiedSize == null || !fuzzyNumbersEqual$1(lastNotifiedSize, collapsedSize)) && fuzzyNumbersEqual$1(size, collapsedSize)) {\n          onCollapse();\n        }\n      }\n    }\n  });\n}\n\nfunction compareLayouts(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  } else {\n    for (let index = 0; index < a.length; index++) {\n      if (a[index] != b[index]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n// This method returns a number between 1 and 100 representing\n\n// the % of the group's overall space this panel should occupy.\nfunction computePanelFlexBoxStyle({\n  defaultSize,\n  dragState,\n  layout,\n  panelData,\n  panelIndex,\n  precision = 3\n}) {\n  const size = layout[panelIndex];\n  let flexGrow;\n  if (size == null) {\n    // Initial render (before panels have registered themselves)\n    // In order to support server rendering, fall back to default size if provided\n    flexGrow = defaultSize != undefined ? defaultSize.toPrecision(precision) : \"1\";\n  } else if (panelData.length === 1) {\n    // Special case: Single panel group should always fill full width/height\n    flexGrow = \"1\";\n  } else {\n    flexGrow = size.toPrecision(precision);\n  }\n  return {\n    flexBasis: 0,\n    flexGrow,\n    flexShrink: 1,\n    // Without this, Panel sizes may be unintentionally overridden by their content\n    overflow: \"hidden\",\n    // Disable pointer events inside of a panel during resize\n    // This avoid edge cases like nested iframes\n    pointerEvents: dragState !== null ? \"none\" : undefined\n  };\n}\n\nfunction debounce(callback, durationMs = 10) {\n  let timeoutId = null;\n  let callable = (...args) => {\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      callback(...args);\n    }, durationMs);\n  };\n  return callable;\n}\n\n// PanelGroup might be rendering in a server-side environment where localStorage is not available\n// or on a browser with cookies/storage disabled.\n// In either case, this function avoids accessing localStorage until needed,\n// and avoids throwing user-visible errors.\nfunction initializeDefaultStorage(storageObject) {\n  try {\n    if (typeof localStorage !== \"undefined\") {\n      // Bypass this check for future calls\n      storageObject.getItem = name => {\n        return localStorage.getItem(name);\n      };\n      storageObject.setItem = (name, value) => {\n        localStorage.setItem(name, value);\n      };\n    } else {\n      throw new Error(\"localStorage not supported in this environment\");\n    }\n  } catch (error) {\n    console.error(error);\n    storageObject.getItem = () => null;\n    storageObject.setItem = () => {};\n  }\n}\n\nfunction getPanelGroupKey(autoSaveId) {\n  return `react-resizable-panels:${autoSaveId}`;\n}\n\n// Note that Panel ids might be user-provided (stable) or useId generated (non-deterministic)\n// so they should not be used as part of the serialization key.\n// Using the min/max size attributes should work well enough as a backup.\n// Pre-sorting by minSize allows remembering layouts even if panels are re-ordered/dragged.\nfunction getPanelKey(panels) {\n  return panels.map(panel => {\n    const {\n      constraints,\n      id,\n      idIsFromProps,\n      order\n    } = panel;\n    if (idIsFromProps) {\n      return id;\n    } else {\n      return order ? `${order}:${JSON.stringify(constraints)}` : JSON.stringify(constraints);\n    }\n  }).sort((a, b) => a.localeCompare(b)).join(\",\");\n}\nfunction loadSerializedPanelGroupState(autoSaveId, storage) {\n  try {\n    const panelGroupKey = getPanelGroupKey(autoSaveId);\n    const serialized = storage.getItem(panelGroupKey);\n    if (serialized) {\n      const parsed = JSON.parse(serialized);\n      if (typeof parsed === \"object\" && parsed != null) {\n        return parsed;\n      }\n    }\n  } catch (error) {}\n  return null;\n}\nfunction loadPanelGroupState(autoSaveId, panels, storage) {\n  var _loadSerializedPanelG, _state$panelKey;\n  const state = (_loadSerializedPanelG = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG !== void 0 ? _loadSerializedPanelG : {};\n  const panelKey = getPanelKey(panels);\n  return (_state$panelKey = state[panelKey]) !== null && _state$panelKey !== void 0 ? _state$panelKey : null;\n}\nfunction savePanelGroupState(autoSaveId, panels, panelSizesBeforeCollapse, sizes, storage) {\n  var _loadSerializedPanelG2;\n  const panelGroupKey = getPanelGroupKey(autoSaveId);\n  const panelKey = getPanelKey(panels);\n  const state = (_loadSerializedPanelG2 = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG2 !== void 0 ? _loadSerializedPanelG2 : {};\n  state[panelKey] = {\n    expandToSizes: Object.fromEntries(panelSizesBeforeCollapse.entries()),\n    layout: sizes\n  };\n  try {\n    storage.setItem(panelGroupKey, JSON.stringify(state));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// All units must be in percentages; pixel values should be pre-converted\nfunction validatePanelGroupLayout({\n  layout: prevLayout,\n  panelConstraints\n}) {\n  const nextLayout = [...prevLayout];\n  const nextLayoutTotalSize = nextLayout.reduce((accumulated, current) => accumulated + current, 0);\n\n  // Validate layout expectations\n  if (nextLayout.length !== panelConstraints.length) {\n    throw Error(`Invalid ${panelConstraints.length} panel layout: ${nextLayout.map(size => `${size}%`).join(\", \")}`);\n  } else if (!fuzzyNumbersEqual(nextLayoutTotalSize, 100)) {\n    for (let index = 0; index < panelConstraints.length; index++) {\n      const unsafeSize = nextLayout[index];\n      assert(unsafeSize != null, `No layout data found for index ${index}`);\n      const safeSize = 100 / nextLayoutTotalSize * unsafeSize;\n      nextLayout[index] = safeSize;\n    }\n  }\n  let remainingSize = 0;\n\n  // First pass: Validate the proposed layout given each panel's constraints\n  for (let index = 0; index < panelConstraints.length; index++) {\n    const unsafeSize = nextLayout[index];\n    assert(unsafeSize != null, `No layout data found for index ${index}`);\n    const safeSize = resizePanel({\n      panelConstraints,\n      panelIndex: index,\n      size: unsafeSize\n    });\n    if (unsafeSize != safeSize) {\n      remainingSize += unsafeSize - safeSize;\n      nextLayout[index] = safeSize;\n    }\n  }\n\n  // If there is additional, left over space, assign it to any panel(s) that permits it\n  // (It's not worth taking multiple additional passes to evenly distribute)\n  if (!fuzzyNumbersEqual(remainingSize, 0)) {\n    for (let index = 0; index < panelConstraints.length; index++) {\n      const prevSize = nextLayout[index];\n      assert(prevSize != null, `No layout data found for index ${index}`);\n      const unsafeSize = prevSize + remainingSize;\n      const safeSize = resizePanel({\n        panelConstraints,\n        panelIndex: index,\n        size: unsafeSize\n      });\n      if (prevSize !== safeSize) {\n        remainingSize -= safeSize - prevSize;\n        nextLayout[index] = safeSize;\n\n        // Once we've used up the remainder, bail\n        if (fuzzyNumbersEqual(remainingSize, 0)) {\n          break;\n        }\n      }\n    }\n  }\n  return nextLayout;\n}\n\nconst LOCAL_STORAGE_DEBOUNCE_INTERVAL = 100;\nconst defaultStorage = {\n  getItem: name => {\n    initializeDefaultStorage(defaultStorage);\n    return defaultStorage.getItem(name);\n  },\n  setItem: (name, value) => {\n    initializeDefaultStorage(defaultStorage);\n    defaultStorage.setItem(name, value);\n  }\n};\nconst debounceMap = {};\nfunction PanelGroupWithForwardedRef({\n  autoSaveId = null,\n  children,\n  className: classNameFromProps = \"\",\n  direction,\n  forwardedRef,\n  id: idFromProps = null,\n  onLayout = null,\n  keyboardResizeBy = null,\n  storage = defaultStorage,\n  style: styleFromProps,\n  tagName: Type = \"div\",\n  ...rest\n}) {\n  const groupId = useUniqueId(idFromProps);\n  const panelGroupElementRef = useRef(null);\n  const [dragState, setDragState] = useState(null);\n  const [layout, setLayout] = useState([]);\n  const panelIdToLastNotifiedSizeMapRef = useRef({});\n  const panelSizeBeforeCollapseRef = useRef(new Map());\n  const prevDeltaRef = useRef(0);\n  const committedValuesRef = useRef({\n    autoSaveId,\n    direction,\n    dragState,\n    id: groupId,\n    keyboardResizeBy,\n    onLayout,\n    storage\n  });\n  const eagerValuesRef = useRef({\n    layout,\n    panelDataArray: [],\n    panelDataArrayChanged: false\n  });\n  useRef({\n    didLogIdAndOrderWarning: false,\n    didLogPanelConstraintsWarning: false,\n    prevPanelIds: []\n  });\n  useImperativeHandle(forwardedRef, () => ({\n    getId: () => committedValuesRef.current.id,\n    getLayout: () => {\n      const {\n        layout\n      } = eagerValuesRef.current;\n      return layout;\n    },\n    setLayout: unsafeLayout => {\n      const {\n        onLayout\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n      const safeLayout = validatePanelGroupLayout({\n        layout: unsafeLayout,\n        panelConstraints: panelDataArray.map(panelData => panelData.constraints)\n      });\n      if (!areEqual(prevLayout, safeLayout)) {\n        setLayout(safeLayout);\n        eagerValuesRef.current.layout = safeLayout;\n        if (onLayout) {\n          onLayout(safeLayout);\n        }\n        callPanelCallbacks(panelDataArray, safeLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    }\n  }), []);\n  useIsomorphicLayoutEffect(() => {\n    committedValuesRef.current.autoSaveId = autoSaveId;\n    committedValuesRef.current.direction = direction;\n    committedValuesRef.current.dragState = dragState;\n    committedValuesRef.current.id = groupId;\n    committedValuesRef.current.onLayout = onLayout;\n    committedValuesRef.current.storage = storage;\n  });\n  useWindowSplitterPanelGroupBehavior({\n    committedValuesRef,\n    eagerValuesRef,\n    groupId,\n    layout,\n    panelDataArray: eagerValuesRef.current.panelDataArray,\n    setLayout,\n    panelGroupElement: panelGroupElementRef.current\n  });\n  useEffect(() => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n\n    // If this panel has been configured to persist sizing information, save sizes to local storage.\n    if (autoSaveId) {\n      if (layout.length === 0 || layout.length !== panelDataArray.length) {\n        return;\n      }\n      let debouncedSave = debounceMap[autoSaveId];\n\n      // Limit the frequency of localStorage updates.\n      if (debouncedSave == null) {\n        debouncedSave = debounce(savePanelGroupState, LOCAL_STORAGE_DEBOUNCE_INTERVAL);\n        debounceMap[autoSaveId] = debouncedSave;\n      }\n\n      // Clone mutable data before passing to the debounced function,\n      // else we run the risk of saving an incorrect combination of mutable and immutable values to state.\n      const clonedPanelDataArray = [...panelDataArray];\n      const clonedPanelSizesBeforeCollapse = new Map(panelSizeBeforeCollapseRef.current);\n      debouncedSave(autoSaveId, clonedPanelDataArray, clonedPanelSizesBeforeCollapse, layout, storage);\n    }\n  }, [autoSaveId, layout, storage]);\n\n  // DEV warnings\n  useEffect(() => {\n  });\n\n  // External APIs are safe to memoize via committed values ref\n  const collapsePanel = useCallback(panelData => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    if (panelData.constraints.collapsible) {\n      const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n      const {\n        collapsedSize = 0,\n        panelSize,\n        pivotIndices\n      } = panelDataHelper(panelDataArray, panelData, prevLayout);\n      assert(panelSize != null, `Panel size not found for panel \"${panelData.id}\"`);\n      if (!fuzzyNumbersEqual$1(panelSize, collapsedSize)) {\n        // Store size before collapse;\n        // This is the size that gets restored if the expand() API is used.\n        panelSizeBeforeCollapseRef.current.set(panelData.id, panelSize);\n        const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n        const delta = isLastPanel ? panelSize - collapsedSize : collapsedSize - panelSize;\n        const nextLayout = adjustLayoutByDelta({\n          delta,\n          initialLayout: prevLayout,\n          panelConstraints: panelConstraintsArray,\n          pivotIndices,\n          prevLayout,\n          trigger: \"imperative-api\"\n        });\n        if (!compareLayouts(prevLayout, nextLayout)) {\n          setLayout(nextLayout);\n          eagerValuesRef.current.layout = nextLayout;\n          if (onLayout) {\n            onLayout(nextLayout);\n          }\n          callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n        }\n      }\n    }\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const expandPanel = useCallback((panelData, minSizeOverride) => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    if (panelData.constraints.collapsible) {\n      const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n      const {\n        collapsedSize = 0,\n        panelSize = 0,\n        minSize: minSizeFromProps = 0,\n        pivotIndices\n      } = panelDataHelper(panelDataArray, panelData, prevLayout);\n      const minSize = minSizeOverride !== null && minSizeOverride !== void 0 ? minSizeOverride : minSizeFromProps;\n      if (fuzzyNumbersEqual$1(panelSize, collapsedSize)) {\n        // Restore this panel to the size it was before it was collapsed, if possible.\n        const prevPanelSize = panelSizeBeforeCollapseRef.current.get(panelData.id);\n        const baseSize = prevPanelSize != null && prevPanelSize >= minSize ? prevPanelSize : minSize;\n        const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n        const delta = isLastPanel ? panelSize - baseSize : baseSize - panelSize;\n        const nextLayout = adjustLayoutByDelta({\n          delta,\n          initialLayout: prevLayout,\n          panelConstraints: panelConstraintsArray,\n          pivotIndices,\n          prevLayout,\n          trigger: \"imperative-api\"\n        });\n        if (!compareLayouts(prevLayout, nextLayout)) {\n          setLayout(nextLayout);\n          eagerValuesRef.current.layout = nextLayout;\n          if (onLayout) {\n            onLayout(nextLayout);\n          }\n          callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n        }\n      }\n    }\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const getPanelSize = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null, `Panel size not found for panel \"${panelData.id}\"`);\n    return panelSize;\n  }, []);\n\n  // This API should never read from committedValuesRef\n  const getPanelStyle = useCallback((panelData, defaultSize) => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n    return computePanelFlexBoxStyle({\n      defaultSize,\n      dragState,\n      layout,\n      panelData: panelDataArray,\n      panelIndex\n    });\n  }, [dragState, layout]);\n\n  // External APIs are safe to memoize via committed values ref\n  const isPanelCollapsed = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize = 0,\n      collapsible,\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null, `Panel size not found for panel \"${panelData.id}\"`);\n    return collapsible === true && fuzzyNumbersEqual$1(panelSize, collapsedSize);\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const isPanelExpanded = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize = 0,\n      collapsible,\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null, `Panel size not found for panel \"${panelData.id}\"`);\n    return !collapsible || fuzzyCompareNumbers(panelSize, collapsedSize) > 0;\n  }, []);\n  const registerPanel = useCallback(panelData => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    panelDataArray.push(panelData);\n    panelDataArray.sort((panelA, panelB) => {\n      const orderA = panelA.order;\n      const orderB = panelB.order;\n      if (orderA == null && orderB == null) {\n        return 0;\n      } else if (orderA == null) {\n        return -1;\n      } else if (orderB == null) {\n        return 1;\n      } else {\n        return orderA - orderB;\n      }\n    });\n    eagerValuesRef.current.panelDataArrayChanged = true;\n  }, []);\n\n  // (Re)calculate group layout whenever panels are registered or unregistered.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useIsomorphicLayoutEffect(() => {\n    if (eagerValuesRef.current.panelDataArrayChanged) {\n      eagerValuesRef.current.panelDataArrayChanged = false;\n      const {\n        autoSaveId,\n        onLayout,\n        storage\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n\n      // If this panel has been configured to persist sizing information,\n      // default size should be restored from local storage if possible.\n      let unsafeLayout = null;\n      if (autoSaveId) {\n        const state = loadPanelGroupState(autoSaveId, panelDataArray, storage);\n        if (state) {\n          panelSizeBeforeCollapseRef.current = new Map(Object.entries(state.expandToSizes));\n          unsafeLayout = state.layout;\n        }\n      }\n      if (unsafeLayout == null) {\n        unsafeLayout = calculateUnsafeDefaultLayout({\n          panelDataArray\n        });\n      }\n\n      // Validate even saved layouts in case something has changed since last render\n      // e.g. for pixel groups, this could be the size of the window\n      const nextLayout = validatePanelGroupLayout({\n        layout: unsafeLayout,\n        panelConstraints: panelDataArray.map(panelData => panelData.constraints)\n      });\n      if (!areEqual(prevLayout, nextLayout)) {\n        setLayout(nextLayout);\n        eagerValuesRef.current.layout = nextLayout;\n        if (onLayout) {\n          onLayout(nextLayout);\n        }\n        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    }\n  });\n\n  // Reset the cached layout if hidden by the Activity/Offscreen API\n  useIsomorphicLayoutEffect(() => {\n    const eagerValues = eagerValuesRef.current;\n    return () => {\n      eagerValues.layout = [];\n    };\n  }, []);\n  const registerResizeHandle = useCallback(dragHandleId => {\n    return function resizeHandler(event) {\n      event.preventDefault();\n      const panelGroupElement = panelGroupElementRef.current;\n      if (!panelGroupElement) {\n        return () => null;\n      }\n      const {\n        direction,\n        dragState,\n        id: groupId,\n        keyboardResizeBy,\n        onLayout\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n      const {\n        initialLayout\n      } = dragState !== null && dragState !== void 0 ? dragState : {};\n      const pivotIndices = determinePivotIndices(groupId, dragHandleId, panelGroupElement);\n      let delta = calculateDeltaPercentage(event, dragHandleId, direction, dragState, keyboardResizeBy, panelGroupElement);\n      if (delta === 0) {\n        return;\n      }\n\n      // Support RTL layouts\n      const isHorizontal = direction === \"horizontal\";\n      if (document.dir === \"rtl\" && isHorizontal) {\n        delta = -delta;\n      }\n      const panelConstraints = panelDataArray.map(panelData => panelData.constraints);\n      const nextLayout = adjustLayoutByDelta({\n        delta,\n        initialLayout: initialLayout !== null && initialLayout !== void 0 ? initialLayout : prevLayout,\n        panelConstraints,\n        pivotIndices,\n        prevLayout,\n        trigger: isKeyDown(event) ? \"keyboard\" : \"mouse-or-touch\"\n      });\n      const layoutChanged = !compareLayouts(prevLayout, nextLayout);\n\n      // Only update the cursor for layout changes triggered by touch/mouse events (not keyboard)\n      // Update the cursor even if the layout hasn't changed (we may need to show an invalid cursor state)\n      if (isPointerEvent(event) || isMouseEvent(event)) {\n        // Watch for multiple subsequent deltas; this might occur for tiny cursor movements.\n        // In this case, Panel sizes might not change–\n        // but updating cursor in this scenario would cause a flicker.\n        if (prevDeltaRef.current != delta) {\n          prevDeltaRef.current = delta;\n          if (!layoutChanged) {\n            // If the pointer has moved too far to resize the panel any further, note this so we can update the cursor.\n            // This mimics VS Code behavior.\n            if (isHorizontal) {\n              reportConstraintsViolation(dragHandleId, delta < 0 ? EXCEEDED_HORIZONTAL_MIN : EXCEEDED_HORIZONTAL_MAX);\n            } else {\n              reportConstraintsViolation(dragHandleId, delta < 0 ? EXCEEDED_VERTICAL_MIN : EXCEEDED_VERTICAL_MAX);\n            }\n          } else {\n            reportConstraintsViolation(dragHandleId, 0);\n          }\n        }\n      }\n      if (layoutChanged) {\n        setLayout(nextLayout);\n        eagerValuesRef.current.layout = nextLayout;\n        if (onLayout) {\n          onLayout(nextLayout);\n        }\n        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    };\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const resizePanel = useCallback((panelData, unsafePanelSize) => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n    const {\n      panelSize,\n      pivotIndices\n    } = panelDataHelper(panelDataArray, panelData, prevLayout);\n    assert(panelSize != null, `Panel size not found for panel \"${panelData.id}\"`);\n    const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n    const delta = isLastPanel ? panelSize - unsafePanelSize : unsafePanelSize - panelSize;\n    const nextLayout = adjustLayoutByDelta({\n      delta,\n      initialLayout: prevLayout,\n      panelConstraints: panelConstraintsArray,\n      pivotIndices,\n      prevLayout,\n      trigger: \"imperative-api\"\n    });\n    if (!compareLayouts(prevLayout, nextLayout)) {\n      setLayout(nextLayout);\n      eagerValuesRef.current.layout = nextLayout;\n      if (onLayout) {\n        onLayout(nextLayout);\n      }\n      callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n    }\n  }, []);\n  const reevaluatePanelConstraints = useCallback((panelData, prevConstraints) => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize: prevCollapsedSize = 0,\n      collapsible: prevCollapsible\n    } = prevConstraints;\n    const {\n      collapsedSize: nextCollapsedSize = 0,\n      collapsible: nextCollapsible,\n      maxSize: nextMaxSize = 100,\n      minSize: nextMinSize = 0\n    } = panelData.constraints;\n    const {\n      panelSize: prevPanelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    if (prevPanelSize == null) {\n      // It's possible that the panels in this group have changed since the last render\n      return;\n    }\n    if (prevCollapsible && nextCollapsible && fuzzyNumbersEqual$1(prevPanelSize, prevCollapsedSize)) {\n      if (!fuzzyNumbersEqual$1(prevCollapsedSize, nextCollapsedSize)) {\n        resizePanel(panelData, nextCollapsedSize);\n      }\n    } else if (prevPanelSize < nextMinSize) {\n      resizePanel(panelData, nextMinSize);\n    } else if (prevPanelSize > nextMaxSize) {\n      resizePanel(panelData, nextMaxSize);\n    }\n  }, [resizePanel]);\n  const startDragging = useCallback((dragHandleId, event) => {\n    const {\n      direction\n    } = committedValuesRef.current;\n    const {\n      layout\n    } = eagerValuesRef.current;\n    if (!panelGroupElementRef.current) {\n      return;\n    }\n    const handleElement = getResizeHandleElement(dragHandleId, panelGroupElementRef.current);\n    assert(handleElement, `Drag handle element not found for id \"${dragHandleId}\"`);\n    const initialCursorPosition = getResizeEventCursorPosition(direction, event);\n    setDragState({\n      dragHandleId,\n      dragHandleRect: handleElement.getBoundingClientRect(),\n      initialCursorPosition,\n      initialLayout: layout\n    });\n  }, []);\n  const stopDragging = useCallback(() => {\n    setDragState(null);\n  }, []);\n  const unregisterPanel = useCallback(panelData => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    const index = findPanelDataIndex(panelDataArray, panelData);\n    if (index >= 0) {\n      panelDataArray.splice(index, 1);\n\n      // TRICKY\n      // When a panel is removed from the group, we should delete the most recent prev-size entry for it.\n      // If we don't do this, then a conditionally rendered panel might not call onResize when it's re-mounted.\n      // Strict effects mode makes this tricky though because all panels will be registered, unregistered, then re-registered on mount.\n      delete panelIdToLastNotifiedSizeMapRef.current[panelData.id];\n      eagerValuesRef.current.panelDataArrayChanged = true;\n    }\n  }, []);\n  const context = useMemo(() => ({\n    collapsePanel,\n    direction,\n    dragState,\n    expandPanel,\n    getPanelSize,\n    getPanelStyle,\n    groupId,\n    isPanelCollapsed,\n    isPanelExpanded,\n    reevaluatePanelConstraints,\n    registerPanel,\n    registerResizeHandle,\n    resizePanel,\n    startDragging,\n    stopDragging,\n    unregisterPanel,\n    panelGroupElement: panelGroupElementRef.current\n  }), [collapsePanel, dragState, direction, expandPanel, getPanelSize, getPanelStyle, groupId, isPanelCollapsed, isPanelExpanded, reevaluatePanelConstraints, registerPanel, registerResizeHandle, resizePanel, startDragging, stopDragging, unregisterPanel]);\n  const style = {\n    display: \"flex\",\n    flexDirection: direction === \"horizontal\" ? \"row\" : \"column\",\n    height: \"100%\",\n    overflow: \"hidden\",\n    width: \"100%\"\n  };\n  return createElement(PanelGroupContext.Provider, {\n    value: context\n  }, createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    id: idFromProps,\n    ref: panelGroupElementRef,\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    // CSS selectors\n    \"data-panel-group\": \"\",\n    \"data-panel-group-direction\": direction,\n    \"data-panel-group-id\": groupId\n  }));\n}\nconst PanelGroup = forwardRef((props, ref) => createElement(PanelGroupWithForwardedRef, {\n  ...props,\n  forwardedRef: ref\n}));\nPanelGroupWithForwardedRef.displayName = \"PanelGroup\";\nPanelGroup.displayName = \"forwardRef(PanelGroup)\";\nfunction findPanelDataIndex(panelDataArray, panelData) {\n  return panelDataArray.findIndex(prevPanelData => prevPanelData === panelData || prevPanelData.id === panelData.id);\n}\nfunction panelDataHelper(panelDataArray, panelData, layout) {\n  const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n  const isLastPanel = panelIndex === panelDataArray.length - 1;\n  const pivotIndices = isLastPanel ? [panelIndex - 1, panelIndex] : [panelIndex, panelIndex + 1];\n  const panelSize = layout[panelIndex];\n  return {\n    ...panelData.constraints,\n    panelSize,\n    pivotIndices\n  };\n}\n\n// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\n\nfunction useWindowSplitterResizeHandlerBehavior({\n  disabled,\n  handleId,\n  resizeHandler,\n  panelGroupElement\n}) {\n  useEffect(() => {\n    if (disabled || resizeHandler == null || panelGroupElement == null) {\n      return;\n    }\n    const handleElement = getResizeHandleElement(handleId, panelGroupElement);\n    if (handleElement == null) {\n      return;\n    }\n    const onKeyDown = event => {\n      if (event.defaultPrevented) {\n        return;\n      }\n      switch (event.key) {\n        case \"ArrowDown\":\n        case \"ArrowLeft\":\n        case \"ArrowRight\":\n        case \"ArrowUp\":\n        case \"End\":\n        case \"Home\":\n          {\n            event.preventDefault();\n            resizeHandler(event);\n            break;\n          }\n        case \"F6\":\n          {\n            event.preventDefault();\n            const groupId = handleElement.getAttribute(\"data-panel-group-id\");\n            assert(groupId, `No group element found for id \"${groupId}\"`);\n            const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n            const index = getResizeHandleElementIndex(groupId, handleId, panelGroupElement);\n            assert(index !== null, `No resize element found for id \"${handleId}\"`);\n            const nextIndex = event.shiftKey ? index > 0 ? index - 1 : handles.length - 1 : index + 1 < handles.length ? index + 1 : 0;\n            const nextHandle = handles[nextIndex];\n            nextHandle.focus();\n            break;\n          }\n      }\n    };\n    handleElement.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      handleElement.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [panelGroupElement, disabled, handleId, resizeHandler]);\n}\n\nfunction PanelResizeHandle({\n  children = null,\n  className: classNameFromProps = \"\",\n  disabled = false,\n  hitAreaMargins,\n  id: idFromProps,\n  onDragging,\n  style: styleFromProps = {},\n  tabIndex = 0,\n  tagName: Type = \"div\",\n  ...rest\n}) {\n  var _hitAreaMargins$coars, _hitAreaMargins$fine;\n  const elementRef = useRef(null);\n\n  // Use a ref to guard against users passing inline props\n  const callbacksRef = useRef({\n    onDragging\n  });\n  useEffect(() => {\n    callbacksRef.current.onDragging = onDragging;\n  });\n  const panelGroupContext = useContext(PanelGroupContext);\n  if (panelGroupContext === null) {\n    throw Error(`PanelResizeHandle components must be rendered within a PanelGroup container`);\n  }\n  const {\n    direction,\n    groupId,\n    registerResizeHandle: registerResizeHandleWithParentGroup,\n    startDragging,\n    stopDragging,\n    panelGroupElement\n  } = panelGroupContext;\n  const resizeHandleId = useUniqueId(idFromProps);\n  const [state, setState] = useState(\"inactive\");\n  const [isFocused, setIsFocused] = useState(false);\n  const [resizeHandler, setResizeHandler] = useState(null);\n  const committedValuesRef = useRef({\n    state\n  });\n  useIsomorphicLayoutEffect(() => {\n    committedValuesRef.current.state = state;\n  });\n  useEffect(() => {\n    if (disabled) {\n      setResizeHandler(null);\n    } else {\n      const resizeHandler = registerResizeHandleWithParentGroup(resizeHandleId);\n      setResizeHandler(() => resizeHandler);\n    }\n  }, [disabled, resizeHandleId, registerResizeHandleWithParentGroup]);\n\n  // Extract hit area margins before passing them to the effect's dependency array\n  // so that inline object values won't trigger re-renders\n  const coarseHitAreaMargins = (_hitAreaMargins$coars = hitAreaMargins === null || hitAreaMargins === void 0 ? void 0 : hitAreaMargins.coarse) !== null && _hitAreaMargins$coars !== void 0 ? _hitAreaMargins$coars : 15;\n  const fineHitAreaMargins = (_hitAreaMargins$fine = hitAreaMargins === null || hitAreaMargins === void 0 ? void 0 : hitAreaMargins.fine) !== null && _hitAreaMargins$fine !== void 0 ? _hitAreaMargins$fine : 5;\n  useEffect(() => {\n    if (disabled || resizeHandler == null) {\n      return;\n    }\n    const element = elementRef.current;\n    assert(element, \"Element ref not attached\");\n    const setResizeHandlerState = (action, isActive, event) => {\n      if (isActive) {\n        switch (action) {\n          case \"down\":\n            {\n              setState(\"drag\");\n              startDragging(resizeHandleId, event);\n              const {\n                onDragging\n              } = callbacksRef.current;\n              if (onDragging) {\n                onDragging(true);\n              }\n              break;\n            }\n          case \"move\":\n            {\n              const {\n                state\n              } = committedValuesRef.current;\n              if (state !== \"drag\") {\n                setState(\"hover\");\n              }\n              resizeHandler(event);\n              break;\n            }\n          case \"up\":\n            {\n              setState(\"hover\");\n              stopDragging();\n              const {\n                onDragging\n              } = callbacksRef.current;\n              if (onDragging) {\n                onDragging(false);\n              }\n              break;\n            }\n        }\n      } else {\n        setState(\"inactive\");\n      }\n    };\n    return registerResizeHandle(resizeHandleId, element, direction, {\n      coarse: coarseHitAreaMargins,\n      fine: fineHitAreaMargins\n    }, setResizeHandlerState);\n  }, [coarseHitAreaMargins, direction, disabled, fineHitAreaMargins, registerResizeHandleWithParentGroup, resizeHandleId, resizeHandler, startDragging, stopDragging]);\n  useWindowSplitterResizeHandlerBehavior({\n    disabled,\n    handleId: resizeHandleId,\n    resizeHandler,\n    panelGroupElement\n  });\n  const style = {\n    touchAction: \"none\",\n    userSelect: \"none\"\n  };\n  return createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    id: idFromProps,\n    onBlur: () => setIsFocused(false),\n    onFocus: () => setIsFocused(true),\n    ref: elementRef,\n    role: \"separator\",\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    tabIndex,\n    // CSS selectors\n    \"data-panel-group-direction\": direction,\n    \"data-panel-group-id\": groupId,\n    \"data-resize-handle\": \"\",\n    \"data-resize-handle-active\": state === \"drag\" ? \"pointer\" : isFocused ? \"keyboard\" : undefined,\n    \"data-resize-handle-state\": state,\n    \"data-panel-resize-handle-enabled\": !disabled,\n    \"data-panel-resize-handle-id\": resizeHandleId\n  });\n}\nPanelResizeHandle.displayName = \"PanelResizeHandle\";\n\nfunction getPanelElement(id, scope = document) {\n  const element = scope.querySelector(`[data-panel-id=\"${id}\"]`);\n  if (element) {\n    return element;\n  }\n  return null;\n}\n\nfunction getPanelElementsForGroup(groupId, scope = document) {\n  return Array.from(scope.querySelectorAll(`[data-panel][data-panel-group-id=\"${groupId}\"]`));\n}\n\nfunction getIntersectingRectangle(rectOne, rectTwo, strict) {\n  if (!intersects(rectOne, rectTwo, strict)) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  return {\n    x: Math.max(rectOne.x, rectTwo.x),\n    y: Math.max(rectOne.y, rectTwo.y),\n    width: Math.min(rectOne.x + rectOne.width, rectTwo.x + rectTwo.width) - Math.max(rectOne.x, rectTwo.x),\n    height: Math.min(rectOne.y + rectOne.height, rectTwo.y + rectTwo.height) - Math.max(rectOne.y, rectTwo.y)\n  };\n}\n\nexport { Panel, PanelGroup, PanelResizeHandle, assert, getIntersectingRectangle, getPanelElement, getPanelElementsForGroup, getPanelGroupElement, getResizeHandleElement, getResizeHandleElementIndex, getResizeHandleElementsForGroup, getResizeHandlePanelIds, intersects };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}