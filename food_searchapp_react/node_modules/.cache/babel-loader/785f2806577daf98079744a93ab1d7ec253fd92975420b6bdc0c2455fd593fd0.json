{"ast":null,"code":"// src/calc.ts\nvar toExpression = function (operator) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return args.join(\" \".concat(operator, \" \")).replace(/calc/g, \"\");\n};\nvar add = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return \"calc(\".concat(toExpression(\"+\", ...args), \")\");\n};\nvar subtract = function () {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return \"calc(\".concat(toExpression(\"-\", ...args), \")\");\n};\nvar multiply = function () {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n  return \"calc(\".concat(toExpression(\"*\", ...args), \")\");\n};\nvar divide = function () {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n  return \"calc(\".concat(toExpression(\"/\", ...args), \")\");\n};\nvar negate = value => {\n  if (value != null && !isNaN(parseFloat(value.toString()))) return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\".concat(value);\n  return multiply(value, -1);\n};\nvar calc = Object.assign(x => ({\n  add: function () {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    return calc(add(x, ...args));\n  },\n  subtract: function () {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    return calc(subtract(x, ...args));\n  },\n  multiply: function () {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    return calc(multiply(x, ...args));\n  },\n  divide: function () {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    return calc(divide(x, ...args));\n  },\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"names":["toExpression","operator","_len","arguments","length","args","Array","_key","join","concat","replace","add","_len2","_key2","subtract","_len3","_key3","multiply","_len4","_key4","divide","_len5","_key5","negate","value","isNaN","parseFloat","toString","String","startsWith","slice","calc","Object","assign","x","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\utils\\src\\calc.ts"],"sourcesContent":["type Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nexport type Operand = string | number\n\nconst toExpression = (operator: Operator, ...args: Operand[]) =>\n  args.join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...args: Operand[]) => `calc(${toExpression(\"+\", ...args)})`\n\nconst subtract = (...args: Operand[]) => `calc(${toExpression(\"-\", ...args)})`\n\nconst multiply = (...args: Operand[]) => `calc(${toExpression(\"*\", ...args)})`\n\nconst divide = (...args: Operand[]) => `calc(${toExpression(\"/\", ...args)})`\n\nconst negate = (value: Operand) => {\n  if (value != null && !isNaN(parseFloat(value.toString())))\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n\n  return multiply(value, -1)\n}\n\ntype Calc = {\n  add: (...args: Operand[]) => Calc\n  subtract: (...args: Operand[]) => Calc\n  multiply: (...args: Operand[]) => Calc\n  divide: (...args: Operand[]) => Calc\n  negate: () => Calc\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): Calc => ({\n    add: (...args) => calc(add(x, ...args)),\n    subtract: (...args) => calc(subtract(x, ...args)),\n    multiply: (...args) => calc(multiply(x, ...args)),\n    divide: (...args) => calc(divide(x, ...args)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}