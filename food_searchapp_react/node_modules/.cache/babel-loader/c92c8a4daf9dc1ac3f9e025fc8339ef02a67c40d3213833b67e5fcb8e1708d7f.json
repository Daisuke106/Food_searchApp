{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { useRef, useEffect, useState } from \"react\";\nvar DEFAULT_EVENTS = [\"keypress\", \"mousemove\", \"touchmove\", \"click\", \"scroll\"];\nvar DEFAULT_OPTIONS = {\n  events: DEFAULT_EVENTS,\n  initialState: true\n};\nvar useIdle = (timeout, options) => {\n  const {\n    events,\n    initialState\n  } = {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n  const [idle, setIdle] = useState(initialState);\n  const timeoutId = useRef(null);\n  useEffect(() => {\n    const handleEvent = () => {\n      setIdle(false);\n      if (timeoutId.current) window.clearTimeout(timeoutId.current);\n      timeoutId.current = window.setTimeout(() => {\n        setIdle(true);\n      }, timeout);\n    };\n    events.forEach(event => document.addEventListener(event, handleEvent));\n    return () => {\n      events.forEach(event => document.removeEventListener(event, handleEvent));\n    };\n  }, [events, timeout]);\n  return idle;\n};\nexport { useIdle };","map":{"version":3,"names":["useRef","useEffect","useState","DEFAULT_EVENTS","DEFAULT_OPTIONS","events","initialState","useIdle","timeout","options","idle","setIdle","timeoutId","handleEvent","current","window","clearTimeout","setTimeout","forEach","event","document","addEventListener","removeEventListener"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-idle\\src\\index.ts"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\"\n\nconst DEFAULT_EVENTS: (keyof DocumentEventMap)[] = [\n  \"keypress\",\n  \"mousemove\",\n  \"touchmove\",\n  \"click\",\n  \"scroll\",\n]\n\nconst DEFAULT_OPTIONS = {\n  events: DEFAULT_EVENTS,\n  initialState: true,\n}\n\nexport type IdleOptions = Partial<{\n  events: (keyof DocumentEventMap)[]\n  initialState: boolean\n}>\n\n/**\n * `useIdle` is a custom hook that detects whether the user has been idle for a certain amount of time in milliseconds.\n *\n * @see Docs https://yamada-ui.com/hooks/use-idle\n */\nexport const useIdle = (timeout: number, options?: IdleOptions) => {\n  const { events, initialState } = { ...DEFAULT_OPTIONS, ...options }\n  const [idle, setIdle] = useState<boolean>(initialState)\n  const timeoutId = useRef<any>(null)\n\n  useEffect(() => {\n    const handleEvent = () => {\n      setIdle(false)\n\n      if (timeoutId.current) window.clearTimeout(timeoutId.current)\n\n      timeoutId.current = window.setTimeout(() => {\n        setIdle(true)\n      }, timeout)\n    }\n\n    events.forEach((event) => document.addEventListener(event, handleEvent))\n\n    return () => {\n      events.forEach((event) =>\n        document.removeEventListener(event, handleEvent),\n      )\n    }\n  }, [events, timeout])\n\n  return idle\n}\n"],"mappings":";;;AAAA,SAASA,MAAA,EAAQC,SAAA,EAAWC,QAAA,QAAgB;AAE5C,IAAMC,cAAA,GAA6C,CACjD,YACA,aACA,aACA,SACA,SACF;AAEA,IAAMC,eAAA,GAAkB;EACtBC,MAAA,EAAQF,cAAA;EACRG,YAAA,EAAc;AAChB;AAYO,IAAMC,OAAA,GAAUA,CAACC,OAAA,EAAiBC,OAAA,KAA0B;EACjE,MAAM;IAAEJ,MAAA;IAAQC;EAAa,IAAI;IAAE,GAAGF,eAAA;IAAiB,GAAGK;EAAQ;EAClE,MAAM,CAACC,IAAA,EAAMC,OAAO,IAAIT,QAAA,CAAkBI,YAAY;EACtD,MAAMM,SAAA,GAAYZ,MAAA,CAAY,IAAI;EAElCC,SAAA,CAAU,MAAM;IACd,MAAMY,WAAA,GAAcA,CAAA,KAAM;MACxBF,OAAA,CAAQ,KAAK;MAEb,IAAIC,SAAA,CAAUE,OAAA,EAASC,MAAA,CAAOC,YAAA,CAAaJ,SAAA,CAAUE,OAAO;MAE5DF,SAAA,CAAUE,OAAA,GAAUC,MAAA,CAAOE,UAAA,CAAW,MAAM;QAC1CN,OAAA,CAAQ,IAAI;MACd,GAAGH,OAAO;IACZ;IAEAH,MAAA,CAAOa,OAAA,CAASC,KAAA,IAAUC,QAAA,CAASC,gBAAA,CAAiBF,KAAA,EAAON,WAAW,CAAC;IAEvE,OAAO,MAAM;MACXR,MAAA,CAAOa,OAAA,CAASC,KAAA,IACdC,QAAA,CAASE,mBAAA,CAAoBH,KAAA,EAAON,WAAW,CACjD;IACF;EACF,GAAG,CAACR,MAAA,EAAQG,OAAO,CAAC;EAEpB,OAAOE,IAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}