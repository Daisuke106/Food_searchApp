{"ast":null,"code":"// src/with-default.ts\nimport { isArray, merge } from \"@yamada-ui/utils\";\nvar withDefaultSize = ({\n  size,\n  components\n}) => theme => {\n  var _a;\n  let keys = Object.keys((_a = theme.components) != null ? _a : {});\n  if (isArray(components)) keys = components;\n  return merge(theme, {\n    components: Object.fromEntries(keys.map(key => [key, {\n      defaultProps: {\n        size\n      }\n    }]))\n  });\n};\nvar withDefaultVariant = ({\n  variant,\n  components\n}) => theme => {\n  var _a;\n  let keys = Object.keys((_a = theme.components) != null ? _a : {});\n  if (isArray(components)) keys = components;\n  return merge(theme, {\n    components: Object.fromEntries(keys.map(key => [key, {\n      defaultProps: {\n        variant\n      }\n    }]))\n  });\n};\nvar withDefaultColorScheme = ({\n  colorScheme,\n  components\n}) => theme => {\n  var _a;\n  let keys = Object.keys((_a = theme.components) != null ? _a : {});\n  if (isArray(components)) keys = components;\n  return merge(theme, {\n    components: Object.fromEntries(keys.map(key => [key, {\n      defaultProps: {\n        colorScheme\n      }\n    }]))\n  });\n};\nvar withDefaultProps = ({\n  defaultProps,\n  components\n}) => theme => {\n  var _a;\n  let keys = Object.keys((_a = theme.components) != null ? _a : {});\n  if (isArray(components)) keys = components;\n  return merge(theme, {\n    components: Object.fromEntries(keys.map(key => [key, {\n      defaultProps\n    }]))\n  });\n};\nexport { withDefaultSize, withDefaultVariant, withDefaultColorScheme, withDefaultProps };","map":{"version":3,"names":["isArray","merge","withDefaultSize","size","components","theme","_a","keys","Object","fromEntries","map","key","defaultProps","withDefaultVariant","variant","withDefaultColorScheme","colorScheme","withDefaultProps"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\theme-tools\\src\\with-default.ts"],"sourcesContent":["import type { Theme, ComponentDefaultProps, UsageTheme } from \"@yamada-ui/core\"\nimport type { Union } from \"@yamada-ui/utils\"\nimport { isArray, merge } from \"@yamada-ui/utils\"\n\nexport const withDefaultSize =\n  ({\n    size,\n    components,\n  }: {\n    size: ComponentDefaultProps[\"size\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { size } }]),\n      ),\n    })\n  }\n\nexport const withDefaultVariant =\n  ({\n    variant,\n    components,\n  }: {\n    variant: ComponentDefaultProps[\"variant\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { variant } }]),\n      ),\n    })\n  }\n\nexport const withDefaultColorScheme =\n  ({\n    colorScheme,\n    components,\n  }: {\n    colorScheme: ComponentDefaultProps[\"colorScheme\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { colorScheme } }]),\n      ),\n    })\n  }\n\nexport const withDefaultProps =\n  ({\n    defaultProps,\n    components,\n  }: {\n    defaultProps: ComponentDefaultProps\n    components?: Union<keyof Theme[\"components\"]>[]\n  }): UsageTheme =>\n  (theme: UsageTheme) => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps }]),\n      ),\n    })\n  }\n"],"mappings":";AAEA,SAASA,OAAA,EAASC,KAAA,QAAa;AAExB,IAAMC,eAAA,GACXA,CAAC;EACCC,IAAA;EACAC;AACF,MAICC,KAAA,IAAkC;EAZrC,IAAAC,EAAA;EAaI,IAAIC,IAAA,GAAiBC,MAAA,CAAOD,IAAA,EAAKD,EAAA,GAAAD,KAAA,CAAMD,UAAA,KAAN,OAAAE,EAAA,GAAoB,CAAC,CAAC;EAEvD,IAAIN,OAAA,CAAQI,UAAU,GAAGG,IAAA,GAAOH,UAAA;EAEhC,OAAOH,KAAA,CAAMI,KAAA,EAAO;IAClBD,UAAA,EAAYI,MAAA,CAAOC,WAAA,CACjBF,IAAA,CAAKG,GAAA,CAAKC,GAAA,IAAQ,CAACA,GAAA,EAAK;MAAEC,YAAA,EAAc;QAAET;MAAK;IAAE,CAAC,CAAC,CACrD;EACF,CAAC;AACH;AAEK,IAAMU,kBAAA,GACXA,CAAC;EACCC,OAAA;EACAV;AACF,MAICC,KAAA,IAAkC;EAhCrC,IAAAC,EAAA;EAiCI,IAAIC,IAAA,GAAiBC,MAAA,CAAOD,IAAA,EAAKD,EAAA,GAAAD,KAAA,CAAMD,UAAA,KAAN,OAAAE,EAAA,GAAoB,CAAC,CAAC;EAEvD,IAAIN,OAAA,CAAQI,UAAU,GAAGG,IAAA,GAAOH,UAAA;EAEhC,OAAOH,KAAA,CAAMI,KAAA,EAAO;IAClBD,UAAA,EAAYI,MAAA,CAAOC,WAAA,CACjBF,IAAA,CAAKG,GAAA,CAAKC,GAAA,IAAQ,CAACA,GAAA,EAAK;MAAEC,YAAA,EAAc;QAAEE;MAAQ;IAAE,CAAC,CAAC,CACxD;EACF,CAAC;AACH;AAEK,IAAMC,sBAAA,GACXA,CAAC;EACCC,WAAA;EACAZ;AACF,MAICC,KAAA,IAAkC;EApDrC,IAAAC,EAAA;EAqDI,IAAIC,IAAA,GAAiBC,MAAA,CAAOD,IAAA,EAAKD,EAAA,GAAAD,KAAA,CAAMD,UAAA,KAAN,OAAAE,EAAA,GAAoB,CAAC,CAAC;EAEvD,IAAIN,OAAA,CAAQI,UAAU,GAAGG,IAAA,GAAOH,UAAA;EAEhC,OAAOH,KAAA,CAAMI,KAAA,EAAO;IAClBD,UAAA,EAAYI,MAAA,CAAOC,WAAA,CACjBF,IAAA,CAAKG,GAAA,CAAKC,GAAA,IAAQ,CAACA,GAAA,EAAK;MAAEC,YAAA,EAAc;QAAEI;MAAY;IAAE,CAAC,CAAC,CAC5D;EACF,CAAC;AACH;AAEK,IAAMC,gBAAA,GACXA,CAAC;EACCL,YAAA;EACAR;AACF,MAICC,KAAA,IAAsB;EAxEzB,IAAAC,EAAA;EAyEI,IAAIC,IAAA,GAAiBC,MAAA,CAAOD,IAAA,EAAKD,EAAA,GAAAD,KAAA,CAAMD,UAAA,KAAN,OAAAE,EAAA,GAAoB,CAAC,CAAC;EAEvD,IAAIN,OAAA,CAAQI,UAAU,GAAGG,IAAA,GAAOH,UAAA;EAEhC,OAAOH,KAAA,CAAMI,KAAA,EAAO;IAClBD,UAAA,EAAYI,MAAA,CAAOC,WAAA,CACjBF,IAAA,CAAKG,GAAA,CAAKC,GAAA,IAAQ,CAACA,GAAA,EAAK;MAAEC;IAAa,CAAC,CAAC,CAC3C;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}