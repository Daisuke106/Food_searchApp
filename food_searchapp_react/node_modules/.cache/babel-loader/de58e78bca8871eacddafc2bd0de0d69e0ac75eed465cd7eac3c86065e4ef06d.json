{"ast":null,"code":"\"use client\";\n\n// src/accordion.tsx\nimport { ui, forwardRef, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { createDescendant } from \"@yamada-ui/use-descendant\";\nimport { createContext, cx, isArray } from \"@yamada-ui/utils\";\nimport { useEffect, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar {\n  DescendantsContextProvider,\n  useDescendants,\n  useDescendant: useAccordionDescendant\n} = createDescendant();\nvar [AccordionProvider, useAccordionContext] = createContext({\n  name: \"AccordionContext\",\n  errorMessage: \"useAccordionContext returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Accordion />\\\"\"\n});\nvar Accordion = forwardRef((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Accordion\", props);\n  const {\n    className,\n    index: value,\n    defaultIndex: defaultValue,\n    isMultiple,\n    isToggle,\n    iconHidden,\n    icon,\n    onChange,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  if ((value || defaultValue) != null && !isArray(value || defaultValue) && isMultiple) {\n    console.warn(\"Accordion: If 'isMultiple' is passed, then 'index' or 'defaultIndex' must be an array.\");\n  }\n  if (isMultiple && isToggle) {\n    console.warn(\"Accordion: If 'isMultiple' is passed, 'isToggle' will be ignored. Either remove 'isToggle' or 'isMultiple' depending on whether you want isMultiple accordions visible or not\");\n  }\n  const descendants = useDescendants();\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [index, setIndex] = useControllableState({\n    value,\n    defaultValue: () => isMultiple ? defaultValue != null ? defaultValue : [] : defaultValue != null ? defaultValue : -1,\n    onChange\n  });\n  useEffect(() => {\n    return () => setFocusedIndex(-1);\n  }, []);\n  const css = {\n    w: \"100%\",\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx(DescendantsContextProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx(AccordionProvider, {\n      value: {\n        index,\n        setIndex,\n        focusedIndex,\n        setFocusedIndex,\n        isMultiple,\n        isToggle,\n        iconHidden,\n        icon,\n        styles\n      },\n      children: /* @__PURE__ */jsx(ui.ul, {\n        ref,\n        className: cx(\"ui-accordion\", className),\n        __css: css,\n        ...rest\n      })\n    })\n  });\n});\nexport { useAccordionDescendant, useAccordionContext, Accordion };","map":{"version":3,"names":["ui","forwardRef","useMultiComponentStyle","omitThemeProps","useControllableState","createDescendant","createContext","cx","isArray","useEffect","useState","jsx","DescendantsContextProvider","useDescendants","useDescendant","useAccordionDescendant","AccordionProvider","useAccordionContext","name","errorMessage","Accordion","props","ref","styles","mergedProps","className","index","value","defaultIndex","defaultValue","isMultiple","isToggle","iconHidden","icon","onChange","rest","console","warn","descendants","focusedIndex","setFocusedIndex","setIndex","css","w","container","children","ul","__css"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\accordion\\src\\accordion.tsx"],"sourcesContent":["import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport { createContext, cx, isArray } from \"@yamada-ui/utils\"\nimport type { Dispatch, ReactNode, SetStateAction } from \"react\"\nimport { useEffect, useState } from \"react\"\n\nconst {\n  DescendantsContextProvider,\n  useDescendants,\n  useDescendant: useAccordionDescendant,\n} = createDescendant<HTMLButtonElement>()\n\nexport { useAccordionDescendant }\n\ntype AccordionContext = Pick<\n  AccordionOptions,\n  \"isMultiple\" | \"isToggle\" | \"icon\" | \"iconHidden\"\n> & {\n  index: number | number[]\n  setIndex: Dispatch<SetStateAction<number | number[]>>\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  styles: Record<string, CSSUIObject>\n}\n\nconst [AccordionProvider, useAccordionContext] =\n  createContext<AccordionContext>({\n    name: \"AccordionContext\",\n    errorMessage: `useAccordionContext returned is 'undefined'. Seems you forgot to wrap the components in \"<Accordion />\"`,\n  })\n\nexport { useAccordionContext }\n\ntype AccordionOptions = {\n  /**\n   * The index(es) of the accordion item to expand.\n   */\n  index?: number | number[]\n  /**\n   * The initial index(es) of the accordion item to expand.\n   */\n  defaultIndex?: number | number[]\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   *\n   * @default false\n   */\n  isMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   *\n   * @default false\n   */\n  isToggle?: boolean\n  /**\n   * If `true`, hide the accordion icon for all items.\n   *\n   * @default false\n   */\n  iconHidden?: boolean\n  /**\n   * The accordion icon for all items to use.\n   */\n  icon?:\n    | ReactNode\n    | ((props: { isExpanded: boolean; isDisabled: boolean }) => ReactNode)\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?: (index: number | number[]) => void\n}\n\nexport type AccordionProps = Omit<HTMLUIProps<\"ul\">, \"onChange\"> &\n  ThemeProps<\"Accordion\"> &\n  AccordionOptions\n\n/**\n * `Accordion` is a component for a list that displays information in an expandable or collapsible manner.\n *\n * @see Docs https://yamada-ui.com/components/disclosure/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"ul\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Accordion\", props)\n  const {\n    className,\n    index: value,\n    defaultIndex: defaultValue,\n    isMultiple,\n    isToggle,\n    iconHidden,\n    icon,\n    onChange,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  if (\n    (value || defaultValue) != null &&\n    !isArray(value || defaultValue) &&\n    isMultiple\n  ) {\n    console.warn(\n      `Accordion: If 'isMultiple' is passed, then 'index' or 'defaultIndex' must be an array.`,\n    )\n  }\n\n  if (isMultiple && isToggle) {\n    console.warn(\n      `Accordion: If 'isMultiple' is passed, 'isToggle' will be ignored. Either remove 'isToggle' or 'isMultiple' depending on whether you want isMultiple accordions visible or not`,\n    )\n  }\n\n  const descendants = useDescendants()\n\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n\n  const [index, setIndex] = useControllableState({\n    value,\n    defaultValue: () => (isMultiple ? defaultValue ?? [] : defaultValue ?? -1),\n    onChange,\n  })\n\n  useEffect(() => {\n    return () => setFocusedIndex(-1)\n  }, [])\n\n  const css: CSSUIObject = { w: \"100%\", ...styles.container }\n\n  return (\n    <DescendantsContextProvider value={descendants}>\n      <AccordionProvider\n        value={{\n          index,\n          setIndex,\n          focusedIndex,\n          setFocusedIndex,\n          isMultiple,\n          isToggle,\n          iconHidden,\n          icon,\n          styles,\n        }}\n      >\n        <ui.ul\n          ref={ref}\n          className={cx(\"ui-accordion\", className)}\n          __css={css}\n          {...rest}\n        />\n      </AccordionProvider>\n    </DescendantsContextProvider>\n  )\n})\n"],"mappings":";;;AACA,SACEA,EAAA,EACAC,UAAA,EACAC,sBAAA,EACAC,cAAA,QACK;AACP,SAASC,oBAAA,QAA4B;AACrC,SAASC,gBAAA,QAAwB;AACjC,SAASC,aAAA,EAAeC,EAAA,EAAIC,OAAA,QAAe;AAE3C,SAASC,SAAA,EAAWC,QAAA,QAAgB;AA0I5B,SAAAC,GAAA;AAxIR,IAAM;EACJC,0BAAA;EACAC,cAAA;EACAC,aAAA,EAAeC;AACjB,IAAIV,gBAAA,CAAoC;AAexC,IAAM,CAACW,iBAAA,EAAmBC,mBAAmB,IAC3CX,aAAA,CAAgC;EAC9BY,IAAA,EAAM;EACNC,YAAA;AACF,CAAC;AAoDI,IAAMC,SAAA,GAAYnB,UAAA,CAAiC,CAACoB,KAAA,EAAOC,GAAA,KAAQ;EACxE,MAAM,CAACC,MAAA,EAAQC,WAAW,IAAItB,sBAAA,CAAuB,aAAamB,KAAK;EACvE,MAAM;IACJI,SAAA;IACAC,KAAA,EAAOC,KAAA;IACPC,YAAA,EAAcC,YAAA;IACdC,UAAA;IACAC,QAAA;IACAC,UAAA;IACAC,IAAA;IACAC,QAAA;IACA,GAAGC;EACL,IAAIhC,cAAA,CAAeqB,WAAW;EAE9B,KACGG,KAAA,IAASE,YAAA,KAAiB,QAC3B,CAACrB,OAAA,CAAQmB,KAAA,IAASE,YAAY,KAC9BC,UAAA,EACA;IACAM,OAAA,CAAQC,IAAA,yFAER;EACF;EAEA,IAAIP,UAAA,IAAcC,QAAA,EAAU;IAC1BK,OAAA,CAAQC,IAAA,gLAER;EACF;EAEA,MAAMC,WAAA,GAAczB,cAAA,CAAe;EAEnC,MAAM,CAAC0B,YAAA,EAAcC,eAAe,IAAI9B,QAAA,CAAiB,EAAE;EAE3D,MAAM,CAACgB,KAAA,EAAOe,QAAQ,IAAIrC,oBAAA,CAAqB;IAC7CuB,KAAA;IACAE,YAAA,EAAcA,CAAA,KAAOC,UAAA,GAAaD,YAAA,WAAAA,YAAA,GAAgB,EAAC,GAAIA,YAAA,WAAAA,YAAA,GAAgB;IACvEK;EACF,CAAC;EAEDzB,SAAA,CAAU,MAAM;IACd,OAAO,MAAM+B,eAAA,CAAgB,EAAE;EACjC,GAAG,EAAE;EAEL,MAAME,GAAA,GAAmB;IAAEC,CAAA,EAAG;IAAQ,GAAGpB,MAAA,CAAOqB;EAAU;EAE1D,OACE,eAAAjC,GAAA,CAACC,0BAAA;IAA2Be,KAAA,EAAOW,WAAA;IACjCO,QAAA,iBAAAlC,GAAA,CAACK,iBAAA;MACCW,KAAA,EAAO;QACLD,KAAA;QACAe,QAAA;QACAF,YAAA;QACAC,eAAA;QACAV,UAAA;QACAC,QAAA;QACAC,UAAA;QACAC,IAAA;QACAV;MACF;MAEAsB,QAAA,iBAAAlC,GAAA,CAACX,EAAA,CAAG8C,EAAA,EAAH;QACCxB,GAAA;QACAG,SAAA,EAAWlB,EAAA,CAAG,gBAAgBkB,SAAS;QACvCsB,KAAA,EAAOL,GAAA;QACN,GAAGP;MAAA,CACN;IAAA,CACF;EAAA,CACF;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}