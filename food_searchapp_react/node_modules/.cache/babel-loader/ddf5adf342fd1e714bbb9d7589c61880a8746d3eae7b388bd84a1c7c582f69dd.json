{"ast":null,"code":"\"use client\";\n\n// src/popover.tsx\nimport { useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { useAnimationObserver } from \"@yamada-ui/use-animation\";\nimport { useDisclosure, useLazyDisclosure } from \"@yamada-ui/use-disclosure\";\nimport { useFocusOnHide, useFocusOnShow, useFocusOnPointerDown } from \"@yamada-ui/use-focus\";\nimport { usePopper, popperProperties } from \"@yamada-ui/use-popper\";\nimport { createContext, getEventRelatedTarget, handlerAll, isContains, mergeRefs, runIfFunc } from \"@yamada-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar popoverProperties = [...popperProperties, \"isOpen\", \"defaultIsOpen\", \"onOpen\", \"onClose\", \"initialFocusRef\", \"restoreFocus\", \"autoFocus\", \"closeOnBlur\", \"closeOnEsc\", \"closeOnButton\", \"trigger\", \"openDelay\", \"closeDelay\", \"isLazy\", \"lazyBehavior\", \"animation\", \"duration\"];\nvar [PopoverProvider, usePopover] = createContext({\n  strict: false,\n  name: \"PopoverContext\"\n});\nvar Popover = props => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Popover\", props);\n  const {\n    children,\n    initialFocusRef,\n    restoreFocus = true,\n    autoFocus = true,\n    closeOnBlur = true,\n    closeOnEsc = true,\n    closeOnButton = true,\n    trigger = \"click\",\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    animation = \"scale\",\n    duration,\n    relatedRef,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  const {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure(mergedProps);\n  const anchorRef = useRef(null);\n  const triggerRef = useRef(null);\n  const popoverRef = useRef(null);\n  const {\n    present,\n    onAnimationComplete\n  } = useAnimationObserver({\n    isOpen,\n    ref: popoverRef\n  });\n  const openTimeout = useRef(void 0);\n  const closeTimeout = useRef(void 0);\n  const isHoveringRef = useRef(false);\n  const hasBeenOpened = useRef(false);\n  if (isOpen) hasBeenOpened.current = true;\n  const {\n    referenceRef,\n    getPopperProps,\n    forceUpdate,\n    transformOrigin\n  } = usePopper({\n    ...rest,\n    enabled: isOpen\n  });\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) clearTimeout(openTimeout.current);\n      if (closeTimeout.current) clearTimeout(closeTimeout.current);\n    };\n  }, []);\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: restoreFocus && trigger === \"click\"\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === \"click\"\n  });\n  const shouldRenderChildren = useLazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: present\n  });\n  const getPopoverProps = useCallback((props2 = {}, ref = null) => {\n    const popoverProps = {\n      ...props2,\n      style: {\n        ...props2.style,\n        transformOrigin\n      },\n      ref: mergeRefs(popoverRef, ref),\n      children: shouldRenderChildren ? props2.children : null,\n      tabIndex: -1,\n      onKeyDown: handlerAll(props2.onKeyDown, ev => {\n        if (closeOnEsc && ev.key === \"Escape\") onClose();\n      }),\n      onBlur: handlerAll(props2.onBlur, ev => {\n        const relatedTarget = getEventRelatedTarget(ev);\n        const targetIsPopover = isContains(popoverRef.current, relatedTarget);\n        const targetIsTrigger = isContains(triggerRef.current, relatedTarget);\n        const targetIsRelated = (relatedRef == null ? void 0 : relatedRef.current) ? isContains(relatedRef.current, relatedTarget) : false;\n        const isValidBlur = !targetIsPopover && !targetIsTrigger && !targetIsRelated;\n        if (isOpen && closeOnBlur && isValidBlur) onClose();\n      })\n    };\n    if (trigger === \"hover\") {\n      popoverProps.onMouseEnter = handlerAll(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = handlerAll(props2.onMouseLeave, ev => {\n        if (ev.nativeEvent.relatedTarget === null) return;\n        isHoveringRef.current = false;\n        if (closeOnBlur) setTimeout(onClose, closeDelay);\n      });\n    }\n    return popoverProps;\n  }, [closeDelay, closeOnBlur, closeOnEsc, isOpen, onClose, shouldRenderChildren, transformOrigin, trigger, relatedRef]);\n  const maybeReferenceRef = useCallback(node => {\n    if (anchorRef.current == null) referenceRef(node);\n  }, [referenceRef]);\n  const getTriggerProps = useCallback((props2 = {}, ref = null) => {\n    const triggerProps = {\n      ...props2,\n      ref: mergeRefs(triggerRef, ref, maybeReferenceRef)\n    };\n    if (trigger === \"click\") {\n      triggerProps.onClick = handlerAll(props2.onClick, onToggle);\n      triggerProps.onBlur = handlerAll(props2.onBlur, ev => {\n        const relatedTarget = getEventRelatedTarget(ev);\n        const isValidBlur = !isContains(popoverRef.current, relatedTarget);\n        if (isOpen && closeOnBlur && isValidBlur) onClose();\n      });\n    }\n    if (trigger === \"hover\") {\n      triggerProps.onFocus = handlerAll(props2.onFocus, () => {\n        if (openTimeout.current === void 0) onOpen();\n      });\n      triggerProps.onBlur = handlerAll(props2.onBlur, ev => {\n        const relatedTarget = getEventRelatedTarget(ev);\n        const isValidBlur = !isContains(popoverRef.current, relatedTarget);\n        if (isOpen && closeOnBlur && isValidBlur) onClose();\n      });\n      triggerProps.onKeyDown = handlerAll(props2.onKeyDown, ev => {\n        if (ev.key === \"Escape\") onClose();\n      });\n      triggerProps.onMouseEnter = handlerAll(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = handlerAll(props2.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n        closeTimeout.current = window.setTimeout(() => {\n          if (!isHoveringRef.current) onClose();\n        }, closeDelay);\n      });\n    }\n    return triggerProps;\n  }, [closeDelay, closeOnBlur, isOpen, maybeReferenceRef, onClose, onOpen, onToggle, openDelay, trigger]);\n  const getAnchorProps = useCallback((props2 = {}, ref = null) => {\n    return {\n      ...props2,\n      ref: mergeRefs(ref, anchorRef, referenceRef)\n    };\n  }, [anchorRef, referenceRef]);\n  return /* @__PURE__ */jsx(PopoverProvider, {\n    value: {\n      isOpen,\n      onClose,\n      closeOnButton,\n      onAnimationComplete,\n      forceUpdate,\n      getTriggerProps,\n      getAnchorProps,\n      getPopperProps,\n      getPopoverProps,\n      animation,\n      duration,\n      styles\n    },\n    children: runIfFunc(children, {\n      isOpen,\n      onClose,\n      forceUpdate\n    })\n  });\n};\nexport { popoverProperties, usePopover, Popover };","map":{"version":3,"names":["useMultiComponentStyle","omitThemeProps","useAnimationObserver","useDisclosure","useLazyDisclosure","useFocusOnHide","useFocusOnShow","useFocusOnPointerDown","usePopper","popperProperties","createContext","getEventRelatedTarget","handlerAll","isContains","mergeRefs","runIfFunc","useCallback","useEffect","useRef","jsx","popoverProperties","PopoverProvider","usePopover","strict","name","Popover","props","styles","mergedProps","children","initialFocusRef","restoreFocus","autoFocus","closeOnBlur","closeOnEsc","closeOnButton","trigger","openDelay","closeDelay","isLazy","lazyBehavior","animation","duration","relatedRef","rest","isOpen","onOpen","onClose","onToggle","anchorRef","triggerRef","popoverRef","present","onAnimationComplete","ref","openTimeout","closeTimeout","isHoveringRef","hasBeenOpened","current","referenceRef","getPopperProps","forceUpdate","transformOrigin","enabled","clearTimeout","focusRef","visible","shouldFocus","shouldRenderChildren","wasSelected","mode","isSelected","getPopoverProps","props2","popoverProps","style","tabIndex","onKeyDown","ev","key","onBlur","relatedTarget","targetIsPopover","targetIsTrigger","targetIsRelated","isValidBlur","onMouseEnter","onMouseLeave","nativeEvent","setTimeout","maybeReferenceRef","node","getTriggerProps","triggerProps","onClick","onFocus","window","getAnchorProps","value"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\popover\\src\\popover.tsx"],"sourcesContent":["import type { CSSUIObject, ThemeProps } from \"@yamada-ui/core\"\nimport { useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\"\nimport type {\n  MotionUIPropGetter,\n  MotionProps,\n  MotionTransitionProperties,\n} from \"@yamada-ui/motion\"\nimport { useAnimationObserver } from \"@yamada-ui/use-animation\"\nimport type { LazyMode } from \"@yamada-ui/use-disclosure\"\nimport { useDisclosure, useLazyDisclosure } from \"@yamada-ui/use-disclosure\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n  useFocusOnPointerDown,\n} from \"@yamada-ui/use-focus\"\nimport type { UsePopperProps } from \"@yamada-ui/use-popper\"\nimport { usePopper, popperProperties } from \"@yamada-ui/use-popper\"\nimport type { DOMAttributes, PropGetter } from \"@yamada-ui/utils\"\nimport {\n  createContext,\n  getEventRelatedTarget,\n  handlerAll,\n  isContains,\n  mergeRefs,\n  runIfFunc,\n} from \"@yamada-ui/utils\"\nimport type { FC, PropsWithChildren, RefAttributes, RefObject } from \"react\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\nexport const popoverProperties: any[] = [\n  ...popperProperties,\n  \"isOpen\",\n  \"defaultIsOpen\",\n  \"onOpen\",\n  \"onClose\",\n  \"initialFocusRef\",\n  \"restoreFocus\",\n  \"autoFocus\",\n  \"closeOnBlur\",\n  \"closeOnEsc\",\n  \"closeOnButton\",\n  \"trigger\",\n  \"openDelay\",\n  \"closeDelay\",\n  \"isLazy\",\n  \"lazyBehavior\",\n  \"animation\",\n  \"duration\",\n]\n\ntype PopoverOptions = {\n  /**\n   * If `true`, the popover will be opened.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * Callback fired when the popover opens.\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes.\n   */\n  onClose?: () => void\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<{ focus(): void }>\n  /**\n   * The `ref` of the element related to the popover.\n   * This is used during the `onBlur` event.\n   */\n  relatedRef?: RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover when it closes.\n   *\n   * @default true\n   */\n  restoreFocus?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element when the popover opens.\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by clicking outside or tabbing out.\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key.\n   *\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * If `true`, display the popover close button.\n   *\n   * @default true\n   */\n  closeOnButton?: boolean\n  /**\n   * The interaction that triggers the popover.\n   *\n   * - `hover`: means the popover will open when you hover with mouse or focus with keyboard on the popover trigger.\n   * - `click`: means the popover will open on click or press `Enter` to `Space` on keyboard.\n   *\n   * @default 'click'\n   */\n  trigger?: \"click\" | \"hover\" | \"never\"\n  /**\n   * The number of delay time to open.\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * The number of delay time to close.\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the PopoverContent rendering will be deferred until the popover is open.\n   *\n   * @default false\n   */\n  isLazy?: boolean\n  /**\n   * The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`\n   *\n   * - `unmount`: The popover's content is always unmounted when not open.\n   * - `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open.\n   *\n   * @default 'unmount'\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * The animation of the popover.\n   *\n   * @default 'scale'\n   */\n  animation?: \"scale\" | \"top\" | \"right\" | \"left\" | \"bottom\" | \"none\"\n  /**\n   * The animation duration.\n   */\n  duration?: MotionTransitionProperties[\"duration\"]\n}\n\nexport type PopoverProps = ThemeProps<\"Popover\"> &\n  Omit<UsePopperProps, \"enabled\"> &\n  PropsWithChildren<PopoverOptions>\n\ntype PopoverContext = Pick<\n  PopoverOptions,\n  \"isOpen\" | \"onClose\" | \"closeOnButton\" | \"animation\" | \"duration\"\n> & {\n  onAnimationComplete: () => void\n  forceUpdate: () => void | undefined\n  getTriggerProps: PropGetter\n  getAnchorProps: PropGetter\n  getPopperProps: PropGetter\n  getPopoverProps: MotionUIPropGetter\n  styles: Record<string, CSSUIObject>\n}\n\nconst [PopoverProvider, usePopover] = createContext<PopoverContext>({\n  strict: false,\n  name: \"PopoverContext\",\n})\n\nexport { usePopover }\n\n/**\n * `Popover` is a component that floats around an element to display information.\n *\n * @see Docs https://yamada-ui.com/components/overlay/popover\n */\nexport const Popover: FC<PopoverProps> = (props) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Popover\", props)\n  const {\n    children,\n    initialFocusRef,\n    restoreFocus = true,\n    autoFocus = true,\n    closeOnBlur = true,\n    closeOnEsc = true,\n    closeOnButton = true,\n    trigger = \"click\",\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    animation = \"scale\",\n    duration,\n    relatedRef,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure(mergedProps)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const { present, onAnimationComplete } = useAnimationObserver({\n    isOpen,\n    ref: popoverRef,\n  })\n\n  const openTimeout = useRef<number | undefined>(undefined)\n  const closeTimeout = useRef<number | undefined>(undefined)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n\n  if (isOpen) hasBeenOpened.current = true\n\n  const { referenceRef, getPopperProps, forceUpdate, transformOrigin } =\n    usePopper({\n      ...rest,\n      enabled: isOpen,\n    })\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) clearTimeout(openTimeout.current)\n\n      if (closeTimeout.current) clearTimeout(closeTimeout.current)\n    }\n  }, [])\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: restoreFocus && trigger === \"click\",\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === \"click\",\n  })\n\n  const shouldRenderChildren = useLazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: present,\n  })\n\n  const getPopoverProps: MotionUIPropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const popoverProps: MotionProps<\"div\"> & RefAttributes<any> = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin,\n        },\n        ref: mergeRefs(popoverRef, ref),\n        children: shouldRenderChildren ? props.children : null,\n        tabIndex: -1,\n        onKeyDown: handlerAll(props.onKeyDown, (ev) => {\n          if (closeOnEsc && ev.key === \"Escape\") onClose()\n        }),\n        onBlur: handlerAll(props.onBlur, (ev) => {\n          const relatedTarget = getEventRelatedTarget(ev)\n          const targetIsPopover = isContains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = isContains(triggerRef.current, relatedTarget)\n          const targetIsRelated = relatedRef?.current\n            ? isContains(relatedRef.current, relatedTarget)\n            : false\n\n          const isValidBlur =\n            !targetIsPopover && !targetIsTrigger && !targetIsRelated\n\n          if (isOpen && closeOnBlur && isValidBlur) onClose()\n        }),\n      }\n\n      if (trigger === \"hover\") {\n        popoverProps.onMouseEnter = handlerAll(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n\n        popoverProps.onMouseLeave = handlerAll(props.onMouseLeave, (ev) => {\n          if (ev.nativeEvent.relatedTarget === null) return\n\n          isHoveringRef.current = false\n\n          if (closeOnBlur) setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      closeDelay,\n      closeOnBlur,\n      closeOnEsc,\n      isOpen,\n      onClose,\n      shouldRenderChildren,\n      transformOrigin,\n      trigger,\n      relatedRef,\n    ],\n  )\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      if (anchorRef.current == null) referenceRef(node)\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const triggerProps: RefAttributes<any> & DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, ref, maybeReferenceRef),\n      }\n\n      if (trigger === \"click\") {\n        triggerProps.onClick = handlerAll(props.onClick, onToggle)\n        triggerProps.onBlur = handlerAll(props.onBlur, (ev) => {\n          const relatedTarget = getEventRelatedTarget(ev)\n          const isValidBlur = !isContains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) onClose()\n        })\n      }\n\n      if (trigger === \"hover\") {\n        triggerProps.onFocus = handlerAll(props.onFocus, () => {\n          if (openTimeout.current === undefined) onOpen()\n        })\n\n        triggerProps.onBlur = handlerAll(props.onBlur, (ev) => {\n          const relatedTarget = getEventRelatedTarget(ev)\n          const isValidBlur = !isContains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) onClose()\n        })\n\n        triggerProps.onKeyDown = handlerAll(props.onKeyDown, (ev) => {\n          if (ev.key === \"Escape\") onClose()\n        })\n\n        triggerProps.onMouseEnter = handlerAll(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = handlerAll(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (!isHoveringRef.current) onClose()\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      closeDelay,\n      closeOnBlur,\n      isOpen,\n      maybeReferenceRef,\n      onClose,\n      onOpen,\n      onToggle,\n      openDelay,\n      trigger,\n    ],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  return (\n    <PopoverProvider\n      value={{\n        isOpen,\n        onClose,\n        closeOnButton,\n        onAnimationComplete,\n        forceUpdate,\n        getTriggerProps,\n        getAnchorProps,\n        getPopperProps,\n        getPopoverProps,\n        animation,\n        duration,\n        styles,\n      }}\n    >\n      {runIfFunc(children, {\n        isOpen,\n        onClose,\n        forceUpdate,\n      })}\n    </PopoverProvider>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}