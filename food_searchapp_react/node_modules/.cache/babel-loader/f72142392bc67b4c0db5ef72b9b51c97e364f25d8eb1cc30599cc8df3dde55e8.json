{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { useCallbackRef } from \"@yamada-ui/utils\";\nimport { useEffect } from \"react\";\nvar useInterval = (callback, delay) => {\n  const func = useCallbackRef(callback);\n  useEffect(() => {\n    let timeoutId = null;\n    if (delay !== null) timeoutId = window.setInterval(() => func(), delay);\n    return () => {\n      if (timeoutId) window.clearInterval(timeoutId);\n    };\n  }, [delay, func]);\n};\nexport { useInterval };","map":{"version":3,"names":["useCallbackRef","useEffect","useInterval","callback","delay","func","timeoutId","window","setInterval","clearInterval"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-interval\\src\\index.ts"],"sourcesContent":["import { useCallbackRef } from \"@yamada-ui/utils\"\nimport { useEffect } from \"react\"\n\n/**\n * `useInterval` is a custom hook that runs a function at a specified interval.\n *\n * @see Docs https://yamada-ui.com/hooks/use-interval\n */\nexport const useInterval = (callback: () => void, delay: number | null) => {\n  const func = useCallbackRef(callback)\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (delay !== null) timeoutId = window.setInterval(() => func(), delay)\n\n    return () => {\n      if (timeoutId) window.clearInterval(timeoutId)\n    }\n  }, [delay, func])\n}\n"],"mappings":";;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAASC,SAAA,QAAiB;AAOnB,IAAMC,WAAA,GAAcA,CAACC,QAAA,EAAsBC,KAAA,KAAyB;EACzE,MAAMC,IAAA,GAAOL,cAAA,CAAeG,QAAQ;EAEpCF,SAAA,CAAU,MAAM;IACd,IAAIK,SAAA,GAA2B;IAE/B,IAAIF,KAAA,KAAU,MAAME,SAAA,GAAYC,MAAA,CAAOC,WAAA,CAAY,MAAMH,IAAA,CAAK,GAAGD,KAAK;IAEtE,OAAO,MAAM;MACX,IAAIE,SAAA,EAAWC,MAAA,CAAOE,aAAA,CAAcH,SAAS;IAC/C;EACF,GAAG,CAACF,KAAA,EAAOC,IAAI,CAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}