{"ast":null,"code":"\"use client\";\n\nimport { useToggleGroup } from \"./chunk-XXOKKKVX.mjs\";\n\n// src/toggle.tsx\nimport { ui, forwardRef, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { Ripple, useRipple } from \"@yamada-ui/ripple\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { cx, dataAttr, handlerAll, isArray, isUndefined } from \"@yamada-ui/utils\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Toggle = forwardRef((props, ref) => {\n  var _a;\n  const {\n    value: groupValue,\n    onChange: onChangeGroup,\n    isControlled,\n    ...group\n  } = (_a = useToggleGroup()) != null ? _a : {};\n  const [styles, mergedProps] = useMultiComponentStyle(\"Toggle\", {\n    ...group,\n    ...props\n  });\n  const {\n    value,\n    className,\n    icon,\n    isSelected: isSelectedProp,\n    defaultIsSelected = false,\n    onChange,\n    isRounded,\n    isActive,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isReadOnly = group == null ? void 0 : group.isReadOnly,\n    disableRipple,\n    children,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  const [isSelected, setIsSelected] = useControllableState({\n    value: isSelectedProp,\n    defaultValue: defaultIsSelected,\n    onChange\n  });\n  if (isControlled && isUndefined(value)) {\n    console.warn(`Toggle: value is required. Please set the value.`);\n  }\n  const isMulti = isArray(groupValue);\n  const isIncluded = isMulti ? groupValue.includes(value != null ? value : \"\") : value === groupValue;\n  const trulySelected = isControlled ? isIncluded : isSelected;\n  const {\n    onPointerDown,\n    ...rippleProps\n  } = useRipple({\n    ...rest,\n    isDisabled: disableRipple || isDisabled\n  });\n  const onClick = () => {\n    setIsSelected(prev => !prev);\n    onChangeGroup == null ? void 0 : onChangeGroup(value);\n  };\n  const css = useMemo(() => ({\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    gap: \"fallback(2, 0.5rem)\",\n    appearance: \"none\",\n    userSelect: \"none\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    overflow: \"hidden\",\n    outline: \"none\",\n    pointerEvents: isReadOnly ? \"none\" : \"auto\",\n    ...styles,\n    ...(isRounded ? {\n      borderRadius: \"fallback(full, 9999px)\"\n    } : {})\n  }), [isRounded, styles, isReadOnly]);\n  return /* @__PURE__ */jsxs(ui.button, {\n    ref,\n    type: \"button\",\n    tabIndex: isReadOnly ? -1 : 0,\n    disabled: isDisabled,\n    \"data-active\": dataAttr(isActive),\n    \"data-selected\": dataAttr(trulySelected),\n    \"data-readonly\": dataAttr(isReadOnly),\n    \"aria-pressed\": trulySelected,\n    className: cx(\"ui-toggle\", className),\n    __css: css,\n    ...rest,\n    onClick: handlerAll(rest.onClick, onClick),\n    onPointerDown,\n    children: [children || icon, /* @__PURE__ */jsx(Ripple, {\n      isDisabled: disableRipple || isDisabled,\n      ...rippleProps\n    })]\n  });\n});\nToggle.displayName = \"Toggle\";\nexport { Toggle };","map":{"version":3,"names":["ui","forwardRef","useMultiComponentStyle","omitThemeProps","Ripple","useRipple","useControllableState","cx","dataAttr","handlerAll","isArray","isUndefined","useMemo","jsx","jsxs","Toggle","props","ref","_a","value","groupValue","onChange","onChangeGroup","isControlled","group","useToggleGroup","styles","mergedProps","className","icon","isSelected","isSelectedProp","defaultIsSelected","isRounded","isActive","isDisabled","isReadOnly","disableRipple","children","rest","setIsSelected","defaultValue","console","warn","isMulti","isIncluded","includes","trulySelected","onPointerDown","rippleProps","onClick","prev","css","display","alignItems","justifyContent","gap","appearance","userSelect","position","verticalAlign","overflow","outline","pointerEvents","borderRadius","button","type","tabIndex","disabled","__css","displayName"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\toggle\\src\\toggle.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  ComponentArgs,\n  HTMLUIProps,\n  ThemeProps,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Ripple, useRipple } from \"@yamada-ui/ripple\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport {\n  cx,\n  dataAttr,\n  handlerAll,\n  isArray,\n  isUndefined,\n} from \"@yamada-ui/utils\"\nimport type { ForwardedRef, ReactElement, Ref } from \"react\"\nimport { useMemo } from \"react\"\nimport { useToggleGroup } from \"./toggle-group\"\n\ntype ToggleOptions<Y extends string | number = string> = {\n  /**\n   * The value of the toggle button.\n   */\n  value?: Y\n  /**\n   * If `true`, the toggle button will be selected.\n   */\n  isSelected?: boolean\n  /**\n    *If `true`, the toggle button will be initially selected.\n   *\n   @default false\n   */\n  defaultIsSelected?: boolean\n  /**\n   * The callback invoked when selected state changes.\n   */\n  onChange?: (isSelected: boolean) => void\n  /**\n   * The icon to be used in the button.\n   */\n  icon?: ReactElement\n  /**\n   * If true, the toggle button is full rounded. Else, it'll be slightly round.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the toggle button is represented as active.\n   *\n   * @default false\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the toggle button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the toggle button will be readonly.\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, disable ripple effects when pressing a element.\n   *\n   * @default false\n   */\n  disableRipple?: boolean\n}\n\nexport type ToggleProps<Y extends string | number = string> = Omit<\n  HTMLUIProps<\"button\">,\n  \"onChange\"\n> &\n  ThemeProps<\"Toggle\"> &\n  ToggleOptions<Y>\n\n/**\n * `Toggle` is a two-state button that can be either on or off.\n *\n * @see Docs https://yamada-ui.com/components/forms/toggle\n */\nexport const Toggle = forwardRef(\n  <Y extends string | number = string>(\n    props: ToggleProps<Y>,\n    ref: ForwardedRef<HTMLButtonElement>,\n  ) => {\n    const {\n      value: groupValue,\n      onChange: onChangeGroup,\n      isControlled,\n      ...group\n    } = useToggleGroup() ?? {}\n    const [styles, mergedProps] = useMultiComponentStyle(\"Toggle\", {\n      ...group,\n      ...props,\n    })\n    const {\n      value,\n      className,\n      icon,\n      isSelected: isSelectedProp,\n      defaultIsSelected = false,\n      onChange,\n      isRounded,\n      isActive,\n      isDisabled = group?.isDisabled,\n      isReadOnly = group?.isReadOnly,\n      disableRipple,\n      children,\n      ...rest\n    } = omitThemeProps(mergedProps)\n    const [isSelected, setIsSelected] = useControllableState({\n      value: isSelectedProp,\n      defaultValue: defaultIsSelected,\n      onChange,\n    })\n\n    if (isControlled && isUndefined(value)) {\n      console.warn(`Toggle: value is required. Please set the value.`)\n    }\n\n    const isMulti = isArray(groupValue)\n    const isIncluded = isMulti\n      ? groupValue.includes(value ?? \"\")\n      : value === groupValue\n    const trulySelected = isControlled ? isIncluded : isSelected\n    const { onPointerDown, ...rippleProps } = useRipple({\n      ...rest,\n      isDisabled: disableRipple || isDisabled,\n    })\n\n    const onClick = () => {\n      setIsSelected((prev) => !prev)\n      onChangeGroup?.(value)\n    }\n\n    const css: CSSUIObject = useMemo(\n      () => ({\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"fallback(2, 0.5rem)\",\n        appearance: \"none\",\n        userSelect: \"none\",\n        position: \"relative\",\n        verticalAlign: \"middle\",\n        overflow: \"hidden\",\n        outline: \"none\",\n        pointerEvents: isReadOnly ? \"none\" : \"auto\",\n        ...styles,\n        ...(isRounded ? { borderRadius: \"fallback(full, 9999px)\" } : {}),\n      }),\n      [isRounded, styles, isReadOnly],\n    )\n\n    return (\n      <ui.button\n        ref={ref}\n        type=\"button\"\n        tabIndex={isReadOnly ? -1 : 0}\n        disabled={isDisabled}\n        data-active={dataAttr(isActive)}\n        data-selected={dataAttr(trulySelected)}\n        data-readonly={dataAttr(isReadOnly)}\n        aria-pressed={trulySelected}\n        className={cx(\"ui-toggle\", className)}\n        __css={css}\n        {...rest}\n        onClick={handlerAll(rest.onClick, onClick)}\n        onPointerDown={onPointerDown}\n      >\n        {children || icon}\n\n        <Ripple isDisabled={disableRipple || isDisabled} {...rippleProps} />\n      </ui.button>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: ToggleProps<Y> & { ref?: Ref<HTMLInputElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nToggle.displayName = \"Toggle\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}