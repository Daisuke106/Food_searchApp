{"ast":null,"code":"\"use client\";\n\nimport { shouldShowFallbackImage, useImage } from \"./chunk-MCA2V6UE.mjs\";\n\n// src/image.tsx\nimport { ui, forwardRef } from \"@yamada-ui/core\";\nimport { cx, omitObject } from \"@yamada-ui/utils\";\nimport { isValidElement, useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Image = forwardRef((props, ref) => {\n  let {\n    fallback,\n    src,\n    srcSet,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    className,\n    fallbackStrategy = \"beforeLoadOrError\",\n    onError,\n    onLoad,\n    referrerPolicy,\n    size: boxSize,\n    fit: objectFit,\n    ...rest\n  } = props;\n  ignoreFallback = loading != null || ignoreFallback || !fallback;\n  const status = useImage({\n    ...props,\n    ignoreFallback\n  });\n  const css = useMemo(() => ({\n    boxSize,\n    objectFit\n  }), [boxSize, objectFit]);\n  const isFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  if (isFallbackImage) {\n    if (isValidElement(fallback)) {\n      return fallback;\n    } else {\n      return /* @__PURE__ */jsx(ui.img, {\n        ref,\n        className: cx(\"ui-image--fallback\", className),\n        src: fallback,\n        __css: css,\n        ...(ignoreFallback ? {\n          ...rest,\n          onError,\n          onLoad\n        } : rest)\n      });\n    }\n  }\n  return /* @__PURE__ */jsx(ui.img, {\n    ref,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: cx(\"ui-image\", className),\n    __css: css,\n    ...(ignoreFallback ? rest : omitObject(rest, [\"onError\", \"onLoad\"]))\n  });\n});\nexport { Image };","map":{"version":3,"names":["ui","forwardRef","cx","omitObject","isValidElement","useMemo","jsx","Image","props","ref","fallback","src","srcSet","loading","ignoreFallback","crossOrigin","className","fallbackStrategy","onError","onLoad","referrerPolicy","size","boxSize","fit","objectFit","rest","status","useImage","css","isFallbackImage","shouldShowFallbackImage","img","__css"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\image\\src\\image.tsx"],"sourcesContent":["import type { HTMLUIProps, CSSUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx, omitObject } from \"@yamada-ui/utils\"\nimport type { ReactElement } from \"react\"\nimport { isValidElement, useMemo } from \"react\"\nimport type { UseImageProps } from \"./use-image\"\nimport { shouldShowFallbackImage, useImage } from \"./use-image\"\n\ntype ImageOptions = {\n  /**\n   * Fallback image `src` or element to show if image is loading or image fails.\n   */\n  fallback?: string | ReactElement\n  /**\n   * - beforeLoadOrError: loads the fallbackImage while loading the src.\n   * - onError: loads the fallbackImage only if there is an error fetching the src.\n   *\n   * @default \"beforeLoadOrError\"\n   */\n  fallbackStrategy?: \"onError\" | \"beforeLoadOrError\"\n  /**\n   * The CSS `box-size` property.\n   */\n  size?: CSSUIProps[\"boxSize\"]\n  /**\n   * The CSS `object-fit` property.\n   */\n  fit?: CSSUIProps[\"objectFit\"]\n}\n\nexport type ImageProps = Omit<HTMLUIProps<\"img\">, keyof UseImageProps> &\n  UseImageProps &\n  ImageOptions\n\n/**\n * `Image` is a component that displays images with fallback support.\n *\n * @see Docs https://yamada-ui.com/components/media-and-icons/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">((props, ref) => {\n  let {\n    fallback,\n    src,\n    srcSet,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    className,\n    fallbackStrategy = \"beforeLoadOrError\",\n    onError,\n    onLoad,\n    referrerPolicy,\n    size: boxSize,\n    fit: objectFit,\n    ...rest\n  } = props\n\n  ignoreFallback = loading != null || ignoreFallback || !fallback\n\n  const status = useImage({ ...props, ignoreFallback })\n\n  const css = useMemo(() => ({ boxSize, objectFit }), [boxSize, objectFit])\n\n  const isFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  if (isFallbackImage) {\n    if (isValidElement(fallback)) {\n      return fallback\n    } else {\n      return (\n        <ui.img\n          ref={ref}\n          className={cx(\"ui-image--fallback\", className)}\n          src={fallback as string | undefined}\n          __css={css}\n          {...(ignoreFallback ? { ...rest, onError, onLoad } : rest)}\n        />\n      )\n    }\n  }\n\n  return (\n    <ui.img\n      ref={ref}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className={cx(\"ui-image\", className)}\n      __css={css}\n      {...(ignoreFallback ? rest : omitObject(rest, [\"onError\", \"onLoad\"]))}\n    />\n  )\n})\n"],"mappings":";;;;;AACA,SAASA,EAAA,EAAIC,UAAA,QAAkB;AAC/B,SAASC,EAAA,EAAIC,UAAA,QAAkB;AAE/B,SAASC,cAAA,EAAgBC,OAAA,QAAe;AAkEhC,SAAAC,GAAA;AA/BD,IAAMC,KAAA,GAAQN,UAAA,CAA8B,CAACO,KAAA,EAAOC,GAAA,KAAQ;EACjE,IAAI;IACFC,QAAA;IACAC,GAAA;IACAC,MAAA;IACAC,OAAA;IACAC,cAAA;IACAC,WAAA;IACAC,SAAA;IACAC,gBAAA,GAAmB;IACnBC,OAAA;IACAC,MAAA;IACAC,cAAA;IACAC,IAAA,EAAMC,OAAA;IACNC,GAAA,EAAKC,SAAA;IACL,GAAGC;EACL,IAAIjB,KAAA;EAEJM,cAAA,GAAiBD,OAAA,IAAW,QAAQC,cAAA,IAAkB,CAACJ,QAAA;EAEvD,MAAMgB,MAAA,GAASC,QAAA,CAAS;IAAE,GAAGnB,KAAA;IAAOM;EAAe,CAAC;EAEpD,MAAMc,GAAA,GAAMvB,OAAA,CAAQ,OAAO;IAAEiB,OAAA;IAASE;EAAU,IAAI,CAACF,OAAA,EAASE,SAAS,CAAC;EAExE,MAAMK,eAAA,GAAkBC,uBAAA,CAAwBJ,MAAA,EAAQT,gBAAgB;EAExE,IAAIY,eAAA,EAAiB;IACnB,IAAIzB,cAAA,CAAeM,QAAQ,GAAG;MAC5B,OAAOA,QAAA;IACT,OAAO;MACL,OACE,eAAAJ,GAAA,CAACN,EAAA,CAAG+B,GAAA,EAAH;QACCtB,GAAA;QACAO,SAAA,EAAWd,EAAA,CAAG,sBAAsBc,SAAS;QAC7CL,GAAA,EAAKD,QAAA;QACLsB,KAAA,EAAOJ,GAAA;QACN,IAAId,cAAA,GAAiB;UAAE,GAAGW,IAAA;UAAMP,OAAA;UAASC;QAAO,IAAIM,IAAA;MAAA,CACvD;IAEJ;EACF;EAEA,OACE,eAAAnB,GAAA,CAACN,EAAA,CAAG+B,GAAA,EAAH;IACCtB,GAAA;IACAE,GAAA;IACAC,MAAA;IACAG,WAAA;IACAF,OAAA;IACAO,cAAA;IACAJ,SAAA,EAAWd,EAAA,CAAG,YAAYc,SAAS;IACnCgB,KAAA,EAAOJ,GAAA;IACN,IAAId,cAAA,GAAiBW,IAAA,GAAOtB,UAAA,CAAWsB,IAAA,EAAM,CAAC,WAAW,QAAQ,CAAC;EAAA,CACrE;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}