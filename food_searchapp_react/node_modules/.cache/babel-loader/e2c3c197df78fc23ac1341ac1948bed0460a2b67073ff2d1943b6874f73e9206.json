{"ast":null,"code":"\"use client\";\n\n// src/use-image.ts\nimport { useSafeLayoutEffect } from \"@yamada-ui/utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\nvar useImage = _ref => {\n  let {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = _ref;\n  const [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src) return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n    img.onload = ev => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(ev);\n    };\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n  const flush = () => {\n    if (!imageRef.current) return;\n    imageRef.current.onload = null;\n    imageRef.current.onerror = null;\n    imageRef.current = null;\n  };\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return;\n    if (status === \"loading\") load();\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n};\nexport { shouldShowFallbackImage, useImage };","map":{"version":3,"names":["useSafeLayoutEffect","useCallback","useEffect","useRef","useState","shouldShowFallbackImage","status","fallbackStrategy","useImage","_ref","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","setStatus","imageRef","load","flush","img","Image","srcset","onload","ev","onerror","error","current"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\image\\src\\use-image.ts"],"sourcesContent":["import { useSafeLayoutEffect } from \"@yamada-ui/utils\"\nimport type { ImgHTMLAttributes, SyntheticEvent } from \"react\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype HTMLImageElementProps = ImgHTMLAttributes<HTMLImageElement>\n\nexport type UseImageProps = {\n  /**\n   * The image `src` attribute.\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute.\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute.\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded.\n   */\n  onLoad?: HTMLImageElementProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`.\n   */\n  onError?: HTMLImageElementProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: HTMLImageElementProps[\"crossOrigin\"]\n  /**\n   * The image `loading` attribute.\n   */\n  loading?: HTMLImageElementProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: \"onError\" | \"beforeLoadOrError\",\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport const useImage = ({\n  loading,\n  src,\n  srcSet,\n  onLoad,\n  onError,\n  crossOrigin,\n  sizes,\n  ignoreFallback,\n}: UseImageProps) => {\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (ev) => {\n      flush()\n\n      setStatus(\"loaded\")\n\n      onLoad?.(ev as unknown as SyntheticEvent<HTMLImageElement, Event>)\n    }\n\n    img.onerror = (error) => {\n      flush()\n\n      setStatus(\"failed\")\n\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (!imageRef.current) return\n\n    imageRef.current.onload = null\n    imageRef.current.onerror = null\n    imageRef.current = null\n  }\n\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return\n\n    if (status === \"loading\") load()\n\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"],"mappings":";;;AAAA,SAASA,mBAAA,QAA2B;AAEpC,SAASC,WAAA,EAAaC,SAAA,EAAWC,MAAA,EAAQC,QAAA,QAAgB;AA4ClD,IAAMC,uBAAA,GAA0BA,CACrCC,MAAA,EACAC,gBAAA,KAECD,MAAA,KAAW,YAAYC,gBAAA,KAAqB,uBAC5CD,MAAA,KAAW,YAAYC,gBAAA,KAAqB;AAExC,IAAMC,QAAA,GAAWC,IAAA,IASH;EAAA,IATI;IACvBC,OAAA;IACAC,GAAA;IACAC,MAAA;IACAC,MAAA;IACAC,OAAA;IACAC,WAAA;IACAC,KAAA;IACAC;EACF,IAAAR,IAAA;EACE,MAAM,CAACH,MAAA,EAAQY,SAAS,IAAId,QAAA,CAAiB,SAAS;EAEtDF,SAAA,CAAU,MAAM;IACdgB,SAAA,CAAUP,GAAA,GAAM,YAAY,SAAS;EACvC,GAAG,CAACA,GAAG,CAAC;EAER,MAAMQ,QAAA,GAAWhB,MAAA,CAAgC;EAEjD,MAAMiB,IAAA,GAAOnB,WAAA,CAAY,MAAM;IAC7B,IAAI,CAACU,GAAA,EAAK;IAEVU,KAAA,CAAM;IAEN,MAAMC,GAAA,GAAM,IAAIC,KAAA,CAAM;IAEtBD,GAAA,CAAIX,GAAA,GAAMA,GAAA;IAEV,IAAII,WAAA,EAAaO,GAAA,CAAIP,WAAA,GAAcA,WAAA;IACnC,IAAIH,MAAA,EAAQU,GAAA,CAAIE,MAAA,GAASZ,MAAA;IACzB,IAAII,KAAA,EAAOM,GAAA,CAAIN,KAAA,GAAQA,KAAA;IACvB,IAAIN,OAAA,EAASY,GAAA,CAAIZ,OAAA,GAAUA,OAAA;IAE3BY,GAAA,CAAIG,MAAA,GAAUC,EAAA,IAAO;MACnBL,KAAA,CAAM;MAENH,SAAA,CAAU,QAAQ;MAElBL,MAAA,oBAAAA,MAAA,CAASa,EAAA;IACX;IAEAJ,GAAA,CAAIK,OAAA,GAAWC,KAAA,IAAU;MACvBP,KAAA,CAAM;MAENH,SAAA,CAAU,QAAQ;MAElBJ,OAAA,oBAAAA,OAAA,CAAUc,KAAA;IACZ;IAEAT,QAAA,CAASU,OAAA,GAAUP,GAAA;EACrB,GAAG,CAACX,GAAA,EAAKI,WAAA,EAAaH,MAAA,EAAQI,KAAA,EAAOH,MAAA,EAAQC,OAAA,EAASJ,OAAO,CAAC;EAE9D,MAAMW,KAAA,GAAQA,CAAA,KAAM;IAClB,IAAI,CAACF,QAAA,CAASU,OAAA,EAAS;IAEvBV,QAAA,CAASU,OAAA,CAAQJ,MAAA,GAAS;IAC1BN,QAAA,CAASU,OAAA,CAAQF,OAAA,GAAU;IAC3BR,QAAA,CAASU,OAAA,GAAU;EACrB;EAEA7B,mBAAA,CAAoB,MAAM;IACxB,IAAIiB,cAAA,EAAgB;IAEpB,IAAIX,MAAA,KAAW,WAAWc,IAAA,CAAK;IAE/B,OAAO,MAAM;MACXC,KAAA,CAAM;IACR;EACF,GAAG,CAACf,MAAA,EAAQc,IAAA,EAAMH,cAAc,CAAC;EAEjC,OAAOA,cAAA,GAAiB,WAAWX,MAAA;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}