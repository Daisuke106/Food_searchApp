{"ast":null,"code":"\"use client\";\n\nimport { AvatarIcon } from \"./chunk-RYWCAIUH.mjs\";\n\n// src/avatar-name.tsx\nimport { ui as ui2 } from \"@yamada-ui/core\";\n\n// src/avatar.tsx\nimport { ui, forwardRef, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { useImage } from \"@yamada-ui/image\";\nimport { createContext, cx, dataAttr, handlerAll } from \"@yamada-ui/utils\";\nimport { cloneElement, useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar [AvatarProvider, useAvatarContext] = createContext({\n  strict: false,\n  name: \"AvatarContext\"\n});\nvar Avatar = forwardRef((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Avatar\", props);\n  const {\n    className,\n    src,\n    srcSet,\n    name,\n    loading,\n    alt,\n    icon,\n    ignoreFallback,\n    referrerPolicy,\n    borderRadius = \"fallback(full, 9999px)\",\n    rounded = \"fallback(full, 9999px)\",\n    onError,\n    onLoad,\n    crossOrigin,\n    format,\n    children,\n    ...rest\n  } = omitThemeProps(mergedProps);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const css = {\n    position: \"relative\",\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexShrink: 0,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    fontWeight: \"medium\",\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx(AvatarProvider, {\n    value: styles,\n    children: /* @__PURE__ */jsxs(ui.span, {\n      ref,\n      className: cx(\"ui-avatar\", className),\n      \"data-loaded\": dataAttr(isLoaded),\n      borderRadius,\n      rounded,\n      __css: css,\n      ...rest,\n      children: [/* @__PURE__ */jsx(AvatarImage, {\n        src,\n        alt,\n        srcSet,\n        loading,\n        borderRadius,\n        rounded,\n        onLoad: handlerAll(onLoad, () => setIsLoaded(true)),\n        onError,\n        crossOrigin,\n        format,\n        name,\n        icon,\n        ignoreFallback,\n        referrerPolicy\n      }), children]\n    })\n  });\n});\nvar AvatarImage = ({\n  src,\n  alt,\n  srcSet,\n  onError,\n  onLoad,\n  format,\n  borderRadius,\n  rounded,\n  name,\n  loading,\n  icon = /* @__PURE__ */jsx(AvatarIcon, {}),\n  ignoreFallback,\n  crossOrigin,\n  referrerPolicy\n}) => {\n  const status = useImage({\n    src,\n    onLoad,\n    onError,\n    crossOrigin,\n    ignoreFallback\n  });\n  const isLoaded = status === \"loaded\";\n  const isFallback = !src || !isLoaded;\n  if (isFallback) return name ? /* @__PURE__ */jsx(AvatarName, {\n    name,\n    format\n  }) : cloneElement(icon, {\n    role: \"img\",\n    \"aria-label\": alt != null ? alt : \"Avatar Icon\"\n  });\n  const css = {\n    width: \"100%\",\n    height: \"100%\",\n    objectFit: \"cover\"\n  };\n  return /* @__PURE__ */jsx(ui.img, {\n    className: \"ui-avatar__image\",\n    src,\n    srcSet,\n    alt: alt != null ? alt : name,\n    loading,\n    referrerPolicy,\n    borderRadius,\n    rounded,\n    __css: css\n  });\n};\n\n// src/avatar-name.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar defaultFormat = name => {\n  var _a;\n  const names = name.trim().split(\" \");\n  const firstName = (_a = names[0]) != null ? _a : \"\";\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\";\n  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);\n};\nvar AvatarName = ({\n  name,\n  format = defaultFormat,\n  ...rest\n}) => {\n  const styles = useAvatarContext();\n  const css = {\n    ...styles.name\n  };\n  return /* @__PURE__ */jsx2(ui2.div, {\n    className: \"ui-avatar__name\",\n    role: \"img\",\n    \"aria-label\": name,\n    __css: css,\n    ...rest,\n    children: name ? format(name) : null\n  });\n};\nexport { AvatarName, AvatarProvider, useAvatarContext, Avatar };","map":{"version":3,"names":["ui","ui2","forwardRef","useMultiComponentStyle","omitThemeProps","useImage","createContext","cx","dataAttr","handlerAll","cloneElement","useState","jsx","jsxs","AvatarProvider","useAvatarContext","strict","name","Avatar","props","ref","styles","mergedProps","className","src","srcSet","loading","alt","icon","ignoreFallback","referrerPolicy","borderRadius","rounded","onError","onLoad","crossOrigin","format","children","rest","isLoaded","setIsLoaded","css","position","display","justifyContent","alignItems","flexShrink","textAlign","textTransform","fontWeight","container","value","span","__css","AvatarImage","AvatarIcon","status","isFallback","AvatarName","role","width","height","objectFit","img","jsx2","defaultFormat","_a","names","trim","split","firstName","lastName","length","charAt","div"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\avatar\\src\\avatar-name.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\avatar\\src\\avatar.tsx"],"sourcesContent":["import type { HTMLUIProps, CSSUIObject } from \"@yamada-ui/core\"\nimport { ui } from \"@yamada-ui/core\"\nimport type { FC } from \"react\"\nimport type { AvatarProps } from \"./avatar\"\nimport { useAvatarContext } from \"./avatar\"\n\nconst defaultFormat = (name: string) => {\n  const names = name.trim().split(\" \")\n  const firstName = names[0] ?? \"\"\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\"\n\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\nexport type AvatarNameProps = HTMLUIProps<\"div\"> &\n  Pick<AvatarProps, \"name\" | \"format\">\n\nexport const AvatarName: FC<AvatarNameProps> = ({\n  name,\n  format = defaultFormat,\n  ...rest\n}) => {\n  const styles = useAvatarContext()\n\n  const css: CSSUIObject = { ...styles.name }\n\n  return (\n    <ui.div\n      className=\"ui-avatar__name\"\n      role=\"img\"\n      aria-label={name}\n      __css={css}\n      {...rest}\n    >\n      {name ? format(name) : null}\n    </ui.div>\n  )\n}\n","import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport type { ImageProps, UseImageProps } from \"@yamada-ui/image\"\nimport { useImage } from \"@yamada-ui/image\"\nimport { createContext, cx, dataAttr, handlerAll } from \"@yamada-ui/utils\"\nimport type { FC, HTMLAttributeReferrerPolicy, ReactElement } from \"react\"\nimport { cloneElement, useState } from \"react\"\nimport { AvatarIcon } from \"./avatar-icon\"\nimport { AvatarName } from \"./avatar-name\"\n\ntype AvatarContext = Record<string, CSSUIObject>\n\nexport const [AvatarProvider, useAvatarContext] = createContext<AvatarContext>({\n  strict: false,\n  name: \"AvatarContext\",\n})\n\ntype AvatarOptions = {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - If `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * The image url of the avatar.\n   */\n  src?: ImageProps[\"src\"]\n  /**\n   * List of sources to use for different screen resolutions.\n   */\n  srcSet?: ImageProps[\"srcSet\"]\n  /**\n   * Defines loading strategy.\n   */\n  loading?: ImageProps[\"loading\"]\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: ImageProps[\"ignoreFallback\"]\n  /**\n   * The avatar icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * Function to get the initials to display.\n   */\n  format?: (name: string) => string\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   */\n  referrerPolicy?: HTMLAttributeReferrerPolicy\n  /**\n   * The `HTMLImageElement` property `alt`.\n   */\n  alt?: HTMLUIProps<\"img\">[\"alt\"]\n}\n\nexport type AvatarProps = HTMLUIProps<\"span\"> &\n  ThemeProps<\"Avatar\"> &\n  AvatarOptions &\n  Pick<UseImageProps, \"onLoad\" | \"onError\" | \"crossOrigin\">\n\n/**\n * `Avatar` is a component that displays a profile picture or an icon with initials representing a user.\n *\n * @see Docs https://yamada-ui.com/components/media-and-icons/avatar\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Avatar\", props)\n  const {\n    className,\n    src,\n    srcSet,\n    name,\n    loading,\n    alt,\n    icon,\n    ignoreFallback,\n    referrerPolicy,\n    borderRadius = \"fallback(full, 9999px)\",\n    rounded = \"fallback(full, 9999px)\",\n    onError,\n    onLoad,\n    crossOrigin,\n    format,\n    children,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const [isLoaded, setIsLoaded] = useState<boolean>(false)\n\n  const css: CSSUIObject = {\n    position: \"relative\",\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexShrink: 0,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    fontWeight: \"medium\",\n    ...styles.container,\n  }\n\n  return (\n    <AvatarProvider value={styles}>\n      <ui.span\n        ref={ref}\n        className={cx(\"ui-avatar\", className)}\n        data-loaded={dataAttr(isLoaded)}\n        borderRadius={borderRadius}\n        rounded={rounded}\n        __css={css}\n        {...rest}\n      >\n        <AvatarImage\n          src={src}\n          alt={alt}\n          srcSet={srcSet}\n          loading={loading}\n          borderRadius={borderRadius}\n          rounded={rounded}\n          onLoad={handlerAll(onLoad, () => setIsLoaded(true))}\n          onError={onError}\n          crossOrigin={crossOrigin}\n          format={format}\n          name={name}\n          icon={icon}\n          ignoreFallback={ignoreFallback}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </ui.span>\n    </AvatarProvider>\n  )\n})\n\ntype AvatarImageProps = ImageProps &\n  Pick<AvatarProps, \"name\" | \"format\" | \"icon\" | \"ignoreFallback\">\n\nconst AvatarImage: FC<AvatarImageProps> = ({\n  src,\n  alt,\n  srcSet,\n  onError,\n  onLoad,\n  format,\n  borderRadius,\n  rounded,\n  name,\n  loading,\n  icon = <AvatarIcon />,\n  ignoreFallback,\n  crossOrigin,\n  referrerPolicy,\n}) => {\n  const status = useImage({ src, onLoad, onError, crossOrigin, ignoreFallback })\n\n  const isLoaded = status === \"loaded\"\n\n  const isFallback = !src || !isLoaded\n\n  if (isFallback)\n    return name ? (\n      <AvatarName name={name} format={format} />\n    ) : (\n      cloneElement(icon, { role: \"img\", \"aria-label\": alt ?? \"Avatar Icon\" })\n    )\n\n  const css: CSSUIObject = {\n    width: \"100%\",\n    height: \"100%\",\n    objectFit: \"cover\",\n  }\n\n  return (\n    <ui.img\n      className=\"ui-avatar__image\"\n      src={src}\n      srcSet={srcSet}\n      alt={alt ?? name}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      borderRadius={borderRadius}\n      rounded={rounded}\n      __css={css}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}