{"ast":null,"code":"\"use client\";\n\n// src/autocomplete-list.tsx\nimport { forwardRef as forwardRef8 } from \"@yamada-ui/core\";\nimport { PopoverContent } from \"@yamada-ui/popover\";\nimport { cx as cx8 } from \"@yamada-ui/utils\";\n\n// src/use-autocomplete.tsx\nimport { layoutStyleProperties } from \"@yamada-ui/core\";\nimport { formControlProperties, useFormControlProps } from \"@yamada-ui/form-control\";\nimport { popoverProperties } from \"@yamada-ui/popover\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { createDescendant } from \"@yamada-ui/use-descendant\";\nimport { useDisclosure } from \"@yamada-ui/use-disclosure\";\nimport { useOutsideClick } from \"@yamada-ui/use-outside-click\";\nimport { ariaAttr, createContext, dataAttr, funcAll, getEventRelatedTarget, handlerAll as handlerAll2, isArray, isContains, isHTMLElement, mergeRefs, omitObject, pickObject, splitObject, useUnmountEffect, useUpdateEffect, getValidChildren as getValidChildren2, isUndefined } from \"@yamada-ui/utils\";\nimport { useCallback, useEffect, useMemo as useMemo2, useRef as useRef2, useState } from \"react\";\n\n// src/autocomplete.tsx\nimport { ui as ui2, forwardRef as forwardRef2, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\";\nimport { Portal } from \"@yamada-ui/portal\";\nimport { cx as cx2 } from \"@yamada-ui/utils\";\n\n// src/autocomplete-icon.tsx\nimport { ui, forwardRef } from \"@yamada-ui/core\";\nimport { ChevronIcon, CloseIcon } from \"@yamada-ui/icon\";\nimport { useClickable } from \"@yamada-ui/use-clickable\";\nimport { cx, getValidChildren, isValidElement } from \"@yamada-ui/utils\";\nimport { cloneElement, useRef } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar AutocompleteIcon = forwardRef((_ref, ref) => {\n  let {\n    className,\n    children,\n    __css,\n    ...rest\n  } = _ref;\n  const {\n    styles\n  } = useAutocompleteContext();\n  const css = {\n    position: \"absolute\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    cursor: \"pointer\",\n    ...styles.icon,\n    ...__css\n  };\n  const validChildren = getValidChildren(children);\n  const cloneChildren = validChildren.map(child => cloneElement(child, {\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      maxWidth: \"1em\",\n      maxHeight: \"1em\",\n      color: \"currentColor\"\n    }\n  }));\n  return /* @__PURE__ */jsx(ui.div, {\n    ref,\n    className: cx(\"ui-autocomplete__icon\", className),\n    __css: css,\n    ...rest,\n    children: isValidElement(children) ? cloneChildren : /* @__PURE__ */jsx(ChevronIcon, {})\n  });\n});\nvar AutocompleteClearIcon = _ref2 => {\n  let {\n    className,\n    children,\n    ...props\n  } = _ref2;\n  const ref = useRef(null);\n  const {\n    styles\n  } = useAutocompleteContext();\n  const isDisabled = props.disabled;\n  const rest = useClickable({\n    ref,\n    isDisabled,\n    ...props\n  });\n  return /* @__PURE__ */jsx(AutocompleteIcon, {\n    \"aria-label\": \"Clear value\",\n    className: cx(\"ui-autocomplete__icon--clear\", className),\n    __css: styles.clearIcon,\n    ...rest,\n    children: children != null ? children : /* @__PURE__ */jsx(CloseIcon, {\n      w: \"0.5em\",\n      h: \"0.5em\"\n    })\n  });\n};\nvar AutocompleteItemIcon = forwardRef((_ref3, ref) => {\n  let {\n    className,\n    ...rest\n  } = _ref3;\n  const {\n    styles\n  } = useAutocompleteContext();\n  const css = {\n    flexShrink: 0,\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: \"0.85em\",\n    ...styles.itemIcon\n  };\n  return /* @__PURE__ */jsx(ui.span, {\n    ref,\n    className: cx(\"ui-autocomplete__item__icon\", className),\n    __css: css,\n    ...rest\n  });\n});\n\n// src/autocomplete.tsx\nimport { jsx as jsx2, jsxs } from \"react/jsx-runtime\";\nvar Autocomplete = forwardRef2((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Autocomplete\", props);\n  let {\n    className,\n    defaultValue = \"\",\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    containerProps,\n    listProps,\n    inputProps,\n    iconProps,\n    portalProps = {\n      isDisabled: true\n    },\n    children,\n    ...computedProps\n  } = omitThemeProps(mergedProps);\n  const {\n    descendants,\n    formControlProps,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    allowCreate,\n    isEmpty,\n    inputValue,\n    computedChildren,\n    ...rest\n  } = useAutocomplete({\n    ...computedProps,\n    defaultValue,\n    children\n  });\n  h != null ? h : h = height;\n  minH != null ? minH : minH = minHeight;\n  const css = {\n    w: \"100%\",\n    h: \"fit-content\",\n    color,\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx2(AutocompleteDescendantsContextProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx2(AutocompleteProvider, {\n      value: {\n        ...rest,\n        formControlProps,\n        inputValue,\n        allowCreate,\n        isEmpty,\n        styles\n      },\n      children: /* @__PURE__ */jsx2(Popover, {\n        ...getPopoverProps(),\n        children: /* @__PURE__ */jsxs(ui2.div, {\n          className: cx2(\"ui-autocomplete\", className),\n          __css: css,\n          ...getContainerProps(containerProps),\n          children: [/* @__PURE__ */jsxs(ui2.div, {\n            className: \"ui-autocomplete__inner\",\n            __css: {\n              position: \"relative\",\n              ...styles.inner\n            },\n            children: [/* @__PURE__ */jsx2(AutocompleteField, {\n              h,\n              minH,\n              inputProps,\n              ...getFieldProps({}, ref)\n            }), /* @__PURE__ */jsx2(AutocompleteIcon, {\n              ...iconProps,\n              ...formControlProps\n            })]\n          }), !isEmpty ? /* @__PURE__ */jsx2(Portal, {\n            ...portalProps,\n            children: /* @__PURE__ */jsxs(AutocompleteList, {\n              ...listProps,\n              children: [allowCreate ? /* @__PURE__ */jsx2(AutocompleteCreate, {}) : /* @__PURE__ */jsx2(AutocompleteEmpty, {}), children != null ? children : computedChildren]\n            })\n          }) : /* @__PURE__ */jsx2(Portal, {\n            ...portalProps,\n            children: /* @__PURE__ */jsx2(AutocompleteList, {\n              ...listProps,\n              children: allowCreate && inputValue ? /* @__PURE__ */jsx2(AutocompleteCreate, {}) : /* @__PURE__ */jsx2(AutocompleteEmpty, {})\n            })\n          })]\n        })\n      })\n    })\n  });\n});\nvar AutocompleteField = forwardRef2((_ref4, ref) => {\n  let {\n    className,\n    h,\n    minH,\n    placeholder,\n    inputProps,\n    ...rest\n  } = _ref4;\n  const {\n    label,\n    inputValue,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getInputProps\n  } = useAutocompleteInput();\n  const css = {\n    pe: \"2rem\",\n    h,\n    minH,\n    display: \"flex\",\n    alignItems: \"center\",\n    ...styles.field,\n    cursor: \"text\"\n  };\n  return /* @__PURE__ */jsx2(PopoverTrigger, {\n    children: /* @__PURE__ */jsx2(ui2.div, {\n      className: cx2(\"ui-autocomplete__field\", className),\n      __css: css,\n      ...rest,\n      children: /* @__PURE__ */jsx2(ui2.input, {\n        className: \"ui-autocomplete__field__input\",\n        display: \"inline-block\",\n        w: \"100%\",\n        placeholder,\n        ...getInputProps({\n          ...inputProps,\n          value: inputValue || label || \"\"\n        }, ref)\n      })\n    })\n  });\n});\n\n// src/autocomplete-option-group.tsx\nimport { ui as ui3, forwardRef as forwardRef3 } from \"@yamada-ui/core\";\nimport { cx as cx3 } from \"@yamada-ui/utils\";\nimport { jsx as jsx3, jsxs as jsxs2 } from \"react/jsx-runtime\";\nvar AutocompleteOptionGroup = forwardRef3((_ref5, ref) => {\n  let {\n    className,\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    children,\n    ...rest\n  } = _ref5;\n  const {\n    styles\n  } = useAutocompleteContext();\n  const {\n    label,\n    getContainerProps,\n    getGroupProps\n  } = useAutocompleteOptionGroup(rest);\n  h != null ? h : h = height;\n  minH != null ? minH : minH = minHeight;\n  return /* @__PURE__ */jsxs2(ui3.li, {\n    className: cx3(\"ui-autocomplete__item\", \"ui-autocomplete__item--group\", className),\n    __css: {\n      w: \"100%\",\n      h: \"fit-content\",\n      color\n    },\n    ...getContainerProps(),\n    children: [/* @__PURE__ */jsx3(ui3.span, {\n      className: \"ui-autocomplete__item__group-label\",\n      __css: styles.groupLabel,\n      lineClamp: 1,\n      children: label\n    }), /* @__PURE__ */jsx3(ui3.ul, {\n      ...getGroupProps({}, ref),\n      className: \"ui-autocomplete__item__group\",\n      __css: {\n        h,\n        minH,\n        ...styles.group\n      },\n      children\n    })]\n  });\n});\n\n// src/autocomplete-option.tsx\nimport { ui as ui4, forwardRef as forwardRef4 } from \"@yamada-ui/core\";\nimport { cx as cx4 } from \"@yamada-ui/utils\";\nimport { jsx as jsx4, jsxs as jsxs3 } from \"react/jsx-runtime\";\nvar AutocompleteOption = forwardRef4((_ref6, ref) => {\n  let {\n    className,\n    icon,\n    ...rest\n  } = _ref6;\n  const {\n    styles\n  } = useAutocompleteContext();\n  const {\n    isSelected,\n    customIcon,\n    children,\n    getOptionProps\n  } = useAutocompleteOption(rest);\n  icon != null ? icon : icon = customIcon;\n  const css = {\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    gap: \"0.75rem\",\n    ...styles.item\n  };\n  return /* @__PURE__ */jsxs3(ui4.li, {\n    className: cx4(\"ui-autocomplete__item\", className),\n    __css: css,\n    ...getOptionProps({}, ref),\n    children: [icon !== null ? /* @__PURE__ */jsx4(AutocompleteItemIcon, {\n      opacity: isSelected ? 1 : 0,\n      children: icon || /* @__PURE__ */jsx4(CheckIcon, {})\n    }) : null, /* @__PURE__ */jsx4(ui4.span, {\n      style: {\n        flex: 1\n      },\n      \"data-label\": true,\n      children\n    })]\n  });\n});\nvar CheckIcon = () => /* @__PURE__ */jsx4(\"svg\", {\n  viewBox: \"0 0 14 14\",\n  width: \"1em\",\n  height: \"1em\",\n  children: /* @__PURE__ */jsx4(\"polygon\", {\n    fill: \"currentColor\",\n    points: \"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n  })\n});\n\n// src/autocomplete-create.tsx\nimport { ui as ui5, forwardRef as forwardRef5 } from \"@yamada-ui/core\";\nimport { cx as cx5, runIfFunc } from \"@yamada-ui/utils\";\nimport { jsx as jsx5, jsxs as jsxs4 } from \"react/jsx-runtime\";\nvar AutocompleteCreate = forwardRef5((_ref7, ref) => {\n  let {\n    className,\n    icon,\n    children,\n    ...rest\n  } = _ref7;\n  const {\n    inputValue,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getCreateProps\n  } = useAutocompleteCreate();\n  children != null ? children : children = inputValue;\n  const css = {\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    gap: \"0.75rem\",\n    ...styles.item\n  };\n  return /* @__PURE__ */jsxs4(ui5.li, {\n    className: cx5(\"ui-autocomplete__item--create\", className),\n    __css: css,\n    ...getCreateProps(rest, ref),\n    children: [icon !== null ? /* @__PURE__ */jsx5(AutocompleteItemIcon, {\n      children: icon || /* @__PURE__ */jsx5(PlusIcon, {})\n    }) : null, icon ? /* @__PURE__ */jsx5(ui5.span, {\n      style: {\n        pointerEvents: \"none\",\n        flex: 1\n      },\n      lineClamp: 1,\n      children: runIfFunc(children, inputValue)\n    }) : runIfFunc(children, inputValue)]\n  });\n});\nvar PlusIcon = () => /* @__PURE__ */jsx5(\"svg\", {\n  viewBox: \"0 0 45.402 45.402\",\n  width: \"1em\",\n  height: \"1em\",\n  children: /* @__PURE__ */jsx5(\"path\", {\n    fill: \"currentColor\",\n    d: \"M41.267,18.557H26.832V4.134C26.832,1.851,24.99,0,22.707,0c-2.283,0-4.124,1.851-4.124,4.135v14.432H4.141   c-2.283,0-4.139,1.851-4.138,4.135c-0.001,1.141,0.46,2.187,1.207,2.934c0.748,0.749,1.78,1.222,2.92,1.222h14.453V41.27   c0,1.142,0.453,2.176,1.201,2.922c0.748,0.748,1.777,1.211,2.919,1.211c2.282,0,4.129-1.851,4.129-4.133V26.857h14.435   c2.283,0,4.134-1.867,4.133-4.15C45.399,20.425,43.548,18.557,41.267,18.557z\"\n  })\n});\n\n// src/autocomplete-empty.tsx\nimport { ui as ui6, forwardRef as forwardRef6 } from \"@yamada-ui/core\";\nimport { cx as cx6 } from \"@yamada-ui/utils\";\nimport { jsx as jsx6, jsxs as jsxs5 } from \"react/jsx-runtime\";\nvar AutocompleteEmpty = forwardRef6((_ref8, ref) => {\n  let {\n    className,\n    icon,\n    children,\n    ...rest\n  } = _ref8;\n  const {\n    emptyMessage,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getEmptyProps\n  } = useAutocompleteEmpty();\n  children != null ? children : children = emptyMessage;\n  const css = {\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    gap: \"0.75rem\",\n    pointerEvents: \"none\",\n    ...styles.item\n  };\n  return /* @__PURE__ */jsxs5(ui6.li, {\n    className: cx6(\"ui-autocomplete__item--empty\", className),\n    __css: css,\n    ...getEmptyProps(rest, ref),\n    children: [icon !== null ? /* @__PURE__ */jsx6(AutocompleteItemIcon, {\n      children: icon || /* @__PURE__ */jsx6(MinusIcon, {})\n    }) : null, icon ? /* @__PURE__ */jsx6(ui6.span, {\n      style: {\n        pointerEvents: \"none\",\n        flex: 1\n      },\n      lineClamp: 1,\n      children\n    }) : children]\n  });\n});\nvar MinusIcon = () => /* @__PURE__ */jsx6(\"svg\", {\n  viewBox: \"0 0 448 512\",\n  width: \"1em\",\n  height: \"1em\",\n  children: /* @__PURE__ */jsx6(\"path\", {\n    fill: \"currentColor\",\n    d: \"M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z\"\n  })\n});\n\n// src/multi-autocomplete.tsx\nimport { ui as ui7, forwardRef as forwardRef7, useMultiComponentStyle as useMultiComponentStyle2, omitThemeProps as omitThemeProps2 } from \"@yamada-ui/core\";\nimport { Popover as Popover2, PopoverTrigger as PopoverTrigger2 } from \"@yamada-ui/popover\";\nimport { Portal as Portal2 } from \"@yamada-ui/portal\";\nimport { cx as cx7, handlerAll } from \"@yamada-ui/utils\";\nimport { cloneElement as cloneElement2, useMemo } from \"react\";\nimport { jsx as jsx7, jsxs as jsxs6 } from \"react/jsx-runtime\";\nvar MultiAutocomplete = forwardRef7((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle2(\"MultiAutocomplete\", props);\n  let {\n    className,\n    defaultValue = [],\n    component,\n    separator,\n    isClearable = true,\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    closeOnSelect = false,\n    keepPlaceholder = false,\n    containerProps,\n    listProps,\n    inputProps,\n    iconProps,\n    clearIconProps,\n    portalProps = {\n      isDisabled: true\n    },\n    children,\n    ...computedProps\n  } = omitThemeProps2(mergedProps);\n  const {\n    value,\n    descendants,\n    formControlProps,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    allowCreate,\n    isEmpty,\n    inputValue,\n    computedChildren,\n    onClear,\n    ...rest\n  } = useAutocomplete({\n    ...computedProps,\n    defaultValue,\n    closeOnSelect,\n    children\n  });\n  h != null ? h : h = height;\n  minH != null ? minH : minH = minHeight;\n  const css = {\n    w: \"100%\",\n    h: \"fit-content\",\n    color,\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx7(AutocompleteDescendantsContextProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx7(AutocompleteProvider, {\n      value: {\n        ...rest,\n        value,\n        formControlProps,\n        inputValue,\n        allowCreate,\n        isEmpty,\n        styles\n      },\n      children: /* @__PURE__ */jsx7(Popover2, {\n        ...getPopoverProps(),\n        children: /* @__PURE__ */jsxs6(ui7.div, {\n          className: cx7(\"ui-multi-autocomplete\", className),\n          __css: css,\n          ...getContainerProps(containerProps),\n          children: [/* @__PURE__ */jsxs6(ui7.div, {\n            className: \"ui-multi-autocomplete__inner\",\n            __css: {\n              position: \"relative\",\n              ...styles.inner\n            },\n            children: [/* @__PURE__ */jsx7(MultiAutocompleteField, {\n              component,\n              separator,\n              keepPlaceholder,\n              h,\n              minH,\n              inputProps,\n              ...getFieldProps({}, ref)\n            }), isClearable && value.length ? /* @__PURE__ */jsx7(AutocompleteClearIcon, {\n              ...clearIconProps,\n              onClick: handlerAll(clearIconProps == null ? void 0 : clearIconProps.onClick, onClear),\n              ...formControlProps\n            }) : /* @__PURE__ */jsx7(AutocompleteIcon, {\n              ...iconProps,\n              ...formControlProps\n            })]\n          }), !isEmpty ? /* @__PURE__ */jsx7(Portal2, {\n            ...portalProps,\n            children: /* @__PURE__ */jsxs6(AutocompleteList, {\n              ...listProps,\n              children: [allowCreate ? /* @__PURE__ */jsx7(AutocompleteCreate, {}) : /* @__PURE__ */jsx7(AutocompleteEmpty, {}), children != null ? children : computedChildren]\n            })\n          }) : /* @__PURE__ */jsx7(Portal2, {\n            ...portalProps,\n            children: /* @__PURE__ */jsx7(AutocompleteList, {\n              ...listProps,\n              children: allowCreate && inputValue ? /* @__PURE__ */jsx7(AutocompleteCreate, {}) : /* @__PURE__ */jsx7(AutocompleteEmpty, {})\n            })\n          })]\n        })\n      })\n    })\n  });\n});\nvar MultiAutocompleteField = forwardRef7((_ref9, ref) => {\n  let {\n    className,\n    component,\n    separator = \",\",\n    keepPlaceholder,\n    h,\n    minH,\n    placeholder,\n    inputProps,\n    ...rest\n  } = _ref9;\n  const {\n    value,\n    label,\n    inputValue,\n    onChange,\n    isOpen,\n    inputRef,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getInputProps\n  } = useAutocompleteInput();\n  const cloneChildren = useMemo(() => {\n    if (!(label == null ? void 0 : label.length)) return null;\n    if (component) {\n      return label.map((label2, index) => {\n        const onRemove = ev => {\n          ev.stopPropagation();\n          onChange(value[index]);\n          if (inputRef.current) inputRef.current.focus();\n        };\n        const el = component({\n          value: value[index],\n          label: label2,\n          index,\n          onRemove\n        });\n        const style = {\n          marginBlockStart: \"0.125rem\",\n          marginBlockEnd: \"0.125rem\",\n          marginInlineEnd: \"0.25rem\"\n        };\n        return el ? cloneElement2(el, {\n          key: index,\n          style\n        }) : null;\n      });\n    } else {\n      return label.map((value2, index) => {\n        const isLast = label.length === index + 1;\n        return /* @__PURE__ */jsxs6(ui7.span, {\n          display: \"inline-block\",\n          me: \"0.25rem\",\n          children: [value2, !isLast || isOpen ? separator : null]\n        }, index);\n      });\n    }\n  }, [label, component, value, onChange, isOpen, inputRef, separator]);\n  const css = {\n    pe: \"2rem\",\n    h,\n    minH,\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    ...styles.field,\n    cursor: \"text\"\n  };\n  return /* @__PURE__ */jsx7(PopoverTrigger2, {\n    children: /* @__PURE__ */jsxs6(ui7.div, {\n      className: cx7(\"ui-multi-autocomplete__field\", className),\n      __css: css,\n      py: (label == null ? void 0 : label.length) && component ? \"0.125rem\" : void 0,\n      ...rest,\n      children: [cloneChildren, /* @__PURE__ */jsx7(ui7.input, {\n        \"aria-label\": \"Input value\",\n        className: \"ui-multi-autocomplete__field__input\",\n        display: \"inline-block\",\n        flex: \"1\",\n        overflow: \"hidden\",\n        marginBlockStart: \"0.125rem\",\n        marginBlockEnd: \"0.125rem\",\n        placeholder: !label || !(label == null ? void 0 : label.length) || keepPlaceholder && isOpen ? placeholder : void 0,\n        ...getInputProps({\n          ...inputProps,\n          value: inputValue != null ? inputValue : \"\"\n        }, ref)\n      })]\n    })\n  });\n});\n\n// src/use-autocomplete.tsx\nimport { jsx as jsx8 } from \"react/jsx-runtime\";\nvar kanaMap = {\n  ｶﾞ: \"\\u30AC\",\n  ｷﾞ: \"\\u30AE\",\n  ｸﾞ: \"\\u30B0\",\n  ｹﾞ: \"\\u30B2\",\n  ｺﾞ: \"\\u30B4\",\n  ｻﾞ: \"\\u30B6\",\n  ｼﾞ: \"\\u30B8\",\n  ｽﾞ: \"\\u30BA\",\n  ｾﾞ: \"\\u30BC\",\n  ｿﾞ: \"\\u30BE\",\n  ﾀﾞ: \"\\u30C0\",\n  ﾁﾞ: \"\\u30C2\",\n  ﾂﾞ: \"\\u30C5\",\n  ﾃﾞ: \"\\u30C7\",\n  ﾄﾞ: \"\\u30C9\",\n  ﾊﾞ: \"\\u30D0\",\n  ﾋﾞ: \"\\u30D3\",\n  ﾌﾞ: \"\\u30D6\",\n  ﾍﾞ: \"\\u30D9\",\n  ﾎﾞ: \"\\u30DC\",\n  ﾊﾟ: \"\\u30D1\",\n  ﾋﾟ: \"\\u30D4\",\n  ﾌﾟ: \"\\u30D7\",\n  ﾍﾟ: \"\\u30DA\",\n  ﾎﾟ: \"\\u30DD\",\n  ｳﾞ: \"\\u30F4\",\n  ﾜﾞ: \"\\u30F7\",\n  ｦﾞ: \"\\u30FA\",\n  ｱ: \"\\u30A2\",\n  ｲ: \"\\u30A4\",\n  ｳ: \"\\u30A6\",\n  ｴ: \"\\u30A8\",\n  ｵ: \"\\u30AA\",\n  ｶ: \"\\u30AB\",\n  ｷ: \"\\u30AD\",\n  ｸ: \"\\u30AF\",\n  ｹ: \"\\u30B1\",\n  ｺ: \"\\u30B3\",\n  ｻ: \"\\u30B5\",\n  ｼ: \"\\u30B7\",\n  ｽ: \"\\u30B9\",\n  ｾ: \"\\u30BB\",\n  ｿ: \"\\u30BD\",\n  ﾀ: \"\\u30BF\",\n  ﾁ: \"\\u30C1\",\n  ﾂ: \"\\u30C4\",\n  ﾃ: \"\\u30C6\",\n  ﾄ: \"\\u30C8\",\n  ﾅ: \"\\u30CA\",\n  ﾆ: \"\\u30CB\",\n  ﾇ: \"\\u30CC\",\n  ﾈ: \"\\u30CD\",\n  ﾉ: \"\\u30CE\",\n  ﾊ: \"\\u30CF\",\n  ﾋ: \"\\u30D2\",\n  ﾌ: \"\\u30D5\",\n  ﾍ: \"\\u30D8\",\n  ﾎ: \"\\u30DB\",\n  ﾏ: \"\\u30DE\",\n  ﾐ: \"\\u30DF\",\n  ﾑ: \"\\u30E0\",\n  ﾒ: \"\\u30E1\",\n  ﾓ: \"\\u30E2\",\n  ﾔ: \"\\u30E4\",\n  ﾕ: \"\\u30E6\",\n  ﾖ: \"\\u30E8\",\n  ﾗ: \"\\u30E9\",\n  ﾘ: \"\\u30EA\",\n  ﾙ: \"\\u30EB\",\n  ﾚ: \"\\u30EC\",\n  ﾛ: \"\\u30ED\",\n  ﾜ: \"\\u30EF\",\n  ｦ: \"\\u30F2\",\n  ﾝ: \"\\u30F3\",\n  ｧ: \"\\u30A1\",\n  ｨ: \"\\u30A3\",\n  ｩ: \"\\u30A5\",\n  ｪ: \"\\u30A7\",\n  ｫ: \"\\u30A9\",\n  ｯ: \"\\u30C3\",\n  ｬ: \"\\u30E3\",\n  ｭ: \"\\u30E5\",\n  ｮ: \"\\u30E7\",\n  \"\\uFF61\": \"\\u3002\",\n  \"\\uFF64\": \"\\u3001\",\n  ｰ: \"\\u30FC\",\n  \"\\uFF62\": \"\\u300C\",\n  \"\\uFF63\": \"\\u300D\",\n  \"\\uFF65\": \"\\u30FB\"\n};\nvar defaultFormat = value => {\n  value = value.replace(/[！-～]/g, v => String.fromCharCode(v.charCodeAt(0) - 65248));\n  const reg = new RegExp(\"(\" + Object.keys(kanaMap).join(\"|\") + \")\", \"g\");\n  value = value.replace(reg, v => kanaMap[v]).replace(/ﾞ/g, \"\\u309B\").replace(/ﾟ/g, \"\\u309C\");\n  value = value.toUpperCase();\n  return value;\n};\nvar flattenItems = items => {\n  const filterItems = items2 => items2.map(item => {\n    var _a;\n    const {\n      isDisabled,\n      isFocusable\n    } = item;\n    const trulyDisabled = !!isDisabled && !isFocusable;\n    if (trulyDisabled) return;\n    if (\"items\" in item) {\n      return filterItems((_a = item.items) != null ? _a : []);\n    } else {\n      return item;\n    }\n  }).filter(Boolean);\n  return filterItems(items).flat(Infinity);\n};\nvar isTargetOption = target => {\n  var _a;\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"autocomplete-item\"));\n};\nvar {\n  DescendantsContextProvider: AutocompleteDescendantsContextProvider,\n  useDescendantsContext: useAutocompleteDescendantsContext,\n  useDescendants: useAutocompleteDescendants,\n  useDescendant: useAutocompleteDescendant\n} = createDescendant();\nvar [AutocompleteProvider, useAutocompleteContext] = createContext({\n  name: \"AutocompleteContext\",\n  errorMessage: \"useAutocompleteContext returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Autocomplete />\\\" or \\\"<MultiAutocomplete />\\\"\"\n});\nvar useAutocomplete = _ref10 => {\n  let {\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    onCreate: onCreateProp,\n    onSearch: onSearchProp,\n    closeOnSelect = true,\n    omitSelectedValues = false,\n    maxSelectValues,\n    closeOnBlur = true,\n    closeOnEsc = true,\n    allowCreate = false,\n    allowFree = false,\n    insertPositionItem = \"first\",\n    emptyMessage = \"No results found\",\n    format = defaultFormat,\n    placement = \"bottom-start\",\n    duration = 0.2,\n    optionProps,\n    placeholder,\n    items,\n    children,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    ...rest\n  } = _ref10;\n  rest = useFormControlProps(rest);\n  const {\n    id\n  } = rest;\n  const {\n    \"aria-readonly\": _ariaReadonly,\n    ...formControlProps\n  } = pickObject(rest, formControlProperties);\n  const [containerProps, inputProps] = splitObject(omitObject(rest, [...popoverProperties, \"onKeyDown\", \"onFocus\"]), layoutStyleProperties);\n  const descendants = useAutocompleteDescendants();\n  const containerRef = useRef2(null);\n  const listRef = useRef2(null);\n  const inputRef = useRef2(null);\n  const timeoutIds = useRef2( /* @__PURE__ */new Set([]));\n  const isComposition = useRef2(false);\n  const prevValue = useRef2(void 0);\n  const [resolvedItems, setResolvedItems] = useState(items);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp\n  });\n  const [label, setLabel] = useState(void 0);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isHit, setIsHit] = useState(true);\n  const {\n    isOpen,\n    onOpen: onInternalOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  const isFocused = focusedIndex > -1;\n  const isCreate = focusedIndex === -2 && allowCreate;\n  const isMulti = isArray(value);\n  const isEmptyValue = !isMulti ? !value : !value.length;\n  const [firstInsertPositionItem, secondInsertPositionItem] = useMemo2(() => {\n    if (isArray(insertPositionItem)) {\n      return insertPositionItem;\n    } else {\n      return [insertPositionItem, \"first\"];\n    }\n  }, [insertPositionItem]);\n  if (allowCreate && !isUndefined(children)) {\n    console.warn(\"\".concat(!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\", \": \").concat(!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\", \" internally prefers 'children'. If 'allowCreate' is true, it will not be reflected correctly. If want to reflect, please set 'items' in props.\"));\n  }\n  const selectedValues = descendants.enabledValues(_ref11 => {\n    let {\n      node\n    } = _ref11;\n    var _a;\n    return isMulti && value.includes((_a = node.dataset.value) != null ? _a : \"\");\n  });\n  const selectedIndexes = selectedValues.map(_ref12 => {\n    let {\n      index\n    } = _ref12;\n    return index;\n  });\n  const enabledValues = descendants.enabledValues(_ref13 => {\n    let {\n      node,\n      index\n    } = _ref13;\n    return \"target\" in node.dataset && !selectedIndexes.includes(index);\n  });\n  const validChildren = getValidChildren2(children);\n  const computedChildren = resolvedItems == null ? void 0 : resolvedItems.map((item, i) => {\n    if (\"value\" in item) {\n      const {\n        label: label2,\n        value: value2,\n        ...props\n      } = item;\n      return /* @__PURE__ */jsx8(AutocompleteOption, {\n        value: value2,\n        ...props,\n        children: label2\n      }, i);\n    } else if (\"items\" in item) {\n      const {\n        label: label2,\n        items: items2 = [],\n        ...props\n      } = item;\n      return /* @__PURE__ */jsx8(AutocompleteOptionGroup, {\n        label: label2,\n        ...props,\n        children: items2.map((_ref14, i2) => {\n          let {\n            label: label3,\n            value: value2,\n            ...props2\n          } = _ref14;\n          return /* @__PURE__ */jsx8(AutocompleteOption, {\n            value: value2,\n            ...props2,\n            children: label3\n          }, i2);\n        })\n      }, i);\n    }\n  });\n  const isEmpty = !validChildren.length && !(computedChildren == null ? void 0 : computedChildren.length);\n  const onOpen = useCallback(() => {\n    if (formControlProps.disabled || formControlProps.readOnly) return;\n    if (!allowCreate && (isEmpty || isAllSelected)) return;\n    onInternalOpen();\n    if (inputRef.current) inputRef.current.focus();\n  }, [allowCreate, formControlProps, isAllSelected, isEmpty, onInternalOpen]);\n  const onFocusFirst = useCallback(() => {\n    const id2 = setTimeout(() => {\n      if (isEmpty || isAllSelected) return;\n      const first = descendants.enabledFirstValue(_ref15 => {\n        let {\n          node\n        } = _ref15;\n        return \"target\" in node.dataset;\n      });\n      if (!first) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(first.index);\n      } else {\n        if (selectedIndexes.includes(first.index)) {\n          const enabledFirst = enabledValues[0];\n          setFocusedIndex(enabledFirst.index);\n        } else {\n          setFocusedIndex(first.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, isAllSelected, isEmpty, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusLast = useCallback(() => {\n    const id2 = setTimeout(() => {\n      if (isEmpty || isAllSelected) return;\n      const last = descendants.enabledLastValue(_ref16 => {\n        let {\n          node\n        } = _ref16;\n        return \"target\" in node.dataset;\n      });\n      if (!last) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(last.index);\n      } else {\n        if (selectedIndexes.includes(last.index)) {\n          const enabledLast = enabledValues.reverse()[0];\n          setFocusedIndex(enabledLast.index);\n        } else {\n          setFocusedIndex(last.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, isAllSelected, isEmpty, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusSelected = useCallback(() => {\n    const id2 = setTimeout(() => {\n      const values = descendants.enabledValues();\n      const selected = values.find(_ref17 => {\n        let {\n          node\n        } = _ref17;\n        var _a;\n        return !isMulti ? node.dataset.value === value : value.includes((_a = node.dataset.value) != null ? _a : \"\");\n      });\n      if (selected) setFocusedIndex(selected.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, isMulti, value]);\n  const onFocusNext = useCallback(function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : focusedIndex;\n    const id2 = setTimeout(() => {\n      var _a;\n      const next = descendants.enabledNextValue(index, _ref18 => {\n        let {\n          node\n        } = _ref18;\n        return \"target\" in node.dataset;\n      });\n      if (!next) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(next.index);\n      } else {\n        if (selectedIndexes.includes(next.index)) {\n          const enabledNext = (_a = enabledValues.find(_ref19 => {\n            let {\n              index: index2\n            } = _ref19;\n            return next.index < index2;\n          })) != null ? _a : enabledValues[0];\n          setFocusedIndex(enabledNext.index);\n        } else {\n          setFocusedIndex(next.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, focusedIndex, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusPrev = useCallback(function () {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : focusedIndex;\n    const id2 = setTimeout(() => {\n      var _a;\n      const prev = descendants.enabledPrevValue(index, _ref20 => {\n        let {\n          node\n        } = _ref20;\n        return \"target\" in node.dataset;\n      });\n      if (!prev) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(prev.index);\n      } else {\n        if (selectedIndexes.includes(prev.index)) {\n          const enabledPrev = (_a = enabledValues.reverse().find(_ref21 => {\n            let {\n              index: index2\n            } = _ref21;\n            return index2 < prev.index;\n          })) != null ? _a : enabledValues[0];\n          setFocusedIndex(enabledPrev.index);\n        } else {\n          setFocusedIndex(prev.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, focusedIndex, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusFirstOrSelected = isEmptyValue || omitSelectedValues ? onFocusFirst : onFocusSelected;\n  const onFocusLastOrSelected = isEmptyValue || omitSelectedValues ? onFocusLast : onFocusSelected;\n  const pickOptions = useCallback(value2 => {\n    const values = descendants.values();\n    let isHit2 = false;\n    let isFocused2 = false;\n    values.forEach(_ref22 => {\n      let {\n        node,\n        index\n      } = _ref22;\n      var _a;\n      if (format((_a = node.textContent) != null ? _a : \"\").includes(value2)) {\n        isHit2 = true;\n        const isDisabled = (\"disabled\" in node.dataset);\n        node.dataset.target = \"\";\n        if (!isFocused2 && !isDisabled) {\n          isFocused2 = true;\n          setFocusedIndex(index);\n        }\n      } else {\n        delete node.dataset.target;\n      }\n    });\n    setIsHit(isHit2);\n  }, [descendants, format]);\n  const rebirthOptions = useCallback(function () {\n    let runFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const values = descendants.values();\n    values.forEach(_ref23 => {\n      let {\n        node\n      } = _ref23;\n      node.dataset.target = \"\";\n    });\n    if (runFocus) onFocusFirst();\n    setIsHit(true);\n  }, [descendants, onFocusFirst]);\n  const getSelectedValues = useCallback(newValues => {\n    const enabledValues2 = descendants.enabledValues();\n    const resolvedValues = isArray(newValues) ? newValues : [newValues];\n    const selectedValues2 = resolvedValues.map(value2 => {\n      var _a, _b;\n      const {\n        node\n      } = (_a = enabledValues2.find(_ref24 => {\n        let {\n          node: node2\n        } = _ref24;\n        return node2.dataset.value === value2;\n      })) != null ? _a : {};\n      if (node) {\n        const el = Array.from(node.children).find(child => child.getAttribute(\"data-label\") !== null);\n        return (_b = el == null ? void 0 : el.textContent) != null ? _b : void 0;\n      } else {\n        return allowFree ? value2 : void 0;\n      }\n    }).filter(Boolean);\n    return selectedValues2;\n  }, [allowFree, descendants]);\n  const onChangeLabel = useCallback(function (newValue) {\n    let runOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const selectedValues2 = getSelectedValues(newValue);\n    setLabel(prev => {\n      if (!isMulti) {\n        return selectedValues2[0];\n      } else {\n        selectedValues2.forEach(selectedValue => {\n          const isSelected = isArray(prev) && prev.includes(selectedValue != null ? selectedValue : \"\");\n          if (!isSelected) {\n            prev = [...(isArray(prev) ? prev : []), selectedValue];\n          } else if (runOmit) {\n            prev = isArray(prev) ? prev.filter(value2 => value2 !== selectedValue) : void 0;\n          }\n        });\n        return prev;\n      }\n    });\n  }, [getSelectedValues, isMulti]);\n  const onChange = useCallback(function (newValue) {\n    let runRebirth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    setValue(prev => {\n      let next;\n      if (!isArray(prev)) {\n        next = newValue;\n      } else {\n        const isSelected = prev.includes(newValue);\n        if (!isSelected) {\n          next = [...prev, newValue];\n        } else {\n          next = prev.filter(value2 => value2 !== newValue);\n        }\n      }\n      prevValue.current = next;\n      return next;\n    });\n    const isHit2 = descendants.values().filter(_ref25 => {\n      let {\n        node\n      } = _ref25;\n      var _a;\n      return format((_a = node.textContent) != null ? _a : \"\").includes(newValue);\n    }).length > 0;\n    onChangeLabel(newValue);\n    if (allowFree || isHit2) setInputValue(\"\");\n    if (isMulti && runRebirth) rebirthOptions(false);\n  }, [allowFree, isMulti, onChangeLabel, rebirthOptions, setValue, descendants, format]);\n  const onSelect = useCallback(() => {\n    var _a, _b;\n    let enabledValue = descendants.value(focusedIndex);\n    if (\"disabled\" in ((_a = enabledValue == null ? void 0 : enabledValue.node.dataset) != null ? _a : {})) enabledValue = void 0;\n    if (!enabledValue) return;\n    const value2 = (_b = enabledValue.node.dataset.value) != null ? _b : \"\";\n    onChange(value2);\n    if (closeOnSelect) onClose();\n    if (omitSelectedValues) onFocusNext();\n  }, [closeOnSelect, descendants, focusedIndex, omitSelectedValues, onChange, onClose, onFocusNext]);\n  const onSearch = useCallback(ev => {\n    if (!isOpen) onOpen();\n    onSearchProp == null ? void 0 : onSearchProp(ev);\n    const value2 = ev.target.value;\n    const computedValue = format(value2);\n    if (computedValue) {\n      pickOptions(computedValue);\n    } else {\n      rebirthOptions();\n    }\n    setInputValue(value2);\n  }, [isOpen, onOpen, format, onSearchProp, pickOptions, rebirthOptions]);\n  const onCompositionStart = useCallback(() => {\n    isComposition.current = true;\n  }, []);\n  const onCompositionEnd = useCallback(() => {\n    isComposition.current = false;\n  }, []);\n  const onCreate = useCallback(() => {\n    var _a, _b;\n    if (!listRef.current) return;\n    const newItem = {\n      label: inputValue,\n      value: inputValue\n    };\n    let newItems = [];\n    if (resolvedItems) newItems = resolvedItems;\n    if (firstInsertPositionItem === \"first\") {\n      newItems = [newItem, ...newItems];\n    } else if (firstInsertPositionItem === \"last\") {\n      newItems = [...newItems, newItem];\n    } else {\n      const i = newItems.findIndex(_ref26 => {\n        let {\n          label: label2\n        } = _ref26;\n        return label2 === firstInsertPositionItem;\n      });\n      const targetItem = newItems[i];\n      if (i !== -1 && \"items\" in targetItem) {\n        if (secondInsertPositionItem === \"first\") {\n          targetItem.items = [newItem, ...((_a = targetItem.items) != null ? _a : [])];\n        } else {\n          targetItem.items = [...((_b = targetItem.items) != null ? _b : []), newItem];\n        }\n        newItems[i] = targetItem;\n      } else {\n        console.warn(\"\".concat(!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\", \": '\").concat(firstInsertPositionItem, \"' specified in insertPositionItem does not exist in the option group.\"));\n      }\n    }\n    setResolvedItems(newItems);\n    onChange(inputValue);\n    rebirthOptions(false);\n    const index = flattenItems(newItems).findIndex(_ref27 => {\n      let {\n        value: value2\n      } = _ref27;\n      return value2 === inputValue;\n    });\n    setFocusedIndex(index);\n    onCreateProp == null ? void 0 : onCreateProp(newItem, newItems);\n  }, [inputValue, resolvedItems, firstInsertPositionItem, onChange, rebirthOptions, onCreateProp, secondInsertPositionItem, isMulti]);\n  const onClick = useCallback(() => {\n    if (isOpen) {\n      if (inputRef.current) inputRef.current.focus();\n    } else {\n      onOpen();\n      onFocusFirstOrSelected();\n    }\n  }, [isOpen, onFocusFirstOrSelected, onOpen]);\n  const onFocus = useCallback(() => {\n    if (isOpen) return;\n    onOpen();\n    onFocusFirstOrSelected();\n  }, [isOpen, onFocusFirstOrSelected, onOpen]);\n  const onBlur = useCallback(ev => {\n    const relatedTarget = getEventRelatedTarget(ev);\n    if (isContains(containerRef.current, relatedTarget)) return;\n    if (!closeOnBlur && isHit) return;\n    if (allowFree && !!inputValue) onChange(inputValue, false);\n    setInputValue(\"\");\n    if (isOpen) onClose();\n  }, [closeOnBlur, isHit, isOpen, inputValue, allowFree, onClose, onChange]);\n  const onDelete = useCallback(() => {\n    if (!isMulti) {\n      onChange(\"\");\n    } else {\n      onChange(value[value.length - 1]);\n    }\n    if (!isOpen) onFocus();\n  }, [isMulti, isOpen, onChange, onFocus, value]);\n  const onClear = useCallback(ev => {\n    ev.stopPropagation();\n    prevValue.current = [];\n    setValue([]);\n    setLabel(void 0);\n    setInputValue(\"\");\n    rebirthOptions();\n    if (isOpen && inputRef.current) inputRef.current.focus();\n  }, [isOpen, setLabel, setInputValue, setValue, rebirthOptions]);\n  const onKeyDown = useCallback(ev => {\n    if (ev.key === \" \") ev.key = ev.code;\n    if (formControlProps.disabled || formControlProps.readOnly) return;\n    if (isComposition.current) return;\n    const enabledDelete = label === inputValue || !inputValue.length;\n    const actions = {\n      ArrowDown: isFocused ? () => onFocusNext() : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : void 0,\n      ArrowUp: isFocused ? () => onFocusPrev() : !isOpen ? funcAll(onOpen, onFocusLastOrSelected) : void 0,\n      Space: isCreate ? onCreate : isFocused ? onSelect : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : void 0,\n      Enter: isCreate ? onCreate : isFocused ? onSelect : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : allowFree && isMulti ? () => {\n        if (inputValue) onChange(inputValue);\n        setFocusedIndex(0);\n      } : void 0,\n      Home: isOpen ? onFocusFirst : void 0,\n      End: isOpen ? onFocusLast : void 0,\n      Escape: closeOnEsc ? onClose : void 0,\n      Backspace: !isEmptyValue && enabledDelete ? onDelete : void 0\n    };\n    const action = actions[ev.key];\n    if (!action) return;\n    ev.preventDefault();\n    ev.stopPropagation();\n    action(ev);\n  }, [allowFree, formControlProps, label, inputValue, onOpen, isFocused, isMulti, onFocusFirstOrSelected, onFocusNext, onFocusLastOrSelected, onFocusPrev, isCreate, onCreate, onSelect, isOpen, onFocusFirst, onFocusLast, closeOnEsc, onClose, isEmptyValue, onDelete, onChange]);\n  useEffect(() => {\n    if (!isMulti) return;\n    if (!omitSelectedValues && isUndefined(maxSelectValues)) return;\n    const isAll = value.length > 0 && value.length === descendants.count();\n    const isMax = value.length === maxSelectValues;\n    if (isAll || isMax) {\n      onClose();\n      setIsAllSelected(true);\n    } else {\n      setIsAllSelected(false);\n    }\n  }, [omitSelectedValues, value, descendants, isMulti, onClose, maxSelectValues]);\n  useEffect(() => {\n    var _a;\n    if (isMulti) {\n      if (JSON.stringify((_a = prevValue.current) != null ? _a : []) === JSON.stringify(value != null ? value : [])) return;\n      const label2 = getSelectedValues(value);\n      setLabel(label2);\n    } else {\n      if (prevValue.current === value) return;\n      onChangeLabel(value, false);\n    }\n  }, [isMulti, value, onChangeLabel, getSelectedValues]);\n  useUpdateEffect(() => {\n    if (isOpen || allowFree) return;\n    setFocusedIndex(-1);\n    setInputValue(\"\");\n  }, [isOpen]);\n  useUpdateEffect(() => {\n    if (!isHit) setFocusedIndex(-2);\n  }, [isHit]);\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach(id2 => clearTimeout(id2));\n    timeoutIds.current.clear();\n  });\n  useOutsideClick({\n    ref: containerRef,\n    handler: onClose,\n    enabled: isOpen && (closeOnBlur || !isHit)\n  });\n  const getPopoverProps = useCallback(props => ({\n    matchWidth: true,\n    ...rest,\n    ...props,\n    isOpen,\n    onOpen,\n    onClose,\n    placement,\n    duration,\n    trigger: \"never\",\n    closeOnButton: false,\n    closeOnBlur\n  }), [duration, closeOnBlur, isOpen, onClose, onOpen, placement, rest]);\n  const getContainerProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ref: mergeRefs(containerRef, ref),\n      ...containerProps,\n      ...props,\n      ...formControlProps,\n      onClick: handlerAll2(props.onClick, rest.onClick, onClick),\n      onBlur: handlerAll2(props.onBlur, rest.onBlur, onBlur)\n    };\n  }, [containerProps, formControlProps, onBlur, onClick, rest]);\n  const getFieldProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ref,\n      tabIndex: -1,\n      ...props,\n      ...formControlProps,\n      placeholder,\n      \"data-active\": dataAttr(isOpen),\n      \"aria-expanded\": dataAttr(isOpen),\n      onFocus: handlerAll2(props.onFocus, rest.onFocus, onFocus),\n      onKeyDown: handlerAll2(props.onKeyDown, rest.onKeyDown, onKeyDown)\n    };\n  }, [formControlProps, placeholder, isOpen, rest, onFocus, onKeyDown]);\n  return {\n    id,\n    descendants,\n    value,\n    label,\n    inputValue,\n    isHit,\n    isEmpty,\n    computedChildren,\n    focusedIndex,\n    omitSelectedValues,\n    closeOnSelect,\n    allowCreate,\n    allowFree,\n    emptyMessage,\n    isOpen,\n    isAllSelected,\n    listRef,\n    inputRef,\n    optionProps,\n    formControlProps,\n    setFocusedIndex,\n    onChangeLabel,\n    onChange,\n    onSearch,\n    onCreate,\n    onClear,\n    onCompositionStart,\n    onCompositionEnd,\n    pickOptions,\n    rebirthOptions,\n    onOpen,\n    onClose,\n    onFocusFirst,\n    onFocusLast,\n    onFocusSelected,\n    onFocusNext,\n    onFocusPrev,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    inputProps\n  };\n};\nvar useAutocompleteInput = () => {\n  const {\n    id,\n    inputRef,\n    onSearch,\n    onCompositionStart,\n    onCompositionEnd,\n    isAllSelected,\n    formControlProps,\n    inputProps,\n    isOpen\n  } = useAutocompleteContext();\n  useUpdateEffect(() => {\n    if (isAllSelected && inputRef.current) inputRef.current.blur();\n  }, [isAllSelected]);\n  const getInputProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ref: mergeRefs(inputRef, ref),\n      ...formControlProps,\n      role: \"combobox\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-autocomplete\": \"list\",\n      \"aria-expanded\": isOpen,\n      autoCapitalize: \"none\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      ...inputProps,\n      ...props,\n      id,\n      cursor: formControlProps.readOnly ? \"default\" : \"text\",\n      pointerEvents: formControlProps.disabled || isAllSelected ? \"none\" : \"auto\",\n      tabIndex: isAllSelected ? -1 : 0,\n      onChange: handlerAll2(props.onChange, onSearch),\n      onCompositionStart: handlerAll2(props.onCompositionStart, inputProps.onCompositionStart, onCompositionStart),\n      onCompositionEnd: handlerAll2(props.onCompositionEnd, inputProps.onCompositionEnd, onCompositionEnd)\n    };\n  }, [isOpen, inputProps, inputRef, formControlProps, id, isAllSelected, onSearch, onCompositionStart, onCompositionEnd]);\n  return {\n    getInputProps\n  };\n};\nvar useAutocompleteList = () => {\n  const {\n    focusedIndex,\n    isOpen,\n    listRef,\n    rebirthOptions\n  } = useAutocompleteContext();\n  const descendants = useAutocompleteDescendantsContext();\n  const beforeFocusedIndex = useRef2(-1);\n  const selectedValue = descendants.value(focusedIndex);\n  const onAnimationComplete = useCallback(() => {\n    if (!isOpen) rebirthOptions(false);\n  }, [isOpen, rebirthOptions]);\n  useEffect(() => {\n    if (!listRef.current || !selectedValue) return;\n    if (beforeFocusedIndex.current === selectedValue.index) return;\n    const parent = listRef.current;\n    const child = selectedValue.node;\n    const parentHeight = parent.clientHeight;\n    const viewTop = parent.scrollTop;\n    const viewBottom = viewTop + parentHeight;\n    const childHeight = child.clientHeight;\n    const childTop = child.offsetTop;\n    const childBottom = childTop + childHeight;\n    const isInView = viewTop <= childTop && childBottom <= viewBottom;\n    const isScrollBottom = beforeFocusedIndex.current < selectedValue.index;\n    if (!isInView) {\n      if (childBottom <= parentHeight) {\n        listRef.current.scrollTo({\n          top: 0\n        });\n      } else {\n        if (!isScrollBottom) {\n          listRef.current.scrollTo({\n            top: childTop + 1\n          });\n        } else {\n          listRef.current.scrollTo({\n            top: childBottom - parentHeight\n          });\n        }\n      }\n    }\n    beforeFocusedIndex.current = selectedValue.index;\n  }, [listRef, selectedValue]);\n  useUpdateEffect(() => {\n    if (!isOpen) beforeFocusedIndex.current = -1;\n  }, [isOpen]);\n  const getListProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      as: \"ul\",\n      ref: mergeRefs(listRef, ref),\n      role: \"select\",\n      tabIndex: -1,\n      ...props,\n      onAnimationComplete: handlerAll2(props.onAnimationComplete, onAnimationComplete)\n    };\n  }, [listRef, onAnimationComplete]);\n  return {\n    getListProps\n  };\n};\nvar useAutocompleteOptionGroup = _ref28 => {\n  let {\n    label,\n    ...rest\n  } = _ref28;\n  const {\n    value,\n    omitSelectedValues\n  } = useAutocompleteContext();\n  const isMulti = isArray(value);\n  const descendants = useAutocompleteDescendantsContext();\n  const values = descendants.values();\n  const selectedValues = isMulti && omitSelectedValues ? descendants.values(_ref29 => {\n    let {\n      node\n    } = _ref29;\n    var _a;\n    return value.includes((_a = node.dataset.value) != null ? _a : \"\");\n  }) : [];\n  const selectedIndexes = selectedValues.map(_ref30 => {\n    let {\n      index\n    } = _ref30;\n    return index;\n  });\n  const childValues = values.filter(_ref31 => {\n    let {\n      node,\n      index\n    } = _ref31;\n    var _a;\n    return ((_a = node.parentElement) == null ? void 0 : _a.dataset.label) === label && !selectedIndexes.includes(index) && \"target\" in node.dataset;\n  });\n  const isEmpty = !childValues.length;\n  const computedRest = splitObject(rest, layoutStyleProperties);\n  const getContainerProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref,\n      ...props,\n      ...computedRest[0],\n      style: isEmpty ? style : void 0,\n      \"data-label\": label,\n      role: \"autocomplete-group-container\"\n    };\n  }, [computedRest, isEmpty, label]);\n  const getGroupProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ref,\n      ...props,\n      ...computedRest[1],\n      \"data-label\": label,\n      role: \"autocomplete-group\"\n    };\n  }, [computedRest, label]);\n  return {\n    label,\n    getContainerProps,\n    getGroupProps\n  };\n};\nvar useAutocompleteOption = props => {\n  var _a, _b;\n  const {\n    value,\n    omitSelectedValues,\n    onChange,\n    onChangeLabel,\n    focusedIndex,\n    setFocusedIndex,\n    onClose,\n    closeOnSelect: generalCloseOnSelect,\n    optionProps,\n    inputRef,\n    onFocusNext\n  } = useAutocompleteContext();\n  let {\n    icon: customIcon,\n    isDisabled,\n    isFocusable,\n    closeOnSelect: customCloseOnSelect,\n    children,\n    value: optionValue,\n    ...computedProps\n  } = {\n    ...optionProps,\n    ...props\n  };\n  const trulyDisabled = !!isDisabled && !isFocusable;\n  const itemRef = useRef2(null);\n  const {\n    index,\n    register,\n    descendants\n  } = useAutocompleteDescendant({\n    disabled: trulyDisabled\n  });\n  const values = descendants.values();\n  const frontValues = values.slice(0, index);\n  const isMulti = isArray(value);\n  const isDuplicated = !isMulti ? frontValues.some(_ref32 => {\n    let {\n      node\n    } = _ref32;\n    return node.dataset.value === (optionValue != null ? optionValue : \"\");\n  }) : false;\n  const isSelected = !isDuplicated && (!isMulti ? (optionValue != null ? optionValue : \"\") === value : value.includes(optionValue != null ? optionValue : \"\"));\n  const isTarget = (\"target\" in ((_b = (_a = itemRef.current) == null ? void 0 : _a.dataset) != null ? _b : {}));\n  const isFocused = index === focusedIndex;\n  const onClick = useCallback(ev => {\n    ev.stopPropagation();\n    if (isDisabled) {\n      if (inputRef.current) inputRef.current.focus();\n      return;\n    }\n    if (!isTargetOption(ev.currentTarget)) {\n      if (inputRef.current) inputRef.current.focus();\n      return;\n    }\n    setFocusedIndex(index);\n    onChange(optionValue != null ? optionValue : \"\");\n    if (inputRef.current) inputRef.current.focus();\n    if (customCloseOnSelect != null ? customCloseOnSelect : generalCloseOnSelect) onClose();\n    if (omitSelectedValues) onFocusNext(index);\n  }, [onFocusNext, omitSelectedValues, isDisabled, optionValue, setFocusedIndex, index, onChange, customCloseOnSelect, generalCloseOnSelect, onClose, inputRef]);\n  useUpdateEffect(() => {\n    if (isSelected) onChangeLabel(optionValue != null ? optionValue : \"\", false);\n  }, [optionValue]);\n  const getOptionProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref: mergeRefs(itemRef, ref, register),\n      ...computedProps,\n      ...props2,\n      role: \"autocomplete-item\",\n      tabIndex: -1,\n      style: !isTarget || omitSelectedValues && isSelected ? style : void 0,\n      \"data-target\": dataAttr(true),\n      \"data-value\": optionValue != null ? optionValue : \"\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"aria-checked\": ariaAttr(isSelected),\n      \"aria-disabled\": ariaAttr(isDisabled),\n      onClick: handlerAll2(computedProps.onClick, props2.onClick, onClick)\n    };\n  }, [optionValue, computedProps, isDisabled, isFocused, isSelected, isTarget, omitSelectedValues, onClick, register]);\n  return {\n    isSelected,\n    isFocused,\n    customIcon,\n    children,\n    getOptionProps\n  };\n};\nvar useAutocompleteCreate = () => {\n  const {\n    isHit,\n    onCreate\n  } = useAutocompleteContext();\n  const getCreateProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref,\n      ...props,\n      tabIndex: -1,\n      style: isHit ? style : void 0,\n      \"data-focus\": dataAttr(!isHit),\n      onClick: handlerAll2(props.onClick, onCreate)\n    };\n  }, [isHit, onCreate]);\n  return {\n    getCreateProps\n  };\n};\nvar useAutocompleteEmpty = () => {\n  const {\n    isHit,\n    isEmpty\n  } = useAutocompleteContext();\n  const getEmptyProps = useCallback(function () {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref,\n      ...props,\n      tabIndex: -1,\n      style: isHit && !isEmpty ? style : void 0\n    };\n  }, [isHit, isEmpty]);\n  return {\n    getEmptyProps\n  };\n};\n\n// src/autocomplete-list.tsx\nimport { jsx as jsx9 } from \"react/jsx-runtime\";\nvar AutocompleteList = forwardRef8((_ref33, ref) => {\n  let {\n    className,\n    w,\n    width,\n    minW,\n    minWidth,\n    ...rest\n  } = _ref33;\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  const {\n    styles\n  } = useAutocompleteContext();\n  const {\n    getListProps\n  } = useAutocompleteList();\n  w = (_d = w != null ? w : width) != null ? _d : (_c = (_a = styles.list) == null ? void 0 : _a.w) != null ? _c : (_b = styles.list) == null ? void 0 : _b.width;\n  minW = (_h = minW != null ? minW : minWidth) != null ? _h : (_g = (_e = styles.list) == null ? void 0 : _e.minW) != null ? _g : (_f = styles.list) == null ? void 0 : _f.minWidth;\n  const css = {\n    ...styles.list\n  };\n  return /* @__PURE__ */jsx9(PopoverContent, {\n    className: cx8(\"ui-autocomplete__list\", className),\n    w,\n    minW,\n    __css: css,\n    ...getListProps(rest, ref)\n  });\n});\nexport { AutocompleteList, Autocomplete, AutocompleteOptionGroup, AutocompleteOption, AutocompleteEmpty, MultiAutocomplete, AutocompleteDescendantsContextProvider, useAutocompleteDescendantsContext, useAutocompleteDescendants, useAutocompleteDescendant, AutocompleteProvider, useAutocompleteContext, useAutocomplete, useAutocompleteInput, useAutocompleteList, useAutocompleteOptionGroup, useAutocompleteOption, useAutocompleteCreate, useAutocompleteEmpty, AutocompleteIcon, AutocompleteClearIcon, AutocompleteItemIcon, AutocompleteCreate };","map":{"version":3,"names":["forwardRef","forwardRef8","PopoverContent","cx","cx8","layoutStyleProperties","formControlProperties","useFormControlProps","popoverProperties","useControllableState","createDescendant","useDisclosure","useOutsideClick","ariaAttr","createContext","dataAttr","funcAll","getEventRelatedTarget","handlerAll","handlerAll2","isArray","isContains","isHTMLElement","mergeRefs","omitObject","pickObject","splitObject","useUnmountEffect","useUpdateEffect","getValidChildren","getValidChildren2","isUndefined","useCallback","useEffect","useMemo","useMemo2","useRef","useRef2","useState","ui","ui2","forwardRef2","useMultiComponentStyle","omitThemeProps","Popover","PopoverTrigger","Portal","cx2","ChevronIcon","CloseIcon","useClickable","isValidElement","cloneElement","jsx","AutocompleteIcon","_ref","ref","className","children","__css","rest","styles","useAutocompleteContext","css","position","top","transform","display","alignItems","justifyContent","pointerEvents","cursor","icon","validChildren","cloneChildren","map","child","focusable","style","maxWidth","maxHeight","color","div","AutocompleteClearIcon","_ref2","props","isDisabled","disabled","clearIcon","w","h","AutocompleteItemIcon","_ref3","flexShrink","fontSize","itemIcon","span","jsx2","jsxs","Autocomplete","mergedProps","defaultValue","height","minH","minHeight","containerProps","listProps","inputProps","iconProps","portalProps","computedProps","descendants","formControlProps","getPopoverProps","getContainerProps","getFieldProps","allowCreate","isEmpty","inputValue","computedChildren","useAutocomplete","container","AutocompleteDescendantsContextProvider","value","AutocompleteProvider","inner","AutocompleteField","AutocompleteList","AutocompleteCreate","AutocompleteEmpty","_ref4","placeholder","label","getInputProps","useAutocompleteInput","pe","field","input","ui3","forwardRef3","cx3","jsx3","jsxs2","AutocompleteOptionGroup","_ref5","getGroupProps","useAutocompleteOptionGroup","li","groupLabel","lineClamp","ul","group","ui4","forwardRef4","cx4","jsx4","jsxs3","AutocompleteOption","_ref6","isSelected","customIcon","getOptionProps","useAutocompleteOption","textDecoration","userSelect","width","textAlign","flex","outline","gap","item","opacity","CheckIcon","viewBox","fill","points","ui5","forwardRef5","cx5","runIfFunc","jsx5","jsxs4","_ref7","getCreateProps","useAutocompleteCreate","PlusIcon","d","ui6","forwardRef6","cx6","jsx6","jsxs5","_ref8","emptyMessage","getEmptyProps","useAutocompleteEmpty","MinusIcon","ui7","forwardRef7","useMultiComponentStyle2","omitThemeProps2","Popover2","PopoverTrigger2","Portal2","cx7","cloneElement2","jsx7","jsxs6","MultiAutocomplete","component","separator","isClearable","closeOnSelect","keepPlaceholder","clearIconProps","onClear","MultiAutocompleteField","length","onClick","_ref9","onChange","isOpen","inputRef","label2","index","onRemove","ev","stopPropagation","current","focus","el","marginBlockStart","marginBlockEnd","marginInlineEnd","key","value2","isLast","me","flexWrap","py","overflow","jsx8","kanaMap","ｶﾞ","ｷﾞ","ｸﾞ","ｹﾞ","ｺﾞ","ｻﾞ","ｼﾞ","ｽﾞ","ｾﾞ","ｿﾞ","ﾀﾞ","ﾁﾞ","ﾂﾞ","ﾃﾞ","ﾄﾞ","ﾊﾞ","ﾋﾞ","ﾌﾞ","ﾍﾞ","ﾎﾞ","ﾊﾟ","ﾋﾟ","ﾌﾟ","ﾍﾟ","ﾎﾟ","ｳﾞ","ﾜﾞ","ｦﾞ","ｱ","ｲ","ｳ","ｴ","ｵ","ｶ","ｷ","ｸ","ｹ","ｺ","ｻ","ｼ","ｽ","ｾ","ｿ","ﾀ","ﾁ","ﾂ","ﾃ","ﾄ","ﾅ","ﾆ","ﾇ","ﾈ","ﾉ","ﾊ","ﾋ","ﾌ","ﾍ","ﾎ","ﾏ","ﾐ","ﾑ","ﾒ","ﾓ","ﾔ","ﾕ","ﾖ","ﾗ","ﾘ","ﾙ","ﾚ","ﾛ","ﾜ","ｦ","ﾝ","ｧ","ｨ","ｩ","ｪ","ｫ","ｯ","ｬ","ｭ","ｮ","ｰ","defaultFormat","replace","v","String","fromCharCode","charCodeAt","reg","RegExp","Object","keys","join","toUpperCase","flattenItems","items","filterItems","items2","_a","isFocusable","trulyDisabled","filter","Boolean","flat","Infinity","isTargetOption","target","getAttribute","startsWith","DescendantsContextProvider","useDescendantsContext","useAutocompleteDescendantsContext","useDescendants","useAutocompleteDescendants","useDescendant","useAutocompleteDescendant","name","errorMessage","_ref10","valueProp","onChangeProp","onCreate","onCreateProp","onSearch","onSearchProp","omitSelectedValues","maxSelectValues","closeOnBlur","closeOnEsc","allowFree","insertPositionItem","format","placement","duration","optionProps","isOpenProp","defaultIsOpen","onOpen","onOpenProp","onClose","onCloseProp","id","_ariaReadonly","containerRef","listRef","timeoutIds","Set","isComposition","prevValue","resolvedItems","setResolvedItems","setValue","setLabel","setInputValue","focusedIndex","setFocusedIndex","isAllSelected","setIsAllSelected","isHit","setIsHit","onInternalOpen","isFocused","isCreate","isMulti","isEmptyValue","firstInsertPositionItem","secondInsertPositionItem","console","warn","concat","selectedValues","enabledValues","_ref11","node","includes","dataset","selectedIndexes","_ref12","_ref13","i","_ref14","i2","label3","props2","readOnly","onFocusFirst","id2","setTimeout","first","enabledFirstValue","_ref15","enabledFirst","add","onFocusLast","last","enabledLastValue","_ref16","enabledLast","reverse","onFocusSelected","values","selected","find","_ref17","onFocusNext","arguments","undefined","next","enabledNextValue","_ref18","enabledNext","_ref19","index2","onFocusPrev","prev","enabledPrevValue","_ref20","enabledPrev","_ref21","onFocusFirstOrSelected","onFocusLastOrSelected","pickOptions","isHit2","isFocused2","forEach","_ref22","textContent","rebirthOptions","runFocus","_ref23","getSelectedValues","newValues","enabledValues2","resolvedValues","selectedValues2","_b","_ref24","node2","Array","from","onChangeLabel","newValue","runOmit","selectedValue","runRebirth","_ref25","onSelect","enabledValue","computedValue","onCompositionStart","onCompositionEnd","newItem","newItems","findIndex","_ref26","targetItem","_ref27","onFocus","onBlur","relatedTarget","onDelete","onKeyDown","code","enabledDelete","actions","ArrowDown","ArrowUp","Space","Enter","Home","End","Escape","Backspace","action","preventDefault","isAll","count","isMax","JSON","stringify","clearTimeout","clear","handler","enabled","matchWidth","trigger","closeOnButton","tabIndex","blur","role","autoCapitalize","autoComplete","spellCheck","useAutocompleteList","beforeFocusedIndex","onAnimationComplete","parent","parentHeight","clientHeight","viewTop","scrollTop","viewBottom","childHeight","childTop","offsetTop","childBottom","isInView","isScrollBottom","scrollTo","getListProps","as","_ref28","_ref29","_ref30","childValues","_ref31","parentElement","computedRest","border","clip","margin","padding","whiteSpace","generalCloseOnSelect","customCloseOnSelect","optionValue","itemRef","register","frontValues","slice","isDuplicated","some","_ref32","isTarget","currentTarget","jsx9","_ref33","minW","minWidth","_c","_d","_e","_f","_g","_h","list"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-list.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\use-autocomplete.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-icon.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-option-group.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-option.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-create.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-empty.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\multi-autocomplete.tsx"],"sourcesContent":["import type { CSSUIObject, CSSUIProps } from \"@yamada-ui/core\"\nimport { forwardRef } from \"@yamada-ui/core\"\nimport type { MotionProps } from \"@yamada-ui/motion\"\nimport { PopoverContent } from \"@yamada-ui/popover\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useAutocompleteContext, useAutocompleteList } from \"./use-autocomplete\"\n\nexport type AutocompleteListProps = MotionProps<\"ul\">\n\nexport const AutocompleteList = forwardRef<AutocompleteListProps, \"ul\">(\n  ({ className, w, width, minW, minWidth, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n\n    const { getListProps } = useAutocompleteList()\n\n    w =\n      w ?? width ?? ((styles.list?.w ?? styles.list?.width) as CSSUIProps[\"w\"])\n    minW =\n      minW ??\n      minWidth ??\n      ((styles.list?.minW ?? styles.list?.minWidth) as CSSUIProps[\"minW\"])\n\n    const css: CSSUIObject = { ...styles.list }\n\n    return (\n      <PopoverContent\n        className={cx(\"ui-autocomplete__list\", className)}\n        w={w}\n        minW={minW}\n        __css={css}\n        {...getListProps(rest, ref)}\n      />\n    )\n  },\n)\n","import type { CSSUIObject, HTMLUIProps, UIPropGetter } from \"@yamada-ui/core\"\nimport { layoutStyleProperties } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  formControlProperties,\n  useFormControlProps,\n} from \"@yamada-ui/form-control\"\nimport type { MotionUIPropGetter } from \"@yamada-ui/motion\"\nimport { popoverProperties, type PopoverProps } from \"@yamada-ui/popover\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport { useDisclosure } from \"@yamada-ui/use-disclosure\"\nimport { useOutsideClick } from \"@yamada-ui/use-outside-click\"\nimport type { Dict, Union, DOMAttributes } from \"@yamada-ui/utils\"\nimport {\n  ariaAttr,\n  createContext,\n  dataAttr,\n  funcAll,\n  getEventRelatedTarget,\n  handlerAll,\n  isArray,\n  isContains,\n  isHTMLElement,\n  mergeRefs,\n  omitObject,\n  pickObject,\n  splitObject,\n  useUnmountEffect,\n  useUpdateEffect,\n  getValidChildren,\n  isUndefined,\n} from \"@yamada-ui/utils\"\nimport type {\n  ChangeEvent,\n  CSSProperties,\n  Dispatch,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  SetStateAction,\n} from \"react\"\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport type { AutocompleteOptionProps } from \"./\"\nimport { AutocompleteOption, AutocompleteOptionGroup } from \"./\"\n\ntype AutocompleteBaseItem = Omit<\n  AutocompleteOptionProps,\n  \"value\" | \"children\"\n> & {\n  label?: string\n}\n\ntype AutocompleteItemWithValue = AutocompleteBaseItem & {\n  value?: string\n}\n\ntype AutocompleteItemWithItems = AutocompleteBaseItem & {\n  items?: AutocompleteItemWithValue[]\n}\n\nexport type AutocompleteItem =\n  | AutocompleteItemWithValue\n  | AutocompleteItemWithItems\n\nconst kanaMap: Record<string, string> = {\n  ｶﾞ: \"ガ\",\n  ｷﾞ: \"ギ\",\n  ｸﾞ: \"グ\",\n  ｹﾞ: \"ゲ\",\n  ｺﾞ: \"ゴ\",\n  ｻﾞ: \"ザ\",\n  ｼﾞ: \"ジ\",\n  ｽﾞ: \"ズ\",\n  ｾﾞ: \"ゼ\",\n  ｿﾞ: \"ゾ\",\n  ﾀﾞ: \"ダ\",\n  ﾁﾞ: \"ヂ\",\n  ﾂﾞ: \"ヅ\",\n  ﾃﾞ: \"デ\",\n  ﾄﾞ: \"ド\",\n  ﾊﾞ: \"バ\",\n  ﾋﾞ: \"ビ\",\n  ﾌﾞ: \"ブ\",\n  ﾍﾞ: \"ベ\",\n  ﾎﾞ: \"ボ\",\n  ﾊﾟ: \"パ\",\n  ﾋﾟ: \"ピ\",\n  ﾌﾟ: \"プ\",\n  ﾍﾟ: \"ペ\",\n  ﾎﾟ: \"ポ\",\n  ｳﾞ: \"ヴ\",\n  ﾜﾞ: \"ヷ\",\n  ｦﾞ: \"ヺ\",\n  ｱ: \"ア\",\n  ｲ: \"イ\",\n  ｳ: \"ウ\",\n  ｴ: \"エ\",\n  ｵ: \"オ\",\n  ｶ: \"カ\",\n  ｷ: \"キ\",\n  ｸ: \"ク\",\n  ｹ: \"ケ\",\n  ｺ: \"コ\",\n  ｻ: \"サ\",\n  ｼ: \"シ\",\n  ｽ: \"ス\",\n  ｾ: \"セ\",\n  ｿ: \"ソ\",\n  ﾀ: \"タ\",\n  ﾁ: \"チ\",\n  ﾂ: \"ツ\",\n  ﾃ: \"テ\",\n  ﾄ: \"ト\",\n  ﾅ: \"ナ\",\n  ﾆ: \"ニ\",\n  ﾇ: \"ヌ\",\n  ﾈ: \"ネ\",\n  ﾉ: \"ノ\",\n  ﾊ: \"ハ\",\n  ﾋ: \"ヒ\",\n  ﾌ: \"フ\",\n  ﾍ: \"ヘ\",\n  ﾎ: \"ホ\",\n  ﾏ: \"マ\",\n  ﾐ: \"ミ\",\n  ﾑ: \"ム\",\n  ﾒ: \"メ\",\n  ﾓ: \"モ\",\n  ﾔ: \"ヤ\",\n  ﾕ: \"ユ\",\n  ﾖ: \"ヨ\",\n  ﾗ: \"ラ\",\n  ﾘ: \"リ\",\n  ﾙ: \"ル\",\n  ﾚ: \"レ\",\n  ﾛ: \"ロ\",\n  ﾜ: \"ワ\",\n  ｦ: \"ヲ\",\n  ﾝ: \"ン\",\n  ｧ: \"ァ\",\n  ｨ: \"ィ\",\n  ｩ: \"ゥ\",\n  ｪ: \"ェ\",\n  ｫ: \"ォ\",\n  ｯ: \"ッ\",\n  ｬ: \"ャ\",\n  ｭ: \"ュ\",\n  ｮ: \"ョ\",\n  \"｡\": \"。\",\n  \"､\": \"、\",\n  ｰ: \"ー\",\n  \"｢\": \"「\",\n  \"｣\": \"」\",\n  \"･\": \"・\",\n}\n\nconst defaultFormat = (value: string) => {\n  value = value.replace(/[！-～]/g, (v) =>\n    String.fromCharCode(v.charCodeAt(0) - 0xfee0),\n  )\n\n  const reg = new RegExp(\"(\" + Object.keys(kanaMap).join(\"|\") + \")\", \"g\")\n\n  value = value\n    .replace(reg, (v) => kanaMap[v])\n    .replace(/ﾞ/g, \"゛\")\n    .replace(/ﾟ/g, \"゜\")\n\n  value = value.toUpperCase()\n\n  return value\n}\n\nconst flattenItems = (\n  items: AutocompleteItem[],\n): AutocompleteItemWithValue[] => {\n  const filterItems = (\n    items: AutocompleteItem[] | AutocompleteItemWithValue[],\n  ): (AutocompleteItemWithValue | AutocompleteItemWithValue[])[] =>\n    items\n      .map((item) => {\n        const { isDisabled, isFocusable } = item\n        const trulyDisabled = !!isDisabled && !isFocusable\n\n        if (trulyDisabled) return\n\n        if (\"items\" in item) {\n          return filterItems(item.items ?? [])\n        } else {\n          return item as AutocompleteItemWithValue\n        }\n      })\n      .filter(Boolean) as (\n      | AutocompleteItemWithValue\n      | AutocompleteItemWithValue[]\n    )[]\n\n  return filterItems(items).flat(Infinity) as AutocompleteItemWithValue[]\n}\n\nconst isTargetOption = (target: EventTarget | null): boolean =>\n  isHTMLElement(target) &&\n  !!target?.getAttribute(\"role\")?.startsWith(\"autocomplete-item\")\n\nexport const {\n  DescendantsContextProvider: AutocompleteDescendantsContextProvider,\n  useDescendantsContext: useAutocompleteDescendantsContext,\n  useDescendants: useAutocompleteDescendants,\n  useDescendant: useAutocompleteDescendant,\n} = createDescendant<HTMLElement>()\n\ntype AutocompleteContext = Omit<\n  UseAutocompleteProps,\n  \"value\" | \"defaultValue\" | \"onChange\" | \"onCreate\"\n> & {\n  value: string | string[]\n  label: string | string[] | undefined\n  inputValue: string\n  isHit: boolean\n  isEmpty: boolean\n  isAllSelected: boolean\n  onChange: (newValue: string) => void\n  onChangeLabel: (newValue: string, runOmit?: boolean) => void\n  pickOptions: (value: string) => void\n  rebirthOptions: (runFocus?: boolean) => void\n  inputProps: DOMAttributes\n  isOpen: boolean\n  onOpen: () => void\n  onClose: () => void\n  onCreate: () => void\n  onFocusFirst: () => void\n  onFocusLast: () => void\n  onFocusNext: (index?: number) => void\n  onFocusPrev: (index?: number) => void\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  listRef: RefObject<HTMLUListElement>\n  inputRef: RefObject<HTMLInputElement>\n  formControlProps: Record<string, any>\n  styles: Record<string, CSSUIObject>\n}\n\nexport const [AutocompleteProvider, useAutocompleteContext] =\n  createContext<AutocompleteContext>({\n    name: \"AutocompleteContext\",\n    errorMessage: `useAutocompleteContext returned is 'undefined'. Seems you forgot to wrap the components in \"<Autocomplete />\" or \"<MultiAutocomplete />\"`,\n  })\n\ntype UseAutocompleteBaseProps<T extends string | string[] = string> = Omit<\n  PopoverProps,\n  | \"initialFocusRef\"\n  | \"closeOnButton\"\n  | \"trigger\"\n  | \"autoFocus\"\n  | \"restoreFocus\"\n  | \"openDelay\"\n  | \"closeDelay\"\n> &\n  FormControlOptions & {\n    /**\n     * The value of the autocomplete.\n     */\n    value?: T\n    /**\n     * The initial value of the autocomplete.\n     */\n    defaultValue?: T\n    /**\n     * The callback invoked when value state changes.\n     */\n    onChange?: (value: T) => void\n    /**\n     * The callback invoked when search input.\n     */\n    onSearch?: (ev: ChangeEvent<HTMLInputElement>) => void\n    /**\n     * The callback invoked when autocomplete option created.\n     */\n    onCreate?: (newItem: AutocompleteItem, newItems: AutocompleteItem[]) => void\n    /**\n     * Function to format text when search input.\n     */\n    format?: (value: string) => string\n    /**\n     * The position to be inserted when the autocomplete option is created.\n     *\n     * @default 'first'\n     */\n    insertPositionItem?: Union<\"first\" | \"last\"> | [string, \"first\" | \"last\"]\n    /**\n     * If `true`, the list element will be closed when value is selected.\n     *\n     * @default true\n     */\n    closeOnSelect?: boolean\n    /**\n     * The message displayed when the search yields no hits.\n     *\n     * @default 'No results found'\n     */\n    emptyMessage?: string\n    /**\n     * If `true`, enables the creation of autocomplete option.\n     *\n     * @default false\n     */\n    allowCreate?: boolean\n    /**\n     * If `true`, enables the free input.\n     */\n    allowFree?: boolean\n    /**\n     * If `true`, the selected item(s) will be excluded from the list.\n     *\n     * @default false\n     */\n    omitSelectedValues?: boolean\n    /**\n     * The maximum selectable value.\n     */\n    maxSelectValues?: number\n    /**\n     * Props for select option element.\n     */\n    optionProps?: Omit<AutocompleteOptionProps, \"value\" | \"children\">\n    /**\n     * If provided, generate options based on items.\n     */\n    items?: AutocompleteItem[]\n  }\n\nexport type UseAutocompleteProps<T extends string | string[] = string> = Omit<\n  HTMLUIProps<\"input\">,\n  | keyof UseAutocompleteBaseProps\n  | \"list\"\n  | \"disabled\"\n  | \"required\"\n  | \"readOnly\"\n  | \"size\"\n> &\n  UseAutocompleteBaseProps<T>\n\nexport const useAutocomplete = <T extends string | string[] = string>({\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  onCreate: onCreateProp,\n  onSearch: onSearchProp,\n  closeOnSelect = true,\n  omitSelectedValues = false,\n  maxSelectValues,\n  closeOnBlur = true,\n  closeOnEsc = true,\n  allowCreate = false,\n  allowFree = false,\n  insertPositionItem = \"first\",\n  emptyMessage = \"No results found\",\n  format = defaultFormat,\n  placement = \"bottom-start\",\n  duration = 0.2,\n  optionProps,\n  placeholder,\n  items,\n  children,\n  isOpen: isOpenProp,\n  defaultIsOpen,\n  onOpen: onOpenProp,\n  onClose: onCloseProp,\n  ...rest\n}: UseAutocompleteProps<T>) => {\n  rest = useFormControlProps(rest)\n\n  const { id } = rest\n\n  const { \"aria-readonly\": _ariaReadonly, ...formControlProps } = pickObject(\n    rest,\n    formControlProperties,\n  )\n  const [containerProps, inputProps] = splitObject<Dict, string>(\n    omitObject(rest, [...popoverProperties, \"onKeyDown\", \"onFocus\"]),\n    layoutStyleProperties,\n  )\n\n  const descendants = useAutocompleteDescendants()\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const listRef = useRef<HTMLUListElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n  const isComposition = useRef<boolean>(false)\n  const prevValue = useRef<T | undefined>(undefined)\n\n  const [resolvedItems, setResolvedItems] = useState<\n    AutocompleteItem[] | undefined\n  >(items)\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n  })\n  const [label, setLabel] = useState<T | undefined>(undefined)\n  const [inputValue, setInputValue] = useState<string>(\"\")\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n  const [isAllSelected, setIsAllSelected] = useState<boolean>(false)\n  const [isHit, setIsHit] = useState<boolean>(true)\n  const {\n    isOpen,\n    onOpen: onInternalOpen,\n    onClose,\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n  const isFocused = focusedIndex > -1\n  const isCreate = focusedIndex === -2 && allowCreate\n  const isMulti = isArray(value)\n  const isEmptyValue = !isMulti ? !value : !value.length\n\n  const [firstInsertPositionItem, secondInsertPositionItem] = useMemo(() => {\n    if (isArray(insertPositionItem)) {\n      return insertPositionItem\n    } else {\n      return [insertPositionItem, \"first\"]\n    }\n  }, [insertPositionItem])\n\n  if (allowCreate && !isUndefined(children)) {\n    console.warn(\n      `${!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"}: ${\n        !isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"\n      } internally prefers 'children'. If 'allowCreate' is true, it will not be reflected correctly. If want to reflect, please set 'items' in props.`,\n    )\n  }\n\n  const selectedValues = descendants.enabledValues(\n    ({ node }) => isMulti && value.includes(node.dataset.value ?? \"\"),\n  )\n  const selectedIndexes = selectedValues.map(({ index }) => index)\n  const enabledValues = descendants.enabledValues(\n    ({ node, index }) =>\n      \"target\" in node.dataset && !selectedIndexes.includes(index),\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const computedChildren = resolvedItems?.map((item, i) => {\n    if (\"value\" in item) {\n      const { label, value, ...props } = item\n\n      return (\n        <AutocompleteOption key={i} value={value} {...props}>\n          {label}\n        </AutocompleteOption>\n      )\n    } else if (\"items\" in item) {\n      const { label, items = [], ...props } = item\n\n      return (\n        <AutocompleteOptionGroup\n          key={i}\n          label={label as string}\n          {...(props as HTMLUIProps<\"ul\">)}\n        >\n          {items.map(({ label, value, ...props }, i) => (\n            <AutocompleteOption key={i} value={value} {...props}>\n              {label}\n            </AutocompleteOption>\n          ))}\n        </AutocompleteOptionGroup>\n      )\n    }\n  })\n\n  const isEmpty = !validChildren.length && !computedChildren?.length\n\n  const onOpen = useCallback(() => {\n    if (formControlProps.disabled || formControlProps.readOnly) return\n\n    if (!allowCreate && (isEmpty || isAllSelected)) return\n\n    onInternalOpen()\n\n    if (inputRef.current) inputRef.current.focus()\n  }, [allowCreate, formControlProps, isAllSelected, isEmpty, onInternalOpen])\n\n  const onFocusFirst = useCallback(() => {\n    const id = setTimeout(() => {\n      if (isEmpty || isAllSelected) return\n\n      const first = descendants.enabledFirstValue(\n        ({ node }) => \"target\" in node.dataset,\n      )\n\n      if (!first) return\n\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(first.index)\n      } else {\n        if (selectedIndexes.includes(first.index)) {\n          const enabledFirst = enabledValues[0]\n\n          setFocusedIndex(enabledFirst.index)\n        } else {\n          setFocusedIndex(first.index)\n        }\n      }\n    })\n\n    timeoutIds.current.add(id)\n  }, [\n    descendants,\n    enabledValues,\n    isAllSelected,\n    isEmpty,\n    isMulti,\n    omitSelectedValues,\n    selectedIndexes,\n  ])\n\n  const onFocusLast = useCallback(() => {\n    const id = setTimeout(() => {\n      if (isEmpty || isAllSelected) return\n\n      const last = descendants.enabledLastValue(\n        ({ node }) => \"target\" in node.dataset,\n      )\n\n      if (!last) return\n\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(last.index)\n      } else {\n        if (selectedIndexes.includes(last.index)) {\n          const enabledLast = enabledValues.reverse()[0]\n\n          setFocusedIndex(enabledLast.index)\n        } else {\n          setFocusedIndex(last.index)\n        }\n      }\n    })\n\n    timeoutIds.current.add(id)\n  }, [\n    descendants,\n    enabledValues,\n    isAllSelected,\n    isEmpty,\n    isMulti,\n    omitSelectedValues,\n    selectedIndexes,\n  ])\n\n  const onFocusSelected = useCallback(() => {\n    const id = setTimeout(() => {\n      const values = descendants.enabledValues()\n\n      const selected = values.find(({ node }) =>\n        !isMulti\n          ? node.dataset.value === value\n          : value.includes(node.dataset.value ?? \"\"),\n      )\n\n      if (selected) setFocusedIndex(selected.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, isMulti, value])\n\n  const onFocusNext = useCallback(\n    (index: number = focusedIndex) => {\n      const id = setTimeout(() => {\n        const next = descendants.enabledNextValue(\n          index,\n          ({ node }) => \"target\" in node.dataset,\n        )\n\n        if (!next) return\n\n        if (!isMulti || !omitSelectedValues) {\n          setFocusedIndex(next.index)\n        } else {\n          if (selectedIndexes.includes(next.index)) {\n            const enabledNext =\n              enabledValues.find(({ index }) => next.index < index) ??\n              enabledValues[0]\n\n            setFocusedIndex(enabledNext.index)\n          } else {\n            setFocusedIndex(next.index)\n          }\n        }\n      })\n\n      timeoutIds.current.add(id)\n    },\n    [\n      descendants,\n      enabledValues,\n      focusedIndex,\n      isMulti,\n      omitSelectedValues,\n      selectedIndexes,\n    ],\n  )\n\n  const onFocusPrev = useCallback(\n    (index: number = focusedIndex) => {\n      const id = setTimeout(() => {\n        const prev = descendants.enabledPrevValue(\n          index,\n          ({ node }) => \"target\" in node.dataset,\n        )\n\n        if (!prev) return\n\n        if (!isMulti || !omitSelectedValues) {\n          setFocusedIndex(prev.index)\n        } else {\n          if (selectedIndexes.includes(prev.index)) {\n            const enabledPrev =\n              enabledValues.reverse().find(({ index }) => index < prev.index) ??\n              enabledValues[0]\n\n            setFocusedIndex(enabledPrev.index)\n          } else {\n            setFocusedIndex(prev.index)\n          }\n        }\n      })\n\n      timeoutIds.current.add(id)\n    },\n    [\n      descendants,\n      enabledValues,\n      focusedIndex,\n      isMulti,\n      omitSelectedValues,\n      selectedIndexes,\n    ],\n  )\n\n  const onFocusFirstOrSelected =\n    isEmptyValue || omitSelectedValues ? onFocusFirst : onFocusSelected\n  const onFocusLastOrSelected =\n    isEmptyValue || omitSelectedValues ? onFocusLast : onFocusSelected\n\n  const pickOptions = useCallback(\n    (value: string) => {\n      const values = descendants.values()\n\n      let isHit = false\n      let isFocused = false\n\n      values.forEach(({ node, index }) => {\n        if (format(node.textContent ?? \"\").includes(value)) {\n          isHit = true\n\n          const isDisabled = \"disabled\" in node.dataset\n\n          node.dataset.target = \"\"\n\n          if (!isFocused && !isDisabled) {\n            isFocused = true\n\n            setFocusedIndex(index)\n          }\n        } else {\n          delete node.dataset.target\n        }\n      })\n\n      setIsHit(isHit)\n    },\n    [descendants, format],\n  )\n\n  const rebirthOptions = useCallback(\n    (runFocus = true) => {\n      const values = descendants.values()\n\n      values.forEach(({ node }) => {\n        node.dataset.target = \"\"\n      })\n\n      if (runFocus) onFocusFirst()\n\n      setIsHit(true)\n    },\n    [descendants, onFocusFirst],\n  )\n\n  const getSelectedValues = useCallback(\n    (newValues: string | string[]) => {\n      const enabledValues = descendants.enabledValues()\n\n      const resolvedValues = isArray(newValues) ? newValues : [newValues]\n\n      const selectedValues = resolvedValues\n        .map((value) => {\n          const { node } =\n            enabledValues.find(({ node }) => node.dataset.value === value) ?? {}\n\n          if (node) {\n            const el = Array.from(node.children).find(\n              (child) => child.getAttribute(\"data-label\") !== null,\n            )\n\n            return el?.textContent ?? undefined\n          } else {\n            return allowFree ? value : undefined\n          }\n        })\n        .filter(Boolean) as string[]\n\n      return selectedValues\n    },\n    [allowFree, descendants],\n  )\n\n  const onChangeLabel = useCallback(\n    (newValue: string, runOmit: boolean = true) => {\n      const selectedValues = getSelectedValues(newValue)\n\n      setLabel((prev) => {\n        if (!isMulti) {\n          return selectedValues[0] as T\n        } else {\n          selectedValues.forEach((selectedValue) => {\n            const isSelected =\n              isArray(prev) && prev.includes(selectedValue ?? \"\")\n\n            if (!isSelected) {\n              prev = [...(isArray(prev) ? prev : []), selectedValue] as T\n            } else if (runOmit) {\n              prev = (\n                isArray(prev)\n                  ? prev.filter((value) => value !== selectedValue)\n                  : undefined\n              ) as T\n            }\n          })\n\n          return prev\n        }\n      })\n    },\n    [getSelectedValues, isMulti],\n  )\n\n  const onChange = useCallback(\n    (newValue: string, runRebirth: boolean = true) => {\n      setValue((prev) => {\n        let next: T\n\n        if (!isArray(prev)) {\n          next = newValue as T\n        } else {\n          const isSelected = prev.includes(newValue)\n\n          if (!isSelected) {\n            next = [...prev, newValue] as T\n          } else {\n            next = prev.filter((value) => value !== newValue) as T\n          }\n        }\n\n        prevValue.current = next\n        return next\n      })\n\n      const isHit =\n        descendants\n          .values()\n          .filter(({ node }) =>\n            format(node.textContent ?? \"\").includes(newValue),\n          ).length > 0\n\n      onChangeLabel(newValue)\n\n      if (allowFree || isHit) setInputValue(\"\")\n\n      if (isMulti && runRebirth) rebirthOptions(false)\n    },\n    [\n      allowFree,\n      isMulti,\n      onChangeLabel,\n      rebirthOptions,\n      setValue,\n      descendants,\n      format,\n    ],\n  )\n\n  const onSelect = useCallback(() => {\n    let enabledValue = descendants.value(focusedIndex)\n\n    if (\"disabled\" in (enabledValue?.node.dataset ?? {}))\n      enabledValue = undefined\n\n    if (!enabledValue) return\n\n    const value = enabledValue.node.dataset.value ?? \"\"\n\n    onChange(value)\n\n    if (closeOnSelect) onClose()\n\n    if (omitSelectedValues) onFocusNext()\n  }, [\n    closeOnSelect,\n    descendants,\n    focusedIndex,\n    omitSelectedValues,\n    onChange,\n    onClose,\n    onFocusNext,\n  ])\n\n  const onSearch = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (!isOpen) onOpen()\n\n      onSearchProp?.(ev)\n\n      const value = ev.target.value\n      const computedValue = format(value)\n\n      if (computedValue) {\n        pickOptions(computedValue)\n      } else {\n        rebirthOptions()\n      }\n\n      setInputValue(value)\n    },\n    [isOpen, onOpen, format, onSearchProp, pickOptions, rebirthOptions],\n  )\n\n  const onCompositionStart = useCallback(() => {\n    isComposition.current = true\n  }, [])\n\n  const onCompositionEnd = useCallback(() => {\n    isComposition.current = false\n  }, [])\n\n  const onCreate = useCallback(() => {\n    if (!listRef.current) return\n\n    const newItem: AutocompleteItem = { label: inputValue, value: inputValue }\n\n    let newItems: AutocompleteItem[] = []\n\n    if (resolvedItems) newItems = resolvedItems\n\n    if (firstInsertPositionItem === \"first\") {\n      newItems = [newItem, ...newItems]\n    } else if (firstInsertPositionItem === \"last\") {\n      newItems = [...newItems, newItem]\n    } else {\n      const i = newItems.findIndex(\n        ({ label }) => label === firstInsertPositionItem,\n      )\n\n      const targetItem = newItems[i]\n\n      if (i !== -1 && \"items\" in targetItem) {\n        if (secondInsertPositionItem === \"first\") {\n          targetItem.items = [newItem, ...(targetItem.items ?? [])]\n        } else {\n          targetItem.items = [...(targetItem.items ?? []), newItem]\n        }\n\n        newItems[i] = targetItem\n      } else {\n        console.warn(\n          `${\n            !isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"\n          }: '${firstInsertPositionItem}' specified in insertPositionItem does not exist in the option group.`,\n        )\n      }\n    }\n\n    setResolvedItems(newItems)\n    onChange(inputValue)\n    rebirthOptions(false)\n\n    const index = flattenItems(newItems).findIndex(\n      ({ value }) => value === inputValue,\n    )\n\n    setFocusedIndex(index)\n\n    onCreateProp?.(newItem, newItems)\n  }, [\n    inputValue,\n    resolvedItems,\n    firstInsertPositionItem,\n    onChange,\n    rebirthOptions,\n    onCreateProp,\n    secondInsertPositionItem,\n    isMulti,\n  ])\n\n  const onClick = useCallback(() => {\n    if (isOpen) {\n      if (inputRef.current) inputRef.current.focus()\n    } else {\n      onOpen()\n\n      onFocusFirstOrSelected()\n    }\n  }, [isOpen, onFocusFirstOrSelected, onOpen])\n\n  const onFocus = useCallback(() => {\n    if (isOpen) return\n\n    onOpen()\n\n    onFocusFirstOrSelected()\n  }, [isOpen, onFocusFirstOrSelected, onOpen])\n\n  const onBlur = useCallback(\n    (ev: FocusEvent<HTMLDivElement>) => {\n      const relatedTarget = getEventRelatedTarget(ev)\n\n      if (isContains(containerRef.current, relatedTarget)) return\n\n      if (!closeOnBlur && isHit) return\n\n      if (allowFree && !!inputValue) onChange(inputValue, false)\n\n      setInputValue(\"\")\n\n      if (isOpen) onClose()\n    },\n    [closeOnBlur, isHit, isOpen, inputValue, allowFree, onClose, onChange],\n  )\n\n  const onDelete = useCallback(() => {\n    if (!isMulti) {\n      onChange(\"\")\n    } else {\n      onChange(value[value.length - 1])\n    }\n\n    if (!isOpen) onFocus()\n  }, [isMulti, isOpen, onChange, onFocus, value])\n\n  const onClear = useCallback(\n    (ev: MouseEvent<HTMLDivElement>) => {\n      ev.stopPropagation()\n\n      prevValue.current = [] as unknown as T\n      setValue([] as unknown as T)\n      setLabel(undefined)\n      setInputValue(\"\")\n      rebirthOptions()\n\n      if (isOpen && inputRef.current) inputRef.current.focus()\n    },\n    [isOpen, setLabel, setInputValue, setValue, rebirthOptions],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLDivElement>) => {\n      if (ev.key === \" \") ev.key = ev.code\n\n      if (formControlProps.disabled || formControlProps.readOnly) return\n      if (isComposition.current) return\n\n      const enabledDelete = label === inputValue || !inputValue.length\n\n      const actions: Record<string, Function | undefined> = {\n        ArrowDown: isFocused\n          ? () => onFocusNext()\n          : !isOpen\n            ? funcAll(onOpen, onFocusFirstOrSelected)\n            : undefined,\n        ArrowUp: isFocused\n          ? () => onFocusPrev()\n          : !isOpen\n            ? funcAll(onOpen, onFocusLastOrSelected)\n            : undefined,\n        Space: isCreate\n          ? onCreate\n          : isFocused\n            ? onSelect\n            : !isOpen\n              ? funcAll(onOpen, onFocusFirstOrSelected)\n              : undefined,\n        Enter: isCreate\n          ? onCreate\n          : isFocused\n            ? onSelect\n            : !isOpen\n              ? funcAll(onOpen, onFocusFirstOrSelected)\n              : allowFree && isMulti\n                ? () => {\n                    if (inputValue) onChange(inputValue)\n\n                    setFocusedIndex(0)\n                  }\n                : undefined,\n        Home: isOpen ? onFocusFirst : undefined,\n        End: isOpen ? onFocusLast : undefined,\n        Escape: closeOnEsc ? onClose : undefined,\n        Backspace: !isEmptyValue && enabledDelete ? onDelete : undefined,\n      }\n\n      const action = actions[ev.key]\n\n      if (!action) return\n\n      ev.preventDefault()\n      ev.stopPropagation()\n\n      action(ev)\n    },\n    [\n      allowFree,\n      formControlProps,\n      label,\n      inputValue,\n      onOpen,\n      isFocused,\n      isMulti,\n      onFocusFirstOrSelected,\n      onFocusNext,\n      onFocusLastOrSelected,\n      onFocusPrev,\n      isCreate,\n      onCreate,\n      onSelect,\n      isOpen,\n      onFocusFirst,\n      onFocusLast,\n      closeOnEsc,\n      onClose,\n      isEmptyValue,\n      onDelete,\n      onChange,\n    ],\n  )\n\n  useEffect(() => {\n    if (!isMulti) return\n\n    if (!omitSelectedValues && isUndefined(maxSelectValues)) return\n\n    const isAll = value.length > 0 && value.length === descendants.count()\n    const isMax = value.length === maxSelectValues\n\n    if (isAll || isMax) {\n      onClose()\n      setIsAllSelected(true)\n    } else {\n      setIsAllSelected(false)\n    }\n  }, [\n    omitSelectedValues,\n    value,\n    descendants,\n    isMulti,\n    onClose,\n    maxSelectValues,\n  ])\n\n  useEffect(() => {\n    if (isMulti) {\n      if (\n        JSON.stringify(prevValue.current ?? []) === JSON.stringify(value ?? [])\n      )\n        return\n\n      const label = getSelectedValues(value)\n\n      setLabel(label as T)\n    } else {\n      if (prevValue.current === value) return\n\n      onChangeLabel(value, false)\n    }\n  }, [isMulti, value, onChangeLabel, getSelectedValues])\n\n  useUpdateEffect(() => {\n    if (isOpen || allowFree) return\n\n    setFocusedIndex(-1)\n    setInputValue(\"\")\n  }, [isOpen])\n\n  useUpdateEffect(() => {\n    if (!isHit) setFocusedIndex(-2)\n  }, [isHit])\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  useOutsideClick({\n    ref: containerRef,\n    handler: onClose,\n    enabled: isOpen && (closeOnBlur || !isHit),\n  })\n\n  const getPopoverProps = useCallback(\n    (props?: PopoverProps): PopoverProps => ({\n      matchWidth: true,\n      ...rest,\n      ...props,\n      isOpen,\n      onOpen,\n      onClose,\n      placement,\n      duration,\n      trigger: \"never\",\n      closeOnButton: false,\n      closeOnBlur,\n    }),\n    [duration, closeOnBlur, isOpen, onClose, onOpen, placement, rest],\n  )\n\n  const getContainerProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref: mergeRefs(containerRef, ref),\n      ...containerProps,\n      ...props,\n      ...formControlProps,\n      onClick: handlerAll(props.onClick, rest.onClick, onClick),\n      onBlur: handlerAll(props.onBlur, rest.onBlur, onBlur),\n    }),\n\n    [containerProps, formControlProps, onBlur, onClick, rest],\n  )\n\n  const getFieldProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref,\n      tabIndex: -1,\n      ...props,\n      ...formControlProps,\n      placeholder,\n      \"data-active\": dataAttr(isOpen),\n      \"aria-expanded\": dataAttr(isOpen),\n      onFocus: handlerAll(props.onFocus, rest.onFocus, onFocus),\n      onKeyDown: handlerAll(props.onKeyDown, rest.onKeyDown, onKeyDown),\n    }),\n    [formControlProps, placeholder, isOpen, rest, onFocus, onKeyDown],\n  )\n\n  return {\n    id,\n    descendants,\n    value,\n    label,\n    inputValue,\n    isHit,\n    isEmpty,\n    computedChildren,\n    focusedIndex,\n    omitSelectedValues,\n    closeOnSelect,\n    allowCreate,\n    allowFree,\n    emptyMessage,\n    isOpen,\n    isAllSelected,\n    listRef,\n    inputRef,\n    optionProps,\n    formControlProps,\n    setFocusedIndex,\n    onChangeLabel,\n    onChange,\n    onSearch,\n    onCreate,\n    onClear,\n    onCompositionStart,\n    onCompositionEnd,\n    pickOptions,\n    rebirthOptions,\n    onOpen,\n    onClose,\n    onFocusFirst,\n    onFocusLast,\n    onFocusSelected,\n    onFocusNext,\n    onFocusPrev,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    inputProps,\n  }\n}\n\nexport type UseAutocompleteReturn = ReturnType<typeof useAutocomplete>\n\nexport const useAutocompleteInput = () => {\n  const {\n    id,\n    inputRef,\n    onSearch,\n    onCompositionStart,\n    onCompositionEnd,\n    isAllSelected,\n    formControlProps,\n    inputProps,\n    isOpen,\n  } = useAutocompleteContext()\n\n  useUpdateEffect(() => {\n    if (isAllSelected && inputRef.current) inputRef.current.blur()\n  }, [isAllSelected])\n\n  const getInputProps: UIPropGetter<\"input\"> = useCallback(\n    (props = {}, ref = null) => ({\n      ref: mergeRefs(inputRef, ref),\n      ...formControlProps,\n      role: \"combobox\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-autocomplete\": \"list\",\n      \"aria-expanded\": isOpen,\n      autoCapitalize: \"none\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      ...inputProps,\n      ...props,\n      id,\n      cursor: formControlProps.readOnly ? \"default\" : \"text\",\n      pointerEvents:\n        formControlProps.disabled || isAllSelected ? \"none\" : \"auto\",\n      tabIndex: isAllSelected ? -1 : 0,\n      onChange: handlerAll(props.onChange, onSearch),\n      onCompositionStart: handlerAll(\n        props.onCompositionStart,\n        inputProps.onCompositionStart,\n        onCompositionStart,\n      ),\n      onCompositionEnd: handlerAll(\n        props.onCompositionEnd,\n        inputProps.onCompositionEnd,\n        onCompositionEnd,\n      ),\n    }),\n    [\n      isOpen,\n      inputProps,\n      inputRef,\n      formControlProps,\n      id,\n      isAllSelected,\n      onSearch,\n      onCompositionStart,\n      onCompositionEnd,\n    ],\n  )\n\n  return {\n    getInputProps,\n  }\n}\n\nexport type UseAutocompleteInputReturn = ReturnType<typeof useAutocompleteInput>\n\nexport const useAutocompleteList = () => {\n  const { focusedIndex, isOpen, listRef, rebirthOptions } =\n    useAutocompleteContext()\n\n  const descendants = useAutocompleteDescendantsContext()\n\n  const beforeFocusedIndex = useRef<number>(-1)\n  const selectedValue = descendants.value(focusedIndex)\n\n  const onAnimationComplete = useCallback(() => {\n    if (!isOpen) rebirthOptions(false)\n  }, [isOpen, rebirthOptions])\n\n  useEffect(() => {\n    if (!listRef.current || !selectedValue) return\n\n    if (beforeFocusedIndex.current === selectedValue.index) return\n\n    const parent = listRef.current\n    const child = selectedValue.node\n\n    const parentHeight = parent.clientHeight\n    const viewTop = parent.scrollTop\n    const viewBottom = viewTop + parentHeight\n\n    const childHeight = child.clientHeight\n    const childTop = child.offsetTop\n    const childBottom = childTop + childHeight\n\n    const isInView = viewTop <= childTop && childBottom <= viewBottom\n\n    const isScrollBottom = beforeFocusedIndex.current < selectedValue.index\n\n    if (!isInView) {\n      if (childBottom <= parentHeight) {\n        listRef.current.scrollTo({ top: 0 })\n      } else {\n        if (!isScrollBottom) {\n          listRef.current.scrollTo({ top: childTop + 1 })\n        } else {\n          listRef.current.scrollTo({ top: childBottom - parentHeight })\n        }\n      }\n    }\n\n    beforeFocusedIndex.current = selectedValue.index\n  }, [listRef, selectedValue])\n\n  useUpdateEffect(() => {\n    if (!isOpen) beforeFocusedIndex.current = -1\n  }, [isOpen])\n\n  const getListProps: MotionUIPropGetter<\"ul\"> = useCallback(\n    (props = {}, ref = null) => ({\n      as: \"ul\",\n      ref: mergeRefs(listRef, ref),\n      role: \"select\",\n      tabIndex: -1,\n      ...props,\n      onAnimationComplete: handlerAll(\n        props.onAnimationComplete,\n        onAnimationComplete,\n      ),\n    }),\n    [listRef, onAnimationComplete],\n  )\n\n  return {\n    getListProps,\n  }\n}\n\nexport type UseAutocompleteOptionGroupProps = HTMLUIProps<\"ul\"> & {\n  /**\n   * The label of the autocomplete option group.\n   */\n  label: string\n}\n\nexport const useAutocompleteOptionGroup = ({\n  label,\n  ...rest\n}: UseAutocompleteOptionGroupProps) => {\n  const { value, omitSelectedValues } = useAutocompleteContext()\n\n  const isMulti = isArray(value)\n\n  const descendants = useAutocompleteDescendantsContext()\n\n  const values = descendants.values()\n  const selectedValues =\n    isMulti && omitSelectedValues\n      ? descendants.values(({ node }) =>\n          value.includes(node.dataset.value ?? \"\"),\n        )\n      : []\n  const selectedIndexes = selectedValues.map(({ index }) => index)\n  const childValues = values.filter(\n    ({ node, index }) =>\n      node.parentElement?.dataset.label === label &&\n      !selectedIndexes.includes(index) &&\n      \"target\" in node.dataset,\n  )\n\n  const isEmpty = !childValues.length\n\n  const computedRest = splitObject(rest, layoutStyleProperties)\n\n  const getContainerProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref,\n        ...props,\n        ...computedRest[0],\n        style: isEmpty ? style : undefined,\n        \"data-label\": label,\n        role: \"autocomplete-group-container\",\n      }\n    },\n    [computedRest, isEmpty, label],\n  )\n\n  const getGroupProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref,\n      ...props,\n      ...computedRest[1],\n      \"data-label\": label,\n      role: \"autocomplete-group\",\n    }),\n    [computedRest, label],\n  )\n\n  return {\n    label,\n    getContainerProps,\n    getGroupProps,\n  }\n}\n\nexport type UseAutocompleteOptionGroupReturn = ReturnType<\n  typeof useAutocompleteOptionGroup\n>\n\nexport type UseAutocompleteOptionProps = Omit<\n  HTMLUIProps<\"li\">,\n  \"value\" | \"children\"\n> & {\n  /**\n   * The value of the select option.\n   */\n  value?: string\n  /**\n   * The label of the select option.\n   */\n  children?: string\n  /**\n   * If `true`, the select option will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the select option will be focusable.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the list element will be closed when selected.\n   *\n   * @default false\n   */\n  closeOnSelect?: boolean\n}\n\nexport const useAutocompleteOption = (props: UseAutocompleteOptionProps) => {\n  const {\n    value,\n    omitSelectedValues,\n    onChange,\n    onChangeLabel,\n    focusedIndex,\n    setFocusedIndex,\n    onClose,\n    closeOnSelect: generalCloseOnSelect,\n    optionProps,\n    inputRef,\n    onFocusNext,\n  } = useAutocompleteContext()\n\n  let {\n    icon: customIcon,\n    isDisabled,\n    isFocusable,\n    closeOnSelect: customCloseOnSelect,\n    children,\n    value: optionValue,\n    ...computedProps\n  } = { ...optionProps, ...props }\n\n  const trulyDisabled = !!isDisabled && !isFocusable\n\n  const itemRef = useRef<HTMLLIElement>(null)\n\n  const { index, register, descendants } = useAutocompleteDescendant({\n    disabled: trulyDisabled,\n  })\n\n  const values = descendants.values()\n  const frontValues = values.slice(0, index)\n\n  const isMulti = isArray(value)\n  const isDuplicated = !isMulti\n    ? frontValues.some(({ node }) => node.dataset.value === (optionValue ?? \"\"))\n    : false\n\n  const isSelected =\n    !isDuplicated &&\n    (!isMulti\n      ? (optionValue ?? \"\") === value\n      : value.includes(optionValue ?? \"\"))\n  const isTarget = \"target\" in (itemRef.current?.dataset ?? {})\n  const isFocused = index === focusedIndex\n\n  const onClick = useCallback(\n    (ev: MouseEvent<HTMLLIElement>) => {\n      ev.stopPropagation()\n\n      if (isDisabled) {\n        if (inputRef.current) inputRef.current.focus()\n\n        return\n      }\n\n      if (!isTargetOption(ev.currentTarget)) {\n        if (inputRef.current) inputRef.current.focus()\n\n        return\n      }\n\n      setFocusedIndex(index)\n\n      onChange(optionValue ?? \"\")\n\n      if (inputRef.current) inputRef.current.focus()\n\n      if (customCloseOnSelect ?? generalCloseOnSelect) onClose()\n\n      if (omitSelectedValues) onFocusNext(index)\n    },\n    [\n      onFocusNext,\n      omitSelectedValues,\n      isDisabled,\n      optionValue,\n      setFocusedIndex,\n      index,\n      onChange,\n      customCloseOnSelect,\n      generalCloseOnSelect,\n      onClose,\n      inputRef,\n    ],\n  )\n\n  useUpdateEffect(() => {\n    if (isSelected) onChangeLabel(optionValue ?? \"\", false)\n  }, [optionValue])\n\n  const getOptionProps: UIPropGetter<\"li\"> = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref: mergeRefs(itemRef, ref, register),\n        ...computedProps,\n        ...props,\n        role: \"autocomplete-item\",\n        tabIndex: -1,\n        style:\n          !isTarget || (omitSelectedValues && isSelected) ? style : undefined,\n        \"data-target\": dataAttr(true),\n        \"data-value\": optionValue ?? \"\",\n        \"data-focus\": dataAttr(isFocused),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"aria-checked\": ariaAttr(isSelected),\n        \"aria-disabled\": ariaAttr(isDisabled),\n        onClick: handlerAll(computedProps.onClick, props.onClick, onClick),\n      }\n    },\n    [\n      optionValue,\n      computedProps,\n      isDisabled,\n      isFocused,\n      isSelected,\n      isTarget,\n      omitSelectedValues,\n      onClick,\n      register,\n    ],\n  )\n\n  return {\n    isSelected,\n    isFocused,\n    customIcon,\n    children,\n    getOptionProps,\n  }\n}\n\nexport type UseAutocompleteOptionReturn = ReturnType<\n  typeof useAutocompleteOption\n>\n\nexport const useAutocompleteCreate = () => {\n  const { isHit, onCreate } = useAutocompleteContext()\n\n  const getCreateProps: UIPropGetter<\"li\"> = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref,\n        ...props,\n        tabIndex: -1,\n        style: isHit ? style : undefined,\n        \"data-focus\": dataAttr(!isHit),\n        onClick: handlerAll(props.onClick, onCreate),\n      }\n    },\n    [isHit, onCreate],\n  )\n\n  return { getCreateProps }\n}\n\nexport type UseAutocompleteCreateReturn = ReturnType<\n  typeof useAutocompleteCreate\n>\n\nexport const useAutocompleteEmpty = () => {\n  const { isHit, isEmpty } = useAutocompleteContext()\n\n  const getEmptyProps: UIPropGetter<\"li\"> = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref,\n        ...props,\n        tabIndex: -1,\n        style: isHit && !isEmpty ? style : undefined,\n      }\n    },\n    [isHit, isEmpty],\n  )\n\n  return { getEmptyProps }\n}\n\nexport type UseAutocompleteEmptyReturn = ReturnType<typeof useAutocompleteEmpty>\n","import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\"\nimport { Portal } from \"@yamada-ui/portal\"\nimport type { PortalProps } from \"@yamada-ui/portal\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { AutocompleteIconProps } from \"./autocomplete-icon\"\nimport { AutocompleteIcon } from \"./autocomplete-icon\"\nimport type { AutocompleteListProps } from \"./autocomplete-list\"\nimport { AutocompleteList } from \"./autocomplete-list\"\nimport type { UseAutocompleteProps } from \"./use-autocomplete\"\nimport {\n  AutocompleteProvider,\n  useAutocomplete,\n  AutocompleteDescendantsContextProvider,\n  useAutocompleteContext,\n  useAutocompleteInput,\n} from \"./use-autocomplete\"\nimport { AutocompleteCreate, AutocompleteEmpty } from \"./\"\n\ntype AutocompleteOptions = {\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for autocomplete container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for autocomplete list element.\n   */\n  listProps?: Omit<AutocompleteListProps, \"children\">\n  /**\n   * Props for autocomplete input element.\n   */\n  inputProps?: HTMLUIProps<\"input\">\n  /**\n   * Props for autocomplete icon element.\n   */\n  iconProps?: AutocompleteIconProps\n  /**\n   * Props to be forwarded to the portal component.\n   *\n   * @default '{ isDisabled: true }'\n   *\n   */\n  portalProps?: Omit<PortalProps, \"children\">\n}\n\nexport type AutocompleteProps = ThemeProps<\"Autocomplete\"> &\n  Omit<UseAutocompleteProps<string>, \"maxSelectValues\" | \"omitSelectedValues\"> &\n  AutocompleteOptions\n\n/**\n * `Autocomplete` is a component used to display suggestions in response to user text input.\n *\n * @see Docs https://yamada-ui.com/components/forms/autocomplete\n */\nexport const Autocomplete = forwardRef<AutocompleteProps, \"input\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"Autocomplete\", props)\n    let {\n      className,\n      defaultValue = \"\",\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      containerProps,\n      listProps,\n      inputProps,\n      iconProps,\n      portalProps = { isDisabled: true },\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const {\n      descendants,\n      formControlProps,\n      getPopoverProps,\n      getContainerProps,\n      getFieldProps,\n      allowCreate,\n      isEmpty,\n      inputValue,\n      computedChildren,\n      ...rest\n    } = useAutocomplete({ ...computedProps, defaultValue, children })\n\n    h ??= height\n    minH ??= minHeight\n\n    const css: CSSUIObject = {\n      w: \"100%\",\n      h: \"fit-content\",\n      color,\n      ...styles.container,\n    }\n\n    return (\n      <AutocompleteDescendantsContextProvider value={descendants}>\n        <AutocompleteProvider\n          value={{\n            ...rest,\n            formControlProps,\n            inputValue,\n            allowCreate,\n            isEmpty,\n            styles,\n          }}\n        >\n          <Popover {...getPopoverProps()}>\n            <ui.div\n              className={cx(\"ui-autocomplete\", className)}\n              __css={css}\n              {...getContainerProps(containerProps)}\n            >\n              <ui.div\n                className=\"ui-autocomplete__inner\"\n                __css={{ position: \"relative\", ...styles.inner }}\n              >\n                <AutocompleteField\n                  h={h}\n                  minH={minH}\n                  inputProps={inputProps}\n                  {...getFieldProps({}, ref)}\n                />\n\n                <AutocompleteIcon {...iconProps} {...formControlProps} />\n              </ui.div>\n\n              {!isEmpty ? (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n\n                    {children ?? computedChildren}\n                  </AutocompleteList>\n                </Portal>\n              ) : (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate && inputValue ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n                  </AutocompleteList>\n                </Portal>\n              )}\n            </ui.div>\n          </Popover>\n        </AutocompleteProvider>\n      </AutocompleteDescendantsContextProvider>\n    )\n  },\n)\n\ntype AutocompleteFieldProps = HTMLUIProps<\"div\"> &\n  Pick<AutocompleteProps, \"inputProps\">\n\nconst AutocompleteField = forwardRef<AutocompleteFieldProps, \"input\">(\n  ({ className, h, minH, placeholder, inputProps, ...rest }, ref) => {\n    const { label, inputValue, styles } = useAutocompleteContext()\n\n    const { getInputProps } = useAutocompleteInput()\n\n    const css: CSSUIObject = {\n      pe: \"2rem\",\n      h,\n      minH,\n      display: \"flex\",\n      alignItems: \"center\",\n      ...styles.field,\n      cursor: \"text\",\n    }\n\n    return (\n      <PopoverTrigger>\n        <ui.div\n          className={cx(\"ui-autocomplete__field\", className)}\n          __css={css}\n          {...rest}\n        >\n          <ui.input\n            className=\"ui-autocomplete__field__input\"\n            display=\"inline-block\"\n            w=\"100%\"\n            placeholder={placeholder}\n            {...getInputProps(\n              { ...inputProps, value: inputValue || label || \"\" },\n              ref,\n            )}\n          />\n        </ui.div>\n      </PopoverTrigger>\n    )\n  },\n)\n","import type { CSSUIObject, HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { ChevronIcon, CloseIcon } from \"@yamada-ui/icon\"\nimport { useClickable } from \"@yamada-ui/use-clickable\"\nimport { cx, getValidChildren, isValidElement } from \"@yamada-ui/utils\"\nimport type { FC, HTMLAttributes } from \"react\"\nimport { cloneElement, useRef } from \"react\"\nimport { useAutocompleteContext } from \"./use-autocomplete\"\n\nexport type AutocompleteIconProps = HTMLUIProps<\"div\">\n\nexport const AutocompleteIcon = forwardRef<AutocompleteIconProps, \"div\">(\n  ({ className, children, __css, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n\n    const css: CSSUIObject = {\n      position: \"absolute\",\n      top: \"50%\",\n      transform: \"translateY(-50%)\",\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      pointerEvents: \"none\",\n      cursor: \"pointer\",\n      ...styles.icon,\n      ...__css,\n    }\n\n    const validChildren = getValidChildren(children)\n\n    const cloneChildren = validChildren.map((child) =>\n      cloneElement(child, {\n        focusable: false,\n        \"aria-hidden\": true,\n        style: {\n          maxWidth: \"1em\",\n          maxHeight: \"1em\",\n          color: \"currentColor\",\n        },\n      }),\n    )\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-autocomplete__icon\", className)}\n        __css={css}\n        {...rest}\n      >\n        {isValidElement(children) ? cloneChildren : <ChevronIcon />}\n      </ui.div>\n    )\n  },\n)\n\nexport type AutocompleteClearIconProps = AutocompleteIconProps & {\n  disabled?: boolean\n}\n\nexport const AutocompleteClearIcon: FC<AutocompleteClearIconProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const { styles } = useAutocompleteContext()\n\n  const isDisabled = props.disabled\n\n  const rest = useClickable({\n    ref,\n    isDisabled,\n    ...(props as HTMLAttributes<HTMLElement>),\n  })\n\n  return (\n    <AutocompleteIcon\n      aria-label=\"Clear value\"\n      className={cx(\"ui-autocomplete__icon--clear\", className)}\n      __css={styles.clearIcon}\n      {...rest}\n    >\n      {children ?? <CloseIcon w=\"0.5em\" h=\"0.5em\" />}\n    </AutocompleteIcon>\n  )\n}\n\nexport type AutocompleteItemIconProps = HTMLUIProps<\"span\">\n\nexport const AutocompleteItemIcon = forwardRef<\n  AutocompleteItemIconProps,\n  \"span\"\n>(({ className, ...rest }, ref) => {\n  const { styles } = useAutocompleteContext()\n\n  const css: CSSUIObject = {\n    flexShrink: 0,\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: \"0.85em\",\n    ...styles.itemIcon,\n  }\n\n  return (\n    <ui.span\n      ref={ref}\n      className={cx(\"ui-autocomplete__item__icon\", className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n","import type { HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { UseAutocompleteOptionGroupProps } from \"./use-autocomplete\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteOptionGroup,\n} from \"./use-autocomplete\"\n\ntype AutocompleteOptionGroupOptions = UseAutocompleteOptionGroupProps\n\nexport type AutocompleteOptionGroupProps = HTMLUIProps<\"ul\"> &\n  AutocompleteOptionGroupOptions\n\nexport const AutocompleteOptionGroup = forwardRef<\n  AutocompleteOptionGroupProps,\n  \"ul\"\n>(\n  (\n    { className, color, h, height, minH, minHeight, children, ...rest },\n    ref,\n  ) => {\n    const { styles } = useAutocompleteContext()\n    const { label, getContainerProps, getGroupProps } =\n      useAutocompleteOptionGroup(rest)\n\n    h ??= height\n    minH ??= minHeight\n\n    return (\n      <ui.li\n        className={cx(\n          \"ui-autocomplete__item\",\n          \"ui-autocomplete__item--group\",\n          className,\n        )}\n        __css={{ w: \"100%\", h: \"fit-content\", color }}\n        {...getContainerProps()}\n      >\n        <ui.span\n          className=\"ui-autocomplete__item__group-label\"\n          __css={styles.groupLabel}\n          lineClamp={1}\n        >\n          {label}\n        </ui.span>\n\n        <ui.ul\n          {...getGroupProps({}, ref)}\n          className=\"ui-autocomplete__item__group\"\n          __css={{ h, minH, ...styles.group }}\n        >\n          {children}\n        </ui.ul>\n      </ui.li>\n    )\n  },\n)\n","import type { CSSUIObject } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { FC, ReactElement } from \"react\"\nimport { AutocompleteItemIcon } from \"./autocomplete-icon\"\nimport type { UseAutocompleteOptionProps } from \"./use-autocomplete\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteOption,\n} from \"./use-autocomplete\"\n\ntype AutocompleteOptionOptions = {\n  /**\n   * The autocomplete option icon to use.\n   */\n  icon?: ReactElement\n}\n\nexport type AutocompleteOptionProps = UseAutocompleteOptionProps &\n  AutocompleteOptionOptions\n\nexport const AutocompleteOption = forwardRef<AutocompleteOptionProps, \"li\">(\n  ({ className, icon, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n    const { isSelected, customIcon, children, getOptionProps } =\n      useAutocompleteOption(rest)\n\n    icon ??= customIcon\n\n    const css: CSSUIObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      gap: \"0.75rem\",\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx(\"ui-autocomplete__item\", className)}\n        __css={css}\n        {...getOptionProps({}, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon opacity={isSelected ? 1 : 0}>\n            {icon || <CheckIcon />}\n          </AutocompleteItemIcon>\n        ) : null}\n\n        <ui.span style={{ flex: 1 }} data-label>\n          {children}\n        </ui.span>\n      </ui.li>\n    )\n  },\n)\n\nconst CheckIcon: FC = () => (\n  <svg viewBox=\"0 0 14 14\" width=\"1em\" height=\"1em\">\n    <polygon\n      fill=\"currentColor\"\n      points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n    />\n  </svg>\n)\n","import type { CSSUIObject, HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx, runIfFunc } from \"@yamada-ui/utils\"\nimport type { FC, ReactElement } from \"react\"\nimport { AutocompleteItemIcon } from \"./autocomplete-icon\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteCreate,\n} from \"./use-autocomplete\"\n\ntype AutocompleteCreateOptions = {\n  /**\n   * The autocomplete create option icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * The label of the autocomplete create option.\n   */\n  children?: string | ((inputValue: string) => string)\n}\n\nexport type AutocompleteCreateProps = Omit<HTMLUIProps<\"li\">, \"children\"> &\n  AutocompleteCreateOptions\n\nexport const AutocompleteCreate = forwardRef<AutocompleteCreateProps, \"li\">(\n  ({ className, icon, children, ...rest }, ref) => {\n    const { inputValue, styles } = useAutocompleteContext()\n    const { getCreateProps } = useAutocompleteCreate()\n\n    children ??= inputValue\n\n    const css: CSSUIObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      gap: \"0.75rem\",\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx(\"ui-autocomplete__item--create\", className)}\n        __css={css}\n        {...getCreateProps(rest, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon>{icon || <PlusIcon />}</AutocompleteItemIcon>\n        ) : null}\n        {icon ? (\n          <ui.span style={{ pointerEvents: \"none\", flex: 1 }} lineClamp={1}>\n            {runIfFunc(children, inputValue)}\n          </ui.span>\n        ) : (\n          runIfFunc(children, inputValue)\n        )}\n      </ui.li>\n    )\n  },\n)\n\nconst PlusIcon: FC = () => (\n  <svg viewBox=\"0 0 45.402 45.402\" width=\"1em\" height=\"1em\">\n    <path\n      fill=\"currentColor\"\n      d=\"M41.267,18.557H26.832V4.134C26.832,1.851,24.99,0,22.707,0c-2.283,0-4.124,1.851-4.124,4.135v14.432H4.141   c-2.283,0-4.139,1.851-4.138,4.135c-0.001,1.141,0.46,2.187,1.207,2.934c0.748,0.749,1.78,1.222,2.92,1.222h14.453V41.27   c0,1.142,0.453,2.176,1.201,2.922c0.748,0.748,1.777,1.211,2.919,1.211c2.282,0,4.129-1.851,4.129-4.133V26.857h14.435   c2.283,0,4.134-1.867,4.133-4.15C45.399,20.425,43.548,18.557,41.267,18.557z\"\n    />\n  </svg>\n)\n","import type { CSSUIObject, HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { FC, ReactElement } from \"react\"\nimport { AutocompleteItemIcon } from \"./autocomplete-icon\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteEmpty,\n} from \"./use-autocomplete\"\n\ntype AutocompleteEmptyOptions = {\n  /**\n   * The autocomplete empty option icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * The label of the autocomplete empty option.\n   */\n  children?: string\n}\n\nexport type AutocompleteEmptyProps = Omit<HTMLUIProps<\"li\">, \"children\"> &\n  AutocompleteEmptyOptions\n\nexport const AutocompleteEmpty = forwardRef<AutocompleteEmptyProps, \"li\">(\n  ({ className, icon, children, ...rest }, ref) => {\n    const { emptyMessage, styles } = useAutocompleteContext()\n    const { getEmptyProps } = useAutocompleteEmpty()\n\n    children ??= emptyMessage\n\n    const css: CSSUIObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      gap: \"0.75rem\",\n      pointerEvents: \"none\",\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx(\"ui-autocomplete__item--empty\", className)}\n        __css={css}\n        {...getEmptyProps(rest, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon>{icon || <MinusIcon />}</AutocompleteItemIcon>\n        ) : null}\n        {icon ? (\n          <ui.span style={{ pointerEvents: \"none\", flex: 1 }} lineClamp={1}>\n            {children}\n          </ui.span>\n        ) : (\n          children\n        )}\n      </ui.li>\n    )\n  },\n)\n\nconst MinusIcon: FC = () => (\n  <svg viewBox=\"0 0 448 512\" width=\"1em\" height=\"1em\">\n    <path\n      fill=\"currentColor\"\n      d=\"M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z\"\n    />\n  </svg>\n)\n","import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\"\nimport type { PortalProps } from \"@yamada-ui/portal\"\nimport { Portal } from \"@yamada-ui/portal\"\nimport { cx, handlerAll } from \"@yamada-ui/utils\"\nimport type { CSSProperties, FC, MouseEventHandler, ReactElement } from \"react\"\nimport { cloneElement, useMemo } from \"react\"\nimport type { AutocompleteIconProps } from \"./autocomplete-icon\"\nimport { AutocompleteClearIcon, AutocompleteIcon } from \"./autocomplete-icon\"\nimport type { AutocompleteListProps } from \"./autocomplete-list\"\nimport { AutocompleteList } from \"./autocomplete-list\"\nimport type { UseAutocompleteProps } from \"./use-autocomplete\"\nimport {\n  AutocompleteProvider,\n  useAutocomplete,\n  AutocompleteDescendantsContextProvider,\n  useAutocompleteContext,\n  useAutocompleteInput,\n} from \"./use-autocomplete\"\nimport { AutocompleteCreate, AutocompleteEmpty } from \"./\"\n\ntype MultiAutocompleteOptions = {\n  /**\n   * The visual separator between each value.\n   *\n   * @default ','\n   */\n  separator?: string\n  /**\n   * The custom display value to use.\n   */\n  component?: FC<{\n    value: string | number\n    label: string\n    index: number\n    onRemove: MouseEventHandler<HTMLElement>\n  }>\n  /**\n   * If `true`, keep the placeholder.\n   *\n   * @default false\n   */\n  keepPlaceholder?: boolean\n  /**\n   * If `true`, display the select clear icon.\n   *\n   * @default true\n   */\n  isClearable?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for multi autocomplete container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for multi autocomplete list element.\n   */\n  listProps?: Omit<AutocompleteListProps, \"children\">\n  /**\n   * Props for multi autocomplete input element.\n   */\n  inputProps?: HTMLUIProps<\"input\">\n  /**\n   * Props for multi autocomplete icon element.\n   */\n  iconProps?: AutocompleteIconProps\n  /**\n   * Props for multi autocomplete clear icon element.\n   */\n  clearIconProps?: AutocompleteIconProps\n  /**\n   * Props to be forwarded to the portal component.\n   *\n   * @default '{ isDisabled: true }'\n   *\n   */\n  portalProps?: Omit<PortalProps, \"children\">\n  /**\n   * If `true`, the list element will be closed when value is selected.\n   *\n   * @default false\n   */\n  closeOnSelect?: boolean\n}\n\nexport type MultiAutocompleteProps = ThemeProps<\"MultiAutocomplete\"> &\n  Omit<UseAutocompleteProps<string[]>, \"closeOnSelect\"> &\n  MultiAutocompleteOptions\n\n/**\n * `MultiAutocomplete` is a component used to display suggestions based on user text input and to obtain multiple values.\n *\n * @see Docs https://yamada-ui.com/components/forms/multi-autocomplete\n */\nexport const MultiAutocomplete = forwardRef<MultiAutocompleteProps, \"input\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\n      \"MultiAutocomplete\",\n      props,\n    )\n    let {\n      className,\n      defaultValue = [],\n      component,\n      separator,\n      isClearable = true,\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      closeOnSelect = false,\n      keepPlaceholder = false,\n      containerProps,\n      listProps,\n      inputProps,\n      iconProps,\n      clearIconProps,\n      portalProps = { isDisabled: true },\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const {\n      value,\n      descendants,\n      formControlProps,\n      getPopoverProps,\n      getContainerProps,\n      getFieldProps,\n      allowCreate,\n      isEmpty,\n      inputValue,\n      computedChildren,\n      onClear,\n      ...rest\n    } = useAutocomplete<string[]>({\n      ...computedProps,\n      defaultValue,\n      closeOnSelect,\n      children,\n    })\n\n    h ??= height\n    minH ??= minHeight\n\n    const css: CSSUIObject = {\n      w: \"100%\",\n      h: \"fit-content\",\n      color,\n      ...styles.container,\n    }\n\n    return (\n      <AutocompleteDescendantsContextProvider value={descendants}>\n        <AutocompleteProvider\n          value={{\n            ...rest,\n            value,\n            formControlProps,\n            inputValue,\n            allowCreate,\n            isEmpty,\n            styles,\n          }}\n        >\n          <Popover {...getPopoverProps()}>\n            <ui.div\n              className={cx(\"ui-multi-autocomplete\", className)}\n              __css={css}\n              {...getContainerProps(containerProps)}\n            >\n              <ui.div\n                className=\"ui-multi-autocomplete__inner\"\n                __css={{ position: \"relative\", ...styles.inner }}\n              >\n                <MultiAutocompleteField\n                  component={component}\n                  separator={separator}\n                  keepPlaceholder={keepPlaceholder}\n                  h={h}\n                  minH={minH}\n                  inputProps={inputProps}\n                  {...getFieldProps({}, ref)}\n                />\n\n                {isClearable && value.length ? (\n                  <AutocompleteClearIcon\n                    {...clearIconProps}\n                    onClick={handlerAll(clearIconProps?.onClick, onClear)}\n                    {...formControlProps}\n                  />\n                ) : (\n                  <AutocompleteIcon {...iconProps} {...formControlProps} />\n                )}\n              </ui.div>\n\n              {!isEmpty ? (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n\n                    {children ?? computedChildren}\n                  </AutocompleteList>\n                </Portal>\n              ) : (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate && inputValue ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n                  </AutocompleteList>\n                </Portal>\n              )}\n            </ui.div>\n          </Popover>\n        </AutocompleteProvider>\n      </AutocompleteDescendantsContextProvider>\n    )\n  },\n)\n\ntype MultiAutocompleteFieldProps = HTMLUIProps<\"div\"> &\n  Pick<\n    MultiAutocompleteProps,\n    \"component\" | \"separator\" | \"keepPlaceholder\" | \"inputProps\"\n  >\n\nconst MultiAutocompleteField = forwardRef<MultiAutocompleteFieldProps, \"input\">(\n  (\n    {\n      className,\n      component,\n      separator = \",\",\n      keepPlaceholder,\n      h,\n      minH,\n      placeholder,\n      inputProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const { value, label, inputValue, onChange, isOpen, inputRef, styles } =\n      useAutocompleteContext()\n\n    const { getInputProps } = useAutocompleteInput()\n\n    const cloneChildren = useMemo(() => {\n      if (!label?.length) return null\n\n      if (component) {\n        return (label as string[]).map((label, index) => {\n          const onRemove: MouseEventHandler<HTMLElement> = (ev) => {\n            ev.stopPropagation()\n\n            onChange(value[index])\n\n            if (inputRef.current) inputRef.current.focus()\n          }\n\n          const el = component({\n            value: value[index],\n            label,\n            index,\n            onRemove,\n          })\n\n          const style: CSSProperties = {\n            marginBlockStart: \"0.125rem\",\n            marginBlockEnd: \"0.125rem\",\n            marginInlineEnd: \"0.25rem\",\n          }\n\n          return el\n            ? cloneElement(el as ReactElement, { key: index, style })\n            : null\n        })\n      } else {\n        return (label as string[]).map((value, index) => {\n          const isLast = label.length === index + 1\n\n          return (\n            <ui.span key={index} display=\"inline-block\" me=\"0.25rem\">\n              {value}\n              {!isLast || isOpen ? separator : null}\n            </ui.span>\n          )\n        })\n      }\n    }, [label, component, value, onChange, isOpen, inputRef, separator])\n\n    const css: CSSUIObject = {\n      pe: \"2rem\",\n      h,\n      minH,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      alignItems: \"center\",\n      ...styles.field,\n      cursor: \"text\",\n    }\n\n    return (\n      <PopoverTrigger>\n        <ui.div\n          className={cx(\"ui-multi-autocomplete__field\", className)}\n          __css={css}\n          py={label?.length && component ? \"0.125rem\" : undefined}\n          {...rest}\n        >\n          {cloneChildren}\n\n          <ui.input\n            aria-label=\"Input value\"\n            className=\"ui-multi-autocomplete__field__input\"\n            display=\"inline-block\"\n            flex=\"1\"\n            overflow=\"hidden\"\n            marginBlockStart=\"0.125rem\"\n            marginBlockEnd=\"0.125rem\"\n            placeholder={\n              !label || !label?.length || (keepPlaceholder && isOpen)\n                ? placeholder\n                : undefined\n            }\n            {...getInputProps({ ...inputProps, value: inputValue ?? \"\" }, ref)}\n          />\n        </ui.div>\n      </PopoverTrigger>\n    )\n  },\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}