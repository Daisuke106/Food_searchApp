{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { getColorModeValue, useColorModeValue } from \"@yamada-ui/core\";\nimport { getBreakpointValue, useBreakpointValue } from \"@yamada-ui/use-breakpoint\";\nimport { isObject, isArray } from \"@yamada-ui/utils\";\nvar useValue = value => {\n  if (isObject(value)) {\n    return useBreakpointValue(value);\n  } else if (isArray(value)) {\n    return useColorModeValue(...value);\n  } else {\n    return value;\n  }\n};\nvar getValue = value => (theme, colorMode, breakpoint) => {\n  if (isObject(value)) {\n    return getBreakpointValue(value)(theme, breakpoint);\n  } else if (isArray(value)) {\n    return getColorModeValue(...value)(colorMode);\n  } else {\n    return value;\n  }\n};\nexport { getValue, useValue };","map":{"version":3,"names":["getColorModeValue","useColorModeValue","getBreakpointValue","useBreakpointValue","isObject","isArray","useValue","value","getValue","theme","colorMode","breakpoint"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-value\\src\\index.ts"],"sourcesContent":["import type {\n  ResponsiveObject,\n  ColorModeArray,\n  StyledTheme,\n  ColorMode,\n  Theme,\n} from \"@yamada-ui/core\"\nimport { getColorModeValue, useColorModeValue } from \"@yamada-ui/core\"\nimport {\n  getBreakpointValue,\n  useBreakpointValue,\n} from \"@yamada-ui/use-breakpoint\"\nimport { isObject, isArray } from \"@yamada-ui/utils\"\n\n/**\n * `useValue` is a custom hook that combines `useBreakpointValue` and `useColorModeValue`.\n *\n * @see Docs https://yamada-ui.com/hooks/use-value\n */\nexport const useValue = <T extends any>(\n  value: T | ResponsiveObject<T> | ColorModeArray<T>,\n) => {\n  if (isObject<ResponsiveObject<T>>(value)) {\n    return useBreakpointValue(value)\n  } else if (isArray<ColorModeArray<T>>(value)) {\n    return useColorModeValue(...value)\n  } else {\n    return value\n  }\n}\n\nexport const getValue =\n  <T extends any>(value: T | ResponsiveObject<T> | ColorModeArray<T>) =>\n  (\n    theme: StyledTheme,\n    colorMode: ColorMode,\n    breakpoint: Theme[\"breakpoints\"],\n  ) => {\n    if (isObject<ResponsiveObject<T>>(value)) {\n      return getBreakpointValue(value)(theme, breakpoint)\n    } else if (isArray<ColorModeArray<T>>(value)) {\n      return getColorModeValue(...value)(colorMode)\n    } else {\n      return value\n    }\n  }\n"],"mappings":";;;AAOA,SAASA,iBAAA,EAAmBC,iBAAA,QAAyB;AACrD,SACEC,kBAAA,EACAC,kBAAA,QACK;AACP,SAASC,QAAA,EAAUC,OAAA,QAAe;AAO3B,IAAMC,QAAA,GACXC,KAAA,IACG;EACH,IAAIH,QAAA,CAA8BG,KAAK,GAAG;IACxC,OAAOJ,kBAAA,CAAmBI,KAAK;EACjC,WAAWF,OAAA,CAA2BE,KAAK,GAAG;IAC5C,OAAON,iBAAA,CAAkB,GAAGM,KAAK;EACnC,OAAO;IACL,OAAOA,KAAA;EACT;AACF;AAEO,IAAMC,QAAA,GACKD,KAAA,IAChB,CACEE,KAAA,EACAC,SAAA,EACAC,UAAA,KACG;EACH,IAAIP,QAAA,CAA8BG,KAAK,GAAG;IACxC,OAAOL,kBAAA,CAAmBK,KAAK,EAAEE,KAAA,EAAOE,UAAU;EACpD,WAAWN,OAAA,CAA2BE,KAAK,GAAG;IAC5C,OAAOP,iBAAA,CAAkB,GAAGO,KAAK,EAAEG,SAAS;EAC9C,OAAO;IACL,OAAOH,KAAA;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}