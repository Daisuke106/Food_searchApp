{"ast":null,"code":"\"use client\";\n\n// src/autocomplete-list.tsx\nimport { forwardRef as forwardRef8 } from \"@yamada-ui/core\";\nimport { PopoverContent } from \"@yamada-ui/popover\";\nimport { cx as cx8 } from \"@yamada-ui/utils\";\n\n// src/use-autocomplete.tsx\nimport { layoutStyleProperties } from \"@yamada-ui/core\";\nimport { formControlProperties, useFormControlProps } from \"@yamada-ui/form-control\";\nimport { popoverProperties } from \"@yamada-ui/popover\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { createDescendant } from \"@yamada-ui/use-descendant\";\nimport { useDisclosure } from \"@yamada-ui/use-disclosure\";\nimport { useOutsideClick } from \"@yamada-ui/use-outside-click\";\nimport { ariaAttr, createContext, dataAttr, funcAll, getEventRelatedTarget, handlerAll as handlerAll2, isArray, isContains, isHTMLElement, mergeRefs, omitObject, pickObject, splitObject, useUnmountEffect, useUpdateEffect, getValidChildren as getValidChildren2, isUndefined } from \"@yamada-ui/utils\";\nimport { useCallback, useEffect, useMemo as useMemo2, useRef as useRef2, useState } from \"react\";\n\n// src/autocomplete.tsx\nimport { ui as ui2, forwardRef as forwardRef2, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\";\nimport { Portal } from \"@yamada-ui/portal\";\nimport { cx as cx2 } from \"@yamada-ui/utils\";\n\n// src/autocomplete-icon.tsx\nimport { ui, forwardRef } from \"@yamada-ui/core\";\nimport { ChevronIcon, CloseIcon } from \"@yamada-ui/icon\";\nimport { useClickable } from \"@yamada-ui/use-clickable\";\nimport { cx, getValidChildren, isValidElement } from \"@yamada-ui/utils\";\nimport { cloneElement, useRef } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar AutocompleteIcon = forwardRef(({\n  className,\n  children,\n  __css,\n  ...rest\n}, ref) => {\n  const {\n    styles\n  } = useAutocompleteContext();\n  const css = {\n    position: \"absolute\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    cursor: \"pointer\",\n    ...styles.icon,\n    ...__css\n  };\n  const validChildren = getValidChildren(children);\n  const cloneChildren = validChildren.map(child => cloneElement(child, {\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      maxWidth: \"1em\",\n      maxHeight: \"1em\",\n      color: \"currentColor\"\n    }\n  }));\n  return /* @__PURE__ */jsx(ui.div, {\n    ref,\n    className: cx(\"ui-autocomplete__icon\", className),\n    __css: css,\n    ...rest,\n    children: isValidElement(children) ? cloneChildren : /* @__PURE__ */jsx(ChevronIcon, {})\n  });\n});\nvar AutocompleteClearIcon = ({\n  className,\n  children,\n  ...props\n}) => {\n  const ref = useRef(null);\n  const {\n    styles\n  } = useAutocompleteContext();\n  const isDisabled = props.disabled;\n  const rest = useClickable({\n    ref,\n    isDisabled,\n    ...props\n  });\n  return /* @__PURE__ */jsx(AutocompleteIcon, {\n    \"aria-label\": \"Clear value\",\n    className: cx(\"ui-autocomplete__icon--clear\", className),\n    __css: styles.clearIcon,\n    ...rest,\n    children: children != null ? children : /* @__PURE__ */jsx(CloseIcon, {\n      w: \"0.5em\",\n      h: \"0.5em\"\n    })\n  });\n};\nvar AutocompleteItemIcon = forwardRef(({\n  className,\n  ...rest\n}, ref) => {\n  const {\n    styles\n  } = useAutocompleteContext();\n  const css = {\n    flexShrink: 0,\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: \"0.85em\",\n    ...styles.itemIcon\n  };\n  return /* @__PURE__ */jsx(ui.span, {\n    ref,\n    className: cx(\"ui-autocomplete__item__icon\", className),\n    __css: css,\n    ...rest\n  });\n});\n\n// src/autocomplete.tsx\nimport { jsx as jsx2, jsxs } from \"react/jsx-runtime\";\nvar Autocomplete = forwardRef2((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Autocomplete\", props);\n  let {\n    className,\n    defaultValue = \"\",\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    containerProps,\n    listProps,\n    inputProps,\n    iconProps,\n    portalProps = {\n      isDisabled: true\n    },\n    children,\n    ...computedProps\n  } = omitThemeProps(mergedProps);\n  const {\n    descendants,\n    formControlProps,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    allowCreate,\n    isEmpty,\n    inputValue,\n    computedChildren,\n    ...rest\n  } = useAutocomplete({\n    ...computedProps,\n    defaultValue,\n    children\n  });\n  h != null ? h : h = height;\n  minH != null ? minH : minH = minHeight;\n  const css = {\n    w: \"100%\",\n    h: \"fit-content\",\n    color,\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx2(AutocompleteDescendantsContextProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx2(AutocompleteProvider, {\n      value: {\n        ...rest,\n        formControlProps,\n        inputValue,\n        allowCreate,\n        isEmpty,\n        styles\n      },\n      children: /* @__PURE__ */jsx2(Popover, {\n        ...getPopoverProps(),\n        children: /* @__PURE__ */jsxs(ui2.div, {\n          className: cx2(\"ui-autocomplete\", className),\n          __css: css,\n          ...getContainerProps(containerProps),\n          children: [/* @__PURE__ */jsxs(ui2.div, {\n            className: \"ui-autocomplete__inner\",\n            __css: {\n              position: \"relative\",\n              ...styles.inner\n            },\n            children: [/* @__PURE__ */jsx2(AutocompleteField, {\n              h,\n              minH,\n              inputProps,\n              ...getFieldProps({}, ref)\n            }), /* @__PURE__ */jsx2(AutocompleteIcon, {\n              ...iconProps,\n              ...formControlProps\n            })]\n          }), !isEmpty ? /* @__PURE__ */jsx2(Portal, {\n            ...portalProps,\n            children: /* @__PURE__ */jsxs(AutocompleteList, {\n              ...listProps,\n              children: [allowCreate ? /* @__PURE__ */jsx2(AutocompleteCreate, {}) : /* @__PURE__ */jsx2(AutocompleteEmpty, {}), children != null ? children : computedChildren]\n            })\n          }) : /* @__PURE__ */jsx2(Portal, {\n            ...portalProps,\n            children: /* @__PURE__ */jsx2(AutocompleteList, {\n              ...listProps,\n              children: allowCreate && inputValue ? /* @__PURE__ */jsx2(AutocompleteCreate, {}) : /* @__PURE__ */jsx2(AutocompleteEmpty, {})\n            })\n          })]\n        })\n      })\n    })\n  });\n});\nvar AutocompleteField = forwardRef2(({\n  className,\n  h,\n  minH,\n  placeholder,\n  inputProps,\n  ...rest\n}, ref) => {\n  const {\n    label,\n    inputValue,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getInputProps\n  } = useAutocompleteInput();\n  const css = {\n    pe: \"2rem\",\n    h,\n    minH,\n    display: \"flex\",\n    alignItems: \"center\",\n    ...styles.field,\n    cursor: \"text\"\n  };\n  return /* @__PURE__ */jsx2(PopoverTrigger, {\n    children: /* @__PURE__ */jsx2(ui2.div, {\n      className: cx2(\"ui-autocomplete__field\", className),\n      __css: css,\n      ...rest,\n      children: /* @__PURE__ */jsx2(ui2.input, {\n        className: \"ui-autocomplete__field__input\",\n        display: \"inline-block\",\n        w: \"100%\",\n        placeholder,\n        ...getInputProps({\n          ...inputProps,\n          value: inputValue || label || \"\"\n        }, ref)\n      })\n    })\n  });\n});\n\n// src/autocomplete-option-group.tsx\nimport { ui as ui3, forwardRef as forwardRef3 } from \"@yamada-ui/core\";\nimport { cx as cx3 } from \"@yamada-ui/utils\";\nimport { jsx as jsx3, jsxs as jsxs2 } from \"react/jsx-runtime\";\nvar AutocompleteOptionGroup = forwardRef3(({\n  className,\n  color,\n  h,\n  height,\n  minH,\n  minHeight,\n  children,\n  ...rest\n}, ref) => {\n  const {\n    styles\n  } = useAutocompleteContext();\n  const {\n    label,\n    getContainerProps,\n    getGroupProps\n  } = useAutocompleteOptionGroup(rest);\n  h != null ? h : h = height;\n  minH != null ? minH : minH = minHeight;\n  return /* @__PURE__ */jsxs2(ui3.li, {\n    className: cx3(\"ui-autocomplete__item\", \"ui-autocomplete__item--group\", className),\n    __css: {\n      w: \"100%\",\n      h: \"fit-content\",\n      color\n    },\n    ...getContainerProps(),\n    children: [/* @__PURE__ */jsx3(ui3.span, {\n      className: \"ui-autocomplete__item__group-label\",\n      __css: styles.groupLabel,\n      lineClamp: 1,\n      children: label\n    }), /* @__PURE__ */jsx3(ui3.ul, {\n      ...getGroupProps({}, ref),\n      className: \"ui-autocomplete__item__group\",\n      __css: {\n        h,\n        minH,\n        ...styles.group\n      },\n      children\n    })]\n  });\n});\n\n// src/autocomplete-option.tsx\nimport { ui as ui4, forwardRef as forwardRef4 } from \"@yamada-ui/core\";\nimport { cx as cx4 } from \"@yamada-ui/utils\";\nimport { jsx as jsx4, jsxs as jsxs3 } from \"react/jsx-runtime\";\nvar AutocompleteOption = forwardRef4(({\n  className,\n  icon,\n  ...rest\n}, ref) => {\n  const {\n    styles\n  } = useAutocompleteContext();\n  const {\n    isSelected,\n    customIcon,\n    children,\n    getOptionProps\n  } = useAutocompleteOption(rest);\n  icon != null ? icon : icon = customIcon;\n  const css = {\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    gap: \"0.75rem\",\n    ...styles.item\n  };\n  return /* @__PURE__ */jsxs3(ui4.li, {\n    className: cx4(\"ui-autocomplete__item\", className),\n    __css: css,\n    ...getOptionProps({}, ref),\n    children: [icon !== null ? /* @__PURE__ */jsx4(AutocompleteItemIcon, {\n      opacity: isSelected ? 1 : 0,\n      children: icon || /* @__PURE__ */jsx4(CheckIcon, {})\n    }) : null, /* @__PURE__ */jsx4(ui4.span, {\n      style: {\n        flex: 1\n      },\n      \"data-label\": true,\n      children\n    })]\n  });\n});\nvar CheckIcon = () => /* @__PURE__ */jsx4(\"svg\", {\n  viewBox: \"0 0 14 14\",\n  width: \"1em\",\n  height: \"1em\",\n  children: /* @__PURE__ */jsx4(\"polygon\", {\n    fill: \"currentColor\",\n    points: \"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n  })\n});\n\n// src/autocomplete-create.tsx\nimport { ui as ui5, forwardRef as forwardRef5 } from \"@yamada-ui/core\";\nimport { cx as cx5, runIfFunc } from \"@yamada-ui/utils\";\nimport { jsx as jsx5, jsxs as jsxs4 } from \"react/jsx-runtime\";\nvar AutocompleteCreate = forwardRef5(({\n  className,\n  icon,\n  children,\n  ...rest\n}, ref) => {\n  const {\n    inputValue,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getCreateProps\n  } = useAutocompleteCreate();\n  children != null ? children : children = inputValue;\n  const css = {\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    gap: \"0.75rem\",\n    ...styles.item\n  };\n  return /* @__PURE__ */jsxs4(ui5.li, {\n    className: cx5(\"ui-autocomplete__item--create\", className),\n    __css: css,\n    ...getCreateProps(rest, ref),\n    children: [icon !== null ? /* @__PURE__ */jsx5(AutocompleteItemIcon, {\n      children: icon || /* @__PURE__ */jsx5(PlusIcon, {})\n    }) : null, icon ? /* @__PURE__ */jsx5(ui5.span, {\n      style: {\n        pointerEvents: \"none\",\n        flex: 1\n      },\n      lineClamp: 1,\n      children: runIfFunc(children, inputValue)\n    }) : runIfFunc(children, inputValue)]\n  });\n});\nvar PlusIcon = () => /* @__PURE__ */jsx5(\"svg\", {\n  viewBox: \"0 0 45.402 45.402\",\n  width: \"1em\",\n  height: \"1em\",\n  children: /* @__PURE__ */jsx5(\"path\", {\n    fill: \"currentColor\",\n    d: \"M41.267,18.557H26.832V4.134C26.832,1.851,24.99,0,22.707,0c-2.283,0-4.124,1.851-4.124,4.135v14.432H4.141   c-2.283,0-4.139,1.851-4.138,4.135c-0.001,1.141,0.46,2.187,1.207,2.934c0.748,0.749,1.78,1.222,2.92,1.222h14.453V41.27   c0,1.142,0.453,2.176,1.201,2.922c0.748,0.748,1.777,1.211,2.919,1.211c2.282,0,4.129-1.851,4.129-4.133V26.857h14.435   c2.283,0,4.134-1.867,4.133-4.15C45.399,20.425,43.548,18.557,41.267,18.557z\"\n  })\n});\n\n// src/autocomplete-empty.tsx\nimport { ui as ui6, forwardRef as forwardRef6 } from \"@yamada-ui/core\";\nimport { cx as cx6 } from \"@yamada-ui/utils\";\nimport { jsx as jsx6, jsxs as jsxs5 } from \"react/jsx-runtime\";\nvar AutocompleteEmpty = forwardRef6(({\n  className,\n  icon,\n  children,\n  ...rest\n}, ref) => {\n  const {\n    emptyMessage,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getEmptyProps\n  } = useAutocompleteEmpty();\n  children != null ? children : children = emptyMessage;\n  const css = {\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"start\",\n    flex: \"0 0 auto\",\n    outline: 0,\n    gap: \"0.75rem\",\n    pointerEvents: \"none\",\n    ...styles.item\n  };\n  return /* @__PURE__ */jsxs5(ui6.li, {\n    className: cx6(\"ui-autocomplete__item--empty\", className),\n    __css: css,\n    ...getEmptyProps(rest, ref),\n    children: [icon !== null ? /* @__PURE__ */jsx6(AutocompleteItemIcon, {\n      children: icon || /* @__PURE__ */jsx6(MinusIcon, {})\n    }) : null, icon ? /* @__PURE__ */jsx6(ui6.span, {\n      style: {\n        pointerEvents: \"none\",\n        flex: 1\n      },\n      lineClamp: 1,\n      children\n    }) : children]\n  });\n});\nvar MinusIcon = () => /* @__PURE__ */jsx6(\"svg\", {\n  viewBox: \"0 0 448 512\",\n  width: \"1em\",\n  height: \"1em\",\n  children: /* @__PURE__ */jsx6(\"path\", {\n    fill: \"currentColor\",\n    d: \"M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z\"\n  })\n});\n\n// src/multi-autocomplete.tsx\nimport { ui as ui7, forwardRef as forwardRef7, useMultiComponentStyle as useMultiComponentStyle2, omitThemeProps as omitThemeProps2 } from \"@yamada-ui/core\";\nimport { Popover as Popover2, PopoverTrigger as PopoverTrigger2 } from \"@yamada-ui/popover\";\nimport { Portal as Portal2 } from \"@yamada-ui/portal\";\nimport { cx as cx7, handlerAll } from \"@yamada-ui/utils\";\nimport { cloneElement as cloneElement2, useMemo } from \"react\";\nimport { jsx as jsx7, jsxs as jsxs6 } from \"react/jsx-runtime\";\nvar MultiAutocomplete = forwardRef7((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle2(\"MultiAutocomplete\", props);\n  let {\n    className,\n    defaultValue = [],\n    component,\n    separator,\n    isClearable = true,\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    closeOnSelect = false,\n    keepPlaceholder = false,\n    containerProps,\n    listProps,\n    inputProps,\n    iconProps,\n    clearIconProps,\n    portalProps = {\n      isDisabled: true\n    },\n    children,\n    ...computedProps\n  } = omitThemeProps2(mergedProps);\n  const {\n    value,\n    descendants,\n    formControlProps,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    allowCreate,\n    isEmpty,\n    inputValue,\n    computedChildren,\n    onClear,\n    ...rest\n  } = useAutocomplete({\n    ...computedProps,\n    defaultValue,\n    closeOnSelect,\n    children\n  });\n  h != null ? h : h = height;\n  minH != null ? minH : minH = minHeight;\n  const css = {\n    w: \"100%\",\n    h: \"fit-content\",\n    color,\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx7(AutocompleteDescendantsContextProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx7(AutocompleteProvider, {\n      value: {\n        ...rest,\n        value,\n        formControlProps,\n        inputValue,\n        allowCreate,\n        isEmpty,\n        styles\n      },\n      children: /* @__PURE__ */jsx7(Popover2, {\n        ...getPopoverProps(),\n        children: /* @__PURE__ */jsxs6(ui7.div, {\n          className: cx7(\"ui-multi-autocomplete\", className),\n          __css: css,\n          ...getContainerProps(containerProps),\n          children: [/* @__PURE__ */jsxs6(ui7.div, {\n            className: \"ui-multi-autocomplete__inner\",\n            __css: {\n              position: \"relative\",\n              ...styles.inner\n            },\n            children: [/* @__PURE__ */jsx7(MultiAutocompleteField, {\n              component,\n              separator,\n              keepPlaceholder,\n              h,\n              minH,\n              inputProps,\n              ...getFieldProps({}, ref)\n            }), isClearable && value.length ? /* @__PURE__ */jsx7(AutocompleteClearIcon, {\n              ...clearIconProps,\n              onClick: handlerAll(clearIconProps == null ? void 0 : clearIconProps.onClick, onClear),\n              ...formControlProps\n            }) : /* @__PURE__ */jsx7(AutocompleteIcon, {\n              ...iconProps,\n              ...formControlProps\n            })]\n          }), !isEmpty ? /* @__PURE__ */jsx7(Portal2, {\n            ...portalProps,\n            children: /* @__PURE__ */jsxs6(AutocompleteList, {\n              ...listProps,\n              children: [allowCreate ? /* @__PURE__ */jsx7(AutocompleteCreate, {}) : /* @__PURE__ */jsx7(AutocompleteEmpty, {}), children != null ? children : computedChildren]\n            })\n          }) : /* @__PURE__ */jsx7(Portal2, {\n            ...portalProps,\n            children: /* @__PURE__ */jsx7(AutocompleteList, {\n              ...listProps,\n              children: allowCreate && inputValue ? /* @__PURE__ */jsx7(AutocompleteCreate, {}) : /* @__PURE__ */jsx7(AutocompleteEmpty, {})\n            })\n          })]\n        })\n      })\n    })\n  });\n});\nvar MultiAutocompleteField = forwardRef7(({\n  className,\n  component,\n  separator = \",\",\n  keepPlaceholder,\n  h,\n  minH,\n  placeholder,\n  inputProps,\n  ...rest\n}, ref) => {\n  const {\n    value,\n    label,\n    inputValue,\n    onChange,\n    isOpen,\n    inputRef,\n    styles\n  } = useAutocompleteContext();\n  const {\n    getInputProps\n  } = useAutocompleteInput();\n  const cloneChildren = useMemo(() => {\n    if (!(label == null ? void 0 : label.length)) return null;\n    if (component) {\n      return label.map((label2, index) => {\n        const onRemove = ev => {\n          ev.stopPropagation();\n          onChange(value[index]);\n          if (inputRef.current) inputRef.current.focus();\n        };\n        const el = component({\n          value: value[index],\n          label: label2,\n          index,\n          onRemove\n        });\n        const style = {\n          marginBlockStart: \"0.125rem\",\n          marginBlockEnd: \"0.125rem\",\n          marginInlineEnd: \"0.25rem\"\n        };\n        return el ? cloneElement2(el, {\n          key: index,\n          style\n        }) : null;\n      });\n    } else {\n      return label.map((value2, index) => {\n        const isLast = label.length === index + 1;\n        return /* @__PURE__ */jsxs6(ui7.span, {\n          display: \"inline-block\",\n          me: \"0.25rem\",\n          children: [value2, !isLast || isOpen ? separator : null]\n        }, index);\n      });\n    }\n  }, [label, component, value, onChange, isOpen, inputRef, separator]);\n  const css = {\n    pe: \"2rem\",\n    h,\n    minH,\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    ...styles.field,\n    cursor: \"text\"\n  };\n  return /* @__PURE__ */jsx7(PopoverTrigger2, {\n    children: /* @__PURE__ */jsxs6(ui7.div, {\n      className: cx7(\"ui-multi-autocomplete__field\", className),\n      __css: css,\n      py: (label == null ? void 0 : label.length) && component ? \"0.125rem\" : void 0,\n      ...rest,\n      children: [cloneChildren, /* @__PURE__ */jsx7(ui7.input, {\n        \"aria-label\": \"Input value\",\n        className: \"ui-multi-autocomplete__field__input\",\n        display: \"inline-block\",\n        flex: \"1\",\n        overflow: \"hidden\",\n        marginBlockStart: \"0.125rem\",\n        marginBlockEnd: \"0.125rem\",\n        placeholder: !label || !(label == null ? void 0 : label.length) || keepPlaceholder && isOpen ? placeholder : void 0,\n        ...getInputProps({\n          ...inputProps,\n          value: inputValue != null ? inputValue : \"\"\n        }, ref)\n      })]\n    })\n  });\n});\n\n// src/use-autocomplete.tsx\nimport { jsx as jsx8 } from \"react/jsx-runtime\";\nvar kanaMap = {\n  ｶﾞ: \"\\u30AC\",\n  ｷﾞ: \"\\u30AE\",\n  ｸﾞ: \"\\u30B0\",\n  ｹﾞ: \"\\u30B2\",\n  ｺﾞ: \"\\u30B4\",\n  ｻﾞ: \"\\u30B6\",\n  ｼﾞ: \"\\u30B8\",\n  ｽﾞ: \"\\u30BA\",\n  ｾﾞ: \"\\u30BC\",\n  ｿﾞ: \"\\u30BE\",\n  ﾀﾞ: \"\\u30C0\",\n  ﾁﾞ: \"\\u30C2\",\n  ﾂﾞ: \"\\u30C5\",\n  ﾃﾞ: \"\\u30C7\",\n  ﾄﾞ: \"\\u30C9\",\n  ﾊﾞ: \"\\u30D0\",\n  ﾋﾞ: \"\\u30D3\",\n  ﾌﾞ: \"\\u30D6\",\n  ﾍﾞ: \"\\u30D9\",\n  ﾎﾞ: \"\\u30DC\",\n  ﾊﾟ: \"\\u30D1\",\n  ﾋﾟ: \"\\u30D4\",\n  ﾌﾟ: \"\\u30D7\",\n  ﾍﾟ: \"\\u30DA\",\n  ﾎﾟ: \"\\u30DD\",\n  ｳﾞ: \"\\u30F4\",\n  ﾜﾞ: \"\\u30F7\",\n  ｦﾞ: \"\\u30FA\",\n  ｱ: \"\\u30A2\",\n  ｲ: \"\\u30A4\",\n  ｳ: \"\\u30A6\",\n  ｴ: \"\\u30A8\",\n  ｵ: \"\\u30AA\",\n  ｶ: \"\\u30AB\",\n  ｷ: \"\\u30AD\",\n  ｸ: \"\\u30AF\",\n  ｹ: \"\\u30B1\",\n  ｺ: \"\\u30B3\",\n  ｻ: \"\\u30B5\",\n  ｼ: \"\\u30B7\",\n  ｽ: \"\\u30B9\",\n  ｾ: \"\\u30BB\",\n  ｿ: \"\\u30BD\",\n  ﾀ: \"\\u30BF\",\n  ﾁ: \"\\u30C1\",\n  ﾂ: \"\\u30C4\",\n  ﾃ: \"\\u30C6\",\n  ﾄ: \"\\u30C8\",\n  ﾅ: \"\\u30CA\",\n  ﾆ: \"\\u30CB\",\n  ﾇ: \"\\u30CC\",\n  ﾈ: \"\\u30CD\",\n  ﾉ: \"\\u30CE\",\n  ﾊ: \"\\u30CF\",\n  ﾋ: \"\\u30D2\",\n  ﾌ: \"\\u30D5\",\n  ﾍ: \"\\u30D8\",\n  ﾎ: \"\\u30DB\",\n  ﾏ: \"\\u30DE\",\n  ﾐ: \"\\u30DF\",\n  ﾑ: \"\\u30E0\",\n  ﾒ: \"\\u30E1\",\n  ﾓ: \"\\u30E2\",\n  ﾔ: \"\\u30E4\",\n  ﾕ: \"\\u30E6\",\n  ﾖ: \"\\u30E8\",\n  ﾗ: \"\\u30E9\",\n  ﾘ: \"\\u30EA\",\n  ﾙ: \"\\u30EB\",\n  ﾚ: \"\\u30EC\",\n  ﾛ: \"\\u30ED\",\n  ﾜ: \"\\u30EF\",\n  ｦ: \"\\u30F2\",\n  ﾝ: \"\\u30F3\",\n  ｧ: \"\\u30A1\",\n  ｨ: \"\\u30A3\",\n  ｩ: \"\\u30A5\",\n  ｪ: \"\\u30A7\",\n  ｫ: \"\\u30A9\",\n  ｯ: \"\\u30C3\",\n  ｬ: \"\\u30E3\",\n  ｭ: \"\\u30E5\",\n  ｮ: \"\\u30E7\",\n  \"\\uFF61\": \"\\u3002\",\n  \"\\uFF64\": \"\\u3001\",\n  ｰ: \"\\u30FC\",\n  \"\\uFF62\": \"\\u300C\",\n  \"\\uFF63\": \"\\u300D\",\n  \"\\uFF65\": \"\\u30FB\"\n};\nvar defaultFormat = value => {\n  value = value.replace(/[！-～]/g, v => String.fromCharCode(v.charCodeAt(0) - 65248));\n  const reg = new RegExp(\"(\" + Object.keys(kanaMap).join(\"|\") + \")\", \"g\");\n  value = value.replace(reg, v => kanaMap[v]).replace(/ﾞ/g, \"\\u309B\").replace(/ﾟ/g, \"\\u309C\");\n  value = value.toUpperCase();\n  return value;\n};\nvar flattenItems = items => {\n  const filterItems = items2 => items2.map(item => {\n    var _a;\n    const {\n      isDisabled,\n      isFocusable\n    } = item;\n    const trulyDisabled = !!isDisabled && !isFocusable;\n    if (trulyDisabled) return;\n    if (\"items\" in item) {\n      return filterItems((_a = item.items) != null ? _a : []);\n    } else {\n      return item;\n    }\n  }).filter(Boolean);\n  return filterItems(items).flat(Infinity);\n};\nvar isTargetOption = target => {\n  var _a;\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"autocomplete-item\"));\n};\nvar {\n  DescendantsContextProvider: AutocompleteDescendantsContextProvider,\n  useDescendantsContext: useAutocompleteDescendantsContext,\n  useDescendants: useAutocompleteDescendants,\n  useDescendant: useAutocompleteDescendant\n} = createDescendant();\nvar [AutocompleteProvider, useAutocompleteContext] = createContext({\n  name: \"AutocompleteContext\",\n  errorMessage: `useAutocompleteContext returned is 'undefined'. Seems you forgot to wrap the components in \"<Autocomplete />\" or \"<MultiAutocomplete />\"`\n});\nvar useAutocomplete = ({\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  onCreate: onCreateProp,\n  onSearch: onSearchProp,\n  closeOnSelect = true,\n  omitSelectedValues = false,\n  maxSelectValues,\n  closeOnBlur = true,\n  closeOnEsc = true,\n  allowCreate = false,\n  allowFree = false,\n  insertPositionItem = \"first\",\n  emptyMessage = \"No results found\",\n  format = defaultFormat,\n  placement = \"bottom-start\",\n  duration = 0.2,\n  optionProps,\n  placeholder,\n  items,\n  children,\n  isOpen: isOpenProp,\n  defaultIsOpen,\n  onOpen: onOpenProp,\n  onClose: onCloseProp,\n  ...rest\n}) => {\n  rest = useFormControlProps(rest);\n  const {\n    id\n  } = rest;\n  const {\n    \"aria-readonly\": _ariaReadonly,\n    ...formControlProps\n  } = pickObject(rest, formControlProperties);\n  const [containerProps, inputProps] = splitObject(omitObject(rest, [...popoverProperties, \"onKeyDown\", \"onFocus\"]), layoutStyleProperties);\n  const descendants = useAutocompleteDescendants();\n  const containerRef = useRef2(null);\n  const listRef = useRef2(null);\n  const inputRef = useRef2(null);\n  const timeoutIds = useRef2( /* @__PURE__ */new Set([]));\n  const isComposition = useRef2(false);\n  const prevValue = useRef2(void 0);\n  const [resolvedItems, setResolvedItems] = useState(items);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp\n  });\n  const [label, setLabel] = useState(void 0);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isHit, setIsHit] = useState(true);\n  const {\n    isOpen,\n    onOpen: onInternalOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  const isFocused = focusedIndex > -1;\n  const isCreate = focusedIndex === -2 && allowCreate;\n  const isMulti = isArray(value);\n  const isEmptyValue = !isMulti ? !value : !value.length;\n  const [firstInsertPositionItem, secondInsertPositionItem] = useMemo2(() => {\n    if (isArray(insertPositionItem)) {\n      return insertPositionItem;\n    } else {\n      return [insertPositionItem, \"first\"];\n    }\n  }, [insertPositionItem]);\n  if (allowCreate && !isUndefined(children)) {\n    console.warn(`${!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"}: ${!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"} internally prefers 'children'. If 'allowCreate' is true, it will not be reflected correctly. If want to reflect, please set 'items' in props.`);\n  }\n  const selectedValues = descendants.enabledValues(({\n    node\n  }) => {\n    var _a;\n    return isMulti && value.includes((_a = node.dataset.value) != null ? _a : \"\");\n  });\n  const selectedIndexes = selectedValues.map(({\n    index\n  }) => index);\n  const enabledValues = descendants.enabledValues(({\n    node,\n    index\n  }) => \"target\" in node.dataset && !selectedIndexes.includes(index));\n  const validChildren = getValidChildren2(children);\n  const computedChildren = resolvedItems == null ? void 0 : resolvedItems.map((item, i) => {\n    if (\"value\" in item) {\n      const {\n        label: label2,\n        value: value2,\n        ...props\n      } = item;\n      return /* @__PURE__ */jsx8(AutocompleteOption, {\n        value: value2,\n        ...props,\n        children: label2\n      }, i);\n    } else if (\"items\" in item) {\n      const {\n        label: label2,\n        items: items2 = [],\n        ...props\n      } = item;\n      return /* @__PURE__ */jsx8(AutocompleteOptionGroup, {\n        label: label2,\n        ...props,\n        children: items2.map(({\n          label: label3,\n          value: value2,\n          ...props2\n        }, i2) => /* @__PURE__ */jsx8(AutocompleteOption, {\n          value: value2,\n          ...props2,\n          children: label3\n        }, i2))\n      }, i);\n    }\n  });\n  const isEmpty = !validChildren.length && !(computedChildren == null ? void 0 : computedChildren.length);\n  const onOpen = useCallback(() => {\n    if (formControlProps.disabled || formControlProps.readOnly) return;\n    if (!allowCreate && (isEmpty || isAllSelected)) return;\n    onInternalOpen();\n    if (inputRef.current) inputRef.current.focus();\n  }, [allowCreate, formControlProps, isAllSelected, isEmpty, onInternalOpen]);\n  const onFocusFirst = useCallback(() => {\n    const id2 = setTimeout(() => {\n      if (isEmpty || isAllSelected) return;\n      const first = descendants.enabledFirstValue(({\n        node\n      }) => \"target\" in node.dataset);\n      if (!first) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(first.index);\n      } else {\n        if (selectedIndexes.includes(first.index)) {\n          const enabledFirst = enabledValues[0];\n          setFocusedIndex(enabledFirst.index);\n        } else {\n          setFocusedIndex(first.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, isAllSelected, isEmpty, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusLast = useCallback(() => {\n    const id2 = setTimeout(() => {\n      if (isEmpty || isAllSelected) return;\n      const last = descendants.enabledLastValue(({\n        node\n      }) => \"target\" in node.dataset);\n      if (!last) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(last.index);\n      } else {\n        if (selectedIndexes.includes(last.index)) {\n          const enabledLast = enabledValues.reverse()[0];\n          setFocusedIndex(enabledLast.index);\n        } else {\n          setFocusedIndex(last.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, isAllSelected, isEmpty, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusSelected = useCallback(() => {\n    const id2 = setTimeout(() => {\n      const values = descendants.enabledValues();\n      const selected = values.find(({\n        node\n      }) => {\n        var _a;\n        return !isMulti ? node.dataset.value === value : value.includes((_a = node.dataset.value) != null ? _a : \"\");\n      });\n      if (selected) setFocusedIndex(selected.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, isMulti, value]);\n  const onFocusNext = useCallback((index = focusedIndex) => {\n    const id2 = setTimeout(() => {\n      var _a;\n      const next = descendants.enabledNextValue(index, ({\n        node\n      }) => \"target\" in node.dataset);\n      if (!next) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(next.index);\n      } else {\n        if (selectedIndexes.includes(next.index)) {\n          const enabledNext = (_a = enabledValues.find(({\n            index: index2\n          }) => next.index < index2)) != null ? _a : enabledValues[0];\n          setFocusedIndex(enabledNext.index);\n        } else {\n          setFocusedIndex(next.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, focusedIndex, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusPrev = useCallback((index = focusedIndex) => {\n    const id2 = setTimeout(() => {\n      var _a;\n      const prev = descendants.enabledPrevValue(index, ({\n        node\n      }) => \"target\" in node.dataset);\n      if (!prev) return;\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(prev.index);\n      } else {\n        if (selectedIndexes.includes(prev.index)) {\n          const enabledPrev = (_a = enabledValues.reverse().find(({\n            index: index2\n          }) => index2 < prev.index)) != null ? _a : enabledValues[0];\n          setFocusedIndex(enabledPrev.index);\n        } else {\n          setFocusedIndex(prev.index);\n        }\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, enabledValues, focusedIndex, isMulti, omitSelectedValues, selectedIndexes]);\n  const onFocusFirstOrSelected = isEmptyValue || omitSelectedValues ? onFocusFirst : onFocusSelected;\n  const onFocusLastOrSelected = isEmptyValue || omitSelectedValues ? onFocusLast : onFocusSelected;\n  const pickOptions = useCallback(value2 => {\n    const values = descendants.values();\n    let isHit2 = false;\n    let isFocused2 = false;\n    values.forEach(({\n      node,\n      index\n    }) => {\n      var _a;\n      if (format((_a = node.textContent) != null ? _a : \"\").includes(value2)) {\n        isHit2 = true;\n        const isDisabled = (\"disabled\" in node.dataset);\n        node.dataset.target = \"\";\n        if (!isFocused2 && !isDisabled) {\n          isFocused2 = true;\n          setFocusedIndex(index);\n        }\n      } else {\n        delete node.dataset.target;\n      }\n    });\n    setIsHit(isHit2);\n  }, [descendants, format]);\n  const rebirthOptions = useCallback((runFocus = true) => {\n    const values = descendants.values();\n    values.forEach(({\n      node\n    }) => {\n      node.dataset.target = \"\";\n    });\n    if (runFocus) onFocusFirst();\n    setIsHit(true);\n  }, [descendants, onFocusFirst]);\n  const getSelectedValues = useCallback(newValues => {\n    const enabledValues2 = descendants.enabledValues();\n    const resolvedValues = isArray(newValues) ? newValues : [newValues];\n    const selectedValues2 = resolvedValues.map(value2 => {\n      var _a, _b;\n      const {\n        node\n      } = (_a = enabledValues2.find(({\n        node: node2\n      }) => node2.dataset.value === value2)) != null ? _a : {};\n      if (node) {\n        const el = Array.from(node.children).find(child => child.getAttribute(\"data-label\") !== null);\n        return (_b = el == null ? void 0 : el.textContent) != null ? _b : void 0;\n      } else {\n        return allowFree ? value2 : void 0;\n      }\n    }).filter(Boolean);\n    return selectedValues2;\n  }, [allowFree, descendants]);\n  const onChangeLabel = useCallback((newValue, runOmit = true) => {\n    const selectedValues2 = getSelectedValues(newValue);\n    setLabel(prev => {\n      if (!isMulti) {\n        return selectedValues2[0];\n      } else {\n        selectedValues2.forEach(selectedValue => {\n          const isSelected = isArray(prev) && prev.includes(selectedValue != null ? selectedValue : \"\");\n          if (!isSelected) {\n            prev = [...(isArray(prev) ? prev : []), selectedValue];\n          } else if (runOmit) {\n            prev = isArray(prev) ? prev.filter(value2 => value2 !== selectedValue) : void 0;\n          }\n        });\n        return prev;\n      }\n    });\n  }, [getSelectedValues, isMulti]);\n  const onChange = useCallback((newValue, runRebirth = true) => {\n    setValue(prev => {\n      let next;\n      if (!isArray(prev)) {\n        next = newValue;\n      } else {\n        const isSelected = prev.includes(newValue);\n        if (!isSelected) {\n          next = [...prev, newValue];\n        } else {\n          next = prev.filter(value2 => value2 !== newValue);\n        }\n      }\n      prevValue.current = next;\n      return next;\n    });\n    const isHit2 = descendants.values().filter(({\n      node\n    }) => {\n      var _a;\n      return format((_a = node.textContent) != null ? _a : \"\").includes(newValue);\n    }).length > 0;\n    onChangeLabel(newValue);\n    if (allowFree || isHit2) setInputValue(\"\");\n    if (isMulti && runRebirth) rebirthOptions(false);\n  }, [allowFree, isMulti, onChangeLabel, rebirthOptions, setValue, descendants, format]);\n  const onSelect = useCallback(() => {\n    var _a, _b;\n    let enabledValue = descendants.value(focusedIndex);\n    if (\"disabled\" in ((_a = enabledValue == null ? void 0 : enabledValue.node.dataset) != null ? _a : {})) enabledValue = void 0;\n    if (!enabledValue) return;\n    const value2 = (_b = enabledValue.node.dataset.value) != null ? _b : \"\";\n    onChange(value2);\n    if (closeOnSelect) onClose();\n    if (omitSelectedValues) onFocusNext();\n  }, [closeOnSelect, descendants, focusedIndex, omitSelectedValues, onChange, onClose, onFocusNext]);\n  const onSearch = useCallback(ev => {\n    if (!isOpen) onOpen();\n    onSearchProp == null ? void 0 : onSearchProp(ev);\n    const value2 = ev.target.value;\n    const computedValue = format(value2);\n    if (computedValue) {\n      pickOptions(computedValue);\n    } else {\n      rebirthOptions();\n    }\n    setInputValue(value2);\n  }, [isOpen, onOpen, format, onSearchProp, pickOptions, rebirthOptions]);\n  const onCompositionStart = useCallback(() => {\n    isComposition.current = true;\n  }, []);\n  const onCompositionEnd = useCallback(() => {\n    isComposition.current = false;\n  }, []);\n  const onCreate = useCallback(() => {\n    var _a, _b;\n    if (!listRef.current) return;\n    const newItem = {\n      label: inputValue,\n      value: inputValue\n    };\n    let newItems = [];\n    if (resolvedItems) newItems = resolvedItems;\n    if (firstInsertPositionItem === \"first\") {\n      newItems = [newItem, ...newItems];\n    } else if (firstInsertPositionItem === \"last\") {\n      newItems = [...newItems, newItem];\n    } else {\n      const i = newItems.findIndex(({\n        label: label2\n      }) => label2 === firstInsertPositionItem);\n      const targetItem = newItems[i];\n      if (i !== -1 && \"items\" in targetItem) {\n        if (secondInsertPositionItem === \"first\") {\n          targetItem.items = [newItem, ...((_a = targetItem.items) != null ? _a : [])];\n        } else {\n          targetItem.items = [...((_b = targetItem.items) != null ? _b : []), newItem];\n        }\n        newItems[i] = targetItem;\n      } else {\n        console.warn(`${!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"}: '${firstInsertPositionItem}' specified in insertPositionItem does not exist in the option group.`);\n      }\n    }\n    setResolvedItems(newItems);\n    onChange(inputValue);\n    rebirthOptions(false);\n    const index = flattenItems(newItems).findIndex(({\n      value: value2\n    }) => value2 === inputValue);\n    setFocusedIndex(index);\n    onCreateProp == null ? void 0 : onCreateProp(newItem, newItems);\n  }, [inputValue, resolvedItems, firstInsertPositionItem, onChange, rebirthOptions, onCreateProp, secondInsertPositionItem, isMulti]);\n  const onClick = useCallback(() => {\n    if (isOpen) {\n      if (inputRef.current) inputRef.current.focus();\n    } else {\n      onOpen();\n      onFocusFirstOrSelected();\n    }\n  }, [isOpen, onFocusFirstOrSelected, onOpen]);\n  const onFocus = useCallback(() => {\n    if (isOpen) return;\n    onOpen();\n    onFocusFirstOrSelected();\n  }, [isOpen, onFocusFirstOrSelected, onOpen]);\n  const onBlur = useCallback(ev => {\n    const relatedTarget = getEventRelatedTarget(ev);\n    if (isContains(containerRef.current, relatedTarget)) return;\n    if (!closeOnBlur && isHit) return;\n    if (allowFree && !!inputValue) onChange(inputValue, false);\n    setInputValue(\"\");\n    if (isOpen) onClose();\n  }, [closeOnBlur, isHit, isOpen, inputValue, allowFree, onClose, onChange]);\n  const onDelete = useCallback(() => {\n    if (!isMulti) {\n      onChange(\"\");\n    } else {\n      onChange(value[value.length - 1]);\n    }\n    if (!isOpen) onFocus();\n  }, [isMulti, isOpen, onChange, onFocus, value]);\n  const onClear = useCallback(ev => {\n    ev.stopPropagation();\n    prevValue.current = [];\n    setValue([]);\n    setLabel(void 0);\n    setInputValue(\"\");\n    rebirthOptions();\n    if (isOpen && inputRef.current) inputRef.current.focus();\n  }, [isOpen, setLabel, setInputValue, setValue, rebirthOptions]);\n  const onKeyDown = useCallback(ev => {\n    if (ev.key === \" \") ev.key = ev.code;\n    if (formControlProps.disabled || formControlProps.readOnly) return;\n    if (isComposition.current) return;\n    const enabledDelete = label === inputValue || !inputValue.length;\n    const actions = {\n      ArrowDown: isFocused ? () => onFocusNext() : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : void 0,\n      ArrowUp: isFocused ? () => onFocusPrev() : !isOpen ? funcAll(onOpen, onFocusLastOrSelected) : void 0,\n      Space: isCreate ? onCreate : isFocused ? onSelect : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : void 0,\n      Enter: isCreate ? onCreate : isFocused ? onSelect : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : allowFree && isMulti ? () => {\n        if (inputValue) onChange(inputValue);\n        setFocusedIndex(0);\n      } : void 0,\n      Home: isOpen ? onFocusFirst : void 0,\n      End: isOpen ? onFocusLast : void 0,\n      Escape: closeOnEsc ? onClose : void 0,\n      Backspace: !isEmptyValue && enabledDelete ? onDelete : void 0\n    };\n    const action = actions[ev.key];\n    if (!action) return;\n    ev.preventDefault();\n    ev.stopPropagation();\n    action(ev);\n  }, [allowFree, formControlProps, label, inputValue, onOpen, isFocused, isMulti, onFocusFirstOrSelected, onFocusNext, onFocusLastOrSelected, onFocusPrev, isCreate, onCreate, onSelect, isOpen, onFocusFirst, onFocusLast, closeOnEsc, onClose, isEmptyValue, onDelete, onChange]);\n  useEffect(() => {\n    if (!isMulti) return;\n    if (!omitSelectedValues && isUndefined(maxSelectValues)) return;\n    const isAll = value.length > 0 && value.length === descendants.count();\n    const isMax = value.length === maxSelectValues;\n    if (isAll || isMax) {\n      onClose();\n      setIsAllSelected(true);\n    } else {\n      setIsAllSelected(false);\n    }\n  }, [omitSelectedValues, value, descendants, isMulti, onClose, maxSelectValues]);\n  useEffect(() => {\n    var _a;\n    if (isMulti) {\n      if (JSON.stringify((_a = prevValue.current) != null ? _a : []) === JSON.stringify(value != null ? value : [])) return;\n      const label2 = getSelectedValues(value);\n      setLabel(label2);\n    } else {\n      if (prevValue.current === value) return;\n      onChangeLabel(value, false);\n    }\n  }, [isMulti, value, onChangeLabel, getSelectedValues]);\n  useUpdateEffect(() => {\n    if (isOpen || allowFree) return;\n    setFocusedIndex(-1);\n    setInputValue(\"\");\n  }, [isOpen]);\n  useUpdateEffect(() => {\n    if (!isHit) setFocusedIndex(-2);\n  }, [isHit]);\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach(id2 => clearTimeout(id2));\n    timeoutIds.current.clear();\n  });\n  useOutsideClick({\n    ref: containerRef,\n    handler: onClose,\n    enabled: isOpen && (closeOnBlur || !isHit)\n  });\n  const getPopoverProps = useCallback(props => ({\n    matchWidth: true,\n    ...rest,\n    ...props,\n    isOpen,\n    onOpen,\n    onClose,\n    placement,\n    duration,\n    trigger: \"never\",\n    closeOnButton: false,\n    closeOnBlur\n  }), [duration, closeOnBlur, isOpen, onClose, onOpen, placement, rest]);\n  const getContainerProps = useCallback((props = {}, ref = null) => ({\n    ref: mergeRefs(containerRef, ref),\n    ...containerProps,\n    ...props,\n    ...formControlProps,\n    onClick: handlerAll2(props.onClick, rest.onClick, onClick),\n    onBlur: handlerAll2(props.onBlur, rest.onBlur, onBlur)\n  }), [containerProps, formControlProps, onBlur, onClick, rest]);\n  const getFieldProps = useCallback((props = {}, ref = null) => ({\n    ref,\n    tabIndex: -1,\n    ...props,\n    ...formControlProps,\n    placeholder,\n    \"data-active\": dataAttr(isOpen),\n    \"aria-expanded\": dataAttr(isOpen),\n    onFocus: handlerAll2(props.onFocus, rest.onFocus, onFocus),\n    onKeyDown: handlerAll2(props.onKeyDown, rest.onKeyDown, onKeyDown)\n  }), [formControlProps, placeholder, isOpen, rest, onFocus, onKeyDown]);\n  return {\n    id,\n    descendants,\n    value,\n    label,\n    inputValue,\n    isHit,\n    isEmpty,\n    computedChildren,\n    focusedIndex,\n    omitSelectedValues,\n    closeOnSelect,\n    allowCreate,\n    allowFree,\n    emptyMessage,\n    isOpen,\n    isAllSelected,\n    listRef,\n    inputRef,\n    optionProps,\n    formControlProps,\n    setFocusedIndex,\n    onChangeLabel,\n    onChange,\n    onSearch,\n    onCreate,\n    onClear,\n    onCompositionStart,\n    onCompositionEnd,\n    pickOptions,\n    rebirthOptions,\n    onOpen,\n    onClose,\n    onFocusFirst,\n    onFocusLast,\n    onFocusSelected,\n    onFocusNext,\n    onFocusPrev,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    inputProps\n  };\n};\nvar useAutocompleteInput = () => {\n  const {\n    id,\n    inputRef,\n    onSearch,\n    onCompositionStart,\n    onCompositionEnd,\n    isAllSelected,\n    formControlProps,\n    inputProps,\n    isOpen\n  } = useAutocompleteContext();\n  useUpdateEffect(() => {\n    if (isAllSelected && inputRef.current) inputRef.current.blur();\n  }, [isAllSelected]);\n  const getInputProps = useCallback((props = {}, ref = null) => ({\n    ref: mergeRefs(inputRef, ref),\n    ...formControlProps,\n    role: \"combobox\",\n    \"aria-haspopup\": \"listbox\",\n    \"aria-autocomplete\": \"list\",\n    \"aria-expanded\": isOpen,\n    autoCapitalize: \"none\",\n    autoComplete: \"off\",\n    spellCheck: \"false\",\n    ...inputProps,\n    ...props,\n    id,\n    cursor: formControlProps.readOnly ? \"default\" : \"text\",\n    pointerEvents: formControlProps.disabled || isAllSelected ? \"none\" : \"auto\",\n    tabIndex: isAllSelected ? -1 : 0,\n    onChange: handlerAll2(props.onChange, onSearch),\n    onCompositionStart: handlerAll2(props.onCompositionStart, inputProps.onCompositionStart, onCompositionStart),\n    onCompositionEnd: handlerAll2(props.onCompositionEnd, inputProps.onCompositionEnd, onCompositionEnd)\n  }), [isOpen, inputProps, inputRef, formControlProps, id, isAllSelected, onSearch, onCompositionStart, onCompositionEnd]);\n  return {\n    getInputProps\n  };\n};\nvar useAutocompleteList = () => {\n  const {\n    focusedIndex,\n    isOpen,\n    listRef,\n    rebirthOptions\n  } = useAutocompleteContext();\n  const descendants = useAutocompleteDescendantsContext();\n  const beforeFocusedIndex = useRef2(-1);\n  const selectedValue = descendants.value(focusedIndex);\n  const onAnimationComplete = useCallback(() => {\n    if (!isOpen) rebirthOptions(false);\n  }, [isOpen, rebirthOptions]);\n  useEffect(() => {\n    if (!listRef.current || !selectedValue) return;\n    if (beforeFocusedIndex.current === selectedValue.index) return;\n    const parent = listRef.current;\n    const child = selectedValue.node;\n    const parentHeight = parent.clientHeight;\n    const viewTop = parent.scrollTop;\n    const viewBottom = viewTop + parentHeight;\n    const childHeight = child.clientHeight;\n    const childTop = child.offsetTop;\n    const childBottom = childTop + childHeight;\n    const isInView = viewTop <= childTop && childBottom <= viewBottom;\n    const isScrollBottom = beforeFocusedIndex.current < selectedValue.index;\n    if (!isInView) {\n      if (childBottom <= parentHeight) {\n        listRef.current.scrollTo({\n          top: 0\n        });\n      } else {\n        if (!isScrollBottom) {\n          listRef.current.scrollTo({\n            top: childTop + 1\n          });\n        } else {\n          listRef.current.scrollTo({\n            top: childBottom - parentHeight\n          });\n        }\n      }\n    }\n    beforeFocusedIndex.current = selectedValue.index;\n  }, [listRef, selectedValue]);\n  useUpdateEffect(() => {\n    if (!isOpen) beforeFocusedIndex.current = -1;\n  }, [isOpen]);\n  const getListProps = useCallback((props = {}, ref = null) => ({\n    as: \"ul\",\n    ref: mergeRefs(listRef, ref),\n    role: \"select\",\n    tabIndex: -1,\n    ...props,\n    onAnimationComplete: handlerAll2(props.onAnimationComplete, onAnimationComplete)\n  }), [listRef, onAnimationComplete]);\n  return {\n    getListProps\n  };\n};\nvar useAutocompleteOptionGroup = ({\n  label,\n  ...rest\n}) => {\n  const {\n    value,\n    omitSelectedValues\n  } = useAutocompleteContext();\n  const isMulti = isArray(value);\n  const descendants = useAutocompleteDescendantsContext();\n  const values = descendants.values();\n  const selectedValues = isMulti && omitSelectedValues ? descendants.values(({\n    node\n  }) => {\n    var _a;\n    return value.includes((_a = node.dataset.value) != null ? _a : \"\");\n  }) : [];\n  const selectedIndexes = selectedValues.map(({\n    index\n  }) => index);\n  const childValues = values.filter(({\n    node,\n    index\n  }) => {\n    var _a;\n    return ((_a = node.parentElement) == null ? void 0 : _a.dataset.label) === label && !selectedIndexes.includes(index) && \"target\" in node.dataset;\n  });\n  const isEmpty = !childValues.length;\n  const computedRest = splitObject(rest, layoutStyleProperties);\n  const getContainerProps = useCallback((props = {}, ref = null) => {\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref,\n      ...props,\n      ...computedRest[0],\n      style: isEmpty ? style : void 0,\n      \"data-label\": label,\n      role: \"autocomplete-group-container\"\n    };\n  }, [computedRest, isEmpty, label]);\n  const getGroupProps = useCallback((props = {}, ref = null) => ({\n    ref,\n    ...props,\n    ...computedRest[1],\n    \"data-label\": label,\n    role: \"autocomplete-group\"\n  }), [computedRest, label]);\n  return {\n    label,\n    getContainerProps,\n    getGroupProps\n  };\n};\nvar useAutocompleteOption = props => {\n  var _a, _b;\n  const {\n    value,\n    omitSelectedValues,\n    onChange,\n    onChangeLabel,\n    focusedIndex,\n    setFocusedIndex,\n    onClose,\n    closeOnSelect: generalCloseOnSelect,\n    optionProps,\n    inputRef,\n    onFocusNext\n  } = useAutocompleteContext();\n  let {\n    icon: customIcon,\n    isDisabled,\n    isFocusable,\n    closeOnSelect: customCloseOnSelect,\n    children,\n    value: optionValue,\n    ...computedProps\n  } = {\n    ...optionProps,\n    ...props\n  };\n  const trulyDisabled = !!isDisabled && !isFocusable;\n  const itemRef = useRef2(null);\n  const {\n    index,\n    register,\n    descendants\n  } = useAutocompleteDescendant({\n    disabled: trulyDisabled\n  });\n  const values = descendants.values();\n  const frontValues = values.slice(0, index);\n  const isMulti = isArray(value);\n  const isDuplicated = !isMulti ? frontValues.some(({\n    node\n  }) => node.dataset.value === (optionValue != null ? optionValue : \"\")) : false;\n  const isSelected = !isDuplicated && (!isMulti ? (optionValue != null ? optionValue : \"\") === value : value.includes(optionValue != null ? optionValue : \"\"));\n  const isTarget = (\"target\" in ((_b = (_a = itemRef.current) == null ? void 0 : _a.dataset) != null ? _b : {}));\n  const isFocused = index === focusedIndex;\n  const onClick = useCallback(ev => {\n    ev.stopPropagation();\n    if (isDisabled) {\n      if (inputRef.current) inputRef.current.focus();\n      return;\n    }\n    if (!isTargetOption(ev.currentTarget)) {\n      if (inputRef.current) inputRef.current.focus();\n      return;\n    }\n    setFocusedIndex(index);\n    onChange(optionValue != null ? optionValue : \"\");\n    if (inputRef.current) inputRef.current.focus();\n    if (customCloseOnSelect != null ? customCloseOnSelect : generalCloseOnSelect) onClose();\n    if (omitSelectedValues) onFocusNext(index);\n  }, [onFocusNext, omitSelectedValues, isDisabled, optionValue, setFocusedIndex, index, onChange, customCloseOnSelect, generalCloseOnSelect, onClose, inputRef]);\n  useUpdateEffect(() => {\n    if (isSelected) onChangeLabel(optionValue != null ? optionValue : \"\", false);\n  }, [optionValue]);\n  const getOptionProps = useCallback((props2 = {}, ref = null) => {\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref: mergeRefs(itemRef, ref, register),\n      ...computedProps,\n      ...props2,\n      role: \"autocomplete-item\",\n      tabIndex: -1,\n      style: !isTarget || omitSelectedValues && isSelected ? style : void 0,\n      \"data-target\": dataAttr(true),\n      \"data-value\": optionValue != null ? optionValue : \"\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"aria-checked\": ariaAttr(isSelected),\n      \"aria-disabled\": ariaAttr(isDisabled),\n      onClick: handlerAll2(computedProps.onClick, props2.onClick, onClick)\n    };\n  }, [optionValue, computedProps, isDisabled, isFocused, isSelected, isTarget, omitSelectedValues, onClick, register]);\n  return {\n    isSelected,\n    isFocused,\n    customIcon,\n    children,\n    getOptionProps\n  };\n};\nvar useAutocompleteCreate = () => {\n  const {\n    isHit,\n    onCreate\n  } = useAutocompleteContext();\n  const getCreateProps = useCallback((props = {}, ref = null) => {\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref,\n      ...props,\n      tabIndex: -1,\n      style: isHit ? style : void 0,\n      \"data-focus\": dataAttr(!isHit),\n      onClick: handlerAll2(props.onClick, onCreate)\n    };\n  }, [isHit, onCreate]);\n  return {\n    getCreateProps\n  };\n};\nvar useAutocompleteEmpty = () => {\n  const {\n    isHit,\n    isEmpty\n  } = useAutocompleteContext();\n  const getEmptyProps = useCallback((props = {}, ref = null) => {\n    const style = {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    };\n    return {\n      ref,\n      ...props,\n      tabIndex: -1,\n      style: isHit && !isEmpty ? style : void 0\n    };\n  }, [isHit, isEmpty]);\n  return {\n    getEmptyProps\n  };\n};\n\n// src/autocomplete-list.tsx\nimport { jsx as jsx9 } from \"react/jsx-runtime\";\nvar AutocompleteList = forwardRef8(({\n  className,\n  w,\n  width,\n  minW,\n  minWidth,\n  ...rest\n}, ref) => {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  const {\n    styles\n  } = useAutocompleteContext();\n  const {\n    getListProps\n  } = useAutocompleteList();\n  w = (_d = w != null ? w : width) != null ? _d : (_c = (_a = styles.list) == null ? void 0 : _a.w) != null ? _c : (_b = styles.list) == null ? void 0 : _b.width;\n  minW = (_h = minW != null ? minW : minWidth) != null ? _h : (_g = (_e = styles.list) == null ? void 0 : _e.minW) != null ? _g : (_f = styles.list) == null ? void 0 : _f.minWidth;\n  const css = {\n    ...styles.list\n  };\n  return /* @__PURE__ */jsx9(PopoverContent, {\n    className: cx8(\"ui-autocomplete__list\", className),\n    w,\n    minW,\n    __css: css,\n    ...getListProps(rest, ref)\n  });\n});\nexport { AutocompleteList, Autocomplete, AutocompleteOptionGroup, AutocompleteOption, AutocompleteEmpty, MultiAutocomplete, AutocompleteDescendantsContextProvider, useAutocompleteDescendantsContext, useAutocompleteDescendants, useAutocompleteDescendant, AutocompleteProvider, useAutocompleteContext, useAutocomplete, useAutocompleteInput, useAutocompleteList, useAutocompleteOptionGroup, useAutocompleteOption, useAutocompleteCreate, useAutocompleteEmpty, AutocompleteIcon, AutocompleteClearIcon, AutocompleteItemIcon, AutocompleteCreate };","map":{"version":3,"names":["forwardRef","forwardRef8","PopoverContent","cx","cx8","layoutStyleProperties","formControlProperties","useFormControlProps","popoverProperties","useControllableState","createDescendant","useDisclosure","useOutsideClick","ariaAttr","createContext","dataAttr","funcAll","getEventRelatedTarget","handlerAll","handlerAll2","isArray","isContains","isHTMLElement","mergeRefs","omitObject","pickObject","splitObject","useUnmountEffect","useUpdateEffect","getValidChildren","getValidChildren2","isUndefined","useCallback","useEffect","useMemo","useMemo2","useRef","useRef2","useState","ui","ui2","forwardRef2","useMultiComponentStyle","omitThemeProps","Popover","PopoverTrigger","Portal","cx2","ChevronIcon","CloseIcon","useClickable","isValidElement","cloneElement","jsx","AutocompleteIcon","className","children","__css","rest","ref","styles","useAutocompleteContext","css","position","top","transform","display","alignItems","justifyContent","pointerEvents","cursor","icon","validChildren","cloneChildren","map","child","focusable","style","maxWidth","maxHeight","color","div","AutocompleteClearIcon","props","isDisabled","disabled","clearIcon","w","h","AutocompleteItemIcon","flexShrink","fontSize","itemIcon","span","jsx2","jsxs","Autocomplete","mergedProps","defaultValue","height","minH","minHeight","containerProps","listProps","inputProps","iconProps","portalProps","computedProps","descendants","formControlProps","getPopoverProps","getContainerProps","getFieldProps","allowCreate","isEmpty","inputValue","computedChildren","useAutocomplete","container","AutocompleteDescendantsContextProvider","value","AutocompleteProvider","inner","AutocompleteField","AutocompleteList","AutocompleteCreate","AutocompleteEmpty","placeholder","label","getInputProps","useAutocompleteInput","pe","field","input","ui3","forwardRef3","cx3","jsx3","jsxs2","AutocompleteOptionGroup","getGroupProps","useAutocompleteOptionGroup","li","groupLabel","lineClamp","ul","group","ui4","forwardRef4","cx4","jsx4","jsxs3","AutocompleteOption","isSelected","customIcon","getOptionProps","useAutocompleteOption","textDecoration","userSelect","width","textAlign","flex","outline","gap","item","opacity","CheckIcon","viewBox","fill","points","ui5","forwardRef5","cx5","runIfFunc","jsx5","jsxs4","getCreateProps","useAutocompleteCreate","PlusIcon","d","ui6","forwardRef6","cx6","jsx6","jsxs5","emptyMessage","getEmptyProps","useAutocompleteEmpty","MinusIcon","ui7","forwardRef7","useMultiComponentStyle2","omitThemeProps2","Popover2","PopoverTrigger2","Portal2","cx7","cloneElement2","jsx7","jsxs6","MultiAutocomplete","component","separator","isClearable","closeOnSelect","keepPlaceholder","clearIconProps","onClear","MultiAutocompleteField","length","onClick","onChange","isOpen","inputRef","label2","index","onRemove","ev","stopPropagation","current","focus","el","marginBlockStart","marginBlockEnd","marginInlineEnd","key","value2","isLast","me","flexWrap","py","overflow","jsx8","kanaMap","ｶﾞ","ｷﾞ","ｸﾞ","ｹﾞ","ｺﾞ","ｻﾞ","ｼﾞ","ｽﾞ","ｾﾞ","ｿﾞ","ﾀﾞ","ﾁﾞ","ﾂﾞ","ﾃﾞ","ﾄﾞ","ﾊﾞ","ﾋﾞ","ﾌﾞ","ﾍﾞ","ﾎﾞ","ﾊﾟ","ﾋﾟ","ﾌﾟ","ﾍﾟ","ﾎﾟ","ｳﾞ","ﾜﾞ","ｦﾞ","ｱ","ｲ","ｳ","ｴ","ｵ","ｶ","ｷ","ｸ","ｹ","ｺ","ｻ","ｼ","ｽ","ｾ","ｿ","ﾀ","ﾁ","ﾂ","ﾃ","ﾄ","ﾅ","ﾆ","ﾇ","ﾈ","ﾉ","ﾊ","ﾋ","ﾌ","ﾍ","ﾎ","ﾏ","ﾐ","ﾑ","ﾒ","ﾓ","ﾔ","ﾕ","ﾖ","ﾗ","ﾘ","ﾙ","ﾚ","ﾛ","ﾜ","ｦ","ﾝ","ｧ","ｨ","ｩ","ｪ","ｫ","ｯ","ｬ","ｭ","ｮ","ｰ","defaultFormat","replace","v","String","fromCharCode","charCodeAt","reg","RegExp","Object","keys","join","toUpperCase","flattenItems","items","filterItems","items2","_a","isFocusable","trulyDisabled","filter","Boolean","flat","Infinity","isTargetOption","target","getAttribute","startsWith","DescendantsContextProvider","useDescendantsContext","useAutocompleteDescendantsContext","useDescendants","useAutocompleteDescendants","useDescendant","useAutocompleteDescendant","name","errorMessage","valueProp","onChangeProp","onCreate","onCreateProp","onSearch","onSearchProp","omitSelectedValues","maxSelectValues","closeOnBlur","closeOnEsc","allowFree","insertPositionItem","format","placement","duration","optionProps","isOpenProp","defaultIsOpen","onOpen","onOpenProp","onClose","onCloseProp","id","_ariaReadonly","containerRef","listRef","timeoutIds","Set","isComposition","prevValue","resolvedItems","setResolvedItems","setValue","setLabel","setInputValue","focusedIndex","setFocusedIndex","isAllSelected","setIsAllSelected","isHit","setIsHit","onInternalOpen","isFocused","isCreate","isMulti","isEmptyValue","firstInsertPositionItem","secondInsertPositionItem","console","warn","selectedValues","enabledValues","node","includes","dataset","selectedIndexes","i","label3","props2","i2","readOnly","onFocusFirst","id2","setTimeout","first","enabledFirstValue","enabledFirst","add","onFocusLast","last","enabledLastValue","enabledLast","reverse","onFocusSelected","values","selected","find","onFocusNext","next","enabledNextValue","enabledNext","index2","onFocusPrev","prev","enabledPrevValue","enabledPrev","onFocusFirstOrSelected","onFocusLastOrSelected","pickOptions","isHit2","isFocused2","forEach","textContent","rebirthOptions","runFocus","getSelectedValues","newValues","enabledValues2","resolvedValues","selectedValues2","_b","node2","Array","from","onChangeLabel","newValue","runOmit","selectedValue","runRebirth","onSelect","enabledValue","computedValue","onCompositionStart","onCompositionEnd","newItem","newItems","findIndex","targetItem","onFocus","onBlur","relatedTarget","onDelete","onKeyDown","code","enabledDelete","actions","ArrowDown","ArrowUp","Space","Enter","Home","End","Escape","Backspace","action","preventDefault","isAll","count","isMax","JSON","stringify","clearTimeout","clear","handler","enabled","matchWidth","trigger","closeOnButton","tabIndex","blur","role","autoCapitalize","autoComplete","spellCheck","useAutocompleteList","beforeFocusedIndex","onAnimationComplete","parent","parentHeight","clientHeight","viewTop","scrollTop","viewBottom","childHeight","childTop","offsetTop","childBottom","isInView","isScrollBottom","scrollTo","getListProps","as","childValues","parentElement","computedRest","border","clip","margin","padding","whiteSpace","generalCloseOnSelect","customCloseOnSelect","optionValue","itemRef","register","frontValues","slice","isDuplicated","some","isTarget","currentTarget","jsx9","minW","minWidth","_c","_d","_e","_f","_g","_h","list"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-list.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\use-autocomplete.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-icon.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-option-group.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-option.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-create.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\autocomplete-empty.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\autocomplete\\src\\multi-autocomplete.tsx"],"sourcesContent":["import type { CSSUIObject, CSSUIProps } from \"@yamada-ui/core\"\nimport { forwardRef } from \"@yamada-ui/core\"\nimport type { MotionProps } from \"@yamada-ui/motion\"\nimport { PopoverContent } from \"@yamada-ui/popover\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useAutocompleteContext, useAutocompleteList } from \"./use-autocomplete\"\n\nexport type AutocompleteListProps = MotionProps<\"ul\">\n\nexport const AutocompleteList = forwardRef<AutocompleteListProps, \"ul\">(\n  ({ className, w, width, minW, minWidth, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n\n    const { getListProps } = useAutocompleteList()\n\n    w =\n      w ?? width ?? ((styles.list?.w ?? styles.list?.width) as CSSUIProps[\"w\"])\n    minW =\n      minW ??\n      minWidth ??\n      ((styles.list?.minW ?? styles.list?.minWidth) as CSSUIProps[\"minW\"])\n\n    const css: CSSUIObject = { ...styles.list }\n\n    return (\n      <PopoverContent\n        className={cx(\"ui-autocomplete__list\", className)}\n        w={w}\n        minW={minW}\n        __css={css}\n        {...getListProps(rest, ref)}\n      />\n    )\n  },\n)\n","import type { CSSUIObject, HTMLUIProps, UIPropGetter } from \"@yamada-ui/core\"\nimport { layoutStyleProperties } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  formControlProperties,\n  useFormControlProps,\n} from \"@yamada-ui/form-control\"\nimport type { MotionUIPropGetter } from \"@yamada-ui/motion\"\nimport { popoverProperties, type PopoverProps } from \"@yamada-ui/popover\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport { useDisclosure } from \"@yamada-ui/use-disclosure\"\nimport { useOutsideClick } from \"@yamada-ui/use-outside-click\"\nimport type { Dict, Union, DOMAttributes } from \"@yamada-ui/utils\"\nimport {\n  ariaAttr,\n  createContext,\n  dataAttr,\n  funcAll,\n  getEventRelatedTarget,\n  handlerAll,\n  isArray,\n  isContains,\n  isHTMLElement,\n  mergeRefs,\n  omitObject,\n  pickObject,\n  splitObject,\n  useUnmountEffect,\n  useUpdateEffect,\n  getValidChildren,\n  isUndefined,\n} from \"@yamada-ui/utils\"\nimport type {\n  ChangeEvent,\n  CSSProperties,\n  Dispatch,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  SetStateAction,\n} from \"react\"\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport type { AutocompleteOptionProps } from \"./\"\nimport { AutocompleteOption, AutocompleteOptionGroup } from \"./\"\n\ntype AutocompleteBaseItem = Omit<\n  AutocompleteOptionProps,\n  \"value\" | \"children\"\n> & {\n  label?: string\n}\n\ntype AutocompleteItemWithValue = AutocompleteBaseItem & {\n  value?: string\n}\n\ntype AutocompleteItemWithItems = AutocompleteBaseItem & {\n  items?: AutocompleteItemWithValue[]\n}\n\nexport type AutocompleteItem =\n  | AutocompleteItemWithValue\n  | AutocompleteItemWithItems\n\nconst kanaMap: Record<string, string> = {\n  ｶﾞ: \"ガ\",\n  ｷﾞ: \"ギ\",\n  ｸﾞ: \"グ\",\n  ｹﾞ: \"ゲ\",\n  ｺﾞ: \"ゴ\",\n  ｻﾞ: \"ザ\",\n  ｼﾞ: \"ジ\",\n  ｽﾞ: \"ズ\",\n  ｾﾞ: \"ゼ\",\n  ｿﾞ: \"ゾ\",\n  ﾀﾞ: \"ダ\",\n  ﾁﾞ: \"ヂ\",\n  ﾂﾞ: \"ヅ\",\n  ﾃﾞ: \"デ\",\n  ﾄﾞ: \"ド\",\n  ﾊﾞ: \"バ\",\n  ﾋﾞ: \"ビ\",\n  ﾌﾞ: \"ブ\",\n  ﾍﾞ: \"ベ\",\n  ﾎﾞ: \"ボ\",\n  ﾊﾟ: \"パ\",\n  ﾋﾟ: \"ピ\",\n  ﾌﾟ: \"プ\",\n  ﾍﾟ: \"ペ\",\n  ﾎﾟ: \"ポ\",\n  ｳﾞ: \"ヴ\",\n  ﾜﾞ: \"ヷ\",\n  ｦﾞ: \"ヺ\",\n  ｱ: \"ア\",\n  ｲ: \"イ\",\n  ｳ: \"ウ\",\n  ｴ: \"エ\",\n  ｵ: \"オ\",\n  ｶ: \"カ\",\n  ｷ: \"キ\",\n  ｸ: \"ク\",\n  ｹ: \"ケ\",\n  ｺ: \"コ\",\n  ｻ: \"サ\",\n  ｼ: \"シ\",\n  ｽ: \"ス\",\n  ｾ: \"セ\",\n  ｿ: \"ソ\",\n  ﾀ: \"タ\",\n  ﾁ: \"チ\",\n  ﾂ: \"ツ\",\n  ﾃ: \"テ\",\n  ﾄ: \"ト\",\n  ﾅ: \"ナ\",\n  ﾆ: \"ニ\",\n  ﾇ: \"ヌ\",\n  ﾈ: \"ネ\",\n  ﾉ: \"ノ\",\n  ﾊ: \"ハ\",\n  ﾋ: \"ヒ\",\n  ﾌ: \"フ\",\n  ﾍ: \"ヘ\",\n  ﾎ: \"ホ\",\n  ﾏ: \"マ\",\n  ﾐ: \"ミ\",\n  ﾑ: \"ム\",\n  ﾒ: \"メ\",\n  ﾓ: \"モ\",\n  ﾔ: \"ヤ\",\n  ﾕ: \"ユ\",\n  ﾖ: \"ヨ\",\n  ﾗ: \"ラ\",\n  ﾘ: \"リ\",\n  ﾙ: \"ル\",\n  ﾚ: \"レ\",\n  ﾛ: \"ロ\",\n  ﾜ: \"ワ\",\n  ｦ: \"ヲ\",\n  ﾝ: \"ン\",\n  ｧ: \"ァ\",\n  ｨ: \"ィ\",\n  ｩ: \"ゥ\",\n  ｪ: \"ェ\",\n  ｫ: \"ォ\",\n  ｯ: \"ッ\",\n  ｬ: \"ャ\",\n  ｭ: \"ュ\",\n  ｮ: \"ョ\",\n  \"｡\": \"。\",\n  \"､\": \"、\",\n  ｰ: \"ー\",\n  \"｢\": \"「\",\n  \"｣\": \"」\",\n  \"･\": \"・\",\n}\n\nconst defaultFormat = (value: string) => {\n  value = value.replace(/[！-～]/g, (v) =>\n    String.fromCharCode(v.charCodeAt(0) - 0xfee0),\n  )\n\n  const reg = new RegExp(\"(\" + Object.keys(kanaMap).join(\"|\") + \")\", \"g\")\n\n  value = value\n    .replace(reg, (v) => kanaMap[v])\n    .replace(/ﾞ/g, \"゛\")\n    .replace(/ﾟ/g, \"゜\")\n\n  value = value.toUpperCase()\n\n  return value\n}\n\nconst flattenItems = (\n  items: AutocompleteItem[],\n): AutocompleteItemWithValue[] => {\n  const filterItems = (\n    items: AutocompleteItem[] | AutocompleteItemWithValue[],\n  ): (AutocompleteItemWithValue | AutocompleteItemWithValue[])[] =>\n    items\n      .map((item) => {\n        const { isDisabled, isFocusable } = item\n        const trulyDisabled = !!isDisabled && !isFocusable\n\n        if (trulyDisabled) return\n\n        if (\"items\" in item) {\n          return filterItems(item.items ?? [])\n        } else {\n          return item as AutocompleteItemWithValue\n        }\n      })\n      .filter(Boolean) as (\n      | AutocompleteItemWithValue\n      | AutocompleteItemWithValue[]\n    )[]\n\n  return filterItems(items).flat(Infinity) as AutocompleteItemWithValue[]\n}\n\nconst isTargetOption = (target: EventTarget | null): boolean =>\n  isHTMLElement(target) &&\n  !!target?.getAttribute(\"role\")?.startsWith(\"autocomplete-item\")\n\nexport const {\n  DescendantsContextProvider: AutocompleteDescendantsContextProvider,\n  useDescendantsContext: useAutocompleteDescendantsContext,\n  useDescendants: useAutocompleteDescendants,\n  useDescendant: useAutocompleteDescendant,\n} = createDescendant<HTMLElement>()\n\ntype AutocompleteContext = Omit<\n  UseAutocompleteProps,\n  \"value\" | \"defaultValue\" | \"onChange\" | \"onCreate\"\n> & {\n  value: string | string[]\n  label: string | string[] | undefined\n  inputValue: string\n  isHit: boolean\n  isEmpty: boolean\n  isAllSelected: boolean\n  onChange: (newValue: string) => void\n  onChangeLabel: (newValue: string, runOmit?: boolean) => void\n  pickOptions: (value: string) => void\n  rebirthOptions: (runFocus?: boolean) => void\n  inputProps: DOMAttributes\n  isOpen: boolean\n  onOpen: () => void\n  onClose: () => void\n  onCreate: () => void\n  onFocusFirst: () => void\n  onFocusLast: () => void\n  onFocusNext: (index?: number) => void\n  onFocusPrev: (index?: number) => void\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  listRef: RefObject<HTMLUListElement>\n  inputRef: RefObject<HTMLInputElement>\n  formControlProps: Record<string, any>\n  styles: Record<string, CSSUIObject>\n}\n\nexport const [AutocompleteProvider, useAutocompleteContext] =\n  createContext<AutocompleteContext>({\n    name: \"AutocompleteContext\",\n    errorMessage: `useAutocompleteContext returned is 'undefined'. Seems you forgot to wrap the components in \"<Autocomplete />\" or \"<MultiAutocomplete />\"`,\n  })\n\ntype UseAutocompleteBaseProps<T extends string | string[] = string> = Omit<\n  PopoverProps,\n  | \"initialFocusRef\"\n  | \"closeOnButton\"\n  | \"trigger\"\n  | \"autoFocus\"\n  | \"restoreFocus\"\n  | \"openDelay\"\n  | \"closeDelay\"\n> &\n  FormControlOptions & {\n    /**\n     * The value of the autocomplete.\n     */\n    value?: T\n    /**\n     * The initial value of the autocomplete.\n     */\n    defaultValue?: T\n    /**\n     * The callback invoked when value state changes.\n     */\n    onChange?: (value: T) => void\n    /**\n     * The callback invoked when search input.\n     */\n    onSearch?: (ev: ChangeEvent<HTMLInputElement>) => void\n    /**\n     * The callback invoked when autocomplete option created.\n     */\n    onCreate?: (newItem: AutocompleteItem, newItems: AutocompleteItem[]) => void\n    /**\n     * Function to format text when search input.\n     */\n    format?: (value: string) => string\n    /**\n     * The position to be inserted when the autocomplete option is created.\n     *\n     * @default 'first'\n     */\n    insertPositionItem?: Union<\"first\" | \"last\"> | [string, \"first\" | \"last\"]\n    /**\n     * If `true`, the list element will be closed when value is selected.\n     *\n     * @default true\n     */\n    closeOnSelect?: boolean\n    /**\n     * The message displayed when the search yields no hits.\n     *\n     * @default 'No results found'\n     */\n    emptyMessage?: string\n    /**\n     * If `true`, enables the creation of autocomplete option.\n     *\n     * @default false\n     */\n    allowCreate?: boolean\n    /**\n     * If `true`, enables the free input.\n     */\n    allowFree?: boolean\n    /**\n     * If `true`, the selected item(s) will be excluded from the list.\n     *\n     * @default false\n     */\n    omitSelectedValues?: boolean\n    /**\n     * The maximum selectable value.\n     */\n    maxSelectValues?: number\n    /**\n     * Props for select option element.\n     */\n    optionProps?: Omit<AutocompleteOptionProps, \"value\" | \"children\">\n    /**\n     * If provided, generate options based on items.\n     */\n    items?: AutocompleteItem[]\n  }\n\nexport type UseAutocompleteProps<T extends string | string[] = string> = Omit<\n  HTMLUIProps<\"input\">,\n  | keyof UseAutocompleteBaseProps\n  | \"list\"\n  | \"disabled\"\n  | \"required\"\n  | \"readOnly\"\n  | \"size\"\n> &\n  UseAutocompleteBaseProps<T>\n\nexport const useAutocomplete = <T extends string | string[] = string>({\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  onCreate: onCreateProp,\n  onSearch: onSearchProp,\n  closeOnSelect = true,\n  omitSelectedValues = false,\n  maxSelectValues,\n  closeOnBlur = true,\n  closeOnEsc = true,\n  allowCreate = false,\n  allowFree = false,\n  insertPositionItem = \"first\",\n  emptyMessage = \"No results found\",\n  format = defaultFormat,\n  placement = \"bottom-start\",\n  duration = 0.2,\n  optionProps,\n  placeholder,\n  items,\n  children,\n  isOpen: isOpenProp,\n  defaultIsOpen,\n  onOpen: onOpenProp,\n  onClose: onCloseProp,\n  ...rest\n}: UseAutocompleteProps<T>) => {\n  rest = useFormControlProps(rest)\n\n  const { id } = rest\n\n  const { \"aria-readonly\": _ariaReadonly, ...formControlProps } = pickObject(\n    rest,\n    formControlProperties,\n  )\n  const [containerProps, inputProps] = splitObject<Dict, string>(\n    omitObject(rest, [...popoverProperties, \"onKeyDown\", \"onFocus\"]),\n    layoutStyleProperties,\n  )\n\n  const descendants = useAutocompleteDescendants()\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const listRef = useRef<HTMLUListElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n  const isComposition = useRef<boolean>(false)\n  const prevValue = useRef<T | undefined>(undefined)\n\n  const [resolvedItems, setResolvedItems] = useState<\n    AutocompleteItem[] | undefined\n  >(items)\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n  })\n  const [label, setLabel] = useState<T | undefined>(undefined)\n  const [inputValue, setInputValue] = useState<string>(\"\")\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n  const [isAllSelected, setIsAllSelected] = useState<boolean>(false)\n  const [isHit, setIsHit] = useState<boolean>(true)\n  const {\n    isOpen,\n    onOpen: onInternalOpen,\n    onClose,\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n  const isFocused = focusedIndex > -1\n  const isCreate = focusedIndex === -2 && allowCreate\n  const isMulti = isArray(value)\n  const isEmptyValue = !isMulti ? !value : !value.length\n\n  const [firstInsertPositionItem, secondInsertPositionItem] = useMemo(() => {\n    if (isArray(insertPositionItem)) {\n      return insertPositionItem\n    } else {\n      return [insertPositionItem, \"first\"]\n    }\n  }, [insertPositionItem])\n\n  if (allowCreate && !isUndefined(children)) {\n    console.warn(\n      `${!isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"}: ${\n        !isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"\n      } internally prefers 'children'. If 'allowCreate' is true, it will not be reflected correctly. If want to reflect, please set 'items' in props.`,\n    )\n  }\n\n  const selectedValues = descendants.enabledValues(\n    ({ node }) => isMulti && value.includes(node.dataset.value ?? \"\"),\n  )\n  const selectedIndexes = selectedValues.map(({ index }) => index)\n  const enabledValues = descendants.enabledValues(\n    ({ node, index }) =>\n      \"target\" in node.dataset && !selectedIndexes.includes(index),\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const computedChildren = resolvedItems?.map((item, i) => {\n    if (\"value\" in item) {\n      const { label, value, ...props } = item\n\n      return (\n        <AutocompleteOption key={i} value={value} {...props}>\n          {label}\n        </AutocompleteOption>\n      )\n    } else if (\"items\" in item) {\n      const { label, items = [], ...props } = item\n\n      return (\n        <AutocompleteOptionGroup\n          key={i}\n          label={label as string}\n          {...(props as HTMLUIProps<\"ul\">)}\n        >\n          {items.map(({ label, value, ...props }, i) => (\n            <AutocompleteOption key={i} value={value} {...props}>\n              {label}\n            </AutocompleteOption>\n          ))}\n        </AutocompleteOptionGroup>\n      )\n    }\n  })\n\n  const isEmpty = !validChildren.length && !computedChildren?.length\n\n  const onOpen = useCallback(() => {\n    if (formControlProps.disabled || formControlProps.readOnly) return\n\n    if (!allowCreate && (isEmpty || isAllSelected)) return\n\n    onInternalOpen()\n\n    if (inputRef.current) inputRef.current.focus()\n  }, [allowCreate, formControlProps, isAllSelected, isEmpty, onInternalOpen])\n\n  const onFocusFirst = useCallback(() => {\n    const id = setTimeout(() => {\n      if (isEmpty || isAllSelected) return\n\n      const first = descendants.enabledFirstValue(\n        ({ node }) => \"target\" in node.dataset,\n      )\n\n      if (!first) return\n\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(first.index)\n      } else {\n        if (selectedIndexes.includes(first.index)) {\n          const enabledFirst = enabledValues[0]\n\n          setFocusedIndex(enabledFirst.index)\n        } else {\n          setFocusedIndex(first.index)\n        }\n      }\n    })\n\n    timeoutIds.current.add(id)\n  }, [\n    descendants,\n    enabledValues,\n    isAllSelected,\n    isEmpty,\n    isMulti,\n    omitSelectedValues,\n    selectedIndexes,\n  ])\n\n  const onFocusLast = useCallback(() => {\n    const id = setTimeout(() => {\n      if (isEmpty || isAllSelected) return\n\n      const last = descendants.enabledLastValue(\n        ({ node }) => \"target\" in node.dataset,\n      )\n\n      if (!last) return\n\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(last.index)\n      } else {\n        if (selectedIndexes.includes(last.index)) {\n          const enabledLast = enabledValues.reverse()[0]\n\n          setFocusedIndex(enabledLast.index)\n        } else {\n          setFocusedIndex(last.index)\n        }\n      }\n    })\n\n    timeoutIds.current.add(id)\n  }, [\n    descendants,\n    enabledValues,\n    isAllSelected,\n    isEmpty,\n    isMulti,\n    omitSelectedValues,\n    selectedIndexes,\n  ])\n\n  const onFocusSelected = useCallback(() => {\n    const id = setTimeout(() => {\n      const values = descendants.enabledValues()\n\n      const selected = values.find(({ node }) =>\n        !isMulti\n          ? node.dataset.value === value\n          : value.includes(node.dataset.value ?? \"\"),\n      )\n\n      if (selected) setFocusedIndex(selected.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, isMulti, value])\n\n  const onFocusNext = useCallback(\n    (index: number = focusedIndex) => {\n      const id = setTimeout(() => {\n        const next = descendants.enabledNextValue(\n          index,\n          ({ node }) => \"target\" in node.dataset,\n        )\n\n        if (!next) return\n\n        if (!isMulti || !omitSelectedValues) {\n          setFocusedIndex(next.index)\n        } else {\n          if (selectedIndexes.includes(next.index)) {\n            const enabledNext =\n              enabledValues.find(({ index }) => next.index < index) ??\n              enabledValues[0]\n\n            setFocusedIndex(enabledNext.index)\n          } else {\n            setFocusedIndex(next.index)\n          }\n        }\n      })\n\n      timeoutIds.current.add(id)\n    },\n    [\n      descendants,\n      enabledValues,\n      focusedIndex,\n      isMulti,\n      omitSelectedValues,\n      selectedIndexes,\n    ],\n  )\n\n  const onFocusPrev = useCallback(\n    (index: number = focusedIndex) => {\n      const id = setTimeout(() => {\n        const prev = descendants.enabledPrevValue(\n          index,\n          ({ node }) => \"target\" in node.dataset,\n        )\n\n        if (!prev) return\n\n        if (!isMulti || !omitSelectedValues) {\n          setFocusedIndex(prev.index)\n        } else {\n          if (selectedIndexes.includes(prev.index)) {\n            const enabledPrev =\n              enabledValues.reverse().find(({ index }) => index < prev.index) ??\n              enabledValues[0]\n\n            setFocusedIndex(enabledPrev.index)\n          } else {\n            setFocusedIndex(prev.index)\n          }\n        }\n      })\n\n      timeoutIds.current.add(id)\n    },\n    [\n      descendants,\n      enabledValues,\n      focusedIndex,\n      isMulti,\n      omitSelectedValues,\n      selectedIndexes,\n    ],\n  )\n\n  const onFocusFirstOrSelected =\n    isEmptyValue || omitSelectedValues ? onFocusFirst : onFocusSelected\n  const onFocusLastOrSelected =\n    isEmptyValue || omitSelectedValues ? onFocusLast : onFocusSelected\n\n  const pickOptions = useCallback(\n    (value: string) => {\n      const values = descendants.values()\n\n      let isHit = false\n      let isFocused = false\n\n      values.forEach(({ node, index }) => {\n        if (format(node.textContent ?? \"\").includes(value)) {\n          isHit = true\n\n          const isDisabled = \"disabled\" in node.dataset\n\n          node.dataset.target = \"\"\n\n          if (!isFocused && !isDisabled) {\n            isFocused = true\n\n            setFocusedIndex(index)\n          }\n        } else {\n          delete node.dataset.target\n        }\n      })\n\n      setIsHit(isHit)\n    },\n    [descendants, format],\n  )\n\n  const rebirthOptions = useCallback(\n    (runFocus = true) => {\n      const values = descendants.values()\n\n      values.forEach(({ node }) => {\n        node.dataset.target = \"\"\n      })\n\n      if (runFocus) onFocusFirst()\n\n      setIsHit(true)\n    },\n    [descendants, onFocusFirst],\n  )\n\n  const getSelectedValues = useCallback(\n    (newValues: string | string[]) => {\n      const enabledValues = descendants.enabledValues()\n\n      const resolvedValues = isArray(newValues) ? newValues : [newValues]\n\n      const selectedValues = resolvedValues\n        .map((value) => {\n          const { node } =\n            enabledValues.find(({ node }) => node.dataset.value === value) ?? {}\n\n          if (node) {\n            const el = Array.from(node.children).find(\n              (child) => child.getAttribute(\"data-label\") !== null,\n            )\n\n            return el?.textContent ?? undefined\n          } else {\n            return allowFree ? value : undefined\n          }\n        })\n        .filter(Boolean) as string[]\n\n      return selectedValues\n    },\n    [allowFree, descendants],\n  )\n\n  const onChangeLabel = useCallback(\n    (newValue: string, runOmit: boolean = true) => {\n      const selectedValues = getSelectedValues(newValue)\n\n      setLabel((prev) => {\n        if (!isMulti) {\n          return selectedValues[0] as T\n        } else {\n          selectedValues.forEach((selectedValue) => {\n            const isSelected =\n              isArray(prev) && prev.includes(selectedValue ?? \"\")\n\n            if (!isSelected) {\n              prev = [...(isArray(prev) ? prev : []), selectedValue] as T\n            } else if (runOmit) {\n              prev = (\n                isArray(prev)\n                  ? prev.filter((value) => value !== selectedValue)\n                  : undefined\n              ) as T\n            }\n          })\n\n          return prev\n        }\n      })\n    },\n    [getSelectedValues, isMulti],\n  )\n\n  const onChange = useCallback(\n    (newValue: string, runRebirth: boolean = true) => {\n      setValue((prev) => {\n        let next: T\n\n        if (!isArray(prev)) {\n          next = newValue as T\n        } else {\n          const isSelected = prev.includes(newValue)\n\n          if (!isSelected) {\n            next = [...prev, newValue] as T\n          } else {\n            next = prev.filter((value) => value !== newValue) as T\n          }\n        }\n\n        prevValue.current = next\n        return next\n      })\n\n      const isHit =\n        descendants\n          .values()\n          .filter(({ node }) =>\n            format(node.textContent ?? \"\").includes(newValue),\n          ).length > 0\n\n      onChangeLabel(newValue)\n\n      if (allowFree || isHit) setInputValue(\"\")\n\n      if (isMulti && runRebirth) rebirthOptions(false)\n    },\n    [\n      allowFree,\n      isMulti,\n      onChangeLabel,\n      rebirthOptions,\n      setValue,\n      descendants,\n      format,\n    ],\n  )\n\n  const onSelect = useCallback(() => {\n    let enabledValue = descendants.value(focusedIndex)\n\n    if (\"disabled\" in (enabledValue?.node.dataset ?? {}))\n      enabledValue = undefined\n\n    if (!enabledValue) return\n\n    const value = enabledValue.node.dataset.value ?? \"\"\n\n    onChange(value)\n\n    if (closeOnSelect) onClose()\n\n    if (omitSelectedValues) onFocusNext()\n  }, [\n    closeOnSelect,\n    descendants,\n    focusedIndex,\n    omitSelectedValues,\n    onChange,\n    onClose,\n    onFocusNext,\n  ])\n\n  const onSearch = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (!isOpen) onOpen()\n\n      onSearchProp?.(ev)\n\n      const value = ev.target.value\n      const computedValue = format(value)\n\n      if (computedValue) {\n        pickOptions(computedValue)\n      } else {\n        rebirthOptions()\n      }\n\n      setInputValue(value)\n    },\n    [isOpen, onOpen, format, onSearchProp, pickOptions, rebirthOptions],\n  )\n\n  const onCompositionStart = useCallback(() => {\n    isComposition.current = true\n  }, [])\n\n  const onCompositionEnd = useCallback(() => {\n    isComposition.current = false\n  }, [])\n\n  const onCreate = useCallback(() => {\n    if (!listRef.current) return\n\n    const newItem: AutocompleteItem = { label: inputValue, value: inputValue }\n\n    let newItems: AutocompleteItem[] = []\n\n    if (resolvedItems) newItems = resolvedItems\n\n    if (firstInsertPositionItem === \"first\") {\n      newItems = [newItem, ...newItems]\n    } else if (firstInsertPositionItem === \"last\") {\n      newItems = [...newItems, newItem]\n    } else {\n      const i = newItems.findIndex(\n        ({ label }) => label === firstInsertPositionItem,\n      )\n\n      const targetItem = newItems[i]\n\n      if (i !== -1 && \"items\" in targetItem) {\n        if (secondInsertPositionItem === \"first\") {\n          targetItem.items = [newItem, ...(targetItem.items ?? [])]\n        } else {\n          targetItem.items = [...(targetItem.items ?? []), newItem]\n        }\n\n        newItems[i] = targetItem\n      } else {\n        console.warn(\n          `${\n            !isMulti ? \"Autocomplete\" : \"MultiAutocomplete\"\n          }: '${firstInsertPositionItem}' specified in insertPositionItem does not exist in the option group.`,\n        )\n      }\n    }\n\n    setResolvedItems(newItems)\n    onChange(inputValue)\n    rebirthOptions(false)\n\n    const index = flattenItems(newItems).findIndex(\n      ({ value }) => value === inputValue,\n    )\n\n    setFocusedIndex(index)\n\n    onCreateProp?.(newItem, newItems)\n  }, [\n    inputValue,\n    resolvedItems,\n    firstInsertPositionItem,\n    onChange,\n    rebirthOptions,\n    onCreateProp,\n    secondInsertPositionItem,\n    isMulti,\n  ])\n\n  const onClick = useCallback(() => {\n    if (isOpen) {\n      if (inputRef.current) inputRef.current.focus()\n    } else {\n      onOpen()\n\n      onFocusFirstOrSelected()\n    }\n  }, [isOpen, onFocusFirstOrSelected, onOpen])\n\n  const onFocus = useCallback(() => {\n    if (isOpen) return\n\n    onOpen()\n\n    onFocusFirstOrSelected()\n  }, [isOpen, onFocusFirstOrSelected, onOpen])\n\n  const onBlur = useCallback(\n    (ev: FocusEvent<HTMLDivElement>) => {\n      const relatedTarget = getEventRelatedTarget(ev)\n\n      if (isContains(containerRef.current, relatedTarget)) return\n\n      if (!closeOnBlur && isHit) return\n\n      if (allowFree && !!inputValue) onChange(inputValue, false)\n\n      setInputValue(\"\")\n\n      if (isOpen) onClose()\n    },\n    [closeOnBlur, isHit, isOpen, inputValue, allowFree, onClose, onChange],\n  )\n\n  const onDelete = useCallback(() => {\n    if (!isMulti) {\n      onChange(\"\")\n    } else {\n      onChange(value[value.length - 1])\n    }\n\n    if (!isOpen) onFocus()\n  }, [isMulti, isOpen, onChange, onFocus, value])\n\n  const onClear = useCallback(\n    (ev: MouseEvent<HTMLDivElement>) => {\n      ev.stopPropagation()\n\n      prevValue.current = [] as unknown as T\n      setValue([] as unknown as T)\n      setLabel(undefined)\n      setInputValue(\"\")\n      rebirthOptions()\n\n      if (isOpen && inputRef.current) inputRef.current.focus()\n    },\n    [isOpen, setLabel, setInputValue, setValue, rebirthOptions],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLDivElement>) => {\n      if (ev.key === \" \") ev.key = ev.code\n\n      if (formControlProps.disabled || formControlProps.readOnly) return\n      if (isComposition.current) return\n\n      const enabledDelete = label === inputValue || !inputValue.length\n\n      const actions: Record<string, Function | undefined> = {\n        ArrowDown: isFocused\n          ? () => onFocusNext()\n          : !isOpen\n            ? funcAll(onOpen, onFocusFirstOrSelected)\n            : undefined,\n        ArrowUp: isFocused\n          ? () => onFocusPrev()\n          : !isOpen\n            ? funcAll(onOpen, onFocusLastOrSelected)\n            : undefined,\n        Space: isCreate\n          ? onCreate\n          : isFocused\n            ? onSelect\n            : !isOpen\n              ? funcAll(onOpen, onFocusFirstOrSelected)\n              : undefined,\n        Enter: isCreate\n          ? onCreate\n          : isFocused\n            ? onSelect\n            : !isOpen\n              ? funcAll(onOpen, onFocusFirstOrSelected)\n              : allowFree && isMulti\n                ? () => {\n                    if (inputValue) onChange(inputValue)\n\n                    setFocusedIndex(0)\n                  }\n                : undefined,\n        Home: isOpen ? onFocusFirst : undefined,\n        End: isOpen ? onFocusLast : undefined,\n        Escape: closeOnEsc ? onClose : undefined,\n        Backspace: !isEmptyValue && enabledDelete ? onDelete : undefined,\n      }\n\n      const action = actions[ev.key]\n\n      if (!action) return\n\n      ev.preventDefault()\n      ev.stopPropagation()\n\n      action(ev)\n    },\n    [\n      allowFree,\n      formControlProps,\n      label,\n      inputValue,\n      onOpen,\n      isFocused,\n      isMulti,\n      onFocusFirstOrSelected,\n      onFocusNext,\n      onFocusLastOrSelected,\n      onFocusPrev,\n      isCreate,\n      onCreate,\n      onSelect,\n      isOpen,\n      onFocusFirst,\n      onFocusLast,\n      closeOnEsc,\n      onClose,\n      isEmptyValue,\n      onDelete,\n      onChange,\n    ],\n  )\n\n  useEffect(() => {\n    if (!isMulti) return\n\n    if (!omitSelectedValues && isUndefined(maxSelectValues)) return\n\n    const isAll = value.length > 0 && value.length === descendants.count()\n    const isMax = value.length === maxSelectValues\n\n    if (isAll || isMax) {\n      onClose()\n      setIsAllSelected(true)\n    } else {\n      setIsAllSelected(false)\n    }\n  }, [\n    omitSelectedValues,\n    value,\n    descendants,\n    isMulti,\n    onClose,\n    maxSelectValues,\n  ])\n\n  useEffect(() => {\n    if (isMulti) {\n      if (\n        JSON.stringify(prevValue.current ?? []) === JSON.stringify(value ?? [])\n      )\n        return\n\n      const label = getSelectedValues(value)\n\n      setLabel(label as T)\n    } else {\n      if (prevValue.current === value) return\n\n      onChangeLabel(value, false)\n    }\n  }, [isMulti, value, onChangeLabel, getSelectedValues])\n\n  useUpdateEffect(() => {\n    if (isOpen || allowFree) return\n\n    setFocusedIndex(-1)\n    setInputValue(\"\")\n  }, [isOpen])\n\n  useUpdateEffect(() => {\n    if (!isHit) setFocusedIndex(-2)\n  }, [isHit])\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  useOutsideClick({\n    ref: containerRef,\n    handler: onClose,\n    enabled: isOpen && (closeOnBlur || !isHit),\n  })\n\n  const getPopoverProps = useCallback(\n    (props?: PopoverProps): PopoverProps => ({\n      matchWidth: true,\n      ...rest,\n      ...props,\n      isOpen,\n      onOpen,\n      onClose,\n      placement,\n      duration,\n      trigger: \"never\",\n      closeOnButton: false,\n      closeOnBlur,\n    }),\n    [duration, closeOnBlur, isOpen, onClose, onOpen, placement, rest],\n  )\n\n  const getContainerProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref: mergeRefs(containerRef, ref),\n      ...containerProps,\n      ...props,\n      ...formControlProps,\n      onClick: handlerAll(props.onClick, rest.onClick, onClick),\n      onBlur: handlerAll(props.onBlur, rest.onBlur, onBlur),\n    }),\n\n    [containerProps, formControlProps, onBlur, onClick, rest],\n  )\n\n  const getFieldProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref,\n      tabIndex: -1,\n      ...props,\n      ...formControlProps,\n      placeholder,\n      \"data-active\": dataAttr(isOpen),\n      \"aria-expanded\": dataAttr(isOpen),\n      onFocus: handlerAll(props.onFocus, rest.onFocus, onFocus),\n      onKeyDown: handlerAll(props.onKeyDown, rest.onKeyDown, onKeyDown),\n    }),\n    [formControlProps, placeholder, isOpen, rest, onFocus, onKeyDown],\n  )\n\n  return {\n    id,\n    descendants,\n    value,\n    label,\n    inputValue,\n    isHit,\n    isEmpty,\n    computedChildren,\n    focusedIndex,\n    omitSelectedValues,\n    closeOnSelect,\n    allowCreate,\n    allowFree,\n    emptyMessage,\n    isOpen,\n    isAllSelected,\n    listRef,\n    inputRef,\n    optionProps,\n    formControlProps,\n    setFocusedIndex,\n    onChangeLabel,\n    onChange,\n    onSearch,\n    onCreate,\n    onClear,\n    onCompositionStart,\n    onCompositionEnd,\n    pickOptions,\n    rebirthOptions,\n    onOpen,\n    onClose,\n    onFocusFirst,\n    onFocusLast,\n    onFocusSelected,\n    onFocusNext,\n    onFocusPrev,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    inputProps,\n  }\n}\n\nexport type UseAutocompleteReturn = ReturnType<typeof useAutocomplete>\n\nexport const useAutocompleteInput = () => {\n  const {\n    id,\n    inputRef,\n    onSearch,\n    onCompositionStart,\n    onCompositionEnd,\n    isAllSelected,\n    formControlProps,\n    inputProps,\n    isOpen,\n  } = useAutocompleteContext()\n\n  useUpdateEffect(() => {\n    if (isAllSelected && inputRef.current) inputRef.current.blur()\n  }, [isAllSelected])\n\n  const getInputProps: UIPropGetter<\"input\"> = useCallback(\n    (props = {}, ref = null) => ({\n      ref: mergeRefs(inputRef, ref),\n      ...formControlProps,\n      role: \"combobox\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-autocomplete\": \"list\",\n      \"aria-expanded\": isOpen,\n      autoCapitalize: \"none\",\n      autoComplete: \"off\",\n      spellCheck: \"false\",\n      ...inputProps,\n      ...props,\n      id,\n      cursor: formControlProps.readOnly ? \"default\" : \"text\",\n      pointerEvents:\n        formControlProps.disabled || isAllSelected ? \"none\" : \"auto\",\n      tabIndex: isAllSelected ? -1 : 0,\n      onChange: handlerAll(props.onChange, onSearch),\n      onCompositionStart: handlerAll(\n        props.onCompositionStart,\n        inputProps.onCompositionStart,\n        onCompositionStart,\n      ),\n      onCompositionEnd: handlerAll(\n        props.onCompositionEnd,\n        inputProps.onCompositionEnd,\n        onCompositionEnd,\n      ),\n    }),\n    [\n      isOpen,\n      inputProps,\n      inputRef,\n      formControlProps,\n      id,\n      isAllSelected,\n      onSearch,\n      onCompositionStart,\n      onCompositionEnd,\n    ],\n  )\n\n  return {\n    getInputProps,\n  }\n}\n\nexport type UseAutocompleteInputReturn = ReturnType<typeof useAutocompleteInput>\n\nexport const useAutocompleteList = () => {\n  const { focusedIndex, isOpen, listRef, rebirthOptions } =\n    useAutocompleteContext()\n\n  const descendants = useAutocompleteDescendantsContext()\n\n  const beforeFocusedIndex = useRef<number>(-1)\n  const selectedValue = descendants.value(focusedIndex)\n\n  const onAnimationComplete = useCallback(() => {\n    if (!isOpen) rebirthOptions(false)\n  }, [isOpen, rebirthOptions])\n\n  useEffect(() => {\n    if (!listRef.current || !selectedValue) return\n\n    if (beforeFocusedIndex.current === selectedValue.index) return\n\n    const parent = listRef.current\n    const child = selectedValue.node\n\n    const parentHeight = parent.clientHeight\n    const viewTop = parent.scrollTop\n    const viewBottom = viewTop + parentHeight\n\n    const childHeight = child.clientHeight\n    const childTop = child.offsetTop\n    const childBottom = childTop + childHeight\n\n    const isInView = viewTop <= childTop && childBottom <= viewBottom\n\n    const isScrollBottom = beforeFocusedIndex.current < selectedValue.index\n\n    if (!isInView) {\n      if (childBottom <= parentHeight) {\n        listRef.current.scrollTo({ top: 0 })\n      } else {\n        if (!isScrollBottom) {\n          listRef.current.scrollTo({ top: childTop + 1 })\n        } else {\n          listRef.current.scrollTo({ top: childBottom - parentHeight })\n        }\n      }\n    }\n\n    beforeFocusedIndex.current = selectedValue.index\n  }, [listRef, selectedValue])\n\n  useUpdateEffect(() => {\n    if (!isOpen) beforeFocusedIndex.current = -1\n  }, [isOpen])\n\n  const getListProps: MotionUIPropGetter<\"ul\"> = useCallback(\n    (props = {}, ref = null) => ({\n      as: \"ul\",\n      ref: mergeRefs(listRef, ref),\n      role: \"select\",\n      tabIndex: -1,\n      ...props,\n      onAnimationComplete: handlerAll(\n        props.onAnimationComplete,\n        onAnimationComplete,\n      ),\n    }),\n    [listRef, onAnimationComplete],\n  )\n\n  return {\n    getListProps,\n  }\n}\n\nexport type UseAutocompleteOptionGroupProps = HTMLUIProps<\"ul\"> & {\n  /**\n   * The label of the autocomplete option group.\n   */\n  label: string\n}\n\nexport const useAutocompleteOptionGroup = ({\n  label,\n  ...rest\n}: UseAutocompleteOptionGroupProps) => {\n  const { value, omitSelectedValues } = useAutocompleteContext()\n\n  const isMulti = isArray(value)\n\n  const descendants = useAutocompleteDescendantsContext()\n\n  const values = descendants.values()\n  const selectedValues =\n    isMulti && omitSelectedValues\n      ? descendants.values(({ node }) =>\n          value.includes(node.dataset.value ?? \"\"),\n        )\n      : []\n  const selectedIndexes = selectedValues.map(({ index }) => index)\n  const childValues = values.filter(\n    ({ node, index }) =>\n      node.parentElement?.dataset.label === label &&\n      !selectedIndexes.includes(index) &&\n      \"target\" in node.dataset,\n  )\n\n  const isEmpty = !childValues.length\n\n  const computedRest = splitObject(rest, layoutStyleProperties)\n\n  const getContainerProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref,\n        ...props,\n        ...computedRest[0],\n        style: isEmpty ? style : undefined,\n        \"data-label\": label,\n        role: \"autocomplete-group-container\",\n      }\n    },\n    [computedRest, isEmpty, label],\n  )\n\n  const getGroupProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref,\n      ...props,\n      ...computedRest[1],\n      \"data-label\": label,\n      role: \"autocomplete-group\",\n    }),\n    [computedRest, label],\n  )\n\n  return {\n    label,\n    getContainerProps,\n    getGroupProps,\n  }\n}\n\nexport type UseAutocompleteOptionGroupReturn = ReturnType<\n  typeof useAutocompleteOptionGroup\n>\n\nexport type UseAutocompleteOptionProps = Omit<\n  HTMLUIProps<\"li\">,\n  \"value\" | \"children\"\n> & {\n  /**\n   * The value of the select option.\n   */\n  value?: string\n  /**\n   * The label of the select option.\n   */\n  children?: string\n  /**\n   * If `true`, the select option will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the select option will be focusable.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the list element will be closed when selected.\n   *\n   * @default false\n   */\n  closeOnSelect?: boolean\n}\n\nexport const useAutocompleteOption = (props: UseAutocompleteOptionProps) => {\n  const {\n    value,\n    omitSelectedValues,\n    onChange,\n    onChangeLabel,\n    focusedIndex,\n    setFocusedIndex,\n    onClose,\n    closeOnSelect: generalCloseOnSelect,\n    optionProps,\n    inputRef,\n    onFocusNext,\n  } = useAutocompleteContext()\n\n  let {\n    icon: customIcon,\n    isDisabled,\n    isFocusable,\n    closeOnSelect: customCloseOnSelect,\n    children,\n    value: optionValue,\n    ...computedProps\n  } = { ...optionProps, ...props }\n\n  const trulyDisabled = !!isDisabled && !isFocusable\n\n  const itemRef = useRef<HTMLLIElement>(null)\n\n  const { index, register, descendants } = useAutocompleteDescendant({\n    disabled: trulyDisabled,\n  })\n\n  const values = descendants.values()\n  const frontValues = values.slice(0, index)\n\n  const isMulti = isArray(value)\n  const isDuplicated = !isMulti\n    ? frontValues.some(({ node }) => node.dataset.value === (optionValue ?? \"\"))\n    : false\n\n  const isSelected =\n    !isDuplicated &&\n    (!isMulti\n      ? (optionValue ?? \"\") === value\n      : value.includes(optionValue ?? \"\"))\n  const isTarget = \"target\" in (itemRef.current?.dataset ?? {})\n  const isFocused = index === focusedIndex\n\n  const onClick = useCallback(\n    (ev: MouseEvent<HTMLLIElement>) => {\n      ev.stopPropagation()\n\n      if (isDisabled) {\n        if (inputRef.current) inputRef.current.focus()\n\n        return\n      }\n\n      if (!isTargetOption(ev.currentTarget)) {\n        if (inputRef.current) inputRef.current.focus()\n\n        return\n      }\n\n      setFocusedIndex(index)\n\n      onChange(optionValue ?? \"\")\n\n      if (inputRef.current) inputRef.current.focus()\n\n      if (customCloseOnSelect ?? generalCloseOnSelect) onClose()\n\n      if (omitSelectedValues) onFocusNext(index)\n    },\n    [\n      onFocusNext,\n      omitSelectedValues,\n      isDisabled,\n      optionValue,\n      setFocusedIndex,\n      index,\n      onChange,\n      customCloseOnSelect,\n      generalCloseOnSelect,\n      onClose,\n      inputRef,\n    ],\n  )\n\n  useUpdateEffect(() => {\n    if (isSelected) onChangeLabel(optionValue ?? \"\", false)\n  }, [optionValue])\n\n  const getOptionProps: UIPropGetter<\"li\"> = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref: mergeRefs(itemRef, ref, register),\n        ...computedProps,\n        ...props,\n        role: \"autocomplete-item\",\n        tabIndex: -1,\n        style:\n          !isTarget || (omitSelectedValues && isSelected) ? style : undefined,\n        \"data-target\": dataAttr(true),\n        \"data-value\": optionValue ?? \"\",\n        \"data-focus\": dataAttr(isFocused),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"aria-checked\": ariaAttr(isSelected),\n        \"aria-disabled\": ariaAttr(isDisabled),\n        onClick: handlerAll(computedProps.onClick, props.onClick, onClick),\n      }\n    },\n    [\n      optionValue,\n      computedProps,\n      isDisabled,\n      isFocused,\n      isSelected,\n      isTarget,\n      omitSelectedValues,\n      onClick,\n      register,\n    ],\n  )\n\n  return {\n    isSelected,\n    isFocused,\n    customIcon,\n    children,\n    getOptionProps,\n  }\n}\n\nexport type UseAutocompleteOptionReturn = ReturnType<\n  typeof useAutocompleteOption\n>\n\nexport const useAutocompleteCreate = () => {\n  const { isHit, onCreate } = useAutocompleteContext()\n\n  const getCreateProps: UIPropGetter<\"li\"> = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref,\n        ...props,\n        tabIndex: -1,\n        style: isHit ? style : undefined,\n        \"data-focus\": dataAttr(!isHit),\n        onClick: handlerAll(props.onClick, onCreate),\n      }\n    },\n    [isHit, onCreate],\n  )\n\n  return { getCreateProps }\n}\n\nexport type UseAutocompleteCreateReturn = ReturnType<\n  typeof useAutocompleteCreate\n>\n\nexport const useAutocompleteEmpty = () => {\n  const { isHit, isEmpty } = useAutocompleteContext()\n\n  const getEmptyProps: UIPropGetter<\"li\"> = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      }\n\n      return {\n        ref,\n        ...props,\n        tabIndex: -1,\n        style: isHit && !isEmpty ? style : undefined,\n      }\n    },\n    [isHit, isEmpty],\n  )\n\n  return { getEmptyProps }\n}\n\nexport type UseAutocompleteEmptyReturn = ReturnType<typeof useAutocompleteEmpty>\n","import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\"\nimport { Portal } from \"@yamada-ui/portal\"\nimport type { PortalProps } from \"@yamada-ui/portal\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { AutocompleteIconProps } from \"./autocomplete-icon\"\nimport { AutocompleteIcon } from \"./autocomplete-icon\"\nimport type { AutocompleteListProps } from \"./autocomplete-list\"\nimport { AutocompleteList } from \"./autocomplete-list\"\nimport type { UseAutocompleteProps } from \"./use-autocomplete\"\nimport {\n  AutocompleteProvider,\n  useAutocomplete,\n  AutocompleteDescendantsContextProvider,\n  useAutocompleteContext,\n  useAutocompleteInput,\n} from \"./use-autocomplete\"\nimport { AutocompleteCreate, AutocompleteEmpty } from \"./\"\n\ntype AutocompleteOptions = {\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for autocomplete container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for autocomplete list element.\n   */\n  listProps?: Omit<AutocompleteListProps, \"children\">\n  /**\n   * Props for autocomplete input element.\n   */\n  inputProps?: HTMLUIProps<\"input\">\n  /**\n   * Props for autocomplete icon element.\n   */\n  iconProps?: AutocompleteIconProps\n  /**\n   * Props to be forwarded to the portal component.\n   *\n   * @default '{ isDisabled: true }'\n   *\n   */\n  portalProps?: Omit<PortalProps, \"children\">\n}\n\nexport type AutocompleteProps = ThemeProps<\"Autocomplete\"> &\n  Omit<UseAutocompleteProps<string>, \"maxSelectValues\" | \"omitSelectedValues\"> &\n  AutocompleteOptions\n\n/**\n * `Autocomplete` is a component used to display suggestions in response to user text input.\n *\n * @see Docs https://yamada-ui.com/components/forms/autocomplete\n */\nexport const Autocomplete = forwardRef<AutocompleteProps, \"input\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"Autocomplete\", props)\n    let {\n      className,\n      defaultValue = \"\",\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      containerProps,\n      listProps,\n      inputProps,\n      iconProps,\n      portalProps = { isDisabled: true },\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const {\n      descendants,\n      formControlProps,\n      getPopoverProps,\n      getContainerProps,\n      getFieldProps,\n      allowCreate,\n      isEmpty,\n      inputValue,\n      computedChildren,\n      ...rest\n    } = useAutocomplete({ ...computedProps, defaultValue, children })\n\n    h ??= height\n    minH ??= minHeight\n\n    const css: CSSUIObject = {\n      w: \"100%\",\n      h: \"fit-content\",\n      color,\n      ...styles.container,\n    }\n\n    return (\n      <AutocompleteDescendantsContextProvider value={descendants}>\n        <AutocompleteProvider\n          value={{\n            ...rest,\n            formControlProps,\n            inputValue,\n            allowCreate,\n            isEmpty,\n            styles,\n          }}\n        >\n          <Popover {...getPopoverProps()}>\n            <ui.div\n              className={cx(\"ui-autocomplete\", className)}\n              __css={css}\n              {...getContainerProps(containerProps)}\n            >\n              <ui.div\n                className=\"ui-autocomplete__inner\"\n                __css={{ position: \"relative\", ...styles.inner }}\n              >\n                <AutocompleteField\n                  h={h}\n                  minH={minH}\n                  inputProps={inputProps}\n                  {...getFieldProps({}, ref)}\n                />\n\n                <AutocompleteIcon {...iconProps} {...formControlProps} />\n              </ui.div>\n\n              {!isEmpty ? (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n\n                    {children ?? computedChildren}\n                  </AutocompleteList>\n                </Portal>\n              ) : (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate && inputValue ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n                  </AutocompleteList>\n                </Portal>\n              )}\n            </ui.div>\n          </Popover>\n        </AutocompleteProvider>\n      </AutocompleteDescendantsContextProvider>\n    )\n  },\n)\n\ntype AutocompleteFieldProps = HTMLUIProps<\"div\"> &\n  Pick<AutocompleteProps, \"inputProps\">\n\nconst AutocompleteField = forwardRef<AutocompleteFieldProps, \"input\">(\n  ({ className, h, minH, placeholder, inputProps, ...rest }, ref) => {\n    const { label, inputValue, styles } = useAutocompleteContext()\n\n    const { getInputProps } = useAutocompleteInput()\n\n    const css: CSSUIObject = {\n      pe: \"2rem\",\n      h,\n      minH,\n      display: \"flex\",\n      alignItems: \"center\",\n      ...styles.field,\n      cursor: \"text\",\n    }\n\n    return (\n      <PopoverTrigger>\n        <ui.div\n          className={cx(\"ui-autocomplete__field\", className)}\n          __css={css}\n          {...rest}\n        >\n          <ui.input\n            className=\"ui-autocomplete__field__input\"\n            display=\"inline-block\"\n            w=\"100%\"\n            placeholder={placeholder}\n            {...getInputProps(\n              { ...inputProps, value: inputValue || label || \"\" },\n              ref,\n            )}\n          />\n        </ui.div>\n      </PopoverTrigger>\n    )\n  },\n)\n","import type { CSSUIObject, HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { ChevronIcon, CloseIcon } from \"@yamada-ui/icon\"\nimport { useClickable } from \"@yamada-ui/use-clickable\"\nimport { cx, getValidChildren, isValidElement } from \"@yamada-ui/utils\"\nimport type { FC, HTMLAttributes } from \"react\"\nimport { cloneElement, useRef } from \"react\"\nimport { useAutocompleteContext } from \"./use-autocomplete\"\n\nexport type AutocompleteIconProps = HTMLUIProps<\"div\">\n\nexport const AutocompleteIcon = forwardRef<AutocompleteIconProps, \"div\">(\n  ({ className, children, __css, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n\n    const css: CSSUIObject = {\n      position: \"absolute\",\n      top: \"50%\",\n      transform: \"translateY(-50%)\",\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      pointerEvents: \"none\",\n      cursor: \"pointer\",\n      ...styles.icon,\n      ...__css,\n    }\n\n    const validChildren = getValidChildren(children)\n\n    const cloneChildren = validChildren.map((child) =>\n      cloneElement(child, {\n        focusable: false,\n        \"aria-hidden\": true,\n        style: {\n          maxWidth: \"1em\",\n          maxHeight: \"1em\",\n          color: \"currentColor\",\n        },\n      }),\n    )\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-autocomplete__icon\", className)}\n        __css={css}\n        {...rest}\n      >\n        {isValidElement(children) ? cloneChildren : <ChevronIcon />}\n      </ui.div>\n    )\n  },\n)\n\nexport type AutocompleteClearIconProps = AutocompleteIconProps & {\n  disabled?: boolean\n}\n\nexport const AutocompleteClearIcon: FC<AutocompleteClearIconProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const { styles } = useAutocompleteContext()\n\n  const isDisabled = props.disabled\n\n  const rest = useClickable({\n    ref,\n    isDisabled,\n    ...(props as HTMLAttributes<HTMLElement>),\n  })\n\n  return (\n    <AutocompleteIcon\n      aria-label=\"Clear value\"\n      className={cx(\"ui-autocomplete__icon--clear\", className)}\n      __css={styles.clearIcon}\n      {...rest}\n    >\n      {children ?? <CloseIcon w=\"0.5em\" h=\"0.5em\" />}\n    </AutocompleteIcon>\n  )\n}\n\nexport type AutocompleteItemIconProps = HTMLUIProps<\"span\">\n\nexport const AutocompleteItemIcon = forwardRef<\n  AutocompleteItemIconProps,\n  \"span\"\n>(({ className, ...rest }, ref) => {\n  const { styles } = useAutocompleteContext()\n\n  const css: CSSUIObject = {\n    flexShrink: 0,\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: \"0.85em\",\n    ...styles.itemIcon,\n  }\n\n  return (\n    <ui.span\n      ref={ref}\n      className={cx(\"ui-autocomplete__item__icon\", className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n","import type { HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { UseAutocompleteOptionGroupProps } from \"./use-autocomplete\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteOptionGroup,\n} from \"./use-autocomplete\"\n\ntype AutocompleteOptionGroupOptions = UseAutocompleteOptionGroupProps\n\nexport type AutocompleteOptionGroupProps = HTMLUIProps<\"ul\"> &\n  AutocompleteOptionGroupOptions\n\nexport const AutocompleteOptionGroup = forwardRef<\n  AutocompleteOptionGroupProps,\n  \"ul\"\n>(\n  (\n    { className, color, h, height, minH, minHeight, children, ...rest },\n    ref,\n  ) => {\n    const { styles } = useAutocompleteContext()\n    const { label, getContainerProps, getGroupProps } =\n      useAutocompleteOptionGroup(rest)\n\n    h ??= height\n    minH ??= minHeight\n\n    return (\n      <ui.li\n        className={cx(\n          \"ui-autocomplete__item\",\n          \"ui-autocomplete__item--group\",\n          className,\n        )}\n        __css={{ w: \"100%\", h: \"fit-content\", color }}\n        {...getContainerProps()}\n      >\n        <ui.span\n          className=\"ui-autocomplete__item__group-label\"\n          __css={styles.groupLabel}\n          lineClamp={1}\n        >\n          {label}\n        </ui.span>\n\n        <ui.ul\n          {...getGroupProps({}, ref)}\n          className=\"ui-autocomplete__item__group\"\n          __css={{ h, minH, ...styles.group }}\n        >\n          {children}\n        </ui.ul>\n      </ui.li>\n    )\n  },\n)\n","import type { CSSUIObject } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { FC, ReactElement } from \"react\"\nimport { AutocompleteItemIcon } from \"./autocomplete-icon\"\nimport type { UseAutocompleteOptionProps } from \"./use-autocomplete\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteOption,\n} from \"./use-autocomplete\"\n\ntype AutocompleteOptionOptions = {\n  /**\n   * The autocomplete option icon to use.\n   */\n  icon?: ReactElement\n}\n\nexport type AutocompleteOptionProps = UseAutocompleteOptionProps &\n  AutocompleteOptionOptions\n\nexport const AutocompleteOption = forwardRef<AutocompleteOptionProps, \"li\">(\n  ({ className, icon, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n    const { isSelected, customIcon, children, getOptionProps } =\n      useAutocompleteOption(rest)\n\n    icon ??= customIcon\n\n    const css: CSSUIObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      gap: \"0.75rem\",\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx(\"ui-autocomplete__item\", className)}\n        __css={css}\n        {...getOptionProps({}, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon opacity={isSelected ? 1 : 0}>\n            {icon || <CheckIcon />}\n          </AutocompleteItemIcon>\n        ) : null}\n\n        <ui.span style={{ flex: 1 }} data-label>\n          {children}\n        </ui.span>\n      </ui.li>\n    )\n  },\n)\n\nconst CheckIcon: FC = () => (\n  <svg viewBox=\"0 0 14 14\" width=\"1em\" height=\"1em\">\n    <polygon\n      fill=\"currentColor\"\n      points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n    />\n  </svg>\n)\n","import type { CSSUIObject, HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx, runIfFunc } from \"@yamada-ui/utils\"\nimport type { FC, ReactElement } from \"react\"\nimport { AutocompleteItemIcon } from \"./autocomplete-icon\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteCreate,\n} from \"./use-autocomplete\"\n\ntype AutocompleteCreateOptions = {\n  /**\n   * The autocomplete create option icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * The label of the autocomplete create option.\n   */\n  children?: string | ((inputValue: string) => string)\n}\n\nexport type AutocompleteCreateProps = Omit<HTMLUIProps<\"li\">, \"children\"> &\n  AutocompleteCreateOptions\n\nexport const AutocompleteCreate = forwardRef<AutocompleteCreateProps, \"li\">(\n  ({ className, icon, children, ...rest }, ref) => {\n    const { inputValue, styles } = useAutocompleteContext()\n    const { getCreateProps } = useAutocompleteCreate()\n\n    children ??= inputValue\n\n    const css: CSSUIObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      gap: \"0.75rem\",\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx(\"ui-autocomplete__item--create\", className)}\n        __css={css}\n        {...getCreateProps(rest, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon>{icon || <PlusIcon />}</AutocompleteItemIcon>\n        ) : null}\n        {icon ? (\n          <ui.span style={{ pointerEvents: \"none\", flex: 1 }} lineClamp={1}>\n            {runIfFunc(children, inputValue)}\n          </ui.span>\n        ) : (\n          runIfFunc(children, inputValue)\n        )}\n      </ui.li>\n    )\n  },\n)\n\nconst PlusIcon: FC = () => (\n  <svg viewBox=\"0 0 45.402 45.402\" width=\"1em\" height=\"1em\">\n    <path\n      fill=\"currentColor\"\n      d=\"M41.267,18.557H26.832V4.134C26.832,1.851,24.99,0,22.707,0c-2.283,0-4.124,1.851-4.124,4.135v14.432H4.141   c-2.283,0-4.139,1.851-4.138,4.135c-0.001,1.141,0.46,2.187,1.207,2.934c0.748,0.749,1.78,1.222,2.92,1.222h14.453V41.27   c0,1.142,0.453,2.176,1.201,2.922c0.748,0.748,1.777,1.211,2.919,1.211c2.282,0,4.129-1.851,4.129-4.133V26.857h14.435   c2.283,0,4.134-1.867,4.133-4.15C45.399,20.425,43.548,18.557,41.267,18.557z\"\n    />\n  </svg>\n)\n","import type { CSSUIObject, HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport type { FC, ReactElement } from \"react\"\nimport { AutocompleteItemIcon } from \"./autocomplete-icon\"\nimport {\n  useAutocompleteContext,\n  useAutocompleteEmpty,\n} from \"./use-autocomplete\"\n\ntype AutocompleteEmptyOptions = {\n  /**\n   * The autocomplete empty option icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * The label of the autocomplete empty option.\n   */\n  children?: string\n}\n\nexport type AutocompleteEmptyProps = Omit<HTMLUIProps<\"li\">, \"children\"> &\n  AutocompleteEmptyOptions\n\nexport const AutocompleteEmpty = forwardRef<AutocompleteEmptyProps, \"li\">(\n  ({ className, icon, children, ...rest }, ref) => {\n    const { emptyMessage, styles } = useAutocompleteContext()\n    const { getEmptyProps } = useAutocompleteEmpty()\n\n    children ??= emptyMessage\n\n    const css: CSSUIObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      gap: \"0.75rem\",\n      pointerEvents: \"none\",\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx(\"ui-autocomplete__item--empty\", className)}\n        __css={css}\n        {...getEmptyProps(rest, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon>{icon || <MinusIcon />}</AutocompleteItemIcon>\n        ) : null}\n        {icon ? (\n          <ui.span style={{ pointerEvents: \"none\", flex: 1 }} lineClamp={1}>\n            {children}\n          </ui.span>\n        ) : (\n          children\n        )}\n      </ui.li>\n    )\n  },\n)\n\nconst MinusIcon: FC = () => (\n  <svg viewBox=\"0 0 448 512\" width=\"1em\" height=\"1em\">\n    <path\n      fill=\"currentColor\"\n      d=\"M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z\"\n    />\n  </svg>\n)\n","import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\"\nimport type { PortalProps } from \"@yamada-ui/portal\"\nimport { Portal } from \"@yamada-ui/portal\"\nimport { cx, handlerAll } from \"@yamada-ui/utils\"\nimport type { CSSProperties, FC, MouseEventHandler, ReactElement } from \"react\"\nimport { cloneElement, useMemo } from \"react\"\nimport type { AutocompleteIconProps } from \"./autocomplete-icon\"\nimport { AutocompleteClearIcon, AutocompleteIcon } from \"./autocomplete-icon\"\nimport type { AutocompleteListProps } from \"./autocomplete-list\"\nimport { AutocompleteList } from \"./autocomplete-list\"\nimport type { UseAutocompleteProps } from \"./use-autocomplete\"\nimport {\n  AutocompleteProvider,\n  useAutocomplete,\n  AutocompleteDescendantsContextProvider,\n  useAutocompleteContext,\n  useAutocompleteInput,\n} from \"./use-autocomplete\"\nimport { AutocompleteCreate, AutocompleteEmpty } from \"./\"\n\ntype MultiAutocompleteOptions = {\n  /**\n   * The visual separator between each value.\n   *\n   * @default ','\n   */\n  separator?: string\n  /**\n   * The custom display value to use.\n   */\n  component?: FC<{\n    value: string | number\n    label: string\n    index: number\n    onRemove: MouseEventHandler<HTMLElement>\n  }>\n  /**\n   * If `true`, keep the placeholder.\n   *\n   * @default false\n   */\n  keepPlaceholder?: boolean\n  /**\n   * If `true`, display the select clear icon.\n   *\n   * @default true\n   */\n  isClearable?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for multi autocomplete container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for multi autocomplete list element.\n   */\n  listProps?: Omit<AutocompleteListProps, \"children\">\n  /**\n   * Props for multi autocomplete input element.\n   */\n  inputProps?: HTMLUIProps<\"input\">\n  /**\n   * Props for multi autocomplete icon element.\n   */\n  iconProps?: AutocompleteIconProps\n  /**\n   * Props for multi autocomplete clear icon element.\n   */\n  clearIconProps?: AutocompleteIconProps\n  /**\n   * Props to be forwarded to the portal component.\n   *\n   * @default '{ isDisabled: true }'\n   *\n   */\n  portalProps?: Omit<PortalProps, \"children\">\n  /**\n   * If `true`, the list element will be closed when value is selected.\n   *\n   * @default false\n   */\n  closeOnSelect?: boolean\n}\n\nexport type MultiAutocompleteProps = ThemeProps<\"MultiAutocomplete\"> &\n  Omit<UseAutocompleteProps<string[]>, \"closeOnSelect\"> &\n  MultiAutocompleteOptions\n\n/**\n * `MultiAutocomplete` is a component used to display suggestions based on user text input and to obtain multiple values.\n *\n * @see Docs https://yamada-ui.com/components/forms/multi-autocomplete\n */\nexport const MultiAutocomplete = forwardRef<MultiAutocompleteProps, \"input\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\n      \"MultiAutocomplete\",\n      props,\n    )\n    let {\n      className,\n      defaultValue = [],\n      component,\n      separator,\n      isClearable = true,\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      closeOnSelect = false,\n      keepPlaceholder = false,\n      containerProps,\n      listProps,\n      inputProps,\n      iconProps,\n      clearIconProps,\n      portalProps = { isDisabled: true },\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const {\n      value,\n      descendants,\n      formControlProps,\n      getPopoverProps,\n      getContainerProps,\n      getFieldProps,\n      allowCreate,\n      isEmpty,\n      inputValue,\n      computedChildren,\n      onClear,\n      ...rest\n    } = useAutocomplete<string[]>({\n      ...computedProps,\n      defaultValue,\n      closeOnSelect,\n      children,\n    })\n\n    h ??= height\n    minH ??= minHeight\n\n    const css: CSSUIObject = {\n      w: \"100%\",\n      h: \"fit-content\",\n      color,\n      ...styles.container,\n    }\n\n    return (\n      <AutocompleteDescendantsContextProvider value={descendants}>\n        <AutocompleteProvider\n          value={{\n            ...rest,\n            value,\n            formControlProps,\n            inputValue,\n            allowCreate,\n            isEmpty,\n            styles,\n          }}\n        >\n          <Popover {...getPopoverProps()}>\n            <ui.div\n              className={cx(\"ui-multi-autocomplete\", className)}\n              __css={css}\n              {...getContainerProps(containerProps)}\n            >\n              <ui.div\n                className=\"ui-multi-autocomplete__inner\"\n                __css={{ position: \"relative\", ...styles.inner }}\n              >\n                <MultiAutocompleteField\n                  component={component}\n                  separator={separator}\n                  keepPlaceholder={keepPlaceholder}\n                  h={h}\n                  minH={minH}\n                  inputProps={inputProps}\n                  {...getFieldProps({}, ref)}\n                />\n\n                {isClearable && value.length ? (\n                  <AutocompleteClearIcon\n                    {...clearIconProps}\n                    onClick={handlerAll(clearIconProps?.onClick, onClear)}\n                    {...formControlProps}\n                  />\n                ) : (\n                  <AutocompleteIcon {...iconProps} {...formControlProps} />\n                )}\n              </ui.div>\n\n              {!isEmpty ? (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n\n                    {children ?? computedChildren}\n                  </AutocompleteList>\n                </Portal>\n              ) : (\n                <Portal {...portalProps}>\n                  <AutocompleteList {...listProps}>\n                    {allowCreate && inputValue ? (\n                      <AutocompleteCreate />\n                    ) : (\n                      <AutocompleteEmpty />\n                    )}\n                  </AutocompleteList>\n                </Portal>\n              )}\n            </ui.div>\n          </Popover>\n        </AutocompleteProvider>\n      </AutocompleteDescendantsContextProvider>\n    )\n  },\n)\n\ntype MultiAutocompleteFieldProps = HTMLUIProps<\"div\"> &\n  Pick<\n    MultiAutocompleteProps,\n    \"component\" | \"separator\" | \"keepPlaceholder\" | \"inputProps\"\n  >\n\nconst MultiAutocompleteField = forwardRef<MultiAutocompleteFieldProps, \"input\">(\n  (\n    {\n      className,\n      component,\n      separator = \",\",\n      keepPlaceholder,\n      h,\n      minH,\n      placeholder,\n      inputProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const { value, label, inputValue, onChange, isOpen, inputRef, styles } =\n      useAutocompleteContext()\n\n    const { getInputProps } = useAutocompleteInput()\n\n    const cloneChildren = useMemo(() => {\n      if (!label?.length) return null\n\n      if (component) {\n        return (label as string[]).map((label, index) => {\n          const onRemove: MouseEventHandler<HTMLElement> = (ev) => {\n            ev.stopPropagation()\n\n            onChange(value[index])\n\n            if (inputRef.current) inputRef.current.focus()\n          }\n\n          const el = component({\n            value: value[index],\n            label,\n            index,\n            onRemove,\n          })\n\n          const style: CSSProperties = {\n            marginBlockStart: \"0.125rem\",\n            marginBlockEnd: \"0.125rem\",\n            marginInlineEnd: \"0.25rem\",\n          }\n\n          return el\n            ? cloneElement(el as ReactElement, { key: index, style })\n            : null\n        })\n      } else {\n        return (label as string[]).map((value, index) => {\n          const isLast = label.length === index + 1\n\n          return (\n            <ui.span key={index} display=\"inline-block\" me=\"0.25rem\">\n              {value}\n              {!isLast || isOpen ? separator : null}\n            </ui.span>\n          )\n        })\n      }\n    }, [label, component, value, onChange, isOpen, inputRef, separator])\n\n    const css: CSSUIObject = {\n      pe: \"2rem\",\n      h,\n      minH,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      alignItems: \"center\",\n      ...styles.field,\n      cursor: \"text\",\n    }\n\n    return (\n      <PopoverTrigger>\n        <ui.div\n          className={cx(\"ui-multi-autocomplete__field\", className)}\n          __css={css}\n          py={label?.length && component ? \"0.125rem\" : undefined}\n          {...rest}\n        >\n          {cloneChildren}\n\n          <ui.input\n            aria-label=\"Input value\"\n            className=\"ui-multi-autocomplete__field__input\"\n            display=\"inline-block\"\n            flex=\"1\"\n            overflow=\"hidden\"\n            marginBlockStart=\"0.125rem\"\n            marginBlockEnd=\"0.125rem\"\n            placeholder={\n              !label || !label?.length || (keepPlaceholder && isOpen)\n                ? placeholder\n                : undefined\n            }\n            {...getInputProps({ ...inputProps, value: inputValue ?? \"\" }, ref)}\n          />\n        </ui.div>\n      </PopoverTrigger>\n    )\n  },\n)\n"],"mappings":"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ACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;EACHC,CAAA,EAAG;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}