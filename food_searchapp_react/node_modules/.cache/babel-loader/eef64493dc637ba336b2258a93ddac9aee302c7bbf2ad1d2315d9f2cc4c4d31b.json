{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { useWindowEvent } from \"@yamada-ui/use-window-event\";\nimport { isFunction } from \"@yamada-ui/utils\";\nimport { useState, useCallback, useEffect } from \"react\";\nvar serializeJSON = (value, name) => {\n  try {\n    return JSON.stringify(value);\n  } catch (error) {\n    throw new Error(\"useLocalStorage \".concat(name, \": Failed to serialize the value\"));\n  }\n};\nvar deserializeJSON = value => {\n  if (!value) return value;\n  try {\n    return JSON.parse(value);\n  } catch {\n    return value;\n  }\n};\nvar createStorage = (type, name) => {\n  const eventName = type === \"localStorage\" ? \"ui-local-storage\" : \"ui-session-storage\";\n  return _ref => {\n    let {\n      key,\n      defaultValue = void 0,\n      getInitialValueInEffect = true,\n      deserialize = deserializeJSON,\n      serialize = value => serializeJSON(value, name)\n    } = _ref;\n    const readStorageValue = useCallback(skipStorage => {\n      if (typeof window === \"undefined\" || !(type in window) || window[type] === null || skipStorage) {\n        return defaultValue != null ? defaultValue : \"\";\n      }\n      const storageValue = window[type].getItem(key);\n      return storageValue !== null ? deserialize(storageValue) : defaultValue != null ? defaultValue : \"\";\n    }, [key, deserialize, defaultValue]);\n    const [value, setValue] = useState(readStorageValue(getInitialValueInEffect));\n    const setStorageValue = useCallback(valOrFunc => {\n      if (isFunction(valOrFunc)) {\n        setValue(current => {\n          const result = valOrFunc(current);\n          window[type].setItem(key, serialize(result));\n          window.dispatchEvent(new CustomEvent(eventName, {\n            detail: {\n              key,\n              value: valOrFunc(current)\n            }\n          }));\n          return result;\n        });\n      } else {\n        window[type].setItem(key, serialize(valOrFunc));\n        window.dispatchEvent(new CustomEvent(eventName, {\n          detail: {\n            key,\n            value: valOrFunc\n          }\n        }));\n        setValue(valOrFunc);\n      }\n    }, [key, serialize]);\n    const removeStorageValue = useCallback(() => {\n      window[type].removeItem(key);\n      setValue(defaultValue);\n    }, [defaultValue, key]);\n    useWindowEvent(\"storage\", ev => {\n      var _a;\n      if (ev.storageArea === window[type] && ev.key === key) setValue(deserialize((_a = ev.newValue) != null ? _a : void 0));\n    });\n    useWindowEvent(eventName, ev => {\n      if (ev.detail.key === key) setValue(ev.detail.value);\n    });\n    useEffect(() => {\n      if (defaultValue !== void 0 && value === void 0) setStorageValue(defaultValue);\n    }, [defaultValue, value, setStorageValue]);\n    useEffect(() => {\n      if (getInitialValueInEffect) setValue(readStorageValue());\n    }, [getInitialValueInEffect, readStorageValue]);\n    return [value === void 0 ? defaultValue : value, setStorageValue, removeStorageValue];\n  };\n};\nvar useLocalStorage = props => createStorage(\"localStorage\", \"use-local-storage\")(props);\nexport { createStorage, useLocalStorage };","map":{"version":3,"names":["useWindowEvent","isFunction","useState","useCallback","useEffect","serializeJSON","value","name","JSON","stringify","error","Error","concat","deserializeJSON","parse","createStorage","type","eventName","_ref","key","defaultValue","getInitialValueInEffect","deserialize","serialize","readStorageValue","skipStorage","window","storageValue","getItem","setValue","setStorageValue","valOrFunc","current","result","setItem","dispatchEvent","CustomEvent","detail","removeStorageValue","removeItem","ev","_a","storageArea","newValue","useLocalStorage","props"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-local-storage\\src\\index.ts"],"sourcesContent":["import { useWindowEvent } from \"@yamada-ui/use-window-event\"\nimport { isFunction } from \"@yamada-ui/utils\"\nimport { useState, useCallback, useEffect } from \"react\"\n\nexport type StorageType = \"localStorage\" | \"sessionStorage\"\n\nexport type StorageProps<T> = {\n  key: string\n  defaultValue?: T\n  getInitialValueInEffect?: boolean\n  serialize?: (value: T) => string\n  deserialize?: (value: string | undefined) => T\n}\n\nconst serializeJSON = <T>(value: T, name: string) => {\n  try {\n    return JSON.stringify(value)\n  } catch (error) {\n    throw new Error(`useLocalStorage ${name}: Failed to serialize the value`)\n  }\n}\n\nconst deserializeJSON = (value: string | undefined) => {\n  if (!value) return value\n\n  try {\n    return JSON.parse(value)\n  } catch {\n    return value\n  }\n}\n\nexport const createStorage = <T>(type: StorageType, name: string) => {\n  const eventName =\n    type === \"localStorage\" ? \"ui-local-storage\" : \"ui-session-storage\"\n\n  return ({\n    key,\n    defaultValue = undefined,\n    getInitialValueInEffect = true,\n    deserialize = deserializeJSON,\n    serialize = (value: T) => serializeJSON(value, name),\n  }: StorageProps<T>) => {\n    const readStorageValue = useCallback(\n      (skipStorage?: boolean): T => {\n        if (\n          typeof window === \"undefined\" ||\n          !(type in window) ||\n          window[type] === null ||\n          skipStorage\n        ) {\n          return (defaultValue ?? \"\") as T\n        }\n\n        const storageValue = window[type].getItem(key)\n\n        return storageValue !== null\n          ? deserialize(storageValue)\n          : ((defaultValue ?? \"\") as T)\n      },\n      [key, deserialize, defaultValue],\n    )\n\n    const [value, setValue] = useState<T>(\n      readStorageValue(getInitialValueInEffect),\n    )\n\n    const setStorageValue = useCallback(\n      (valOrFunc: T | ((prevState: T) => T)) => {\n        if (isFunction(valOrFunc)) {\n          setValue((current) => {\n            const result = valOrFunc(current)\n\n            window[type].setItem(key, serialize(result))\n            window.dispatchEvent(\n              new CustomEvent(eventName, {\n                detail: { key, value: valOrFunc(current) },\n              }),\n            )\n\n            return result\n          })\n        } else {\n          window[type].setItem(key, serialize(valOrFunc))\n          window.dispatchEvent(\n            new CustomEvent(eventName, { detail: { key, value: valOrFunc } }),\n          )\n\n          setValue(valOrFunc)\n        }\n      },\n      [key, serialize],\n    )\n\n    const removeStorageValue = useCallback(() => {\n      window[type].removeItem(key)\n      setValue(defaultValue as T)\n    }, [defaultValue, key])\n\n    useWindowEvent(\"storage\", (ev) => {\n      if (ev.storageArea === window[type] && ev.key === key)\n        setValue(deserialize(ev.newValue ?? undefined))\n    })\n\n    useWindowEvent(eventName, (ev) => {\n      if (ev.detail.key === key) setValue(ev.detail.value)\n    })\n\n    useEffect(() => {\n      if (defaultValue !== undefined && value === undefined)\n        setStorageValue(defaultValue)\n    }, [defaultValue, value, setStorageValue])\n\n    useEffect(() => {\n      if (getInitialValueInEffect) setValue(readStorageValue())\n    }, [getInitialValueInEffect, readStorageValue])\n\n    return [\n      value === undefined ? defaultValue : value,\n      setStorageValue,\n      removeStorageValue,\n    ] as const\n  }\n}\n\n/**\n * `useLocalStorage` is a custom hook for storing, updating, and retrieving values in local storage.\n *\n * @see Docs https://yamada-ui.com/hooks/use-local-storage\n */\nexport const useLocalStorage = <T = string>(props: StorageProps<T>) =>\n  createStorage<T>(\"localStorage\", \"use-local-storage\")(props)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}