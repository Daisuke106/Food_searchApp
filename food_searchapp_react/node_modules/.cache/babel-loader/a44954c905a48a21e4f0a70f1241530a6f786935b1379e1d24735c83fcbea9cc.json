{"ast":null,"code":"\"use client\";\n\n// src/radio-group.tsx\nimport { useFormControl as useFormControl2 } from \"@yamada-ui/form-control\";\nimport { Flex } from \"@yamada-ui/layouts\";\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\";\nimport { createContext, cx as cx2, isObject, mergeRefs, useCallbackRef as useCallbackRef2, getValidChildren } from \"@yamada-ui/utils\";\nimport { useCallback as useCallback2, useId as useId2, useRef, forwardRef as forwardRef2 } from \"react\";\n\n// src/radio.tsx\nimport { ui, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\";\nimport { useFormControl, useFormControlProps, formControlProperties } from \"@yamada-ui/form-control\";\nimport { trackFocusVisible } from \"@yamada-ui/use-focus-visible\";\nimport { cx, useCallbackRef, funcAll, handlerAll, dataAttr, splitObject } from \"@yamada-ui/utils\";\nimport { forwardRef, useCallback, useEffect, useId, useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar useRadio = ({\n  id,\n  ...props\n}) => {\n  id != null ? id : id = useId();\n  const {\n    id: _id,\n    name,\n    value,\n    isChecked: isCheckedProp,\n    defaultIsChecked,\n    required,\n    disabled,\n    readOnly,\n    onChange: onChangeProp,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    ...computedProps\n  } = useFormControlProps({\n    id,\n    ...props\n  });\n  const [{\n    \"aria-readonly\": _ariaReadonly,\n    ...formControlProps\n  }, rest] = splitObject(computedProps, formControlProperties);\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const [isActive, setActive] = useState(false);\n  const [isChecked, setIsChecked] = useState(!!defaultIsChecked);\n  const isControlled = isCheckedProp !== void 0;\n  const checked = isControlled ? isCheckedProp : isChecked;\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const onChange = useCallbackRef(ev => {\n    if (readOnly || disabled) {\n      ev.preventDefault();\n      return;\n    }\n    if (!isControlled) setIsChecked(ev.target.checked);\n    onChangeProp == null ? void 0 : onChangeProp(ev);\n  }, [readOnly, disabled, isControlled]);\n  const onFocus = useCallbackRef(onFocusProp);\n  const onBlur = useCallbackRef(onBlurProp);\n  const onKeyDown = useCallback(({\n    key\n  }) => {\n    if (key === \" \") setActive(true);\n  }, [setActive]);\n  const onKeyUp = useCallback(({\n    key\n  }) => {\n    if (key === \" \") setActive(false);\n  }, [setActive]);\n  const getContainerProps = useCallback((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    ...props2,\n    ref,\n    \"data-checked\": dataAttr(checked)\n  }), [checked, formControlProps]);\n  const getIconProps = useCallback((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    ...props2,\n    ref,\n    \"data-active\": dataAttr(isActive),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-checked\": dataAttr(checked),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n    \"aria-hidden\": true,\n    onMouseDown: handlerAll(props2.onMouseDown, () => setActive(true)),\n    onMouseUp: handlerAll(props2.onMouseUp, () => setActive(false)),\n    onMouseEnter: handlerAll(props2.onMouseEnter, () => setHovered(true)),\n    onMouseLeave: handlerAll(props2.onMouseLeave, () => setHovered(false))\n  }), [checked, isActive, isFocused, isFocusVisible, isHovered, formControlProps]);\n  const getInputProps = useCallback((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    ...props2,\n    ref,\n    id,\n    type: \"radio\",\n    name,\n    value,\n    required,\n    disabled,\n    readOnly,\n    checked,\n    style: {\n      border: \"0px\",\n      clip: \"rect(0px, 0px, 0px, 0px)\",\n      height: \"1px\",\n      width: \"1px\",\n      margin: \"-1px\",\n      padding: \"0px\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      position: \"absolute\"\n    },\n    onChange: handlerAll(props2.onChange, onChange),\n    onBlur: handlerAll(props2.onBlur, onBlur, () => setFocused(false)),\n    onFocus: handlerAll(props2.onFocus, onFocus, () => setFocused(true)),\n    onKeyDown: handlerAll(props2.onKeyDown, onKeyDown),\n    onKeyUp: handlerAll(props2.onKeyUp, onKeyUp)\n  }), [formControlProps, id, name, value, required, disabled, readOnly, checked, onChange, onBlur, onFocus, onKeyDown, onKeyUp]);\n  const getLabelProps = useCallback((props2 = {}, ref = null) => ({\n    ...formControlProps,\n    props: props2,\n    ref,\n    onMouseDown: handlerAll(props2.onMouseDown, ev => {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }),\n    onTouchStart: handlerAll(props2.onTouchStart, ev => {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }),\n    \"data-checked\": dataAttr(checked)\n  }), [checked, formControlProps]);\n  return {\n    props: rest,\n    isFocusVisible,\n    isFocused,\n    isHovered,\n    isActive,\n    isChecked: checked,\n    getContainerProps,\n    getInputProps,\n    getIconProps,\n    getLabelProps\n  };\n};\nvar Radio = forwardRef((props, ref) => {\n  var _a, _b, _c, _d;\n  const group = useRadioGroupContext();\n  const {\n    value: groupValue,\n    ...groupProps\n  } = {\n    ...group\n  };\n  const control = useFormControl(props);\n  const [styles, mergedProps] = useMultiComponentStyle(\"Radio\", {\n    ...groupProps,\n    ...props\n  });\n  const {\n    className,\n    gap = \"0.5rem\",\n    isRequired = (_a = groupProps.isRequired) != null ? _a : control.isRequired,\n    isReadOnly = (_b = groupProps.isReadOnly) != null ? _b : control.isReadOnly,\n    isDisabled = (_c = groupProps.isDisabled) != null ? _c : control.isDisabled,\n    isInvalid = (_d = groupProps.isInvalid) != null ? _d : control.isInvalid,\n    iconProps,\n    inputProps,\n    labelProps,\n    children,\n    ...computedProps\n  } = omitThemeProps(mergedProps);\n  const isChecked = groupValue && computedProps.value ? groupValue === computedProps.value : computedProps.isChecked;\n  const onChange = groupProps.onChange && computedProps.value ? funcAll(groupProps.onChange, computedProps.onChange) : computedProps.onChange;\n  const {\n    getContainerProps,\n    getInputProps,\n    getIconProps,\n    getLabelProps,\n    props: rest\n  } = useRadio({\n    ...computedProps,\n    isRequired,\n    isReadOnly,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    onChange\n  });\n  return /* @__PURE__ */jsxs(ui.label, {\n    className: cx(\"ui-radio\", className),\n    ...getContainerProps(),\n    ...rest,\n    __css: {\n      cursor: \"pointer\",\n      position: \"relative\",\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      verticalAlign: \"top\",\n      gap,\n      ...styles.container\n    },\n    children: [/* @__PURE__ */jsx(ui.input, {\n      className: \"ui-radio__input\",\n      ...getInputProps(inputProps, ref)\n    }), /* @__PURE__ */jsx(ui.span, {\n      className: \"ui-radio__icon\",\n      ...getIconProps(iconProps),\n      __css: {\n        position: \"relative\",\n        display: \"inline-block\",\n        userSelect: \"none\",\n        ...styles.icon\n      }\n    }), /* @__PURE__ */jsx(ui.span, {\n      className: \"ui-radio__label\",\n      ...getLabelProps(labelProps),\n      __css: {\n        ...styles.label\n      },\n      children\n    })]\n  });\n});\nRadio.displayName = \"Radio\";\n\n// src/radio-group.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar isEvent = value => value && isObject(value) && isObject(value.target);\nvar useRadioGroup = ({\n  id,\n  name,\n  isNative,\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  ...props\n}) => {\n  id != null ? id : id = useId2();\n  name != null ? name : name = `radio-${id}`;\n  const onChangeRef = useCallbackRef2(onChangeProp);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeRef\n  });\n  const containerRef = useRef(null);\n  const onFocus = useCallback2(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    let query = `input:not(:disabled):checked`;\n    let firstInput = container.querySelector(query);\n    if (firstInput) {\n      firstInput.focus();\n    } else {\n      query = `input:not(:disabled)`;\n      firstInput = container.querySelector(query);\n      firstInput == null ? void 0 : firstInput.focus();\n    }\n  }, []);\n  const onChange = useCallback2(evOrValue => {\n    const nextValue = isEvent(evOrValue) ? evOrValue.target.value : evOrValue;\n    setValue(nextValue);\n  }, [setValue]);\n  const getContainerProps = useCallback2((props2 = {}, ref = null) => ({\n    ...props2,\n    ref: mergeRefs(ref, containerRef),\n    role: \"group\"\n  }), []);\n  const getRadioProps = useCallback2((props2 = {}, ref = null) => ({\n    ...props2,\n    ref,\n    name,\n    [isNative ? \"checked\" : \"isChecked\"]: value != null ? props2.value === value : void 0,\n    onChange\n  }), [name, value, onChange, isNative]);\n  return {\n    props,\n    id,\n    name,\n    value,\n    setValue,\n    onChange,\n    onFocus,\n    getContainerProps,\n    getRadioProps\n  };\n};\nvar [RadioGroupProvider, useRadioGroupContext] = createContext({\n  strict: false,\n  name: \"RadioGroupContext\"\n});\nvar RadioGroup = forwardRef2(({\n  className,\n  size,\n  variant,\n  colorScheme,\n  children,\n  items = [],\n  direction = \"column\",\n  gap,\n  ...props\n}, ref) => {\n  const {\n    id,\n    name,\n    value,\n    onChange,\n    getContainerProps,\n    props: computedProps\n  } = useRadioGroup(props);\n  const {\n    isRequired,\n    isReadOnly,\n    isDisabled,\n    isInvalid,\n    ...rest\n  } = useFormControl2({\n    id,\n    ...computedProps\n  });\n  const validChildren = getValidChildren(children);\n  let computedChildren = [];\n  if (!validChildren.length && items.length) {\n    computedChildren = items.map(({\n      label,\n      value: value2,\n      ...props2\n    }, i) => /* @__PURE__ */jsx2(Radio, {\n      value: value2,\n      ...props2,\n      children: label\n    }, i));\n  }\n  return /* @__PURE__ */jsx2(RadioGroupProvider, {\n    value: {\n      size,\n      variant,\n      colorScheme,\n      isRequired,\n      isReadOnly,\n      isDisabled,\n      isInvalid,\n      name,\n      value,\n      onChange\n    },\n    children: /* @__PURE__ */jsx2(Flex, {\n      ref,\n      className: cx2(\"ui-radio-group\", className),\n      gap: gap != null ? gap : direction === \"row\" ? \"1rem\" : void 0,\n      ...getContainerProps({\n        ...rest,\n        id,\n        name\n      }),\n      direction,\n      children: children != null ? children : computedChildren\n    })\n  });\n});\nRadioGroup.displayName = \"RadioGroup\";\nexport { useRadioGroup, useRadioGroupContext, RadioGroup, useRadio, Radio };","map":{"version":3,"names":["useFormControl","useFormControl2","Flex","useControllableState","createContext","cx","cx2","isObject","mergeRefs","useCallbackRef","useCallbackRef2","getValidChildren","useCallback","useCallback2","useId","useId2","useRef","forwardRef","forwardRef2","ui","useMultiComponentStyle","omitThemeProps","useFormControlProps","formControlProperties","trackFocusVisible","funcAll","handlerAll","dataAttr","splitObject","useEffect","useState","jsx","jsxs","useRadio","id","props","_id","name","value","isChecked","isCheckedProp","defaultIsChecked","required","disabled","readOnly","onChange","onChangeProp","onFocus","onFocusProp","onBlur","onBlurProp","computedProps","_ariaReadonly","formControlProps","rest","isFocusVisible","setIsFocusVisible","isFocused","setFocused","isHovered","setHovered","isActive","setActive","setIsChecked","isControlled","checked","ev","preventDefault","target","onKeyDown","key","onKeyUp","getContainerProps","props2","ref","getIconProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","type","style","border","clip","height","width","margin","padding","overflow","whiteSpace","position","getLabelProps","stopPropagation","onTouchStart","Radio","_a","_b","_c","_d","group","useRadioGroupContext","groupValue","groupProps","control","styles","mergedProps","className","gap","isRequired","isReadOnly","isDisabled","isInvalid","iconProps","inputProps","labelProps","children","label","__css","cursor","display","alignItems","verticalAlign","container","input","span","userSelect","icon","displayName","jsx2","isEvent","useRadioGroup","isNative","valueProp","defaultValue","onChangeRef","setValue","containerRef","current","query","firstInput","querySelector","focus","evOrValue","nextValue","role","getRadioProps","RadioGroupProvider","strict","RadioGroup","size","variant","colorScheme","items","direction","validChildren","computedChildren","length","map","value2","i"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\radio\\src\\radio-group.tsx","C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\radio\\src\\radio.tsx"],"sourcesContent":["import type { ComponentArgs, ThemeProps, UIPropGetter } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport { useFormControl } from \"@yamada-ui/form-control\"\nimport type { FlexProps } from \"@yamada-ui/layouts\"\nimport { Flex } from \"@yamada-ui/layouts\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport type { DOMAttributes, Dict, PropGetter } from \"@yamada-ui/utils\"\nimport {\n  createContext,\n  cx,\n  isObject,\n  mergeRefs,\n  useCallbackRef,\n  getValidChildren,\n} from \"@yamada-ui/utils\"\nimport type { ChangeEvent, ForwardedRef, Ref, ReactElement } from \"react\"\nimport { useCallback, useId, useRef, forwardRef } from \"react\"\nimport type { RadioProps } from \"./radio\"\nimport { Radio } from \"./radio\"\n\nexport type RadioItem<Y extends string | number = string> = RadioProps<Y> & {\n  label?: string\n}\n\nconst isEvent = (value: any): value is { target: HTMLInputElement } =>\n  value && isObject(value) && isObject(value.target)\n\nexport type UseRadioGroupProps<Y extends string | number = string> = {\n  /**\n   * The top-level id string that will be applied to the radios.\n   * The index of the radio will be appended to this top-level id.\n   */\n  id?: string\n  /**\n   * The HTML `name` attribute used for forms.\n   */\n  name?: string\n  /**\n   * The value of the radio group.\n   */\n  value?: Y\n  /**\n   * The initial value of the radio group.\n   */\n  defaultValue?: Y\n  /**\n   * The callback fired when any children radio is checked or unchecked.\n   */\n  onChange?: (value: Y) => void\n  /**\n   * If `true`, input elements will receive `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs.\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\nexport const useRadioGroup = <\n  Y extends string | number = string,\n  M extends Dict = Dict,\n>({\n  id,\n  name,\n  isNative,\n  value: valueProp,\n  defaultValue,\n  onChange: onChangeProp,\n  ...props\n}: UseRadioGroupProps<Y> & M) => {\n  id ??= useId()\n  name ??= `radio-${id}`\n\n  const onChangeRef = useCallbackRef(onChangeProp)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeRef,\n  })\n\n  const containerRef = useRef<any>(null)\n\n  const onFocus = useCallback(() => {\n    const container = containerRef.current\n\n    if (!container) return\n\n    let query = `input:not(:disabled):checked`\n\n    let firstInput = container.querySelector(query) as HTMLElement | undefined\n\n    if (firstInput) {\n      firstInput.focus()\n    } else {\n      query = `input:not(:disabled)`\n      firstInput = container.querySelector(query) as HTMLElement | undefined\n\n      firstInput?.focus()\n    }\n  }, [])\n\n  const onChange = useCallback(\n    (evOrValue: ChangeEvent<HTMLInputElement> | Y) => {\n      const nextValue = (\n        isEvent(evOrValue) ? evOrValue.target.value : evOrValue\n      ) as Y\n\n      setValue(nextValue)\n    },\n    [setValue],\n  )\n\n  const getContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, containerRef),\n      role: \"group\",\n    }),\n    [],\n  )\n\n  const getRadioProps: UIPropGetter<\"input\", { value?: Y }, { value?: Y }> =\n    useCallback(\n      (props = {}, ref = null) => ({\n        ...props,\n        ref,\n        name,\n        [isNative ? \"checked\" : \"isChecked\"]:\n          value != null ? props.value === value : undefined,\n        onChange,\n      }),\n      [name, value, onChange, isNative],\n    )\n\n  return {\n    props,\n    id,\n    name,\n    value,\n    setValue,\n    onChange,\n    onFocus,\n    getContainerProps,\n    getRadioProps,\n  }\n}\n\nexport type UseRadioGroupReturn<Y extends string | number = string> =\n  ReturnType<typeof useRadioGroup<Y>>\n\nexport type RadioGroupProps<Y extends string | number = string> =\n  ThemeProps<\"Radio\"> &\n    Omit<FlexProps, \"onChange\"> &\n    UseRadioGroupProps<Y> &\n    FormControlOptions & {\n      /**\n       * If provided, generate radios based on items.\n       *\n       * @default '[]'\n       */\n      items?: RadioItem<Y>[]\n    }\n\ntype RadioGroupContext = ThemeProps<\"Radio\"> &\n  FormControlOptions & {\n    name: string\n    value: string | number\n    onChange: (\n      evOrValue: ChangeEvent<HTMLInputElement> | string | number,\n    ) => void\n  }\n\nconst [RadioGroupProvider, useRadioGroupContext] = createContext<\n  RadioGroupContext | undefined\n>({\n  strict: false,\n  name: \"RadioGroupContext\",\n})\n\nexport { useRadioGroupContext }\n\nexport const RadioGroup = forwardRef(\n  <Y extends string | number = string>(\n    {\n      className,\n      size,\n      variant,\n      colorScheme,\n      children,\n      items = [],\n      direction = \"column\",\n      gap,\n      ...props\n    }: RadioGroupProps<Y>,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const {\n      id,\n      name,\n      value,\n      onChange,\n      getContainerProps,\n      props: computedProps,\n    } = useRadioGroup(props)\n    const { isRequired, isReadOnly, isDisabled, isInvalid, ...rest } =\n      useFormControl({\n        id,\n        ...computedProps,\n      })\n\n    const validChildren = getValidChildren(children)\n    let computedChildren: ReactElement[] = []\n\n    if (!validChildren.length && items.length) {\n      computedChildren = items.map(({ label, value, ...props }, i) => (\n        <Radio key={i} value={value} {...props}>\n          {label}\n        </Radio>\n      ))\n    }\n\n    return (\n      <RadioGroupProvider\n        value={\n          {\n            size,\n            variant,\n            colorScheme,\n            isRequired,\n            isReadOnly,\n            isDisabled,\n            isInvalid,\n            name,\n            value,\n            onChange,\n          } as RadioGroupContext\n        }\n      >\n        <Flex\n          ref={ref}\n          className={cx(\"ui-radio-group\", className)}\n          gap={gap ?? (direction === \"row\" ? \"1rem\" : undefined)}\n          {...getContainerProps({\n            ...rest,\n            id,\n            name,\n          } as DOMAttributes<HTMLElement>)}\n          direction={direction}\n        >\n          {children ?? computedChildren}\n        </Flex>\n      </RadioGroupProvider>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: RadioGroupProps<Y> & { ref?: Ref<HTMLDivElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nRadioGroup.displayName = \"RadioGroup\"\n","import type {\n  HTMLUIProps,\n  ThemeProps,\n  ComponentArgs,\n  UIPropGetter,\n} from \"@yamada-ui/core\"\nimport { ui, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  useFormControl,\n  useFormControlProps,\n  formControlProperties,\n} from \"@yamada-ui/form-control\"\nimport { trackFocusVisible } from \"@yamada-ui/use-focus-visible\"\nimport type { Dict, PropGetter } from \"@yamada-ui/utils\"\nimport {\n  cx,\n  useCallbackRef,\n  funcAll,\n  handlerAll,\n  dataAttr,\n  splitObject,\n} from \"@yamada-ui/utils\"\nimport type {\n  ForwardedRef,\n  Ref,\n  ChangeEvent,\n  ChangeEventHandler,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  SyntheticEvent,\n  DOMAttributes,\n} from \"react\"\nimport { forwardRef, useCallback, useEffect, useId, useState } from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\nexport type UseRadioProps<Y extends string | number = string> =\n  FormControlOptions & {\n    /**\n     * id assigned to input.\n     */\n    id?: string\n    /**\n     * The name of the input field in a radio.\n     */\n    name?: string\n    /**\n     * The value to be used in the radio button.\n     */\n    value?: Y\n    /**\n     * If `true`, the radio will be initially checked.\n     *\n     * @default false\n     */\n    defaultIsChecked?: boolean\n    /**\n     * If `true`, the radio will be checked.\n     *\n     * @default false\n     */\n    isChecked?: boolean\n    /**\n     * The callback invoked when the checked state changes.\n     */\n    onChange?: ChangeEventHandler<HTMLInputElement>\n  }\n\nexport const useRadio = <\n  Y extends string | number = string,\n  M extends Dict = Dict,\n>({\n  id,\n  ...props\n}: UseRadioProps<Y> & M) => {\n  id ??= useId()\n  const {\n    id: _id,\n    name,\n    value,\n    isChecked: isCheckedProp,\n    defaultIsChecked,\n    required,\n    disabled,\n    readOnly,\n    onChange: onChangeProp,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    ...computedProps\n  } = useFormControlProps({ id, ...props })\n  const [{ \"aria-readonly\": _ariaReadonly, ...formControlProps }, rest] =\n    splitObject(computedProps, formControlProperties)\n\n  const [isFocusVisible, setIsFocusVisible] = useState<boolean>(false)\n  const [isFocused, setFocused] = useState<boolean>(false)\n  const [isHovered, setHovered] = useState<boolean>(false)\n  const [isActive, setActive] = useState<boolean>(false)\n\n  const [isChecked, setIsChecked] = useState<boolean>(!!defaultIsChecked)\n\n  const isControlled = isCheckedProp !== undefined\n  const checked = isControlled ? (isCheckedProp as boolean) : isChecked\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const onChange = useCallbackRef(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (readOnly || disabled) {\n        ev.preventDefault()\n\n        return\n      }\n\n      if (!isControlled) setIsChecked(ev.target.checked)\n\n      onChangeProp?.(ev)\n    },\n    [readOnly, disabled, isControlled],\n  )\n  const onFocus = useCallbackRef(onFocusProp)\n  const onBlur = useCallbackRef(onBlurProp)\n\n  const onKeyDown = useCallback(\n    ({ key }: KeyboardEvent<Element>) => {\n      if (key === \" \") setActive(true)\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    ({ key }: KeyboardEvent<Element>) => {\n      if (key === \" \") setActive(false)\n    },\n    [setActive],\n  )\n\n  const getContainerProps: UIPropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      ...props,\n      ref,\n      \"data-checked\": dataAttr(checked),\n    }),\n    [checked, formControlProps],\n  )\n\n  const getIconProps: UIPropGetter<\"span\"> = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(checked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"aria-hidden\": true,\n      onMouseDown: handlerAll(props.onMouseDown, () => setActive(true)),\n      onMouseUp: handlerAll(props.onMouseUp, () => setActive(false)),\n      onMouseEnter: handlerAll(props.onMouseEnter, () => setHovered(true)),\n      onMouseLeave: handlerAll(props.onMouseLeave, () => setHovered(false)),\n    }),\n    [checked, isActive, isFocused, isFocusVisible, isHovered, formControlProps],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      ...props,\n      ref,\n      id,\n      type: \"radio\",\n      name,\n      value,\n      required,\n      disabled,\n      readOnly,\n      checked,\n      style: {\n        border: \"0px\",\n        clip: \"rect(0px, 0px, 0px, 0px)\",\n        height: \"1px\",\n        width: \"1px\",\n        margin: \"-1px\",\n        padding: \"0px\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        position: \"absolute\",\n      },\n      onChange: handlerAll(props.onChange, onChange),\n      onBlur: handlerAll(props.onBlur, onBlur, () => setFocused(false)),\n      onFocus: handlerAll(props.onFocus, onFocus, () => setFocused(true)),\n      onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n      onKeyUp: handlerAll(props.onKeyUp, onKeyUp),\n    }),\n    [\n      formControlProps,\n      id,\n      name,\n      value,\n      required,\n      disabled,\n      readOnly,\n      checked,\n      onChange,\n      onBlur,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...formControlProps,\n      props,\n      ref,\n      onMouseDown: handlerAll(props.onMouseDown, (ev: SyntheticEvent) => {\n        ev.preventDefault()\n        ev.stopPropagation()\n      }),\n      onTouchStart: handlerAll(props.onTouchStart, (ev: SyntheticEvent) => {\n        ev.preventDefault()\n        ev.stopPropagation()\n      }),\n      \"data-checked\": dataAttr(checked),\n    }),\n    [checked, formControlProps],\n  )\n\n  return {\n    props: rest,\n    isFocusVisible,\n    isFocused,\n    isHovered,\n    isActive,\n    isChecked: checked,\n    getContainerProps,\n    getInputProps,\n    getIconProps,\n    getLabelProps,\n  }\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n\ntype RadioOptions = {\n  iconProps?: HTMLUIProps<\"span\">\n  inputProps?: InputHTMLAttributes<HTMLInputElement>\n  labelProps?: HTMLUIProps<\"span\">\n}\n\nexport type RadioProps<Y extends string | number = string> = Omit<\n  HTMLUIProps<\"label\">,\n  keyof UseRadioProps\n> &\n  ThemeProps<\"Radio\"> &\n  UseRadioProps<Y> &\n  RadioOptions\n\n/**\n * `Radio` is a component used for allowing users to select one option from multiple choices.\n *\n * @see Docs https://yamada-ui.com/components/forms/radio\n */\nexport const Radio = forwardRef(\n  <Y extends string | number = string>(\n    props: RadioProps<Y>,\n    ref: ForwardedRef<HTMLInputElement>,\n  ) => {\n    const group = useRadioGroupContext()\n    const { value: groupValue, ...groupProps } = { ...group }\n    const control = useFormControl(props)\n    const [styles, mergedProps] = useMultiComponentStyle(\"Radio\", {\n      ...groupProps,\n      ...props,\n    })\n    const {\n      className,\n      gap = \"0.5rem\",\n      isRequired = groupProps.isRequired ?? control.isRequired,\n      isReadOnly = groupProps.isReadOnly ?? control.isReadOnly,\n      isDisabled = groupProps.isDisabled ?? control.isDisabled,\n      isInvalid = groupProps.isInvalid ?? control.isInvalid,\n      iconProps,\n      inputProps,\n      labelProps,\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const isChecked =\n      groupValue && computedProps.value\n        ? groupValue === computedProps.value\n        : computedProps.isChecked\n\n    const onChange =\n      groupProps.onChange && computedProps.value\n        ? funcAll(groupProps.onChange, computedProps.onChange)\n        : computedProps.onChange\n\n    const {\n      getContainerProps,\n      getInputProps,\n      getIconProps,\n      getLabelProps,\n      props: rest,\n    } = useRadio({\n      ...computedProps,\n      isRequired,\n      isReadOnly,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      onChange,\n    })\n\n    return (\n      <ui.label\n        className={cx(\"ui-radio\", className)}\n        {...getContainerProps()}\n        {...rest}\n        __css={{\n          cursor: \"pointer\",\n          position: \"relative\",\n          display: \"inline-flex\",\n          alignItems: \"center\",\n          verticalAlign: \"top\",\n          gap,\n          ...styles.container,\n        }}\n      >\n        <ui.input\n          className=\"ui-radio__input\"\n          {...getInputProps(inputProps, ref)}\n        />\n\n        <ui.span\n          className=\"ui-radio__icon\"\n          {...getIconProps(iconProps)}\n          __css={{\n            position: \"relative\",\n            display: \"inline-block\",\n            userSelect: \"none\",\n            ...styles.icon,\n          }}\n        />\n\n        <ui.span\n          className=\"ui-radio__label\"\n          {...getLabelProps(labelProps as DOMAttributes<HTMLElement>)}\n          __css={{ ...styles.label }}\n        >\n          {children}\n        </ui.span>\n      </ui.label>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: RadioProps<Y> & { ref?: Ref<HTMLInputElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nRadio.displayName = \"Radio\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}