{"ast":null,"code":"\"use client\";\n\n// src/index.ts\nimport { useCallbackRef } from \"@yamada-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\nvar useDisclosure = (props = {}) => {\n  var _a, _b;\n  const [defaultIsOpen, setIsOpen] = useState((_a = props.defaultIsOpen) != null ? _a : false);\n  const timingRef = useRef((_b = props.timing) != null ? _b : \"after\");\n  const handleOpen = useCallbackRef(props.onOpen);\n  const handleClose = useCallbackRef(props.onClose);\n  const isControlled = props.isOpen !== void 0;\n  const isOpen = props.isOpen !== void 0 ? props.isOpen : defaultIsOpen;\n  const onOpen = useCallback(async (...args) => {\n    if (timingRef.current === \"before\") await (handleOpen == null ? void 0 : handleOpen(...args));\n    if (!isControlled) setIsOpen(true);\n    if (timingRef.current === \"after\") await (handleOpen == null ? void 0 : handleOpen(...args));\n  }, [isControlled, handleOpen, timingRef]);\n  const onClose = useCallback(async (...args) => {\n    if (timingRef.current === \"before\") await (handleClose == null ? void 0 : handleClose(...args));\n    if (!isControlled) setIsOpen(false);\n    if (timingRef.current === \"after\") await (handleClose == null ? void 0 : handleClose(...args));\n  }, [isControlled, handleClose, timingRef]);\n  const onToggle = useCallback((...args) => !isOpen ? onOpen(...args) : onClose(...args), [isOpen, onOpen, onClose]);\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  };\n};\nvar useLazyDisclosure = ({\n  wasSelected,\n  enabled,\n  isSelected,\n  mode = \"unmount\"\n}) => {\n  if (!enabled) return true;\n  if (isSelected) return true;\n  if (mode === \"keepMounted\" && wasSelected) return true;\n  return false;\n};\nexport { useDisclosure, useLazyDisclosure };","map":{"version":3,"names":["useCallbackRef","useCallback","useRef","useState","useDisclosure","props","_a","_b","defaultIsOpen","setIsOpen","timingRef","timing","handleOpen","onOpen","handleClose","onClose","isControlled","isOpen","args","current","onToggle","useLazyDisclosure","wasSelected","enabled","isSelected","mode"],"sources":["C:\\チーム開発\\Food_searchApp\\food_searchapp_react\\node_modules\\@yamada-ui\\use-disclosure\\src\\index.ts"],"sourcesContent":["import { useCallbackRef } from \"@yamada-ui/utils\"\nimport { useCallback, useRef, useState } from \"react\"\n\nexport type UseDisclosureProps<\n  T extends (...args: any[]) => any = () => void,\n  K extends (...args: any[]) => any = () => void,\n> = {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onOpen?: T\n  onClose?: K\n  timing?: \"before\" | \"after\"\n}\n\n/**\n * `useDisclosure` is a custom hook that helps handle common open/close or toggle scenarios.\n * It can be used to control components such as `Modal`, `Dialog`, `Drawer`, etc.\n *\n * @see Docs https://yamada-ui.com/hooks/use-disclosure\n */\nexport const useDisclosure = <\n  T extends (...args: any[]) => any = () => void,\n  K extends (...args: any[]) => any = () => void,\n>(\n  props: UseDisclosureProps<T, K> = {},\n) => {\n  const [defaultIsOpen, setIsOpen] = useState<boolean>(\n    props.defaultIsOpen ?? false,\n  )\n\n  const timingRef = useRef(props.timing ?? \"after\")\n  const handleOpen = useCallbackRef(props.onOpen)\n  const handleClose = useCallbackRef(props.onClose)\n\n  const isControlled = props.isOpen !== undefined\n  const isOpen = props.isOpen !== undefined ? props.isOpen : defaultIsOpen\n\n  const onOpen = useCallback(\n    async (...args: any) => {\n      if (timingRef.current === \"before\") await handleOpen?.(...args)\n\n      if (!isControlled) setIsOpen(true)\n\n      if (timingRef.current === \"after\") await handleOpen?.(...args)\n    },\n    [isControlled, handleOpen, timingRef],\n  ) as unknown as T\n\n  const onClose = useCallback(\n    async (...args: any) => {\n      if (timingRef.current === \"before\") await handleClose?.(...args)\n\n      if (!isControlled) setIsOpen(false)\n\n      if (timingRef.current === \"after\") await handleClose?.(...args)\n    },\n    [isControlled, handleClose, timingRef],\n  ) as unknown as K\n\n  const onToggle = useCallback(\n    (...args: any) => (!isOpen ? onOpen(...args) : onClose(...args)),\n    [isOpen, onOpen, onClose],\n  ) as unknown as T | K\n\n  return { isOpen, onOpen, onClose, onToggle }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n\nexport type LazyMode = \"unmount\" | \"keepMounted\"\n\nexport type UseLazyDisclosureProps = {\n  enabled?: boolean\n  isSelected?: boolean\n  wasSelected?: boolean\n  mode?: LazyMode\n}\n\nexport const useLazyDisclosure = ({\n  wasSelected,\n  enabled,\n  isSelected,\n  mode = \"unmount\",\n}: UseLazyDisclosureProps) => {\n  if (!enabled) return true\n\n  if (isSelected) return true\n\n  if (mode === \"keepMounted\" && wasSelected) return true\n\n  return false\n}\n"],"mappings":";;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAASC,WAAA,EAAaC,MAAA,EAAQC,QAAA,QAAgB;AAmBvC,IAAMC,aAAA,GAAgBA,CAI3BC,KAAA,GAAkC,CAAC,MAChC;EAzBL,IAAAC,EAAA,EAAAC,EAAA;EA0BE,MAAM,CAACC,aAAA,EAAeC,SAAS,IAAIN,QAAA,EACjCG,EAAA,GAAAD,KAAA,CAAMG,aAAA,KAAN,OAAAF,EAAA,GAAuB,KACzB;EAEA,MAAMI,SAAA,GAAYR,MAAA,EAAOK,EAAA,GAAAF,KAAA,CAAMM,MAAA,KAAN,OAAAJ,EAAA,GAAgB,OAAO;EAChD,MAAMK,UAAA,GAAaZ,cAAA,CAAeK,KAAA,CAAMQ,MAAM;EAC9C,MAAMC,WAAA,GAAcd,cAAA,CAAeK,KAAA,CAAMU,OAAO;EAEhD,MAAMC,YAAA,GAAeX,KAAA,CAAMY,MAAA,KAAW;EACtC,MAAMA,MAAA,GAASZ,KAAA,CAAMY,MAAA,KAAW,SAAYZ,KAAA,CAAMY,MAAA,GAAST,aAAA;EAE3D,MAAMK,MAAA,GAASZ,WAAA,CACb,UAAUiB,IAAA,KAAc;IACtB,IAAIR,SAAA,CAAUS,OAAA,KAAY,UAAU,OAAMP,UAAA,oBAAAA,UAAA,CAAa,GAAGM,IAAA;IAE1D,IAAI,CAACF,YAAA,EAAcP,SAAA,CAAU,IAAI;IAEjC,IAAIC,SAAA,CAAUS,OAAA,KAAY,SAAS,OAAMP,UAAA,oBAAAA,UAAA,CAAa,GAAGM,IAAA;EAC3D,GACA,CAACF,YAAA,EAAcJ,UAAA,EAAYF,SAAS,CACtC;EAEA,MAAMK,OAAA,GAAUd,WAAA,CACd,UAAUiB,IAAA,KAAc;IACtB,IAAIR,SAAA,CAAUS,OAAA,KAAY,UAAU,OAAML,WAAA,oBAAAA,WAAA,CAAc,GAAGI,IAAA;IAE3D,IAAI,CAACF,YAAA,EAAcP,SAAA,CAAU,KAAK;IAElC,IAAIC,SAAA,CAAUS,OAAA,KAAY,SAAS,OAAML,WAAA,oBAAAA,WAAA,CAAc,GAAGI,IAAA;EAC5D,GACA,CAACF,YAAA,EAAcF,WAAA,EAAaJ,SAAS,CACvC;EAEA,MAAMU,QAAA,GAAWnB,WAAA,CACf,IAAIiB,IAAA,KAAe,CAACD,MAAA,GAASJ,MAAA,CAAO,GAAGK,IAAI,IAAIH,OAAA,CAAQ,GAAGG,IAAI,GAC9D,CAACD,MAAA,EAAQJ,MAAA,EAAQE,OAAO,CAC1B;EAEA,OAAO;IAAEE,MAAA;IAAQJ,MAAA;IAAQE,OAAA;IAASK;EAAS;AAC7C;AAaO,IAAMC,iBAAA,GAAoBA,CAAC;EAChCC,WAAA;EACAC,OAAA;EACAC,UAAA;EACAC,IAAA,GAAO;AACT,MAA8B;EAC5B,IAAI,CAACF,OAAA,EAAS,OAAO;EAErB,IAAIC,UAAA,EAAY,OAAO;EAEvB,IAAIC,IAAA,KAAS,iBAAiBH,WAAA,EAAa,OAAO;EAElD,OAAO;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}