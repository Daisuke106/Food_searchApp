import React, { PointerEventHandler, Key } from 'react';

type RippleOptions = {
    key: React.Key;
    x: number;
    y: number;
    size: number;
};
type UseRippleProps<T extends any = HTMLElement> = {
    disabled?: boolean;
    isDisabled?: boolean;
    onPointerDown?: PointerEventHandler<T>;
};
declare const useRipple: <T extends unknown = HTMLElement>({ disabled, isDisabled, ...rest }?: UseRippleProps<T>) => {
    ripples: RippleOptions[];
    onPointerDown: (event: React.PointerEvent<T>) => void;
    onClear: (key: Key) => void;
};
type UseRippleReturn = ReturnType<typeof useRipple>;

export { type RippleOptions, type UseRippleProps, type UseRippleReturn, useRipple };
