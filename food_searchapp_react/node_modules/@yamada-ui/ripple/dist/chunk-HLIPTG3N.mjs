"use client"

// src/ripple.tsx
import { AnimatePresence, Motion } from "@yamada-ui/motion";
import { cx, handlerAll } from "@yamada-ui/utils";
import { Fragment, jsx } from "react/jsx-runtime";
var clamp = (value, min, max) => Math.min(Math.max(value, min), max);
var Ripple = ({
  className,
  ripples,
  onAnimationComplete,
  onClear,
  color = "currentColor",
  style,
  isDisabled,
  ...rest
}) => {
  if (isDisabled)
    return null;
  const css = {
    rounded: "fallback(full, 9999px)",
    zIndex: "fallback(kurillin, 9)"
  };
  return /* @__PURE__ */ jsx(Fragment, { children: ripples.map(({ key, x, y, size }) => {
    const duration = clamp(0.01 * size, 0.2, size > 100 ? 0.75 : 0.5);
    return /* @__PURE__ */ jsx(AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ jsx(
      Motion,
      {
        as: "span",
        className: cx("ui-ripple", className),
        initial: { transform: "scale(0)", opacity: 0.35 },
        animate: { transform: "scale(2)", opacity: 0 },
        exit: { opacity: 0 },
        transition: { duration },
        bgColor: color,
        style: {
          position: "absolute",
          transformOrigin: "center",
          pointerEvents: "none",
          left: x,
          top: y,
          width: `${size}px`,
          height: `${size}px`,
          ...style
        },
        __css: css,
        ...rest,
        onAnimationComplete: handlerAll(
          onAnimationComplete,
          () => onClear(key)
        )
      }
    ) }, key);
  }) });
};

export {
  Ripple
};
//# sourceMappingURL=chunk-HLIPTG3N.mjs.map