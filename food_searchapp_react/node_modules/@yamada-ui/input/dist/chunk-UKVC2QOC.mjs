"use client"
import {
  Input
} from "./chunk-PFAPK5JD.mjs";

// src/input-group.tsx
import {
  ui as ui3,
  forwardRef as forwardRef3,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { FileInput } from "@yamada-ui/file-input";
import { useToken } from "@yamada-ui/use-token";
import {
  createContext,
  cx as cx3,
  filterUndefined,
  getValidChildren
} from "@yamada-ui/utils";
import { cloneElement } from "react";

// src/input-addon.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { cx } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var InputAddon = forwardRef(
  ({ className, placement = "left", ...rest }, ref) => {
    const styles = useInputGroup();
    const placementStyles = {
      left: {
        me: "-1px",
        roundedRight: 0,
        borderEndColor: "transparent"
      },
      right: {
        ms: "-1px",
        roundedLeft: 0,
        borderStartColor: "transparent"
      }
    };
    const css = {
      flex: "0 0 auto",
      w: "auto",
      display: "flex",
      alignItems: "center",
      whiteSpace: "nowrap",
      ...styles.addon,
      ...placementStyles[placement]
    };
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-input__addon", className),
        __css: css,
        ...rest
      }
    );
  }
);
var InputLeftAddon = forwardRef(
  ({ className, ...rest }, ref) => {
    return /* @__PURE__ */ jsx(
      InputAddon,
      {
        ref,
        className: cx("ui-input__addon--left", className),
        placement: "left",
        ...rest
      }
    );
  }
);
var InputRightAddon = forwardRef(
  ({ className, ...rest }, ref) => {
    return /* @__PURE__ */ jsx(
      InputAddon,
      {
        ref,
        className: cx("ui-input__addon--right", className),
        placement: "right",
        ...rest
      }
    );
  }
);

// src/input-element.tsx
import { ui as ui2, forwardRef as forwardRef2 } from "@yamada-ui/core";
import { cx as cx2 } from "@yamada-ui/utils";
import { jsx as jsx2 } from "react/jsx-runtime";
var InputElement = forwardRef2(
  ({ className, isClick = false, placement = "left", ...rest }, ref) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const styles = useInputGroup();
    const css = {
      position: "absolute",
      top: "0",
      [placement === "left" ? "insetStart" : "insetEnd"]: "0",
      zIndex: "fallback(kurillin, 9)",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      w: (_g = (_e = (_c = (_a = styles.field) == null ? void 0 : _a.height) != null ? _c : (_b = styles.field) == null ? void 0 : _b.h) != null ? _e : (_d = styles.field) == null ? void 0 : _d.minHeight) != null ? _g : (_f = styles.field) == null ? void 0 : _f.minH,
      h: "100%",
      fontSize: (_h = styles.field) == null ? void 0 : _h.fontSize,
      pointerEvents: isClick ? "auto" : "none",
      cursor: isClick ? "pointer" : "auto",
      ...styles.element
    };
    return /* @__PURE__ */ jsx2(
      ui2.div,
      {
        ref,
        className: cx2("ui-input__element", className),
        __css: css,
        ...rest
      }
    );
  }
);
var InputLeftElement = forwardRef2(
  ({ className, ...rest }, ref) => {
    return /* @__PURE__ */ jsx2(
      InputElement,
      {
        ref,
        className: cx2("ui-input__element--left", className),
        placement: "left",
        ...rest
      }
    );
  }
);
var InputRightElement = forwardRef2(
  ({ className, ...rest }, ref) => {
    return /* @__PURE__ */ jsx2(
      InputElement,
      {
        ref,
        className: cx2("ui-input__element--right", className),
        placement: "right",
        ...rest
      }
    );
  }
);

// src/input-group.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
var [InputGroupProvider, useInputGroup] = createContext({
  name: "InputGroupContext",
  errorMessage: `useInputGroup returned is 'undefined'. Seems you forgot to wrap the components in "<InputGroup />" `
});
var InputGroup = forwardRef3((props, ref) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  const [styles] = useMultiComponentStyle("Input", props);
  const { className, children, ...rest } = omitThemeProps(props);
  const css = {
    width: "100%",
    display: "flex",
    position: "relative",
    ...styles.container
  };
  const groupProps = {};
  const minHeight = (_g = (_e = useToken("sizes", (_c = (_a = styles.field) == null ? void 0 : _a.minHeight) != null ? _c : (_b = styles.field) == null ? void 0 : _b.minH)) != null ? _e : (_d = styles.field) == null ? void 0 : _d.minHeight) != null ? _g : (_f = styles.field) == null ? void 0 : _f.minH;
  const height = (_n = (_l = useToken("sizes", (_j = (_h = styles.field) == null ? void 0 : _h.height) != null ? _j : (_i = styles.field) == null ? void 0 : _i.h)) != null ? _l : (_k = styles.field) == null ? void 0 : _k.height) != null ? _n : (_m = styles.field) == null ? void 0 : _m.h;
  const validChildren = getValidChildren(children);
  validChildren.forEach((child) => {
    if ((minHeight || height) && child.type === InputLeftElement)
      groupProps.paddingStart = height != null ? height : minHeight;
    if ((minHeight || height) && child.type === InputRightElement)
      groupProps.paddingEnd = height != null ? height : minHeight;
    if (child.type === InputLeftAddon)
      groupProps.roundedLeft = 0;
    if (child.type === InputRightAddon)
      groupProps.roundedRight = 0;
  });
  const cloneChildren = validChildren.map((child) => {
    var _a2, _b2;
    const childProps = filterUndefined({
      size: ((_a2 = child.props) == null ? void 0 : _a2.size) || props.size,
      variant: ((_b2 = child.props) == null ? void 0 : _b2.variant) || props.variant,
      ...child.props
    });
    return child.type !== Input && child.type !== FileInput ? cloneElement(child, childProps) : cloneElement(child, Object.assign(childProps, groupProps));
  });
  return /* @__PURE__ */ jsx3(InputGroupProvider, { value: styles, children: /* @__PURE__ */ jsx3(
    ui3.div,
    {
      ref,
      className: cx3("ui-input-group", className),
      role: "group",
      __css: css,
      ...rest,
      children: cloneChildren
    }
  ) });
});

export {
  useInputGroup,
  InputGroup,
  InputLeftAddon,
  InputRightAddon,
  InputLeftElement,
  InputRightElement
};
//# sourceMappingURL=chunk-UKVC2QOC.mjs.map