"use client"

// src/segmented-control.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { LayoutGroup, Motion } from "@yamada-ui/motion";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import { createDescendant } from "@yamada-ui/use-descendant";
import { trackFocusVisible } from "@yamada-ui/use-focus-visible";
import {
  ariaAttr,
  createContext,
  cx,
  dataAttr,
  getValidChildren,
  handlerAll,
  mergeRefs,
  useCallbackRef,
  useIsMounted
} from "@yamada-ui/utils";
import { useCallback, useEffect, useId, useRef, useState } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var { DescendantsContextProvider, useDescendants, useDescendant } = createDescendant();
var [SegmentedControlProvider, useSegmentedControl] = createContext({
  strict: false,
  name: "SegmentedControlContext"
});
var SegmentedControl = forwardRef(
  (props, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle(
      "SegmentedControl",
      props
    );
    let {
      className,
      id,
      name,
      isReadOnly,
      isDisabled,
      children,
      items = [],
      value,
      defaultValue,
      onChange: onChangeProp,
      ...rest
    } = omitThemeProps(mergedProps);
    id != null ? id : id = useId();
    name != null ? name : name = `segmented-control-${useId()}`;
    const onChangeRef = useCallbackRef(onChangeProp);
    const descendants = useDescendants();
    const [focusedIndex, setFocusedIndex] = useState(-1);
    const [isFocusVisible, setIsFocusVisible] = useState(false);
    const containerRef = useRef(null);
    const [selectedValue, setSelectedValue] = useControllableState({
      value,
      defaultValue,
      onChange: onChangeRef
    });
    const onChange = useCallback(
      (ev) => {
        if (isDisabled || isReadOnly) {
          ev.preventDefault();
          return;
        }
        setSelectedValue(ev.target.value);
      },
      [isDisabled, isReadOnly, setSelectedValue]
    );
    const onFocus = useCallback(
      (index, skip) => {
        if (isDisabled)
          return;
        if (skip) {
          const next = descendants.enabledNextValue(index);
          if (next)
            setFocusedIndex(next.index);
        } else {
          setFocusedIndex(index);
        }
      },
      [descendants, isDisabled]
    );
    const onBlur = useCallback(() => setFocusedIndex(-1), []);
    const getContainerProps = useCallback(
      (props2 = {}, ref2 = null) => ({
        ...rest,
        ...props2,
        ref: mergeRefs(containerRef, ref2),
        id,
        "aria-disabled": ariaAttr(isDisabled),
        "data-readonly": dataAttr(isReadOnly),
        onBlur: handlerAll(props2.onBlur, onBlur)
      }),
      [id, isDisabled, isReadOnly, onBlur, rest]
    );
    const getInputProps = useCallback(
      ({
        index,
        isDisabled: isDisabledProp,
        isReadOnly: isReadOnlyProp,
        ...props2
      }, ref2 = null) => {
        var _a, _b, _c, _d;
        const disabled = (_b = (_a = props2.disabled) != null ? _a : isDisabledProp) != null ? _b : isDisabled;
        const readOnly = (_d = (_c = props2.readOnly) != null ? _c : isReadOnlyProp) != null ? _d : isReadOnly;
        const checked = props2.value === selectedValue;
        return {
          ...props2,
          ref: ref2,
          id: `${id}-${index}`,
          type: "radio",
          name,
          disabled: disabled || readOnly,
          readOnly,
          checked,
          "aria-disabled": ariaAttr(disabled),
          "data-readonly": dataAttr(readOnly),
          "data-checked": dataAttr(checked),
          "data-focus": dataAttr(index === focusedIndex),
          style: {
            border: "0px",
            clip: "rect(0px, 0px, 0px, 0px)",
            height: "1px",
            width: "1px",
            margin: "-1px",
            padding: "0px",
            overflow: "hidden",
            whiteSpace: "nowrap",
            position: "absolute"
          },
          onChange: handlerAll(
            props2.onChange,
            (ev) => !disabled && !readOnly ? onChange(ev) : {}
          )
        };
      },
      [isDisabled, isReadOnly, selectedValue, id, name, focusedIndex, onChange]
    );
    const getLabelProps = useCallback(
      ({
        index,
        isDisabled: isDisabledProp,
        isReadOnly: isReadOnlyProp,
        ...props2
      }, ref2 = null) => {
        var _a, _b, _c, _d;
        const disabled = (_b = (_a = props2.disabled) != null ? _a : isDisabledProp) != null ? _b : isDisabled;
        const readOnly = (_d = (_c = props2.readOnly) != null ? _c : isReadOnlyProp) != null ? _d : isReadOnly;
        const checked = props2.value === selectedValue;
        const focused = index === focusedIndex;
        return {
          ...props2,
          ref: ref2,
          "aria-disabled": ariaAttr(disabled),
          "data-readonly": dataAttr(readOnly),
          "data-checked": dataAttr(checked),
          "data-focus": dataAttr(focused),
          "data-focus-visible": dataAttr(focused && isFocusVisible),
          onFocus: handlerAll(
            props2.onFocus,
            () => onFocus(index, disabled || readOnly || false)
          ),
          ...disabled || readOnly ? {
            _hover: {},
            _active: {},
            _focus: {},
            _invalid: {},
            _focusVisible: {}
          } : {}
        };
      },
      [
        focusedIndex,
        isDisabled,
        isFocusVisible,
        isReadOnly,
        onFocus,
        selectedValue
      ]
    );
    useEffect(() => {
      return trackFocusVisible(setIsFocusVisible);
    }, []);
    const css = {
      display: "inline-flex",
      alignItems: "center",
      ...styles.container
    };
    const validChildren = getValidChildren(children);
    let computedChildren = [];
    if (!validChildren.length && items.length) {
      computedChildren = items.map(({ label, value: value2, ...props2 }, i) => /* @__PURE__ */ jsx(SegmentedControlButton, { value: value2, ...props2, children: label }, i));
    } else {
      computedChildren = validChildren;
    }
    if (selectedValue == null && defaultValue == null) {
      for (const child of computedChildren) {
        if (child.type !== SegmentedControlButton) {
          if (child.type.displayName !== SegmentedControlButton.displayName)
            continue;
        }
        const value2 = child.props.value;
        setSelectedValue(value2);
        break;
      }
    }
    return /* @__PURE__ */ jsx(DescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ jsx(
      SegmentedControlProvider,
      {
        value: { getInputProps, getLabelProps, styles, selectedValue },
        children: /* @__PURE__ */ jsx(LayoutGroup, { id, children: /* @__PURE__ */ jsx(
          ui.div,
          {
            ...getContainerProps({}, ref),
            className: cx("ui-segmented-control", className),
            __css: css,
            children: computedChildren
          }
        ) })
      }
    ) });
  }
);
var SegmentedControlButton = forwardRef(
  ({
    className,
    disabled,
    readOnly,
    isDisabled,
    isReadOnly,
    value,
    onChange,
    children,
    motionProps,
    ...rest
  }, ref) => {
    const [, isMounted] = useIsMounted({ rerender: true });
    const { selectedValue, getInputProps, getLabelProps, styles } = useSegmentedControl();
    const { index, register } = useDescendant({
      disabled: isDisabled || isReadOnly
    });
    const props = {
      index,
      value,
      disabled,
      readOnly,
      isDisabled,
      isReadOnly
    };
    const css = {
      position: "relative",
      cursor: "pointer",
      flex: "1 1 0%",
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      ...styles.button
    };
    const isSelected = selectedValue === value;
    return /* @__PURE__ */ jsxs(
      ui.label,
      {
        ...getLabelProps(props),
        className: cx("ui-segmented-control__button", className),
        __css: css,
        ...rest,
        children: [
          /* @__PURE__ */ jsx(
            ui.input,
            {
              ...getInputProps({ onChange, ...props }, mergeRefs(register, ref))
            }
          ),
          isSelected && isMounted ? /* @__PURE__ */ jsx(SegmentedControlCursor, { ...motionProps }) : null,
          /* @__PURE__ */ jsx(ui.span, { zIndex: "1", children })
        ]
      }
    );
  }
);
SegmentedControlButton.displayName = "SegmentedControlButton";
var SegmentedControlCursor = ({
  className,
  transition,
  ...rest
}) => {
  const { styles } = useSegmentedControl();
  const css = {
    position: "absolute",
    w: "100%",
    h: "100%",
    ...styles.cursor
  };
  return /* @__PURE__ */ jsx(
    Motion,
    {
      className: cx("ui-segmented-control__cursor", className),
      layoutDependency: false,
      layoutId: "cursor",
      transition: {
        type: "spring",
        bounce: 0.15,
        duration: 0.4,
        ...transition
      },
      __css: css,
      ...rest
    }
  );
};

export {
  SegmentedControl,
  SegmentedControlButton
};
//# sourceMappingURL=chunk-ATDOTGI7.mjs.map