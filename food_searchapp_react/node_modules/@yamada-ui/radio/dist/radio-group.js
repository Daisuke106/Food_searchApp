"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/radio-group.tsx
var radio_group_exports = {};
__export(radio_group_exports, {
  RadioGroup: () => RadioGroup,
  useRadioGroup: () => useRadioGroup,
  useRadioGroupContext: () => useRadioGroupContext
});
module.exports = __toCommonJS(radio_group_exports);
var import_form_control2 = require("@yamada-ui/form-control");
var import_layouts = require("@yamada-ui/layouts");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/radio.tsx
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_use_focus_visible = require("@yamada-ui/use-focus-visible");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var useRadio = ({
  id,
  ...props
}) => {
  id != null ? id : id = (0, import_react.useId)();
  const {
    id: _id,
    name,
    value,
    isChecked: isCheckedProp,
    defaultIsChecked,
    required,
    disabled,
    readOnly,
    onChange: onChangeProp,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    ...computedProps
  } = (0, import_form_control.useFormControlProps)({ id, ...props });
  const [{ "aria-readonly": _ariaReadonly, ...formControlProps }, rest] = (0, import_utils.splitObject)(computedProps, import_form_control.formControlProperties);
  const [isFocusVisible, setIsFocusVisible] = (0, import_react.useState)(false);
  const [isFocused, setFocused] = (0, import_react.useState)(false);
  const [isHovered, setHovered] = (0, import_react.useState)(false);
  const [isActive, setActive] = (0, import_react.useState)(false);
  const [isChecked, setIsChecked] = (0, import_react.useState)(!!defaultIsChecked);
  const isControlled = isCheckedProp !== void 0;
  const checked = isControlled ? isCheckedProp : isChecked;
  (0, import_react.useEffect)(() => {
    return (0, import_use_focus_visible.trackFocusVisible)(setIsFocusVisible);
  }, []);
  const onChange = (0, import_utils.useCallbackRef)(
    (ev) => {
      if (readOnly || disabled) {
        ev.preventDefault();
        return;
      }
      if (!isControlled)
        setIsChecked(ev.target.checked);
      onChangeProp == null ? void 0 : onChangeProp(ev);
    },
    [readOnly, disabled, isControlled]
  );
  const onFocus = (0, import_utils.useCallbackRef)(onFocusProp);
  const onBlur = (0, import_utils.useCallbackRef)(onBlurProp);
  const onKeyDown = (0, import_react.useCallback)(
    ({ key }) => {
      if (key === " ")
        setActive(true);
    },
    [setActive]
  );
  const onKeyUp = (0, import_react.useCallback)(
    ({ key }) => {
      if (key === " ")
        setActive(false);
    },
    [setActive]
  );
  const getContainerProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref,
      "data-checked": (0, import_utils.dataAttr)(checked)
    }),
    [checked, formControlProps]
  );
  const getIconProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref,
      "data-active": (0, import_utils.dataAttr)(isActive),
      "data-hover": (0, import_utils.dataAttr)(isHovered),
      "data-checked": (0, import_utils.dataAttr)(checked),
      "data-focus": (0, import_utils.dataAttr)(isFocused),
      "data-focus-visible": (0, import_utils.dataAttr)(isFocused && isFocusVisible),
      "aria-hidden": true,
      onMouseDown: (0, import_utils.handlerAll)(props2.onMouseDown, () => setActive(true)),
      onMouseUp: (0, import_utils.handlerAll)(props2.onMouseUp, () => setActive(false)),
      onMouseEnter: (0, import_utils.handlerAll)(props2.onMouseEnter, () => setHovered(true)),
      onMouseLeave: (0, import_utils.handlerAll)(props2.onMouseLeave, () => setHovered(false))
    }),
    [checked, isActive, isFocused, isFocusVisible, isHovered, formControlProps]
  );
  const getInputProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref,
      id,
      type: "radio",
      name,
      value,
      required,
      disabled,
      readOnly,
      checked,
      style: {
        border: "0px",
        clip: "rect(0px, 0px, 0px, 0px)",
        height: "1px",
        width: "1px",
        margin: "-1px",
        padding: "0px",
        overflow: "hidden",
        whiteSpace: "nowrap",
        position: "absolute"
      },
      onChange: (0, import_utils.handlerAll)(props2.onChange, onChange),
      onBlur: (0, import_utils.handlerAll)(props2.onBlur, onBlur, () => setFocused(false)),
      onFocus: (0, import_utils.handlerAll)(props2.onFocus, onFocus, () => setFocused(true)),
      onKeyDown: (0, import_utils.handlerAll)(props2.onKeyDown, onKeyDown),
      onKeyUp: (0, import_utils.handlerAll)(props2.onKeyUp, onKeyUp)
    }),
    [
      formControlProps,
      id,
      name,
      value,
      required,
      disabled,
      readOnly,
      checked,
      onChange,
      onBlur,
      onFocus,
      onKeyDown,
      onKeyUp
    ]
  );
  const getLabelProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      props: props2,
      ref,
      onMouseDown: (0, import_utils.handlerAll)(props2.onMouseDown, (ev) => {
        ev.preventDefault();
        ev.stopPropagation();
      }),
      onTouchStart: (0, import_utils.handlerAll)(props2.onTouchStart, (ev) => {
        ev.preventDefault();
        ev.stopPropagation();
      }),
      "data-checked": (0, import_utils.dataAttr)(checked)
    }),
    [checked, formControlProps]
  );
  return {
    props: rest,
    isFocusVisible,
    isFocused,
    isHovered,
    isActive,
    isChecked: checked,
    getContainerProps,
    getInputProps,
    getIconProps,
    getLabelProps
  };
};
var Radio = (0, import_react.forwardRef)(
  (props, ref) => {
    var _a, _b, _c, _d;
    const group = useRadioGroupContext();
    const { value: groupValue, ...groupProps } = { ...group };
    const control = (0, import_form_control.useFormControl)(props);
    const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Radio", {
      ...groupProps,
      ...props
    });
    const {
      className,
      gap = "0.5rem",
      isRequired = (_a = groupProps.isRequired) != null ? _a : control.isRequired,
      isReadOnly = (_b = groupProps.isReadOnly) != null ? _b : control.isReadOnly,
      isDisabled = (_c = groupProps.isDisabled) != null ? _c : control.isDisabled,
      isInvalid = (_d = groupProps.isInvalid) != null ? _d : control.isInvalid,
      iconProps,
      inputProps,
      labelProps,
      children,
      ...computedProps
    } = (0, import_core.omitThemeProps)(mergedProps);
    const isChecked = groupValue && computedProps.value ? groupValue === computedProps.value : computedProps.isChecked;
    const onChange = groupProps.onChange && computedProps.value ? (0, import_utils.funcAll)(groupProps.onChange, computedProps.onChange) : computedProps.onChange;
    const {
      getContainerProps,
      getInputProps,
      getIconProps,
      getLabelProps,
      props: rest
    } = useRadio({
      ...computedProps,
      isRequired,
      isReadOnly,
      isDisabled,
      isInvalid,
      isChecked,
      onChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
      import_core.ui.label,
      {
        className: (0, import_utils.cx)("ui-radio", className),
        ...getContainerProps(),
        ...rest,
        __css: {
          cursor: "pointer",
          position: "relative",
          display: "inline-flex",
          alignItems: "center",
          verticalAlign: "top",
          gap,
          ...styles.container
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_core.ui.input,
            {
              className: "ui-radio__input",
              ...getInputProps(inputProps, ref)
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_core.ui.span,
            {
              className: "ui-radio__icon",
              ...getIconProps(iconProps),
              __css: {
                position: "relative",
                display: "inline-block",
                userSelect: "none",
                ...styles.icon
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_core.ui.span,
            {
              className: "ui-radio__label",
              ...getLabelProps(labelProps),
              __css: { ...styles.label },
              children
            }
          )
        ]
      }
    );
  }
);
Radio.displayName = "Radio";

// src/radio-group.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var isEvent = (value) => value && (0, import_utils2.isObject)(value) && (0, import_utils2.isObject)(value.target);
var useRadioGroup = ({
  id,
  name,
  isNative,
  value: valueProp,
  defaultValue,
  onChange: onChangeProp,
  ...props
}) => {
  id != null ? id : id = (0, import_react2.useId)();
  name != null ? name : name = `radio-${id}`;
  const onChangeRef = (0, import_utils2.useCallbackRef)(onChangeProp);
  const [value, setValue] = (0, import_use_controllable_state.useControllableState)({
    value: valueProp,
    defaultValue,
    onChange: onChangeRef
  });
  const containerRef = (0, import_react2.useRef)(null);
  const onFocus = (0, import_react2.useCallback)(() => {
    const container = containerRef.current;
    if (!container)
      return;
    let query = `input:not(:disabled):checked`;
    let firstInput = container.querySelector(query);
    if (firstInput) {
      firstInput.focus();
    } else {
      query = `input:not(:disabled)`;
      firstInput = container.querySelector(query);
      firstInput == null ? void 0 : firstInput.focus();
    }
  }, []);
  const onChange = (0, import_react2.useCallback)(
    (evOrValue) => {
      const nextValue = isEvent(evOrValue) ? evOrValue.target.value : evOrValue;
      setValue(nextValue);
    },
    [setValue]
  );
  const getContainerProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: (0, import_utils2.mergeRefs)(ref, containerRef),
      role: "group"
    }),
    []
  );
  const getRadioProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref,
      name,
      [isNative ? "checked" : "isChecked"]: value != null ? props2.value === value : void 0,
      onChange
    }),
    [name, value, onChange, isNative]
  );
  return {
    props,
    id,
    name,
    value,
    setValue,
    onChange,
    onFocus,
    getContainerProps,
    getRadioProps
  };
};
var [RadioGroupProvider, useRadioGroupContext] = (0, import_utils2.createContext)({
  strict: false,
  name: "RadioGroupContext"
});
var RadioGroup = (0, import_react2.forwardRef)(
  ({
    className,
    size,
    variant,
    colorScheme,
    children,
    items = [],
    direction = "column",
    gap,
    ...props
  }, ref) => {
    const {
      id,
      name,
      value,
      onChange,
      getContainerProps,
      props: computedProps
    } = useRadioGroup(props);
    const { isRequired, isReadOnly, isDisabled, isInvalid, ...rest } = (0, import_form_control2.useFormControl)({
      id,
      ...computedProps
    });
    const validChildren = (0, import_utils2.getValidChildren)(children);
    let computedChildren = [];
    if (!validChildren.length && items.length) {
      computedChildren = items.map(({ label, value: value2, ...props2 }, i) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Radio, { value: value2, ...props2, children: label }, i));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      RadioGroupProvider,
      {
        value: {
          size,
          variant,
          colorScheme,
          isRequired,
          isReadOnly,
          isDisabled,
          isInvalid,
          name,
          value,
          onChange
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_layouts.Flex,
          {
            ref,
            className: (0, import_utils2.cx)("ui-radio-group", className),
            gap: gap != null ? gap : direction === "row" ? "1rem" : void 0,
            ...getContainerProps({
              ...rest,
              id,
              name
            }),
            direction,
            children: children != null ? children : computedChildren
          }
        )
      }
    );
  }
);
RadioGroup.displayName = "RadioGroup";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RadioGroup,
  useRadioGroup,
  useRadioGroupContext
});
//# sourceMappingURL=radio-group.js.map