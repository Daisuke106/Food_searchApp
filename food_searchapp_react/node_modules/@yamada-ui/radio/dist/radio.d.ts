import * as react from 'react';
import { ChangeEventHandler, Ref, InputHTMLAttributes } from 'react';
import { UIPropGetter, HTMLUIProps, ThemeProps, ComponentArgs } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';
import { Dict, PropGetter } from '@yamada-ui/utils';

type UseRadioProps<Y extends string | number = string> = FormControlOptions & {
    /**
     * id assigned to input.
     */
    id?: string;
    /**
     * The name of the input field in a radio.
     */
    name?: string;
    /**
     * The value to be used in the radio button.
     */
    value?: Y;
    /**
     * If `true`, the radio will be initially checked.
     *
     * @default false
     */
    defaultIsChecked?: boolean;
    /**
     * If `true`, the radio will be checked.
     *
     * @default false
     */
    isChecked?: boolean;
    /**
     * The callback invoked when the checked state changes.
     */
    onChange?: ChangeEventHandler<HTMLInputElement>;
};
declare const useRadio: <Y extends string | number = string, M extends Dict = Dict>({ id, ...props }: UseRadioProps<Y> & M) => {
    props: Omit<Omit<{
        _hover?: {} | undefined;
        _active?: {} | undefined;
        _focus?: {} | undefined;
        _invalid?: {} | undefined;
        _focusVisible?: {} | undefined;
        id: string | undefined;
        disabled: boolean | undefined;
        required: boolean | undefined;
        readOnly: boolean | undefined;
        "aria-disabled": boolean | undefined;
        "aria-readonly": boolean | undefined;
        "aria-required": boolean | undefined;
        "aria-invalid": boolean | undefined;
        "data-readonly": boolean | "true" | "false";
        onFocus: (event: react.FocusEvent<HTMLElement, Element>) => void;
        onBlur: (event: react.FocusEvent<HTMLElement, Element>) => void;
    } & Omit<FormControlOptions & {
        id?: string | undefined;
        onFocus?: react.FocusEventHandler<HTMLElement> | undefined;
        onBlur?: react.FocusEventHandler<HTMLElement> | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
    } & {
        id: string;
    } & Omit<FormControlOptions & {
        /**
         * id assigned to input.
         */
        id?: string | undefined;
        /**
         * The name of the input field in a radio.
         */
        name?: string | undefined;
        /**
         * The value to be used in the radio button.
         */
        value?: Y | undefined;
        /**
         * If `true`, the radio will be initially checked.
         *
         * @default false
         */
        defaultIsChecked?: boolean | undefined;
        /**
         * If `true`, the radio will be checked.
         *
         * @default false
         */
        isChecked?: boolean | undefined;
        /**
         * The callback invoked when the checked state changes.
         */
        onChange?: ChangeEventHandler<HTMLInputElement> | undefined;
    } & M, "id">, "disabled" | "isDisabled" | "id" | "onFocus" | "onBlur" | "readOnly" | "required" | "isRequired" | "isInvalid" | "isReadOnly">, "value" | "name" | "disabled" | "id" | "onFocus" | "onBlur" | "onChange" | "readOnly" | "required" | "defaultIsChecked" | "isChecked">, any>;
    isFocusVisible: boolean;
    isFocused: boolean;
    isHovered: boolean;
    isActive: boolean;
    isChecked: boolean;
    getContainerProps: UIPropGetter;
    getInputProps: PropGetter;
    getIconProps: UIPropGetter<"span">;
    getLabelProps: PropGetter;
};
type UseRadioReturn = ReturnType<typeof useRadio>;
type RadioOptions = {
    iconProps?: HTMLUIProps<"span">;
    inputProps?: InputHTMLAttributes<HTMLInputElement>;
    labelProps?: HTMLUIProps<"span">;
};
type RadioProps<Y extends string | number = string> = Omit<HTMLUIProps<"label">, keyof UseRadioProps> & ThemeProps<"Radio"> & UseRadioProps<Y> & RadioOptions;
/**
 * `Radio` is a component used for allowing users to select one option from multiple choices.
 *
 * @see Docs https://yamada-ui.com/components/forms/radio
 */
declare const Radio: (<Y extends string | number = string>(props: RadioProps<Y> & {
    ref?: Ref<HTMLInputElement>;
}) => JSX.Element) & ComponentArgs;

export { Radio, type RadioProps, type UseRadioProps, type UseRadioReturn, useRadio };
