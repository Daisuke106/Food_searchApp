import { RadioProps } from './radio.mjs';
import * as react from 'react';
import { ChangeEvent, Ref } from 'react';
import { UIPropGetter, ThemeProps, ComponentArgs } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';
import { FlexProps } from '@yamada-ui/layouts';
import { Dict, PropGetter } from '@yamada-ui/utils';

type RadioItem<Y extends string | number = string> = RadioProps<Y> & {
    label?: string;
};
type UseRadioGroupProps<Y extends string | number = string> = {
    /**
     * The top-level id string that will be applied to the radios.
     * The index of the radio will be appended to this top-level id.
     */
    id?: string;
    /**
     * The HTML `name` attribute used for forms.
     */
    name?: string;
    /**
     * The value of the radio group.
     */
    value?: Y;
    /**
     * The initial value of the radio group.
     */
    defaultValue?: Y;
    /**
     * The callback fired when any children radio is checked or unchecked.
     */
    onChange?: (value: Y) => void;
    /**
     * If `true`, input elements will receive `checked` attribute instead of `isChecked`.
     *
     * This assumes, you're using native radio inputs.
     *
     * @default false
     */
    isNative?: boolean;
};
declare const useRadioGroup: <Y extends string | number = string, M extends Dict = Dict>({ id, name, isNative, value: valueProp, defaultValue, onChange: onChangeProp, ...props }: UseRadioGroupProps<Y> & M) => {
    props: Omit<UseRadioGroupProps<Y> & M, "value" | "name" | "defaultValue" | "id" | "onChange" | "isNative">;
    id: string;
    name: string;
    value: Y;
    setValue: react.Dispatch<react.SetStateAction<Y>>;
    onChange: (evOrValue: ChangeEvent<HTMLInputElement> | Y) => void;
    onFocus: () => void;
    getContainerProps: PropGetter;
    getRadioProps: UIPropGetter<"input", {
        value?: Y | undefined;
    }, {
        value?: Y | undefined;
    }>;
};
type UseRadioGroupReturn<Y extends string | number = string> = ReturnType<typeof useRadioGroup<Y>>;
type RadioGroupProps<Y extends string | number = string> = ThemeProps<"Radio"> & Omit<FlexProps, "onChange"> & UseRadioGroupProps<Y> & FormControlOptions & {
    /**
     * If provided, generate radios based on items.
     *
     * @default '[]'
     */
    items?: RadioItem<Y>[];
};
type RadioGroupContext = ThemeProps<"Radio"> & FormControlOptions & {
    name: string;
    value: string | number;
    onChange: (evOrValue: ChangeEvent<HTMLInputElement> | string | number) => void;
};
declare const useRadioGroupContext: () => RadioGroupContext | undefined;

declare const RadioGroup: (<Y extends string | number = string>(props: RadioGroupProps<Y> & {
    ref?: Ref<HTMLDivElement>;
}) => JSX.Element) & ComponentArgs;

export { RadioGroup, type RadioGroupProps, type RadioItem, type UseRadioGroupProps, type UseRadioGroupReturn, useRadioGroup, useRadioGroupContext };
