{"version":3,"sources":["../src/toggle-group.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  ComponentArgs,\n  HTMLUIProps,\n  ThemeProps,\n} from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport {\n  createContext,\n  cx,\n  isArray,\n  isUndefined,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type { ForwardedRef, Ref } from \"react\"\nimport { useCallback, useMemo, useRef } from \"react\"\n\ntype ToggleGroupContext = ThemeProps<\"Button\"> & {\n  isControlled: boolean\n  value?: string | number | (string | number)[]\n  onChange?: <M extends string | number = string>(value: M | undefined) => void\n  isDisabled?: boolean\n  isReadOnly?: boolean\n}\n\nconst [ToggleGroupProvider, useToggleGroup] = createContext<ToggleGroupContext>(\n  {\n    strict: false,\n    name: \"ToggleGroupContext\",\n  },\n)\n\nexport { useToggleGroup }\n\ntype ToggleGroupOptions<\n  Y extends string | number | (string | number)[] = string,\n> = {\n  /**\n   * The value of the toggle button group.\n   */\n  value?: Y extends any[] ? Y : Y | undefined\n  /**\n   * The initial value of the toggle button group.\n   */\n  defaultValue?: Y extends any[] ? Y : Y | undefined\n  /**\n   * The callback fired when any children toggle button is selected or unselected.\n   */\n  onChange?: (value: Y extends Array<any> ? Y : Y | undefined) => void\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIObject[\"flexDirection\"]\n  /**\n   * If `true`, all wrapped toggle button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, all wrapped toggle button will be readonly.\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\n/**\n * `ToggleGroup` is a set of two-state buttons that can be toggled on or off.\n *\n * @see Docs https://yamada-ui.com/components/forms/toggle\n */\nexport type ToggleGroupProps<\n  Y extends string | number | (string | number)[] = string,\n> = Omit<HTMLUIProps<\"div\">, \"direction\" | \"onChange\"> &\n  ThemeProps<\"Toggle\"> &\n  ToggleGroupOptions<Y>\n\nexport const ToggleGroup = forwardRef(\n  <Y extends string | number | (string | number)[] = string>(\n    {\n      value: valueProp,\n      defaultValue,\n      onChange: onChangeProp,\n      className,\n      size,\n      variant,\n      direction: flexDirection,\n      isDisabled,\n      isReadOnly,\n      ...rest\n    }: ToggleGroupProps<Y>,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    type Value = Y extends any[] ? Y : Y | undefined\n\n    const [value, setValue] = useControllableState<Value>({\n      value: valueProp,\n      defaultValue,\n      onChange: onChangeProp,\n    })\n    const isControlledRef = useRef<boolean>(!isUndefined(value))\n\n    const onChange = useCallback(\n      <M extends string | number = Y extends Array<any> ? Y[number] : Y>(\n        value: M | undefined,\n      ) => {\n        if (isUndefined(value)) return\n\n        setValue((prev) => {\n          if (isArray(prev)) {\n            const isIncluded = prev.includes(value)\n\n            if (isIncluded) {\n              return prev.filter((prevValue) => prevValue !== value) as Value\n            } else {\n              return [...prev, value] as Value\n            }\n          } else {\n            if (value === (prev as string | number | undefined)) {\n              return undefined as Value\n            } else {\n              return value as unknown as Value\n            }\n          }\n        })\n      },\n      [setValue],\n    )\n\n    const css: CSSUIObject = {\n      display: \"inline-flex\",\n      gap: \"0.5rem\",\n      flexDirection,\n    }\n\n    const values: ToggleGroupContext = useMemo(\n      () => ({\n        value,\n        size,\n        variant,\n        isDisabled,\n        isReadOnly,\n        isControlled: isControlledRef.current,\n        onChange,\n      }),\n      [value, size, variant, isDisabled, isReadOnly, onChange],\n    )\n\n    useUpdateEffect(() => {\n      if (isUndefined(value)) return\n\n      isControlledRef.current = true\n    }, [valueProp])\n\n    return (\n      <ToggleGroupProvider value={values}>\n        <ui.div\n          ref={ref}\n          role=\"group\"\n          className={cx(\"ui-toggle-group\", className)}\n          __css={css}\n          {...rest}\n        />\n      </ToggleGroupProvider>\n    )\n  },\n) as {\n  <Y extends string | number | (string | number)[] = string>(\n    props: ToggleGroupProps<Y> & { ref?: Ref<HTMLDivElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nToggleGroup.displayName = \"ToggleGroup\"\n"],"mappings":";;;AAMA,SAAS,IAAI,kBAAkB;AAC/B,SAAS,4BAA4B;AACrC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,aAAa,SAAS,cAAc;AA8IrC;AApIR,IAAM,CAAC,qBAAqB,cAAc,IAAI;AAAA,EAC5C;AAAA,IACE,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AACF;AAgDO,IAAM,cAAc;AAAA,EACzB,CACE;AAAA,IACE,OAAO;AAAA,IACP;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,GACA,QACG;AAGH,UAAM,CAAC,OAAO,QAAQ,IAAI,qBAA4B;AAAA,MACpD,OAAO;AAAA,MACP;AAAA,MACA,UAAU;AAAA,IACZ,CAAC;AACD,UAAM,kBAAkB,OAAgB,CAAC,YAAY,KAAK,CAAC;AAE3D,UAAM,WAAW;AAAA,MACf,CACEA,WACG;AACH,YAAI,YAAYA,MAAK;AAAG;AAExB,iBAAS,CAAC,SAAS;AACjB,cAAI,QAAQ,IAAI,GAAG;AACjB,kBAAM,aAAa,KAAK,SAASA,MAAK;AAEtC,gBAAI,YAAY;AACd,qBAAO,KAAK,OAAO,CAAC,cAAc,cAAcA,MAAK;AAAA,YACvD,OAAO;AACL,qBAAO,CAAC,GAAG,MAAMA,MAAK;AAAA,YACxB;AAAA,UACF,OAAO;AACL,gBAAIA,WAAW,MAAsC;AACnD,qBAAO;AAAA,YACT,OAAO;AACL,qBAAOA;AAAA,YACT;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,CAAC,QAAQ;AAAA,IACX;AAEA,UAAM,MAAmB;AAAA,MACvB,SAAS;AAAA,MACT,KAAK;AAAA,MACL;AAAA,IACF;AAEA,UAAM,SAA6B;AAAA,MACjC,OAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,cAAc,gBAAgB;AAAA,QAC9B;AAAA,MACF;AAAA,MACA,CAAC,OAAO,MAAM,SAAS,YAAY,YAAY,QAAQ;AAAA,IACzD;AAEA,oBAAgB,MAAM;AACpB,UAAI,YAAY,KAAK;AAAG;AAExB,sBAAgB,UAAU;AAAA,IAC5B,GAAG,CAAC,SAAS,CAAC;AAEd,WACE,oBAAC,uBAAoB,OAAO,QAC1B;AAAA,MAAC,GAAG;AAAA,MAAH;AAAA,QACC;AAAA,QACA,MAAK;AAAA,QACL,WAAW,GAAG,mBAAmB,SAAS;AAAA,QAC1C,OAAO;AAAA,QACN,GAAG;AAAA;AAAA,IACN,GACF;AAAA,EAEJ;AACF;AAMA,YAAY,cAAc;","names":["value"]}