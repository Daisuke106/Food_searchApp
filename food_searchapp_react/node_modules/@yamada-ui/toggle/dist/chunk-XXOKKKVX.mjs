"use client"

// src/toggle-group.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import {
  createContext,
  cx,
  isArray,
  isUndefined,
  useUpdateEffect
} from "@yamada-ui/utils";
import { useCallback, useMemo, useRef } from "react";
import { jsx } from "react/jsx-runtime";
var [ToggleGroupProvider, useToggleGroup] = createContext(
  {
    strict: false,
    name: "ToggleGroupContext"
  }
);
var ToggleGroup = forwardRef(
  ({
    value: valueProp,
    defaultValue,
    onChange: onChangeProp,
    className,
    size,
    variant,
    direction: flexDirection,
    isDisabled,
    isReadOnly,
    ...rest
  }, ref) => {
    const [value, setValue] = useControllableState({
      value: valueProp,
      defaultValue,
      onChange: onChangeProp
    });
    const isControlledRef = useRef(!isUndefined(value));
    const onChange = useCallback(
      (value2) => {
        if (isUndefined(value2))
          return;
        setValue((prev) => {
          if (isArray(prev)) {
            const isIncluded = prev.includes(value2);
            if (isIncluded) {
              return prev.filter((prevValue) => prevValue !== value2);
            } else {
              return [...prev, value2];
            }
          } else {
            if (value2 === prev) {
              return void 0;
            } else {
              return value2;
            }
          }
        });
      },
      [setValue]
    );
    const css = {
      display: "inline-flex",
      gap: "0.5rem",
      flexDirection
    };
    const values = useMemo(
      () => ({
        value,
        size,
        variant,
        isDisabled,
        isReadOnly,
        isControlled: isControlledRef.current,
        onChange
      }),
      [value, size, variant, isDisabled, isReadOnly, onChange]
    );
    useUpdateEffect(() => {
      if (isUndefined(value))
        return;
      isControlledRef.current = true;
    }, [valueProp]);
    return /* @__PURE__ */ jsx(ToggleGroupProvider, { value: values, children: /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        role: "group",
        className: cx("ui-toggle-group", className),
        __css: css,
        ...rest
      }
    ) });
  }
);
ToggleGroup.displayName = "ToggleGroup";

export {
  useToggleGroup,
  ToggleGroup
};
//# sourceMappingURL=chunk-XXOKKKVX.mjs.map