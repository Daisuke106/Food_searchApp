{"version":3,"sources":["../src/toggle.tsx","../src/toggle-group.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  ComponentArgs,\n  HTMLUIProps,\n  ThemeProps,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Ripple, useRipple } from \"@yamada-ui/ripple\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport {\n  cx,\n  dataAttr,\n  handlerAll,\n  isArray,\n  isUndefined,\n} from \"@yamada-ui/utils\"\nimport type { ForwardedRef, ReactElement, Ref } from \"react\"\nimport { useMemo } from \"react\"\nimport { useToggleGroup } from \"./toggle-group\"\n\ntype ToggleOptions<Y extends string | number = string> = {\n  /**\n   * The value of the toggle button.\n   */\n  value?: Y\n  /**\n   * If `true`, the toggle button will be selected.\n   */\n  isSelected?: boolean\n  /**\n    *If `true`, the toggle button will be initially selected.\n   *\n   @default false\n   */\n  defaultIsSelected?: boolean\n  /**\n   * The callback invoked when selected state changes.\n   */\n  onChange?: (isSelected: boolean) => void\n  /**\n   * The icon to be used in the button.\n   */\n  icon?: ReactElement\n  /**\n   * If true, the toggle button is full rounded. Else, it'll be slightly round.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the toggle button is represented as active.\n   *\n   * @default false\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the toggle button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the toggle button will be readonly.\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, disable ripple effects when pressing a element.\n   *\n   * @default false\n   */\n  disableRipple?: boolean\n}\n\nexport type ToggleProps<Y extends string | number = string> = Omit<\n  HTMLUIProps<\"button\">,\n  \"onChange\"\n> &\n  ThemeProps<\"Toggle\"> &\n  ToggleOptions<Y>\n\n/**\n * `Toggle` is a two-state button that can be either on or off.\n *\n * @see Docs https://yamada-ui.com/components/forms/toggle\n */\nexport const Toggle = forwardRef(\n  <Y extends string | number = string>(\n    props: ToggleProps<Y>,\n    ref: ForwardedRef<HTMLButtonElement>,\n  ) => {\n    const {\n      value: groupValue,\n      onChange: onChangeGroup,\n      isControlled,\n      ...group\n    } = useToggleGroup() ?? {}\n    const [styles, mergedProps] = useMultiComponentStyle(\"Toggle\", {\n      ...group,\n      ...props,\n    })\n    const {\n      value,\n      className,\n      icon,\n      isSelected: isSelectedProp,\n      defaultIsSelected = false,\n      onChange,\n      isRounded,\n      isActive,\n      isDisabled = group?.isDisabled,\n      isReadOnly = group?.isReadOnly,\n      disableRipple,\n      children,\n      ...rest\n    } = omitThemeProps(mergedProps)\n    const [isSelected, setIsSelected] = useControllableState({\n      value: isSelectedProp,\n      defaultValue: defaultIsSelected,\n      onChange,\n    })\n\n    if (isControlled && isUndefined(value)) {\n      console.warn(`Toggle: value is required. Please set the value.`)\n    }\n\n    const isMulti = isArray(groupValue)\n    const isIncluded = isMulti\n      ? groupValue.includes(value ?? \"\")\n      : value === groupValue\n    const trulySelected = isControlled ? isIncluded : isSelected\n    const { onPointerDown, ...rippleProps } = useRipple({\n      ...rest,\n      isDisabled: disableRipple || isDisabled,\n    })\n\n    const onClick = () => {\n      setIsSelected((prev) => !prev)\n      onChangeGroup?.(value)\n    }\n\n    const css: CSSUIObject = useMemo(\n      () => ({\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"fallback(2, 0.5rem)\",\n        appearance: \"none\",\n        userSelect: \"none\",\n        position: \"relative\",\n        verticalAlign: \"middle\",\n        overflow: \"hidden\",\n        outline: \"none\",\n        pointerEvents: isReadOnly ? \"none\" : \"auto\",\n        ...styles,\n        ...(isRounded ? { borderRadius: \"fallback(full, 9999px)\" } : {}),\n      }),\n      [isRounded, styles, isReadOnly],\n    )\n\n    return (\n      <ui.button\n        ref={ref}\n        type=\"button\"\n        tabIndex={isReadOnly ? -1 : 0}\n        disabled={isDisabled}\n        data-active={dataAttr(isActive)}\n        data-selected={dataAttr(trulySelected)}\n        data-readonly={dataAttr(isReadOnly)}\n        aria-pressed={trulySelected}\n        className={cx(\"ui-toggle\", className)}\n        __css={css}\n        {...rest}\n        onClick={handlerAll(rest.onClick, onClick)}\n        onPointerDown={onPointerDown}\n      >\n        {children || icon}\n\n        <Ripple isDisabled={disableRipple || isDisabled} {...rippleProps} />\n      </ui.button>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: ToggleProps<Y> & { ref?: Ref<HTMLInputElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nToggle.displayName = \"Toggle\"\n","import type {\n  CSSUIObject,\n  ComponentArgs,\n  HTMLUIProps,\n  ThemeProps,\n} from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport {\n  createContext,\n  cx,\n  isArray,\n  isUndefined,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type { ForwardedRef, Ref } from \"react\"\nimport { useCallback, useMemo, useRef } from \"react\"\n\ntype ToggleGroupContext = ThemeProps<\"Button\"> & {\n  isControlled: boolean\n  value?: string | number | (string | number)[]\n  onChange?: <M extends string | number = string>(value: M | undefined) => void\n  isDisabled?: boolean\n  isReadOnly?: boolean\n}\n\nconst [ToggleGroupProvider, useToggleGroup] = createContext<ToggleGroupContext>(\n  {\n    strict: false,\n    name: \"ToggleGroupContext\",\n  },\n)\n\nexport { useToggleGroup }\n\ntype ToggleGroupOptions<\n  Y extends string | number | (string | number)[] = string,\n> = {\n  /**\n   * The value of the toggle button group.\n   */\n  value?: Y extends any[] ? Y : Y | undefined\n  /**\n   * The initial value of the toggle button group.\n   */\n  defaultValue?: Y extends any[] ? Y : Y | undefined\n  /**\n   * The callback fired when any children toggle button is selected or unselected.\n   */\n  onChange?: (value: Y extends Array<any> ? Y : Y | undefined) => void\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIObject[\"flexDirection\"]\n  /**\n   * If `true`, all wrapped toggle button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, all wrapped toggle button will be readonly.\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\n/**\n * `ToggleGroup` is a set of two-state buttons that can be toggled on or off.\n *\n * @see Docs https://yamada-ui.com/components/forms/toggle\n */\nexport type ToggleGroupProps<\n  Y extends string | number | (string | number)[] = string,\n> = Omit<HTMLUIProps<\"div\">, \"direction\" | \"onChange\"> &\n  ThemeProps<\"Toggle\"> &\n  ToggleGroupOptions<Y>\n\nexport const ToggleGroup = forwardRef(\n  <Y extends string | number | (string | number)[] = string>(\n    {\n      value: valueProp,\n      defaultValue,\n      onChange: onChangeProp,\n      className,\n      size,\n      variant,\n      direction: flexDirection,\n      isDisabled,\n      isReadOnly,\n      ...rest\n    }: ToggleGroupProps<Y>,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    type Value = Y extends any[] ? Y : Y | undefined\n\n    const [value, setValue] = useControllableState<Value>({\n      value: valueProp,\n      defaultValue,\n      onChange: onChangeProp,\n    })\n    const isControlledRef = useRef<boolean>(!isUndefined(value))\n\n    const onChange = useCallback(\n      <M extends string | number = Y extends Array<any> ? Y[number] : Y>(\n        value: M | undefined,\n      ) => {\n        if (isUndefined(value)) return\n\n        setValue((prev) => {\n          if (isArray(prev)) {\n            const isIncluded = prev.includes(value)\n\n            if (isIncluded) {\n              return prev.filter((prevValue) => prevValue !== value) as Value\n            } else {\n              return [...prev, value] as Value\n            }\n          } else {\n            if (value === (prev as string | number | undefined)) {\n              return undefined as Value\n            } else {\n              return value as unknown as Value\n            }\n          }\n        })\n      },\n      [setValue],\n    )\n\n    const css: CSSUIObject = {\n      display: \"inline-flex\",\n      gap: \"0.5rem\",\n      flexDirection,\n    }\n\n    const values: ToggleGroupContext = useMemo(\n      () => ({\n        value,\n        size,\n        variant,\n        isDisabled,\n        isReadOnly,\n        isControlled: isControlledRef.current,\n        onChange,\n      }),\n      [value, size, variant, isDisabled, isReadOnly, onChange],\n    )\n\n    useUpdateEffect(() => {\n      if (isUndefined(value)) return\n\n      isControlledRef.current = true\n    }, [valueProp])\n\n    return (\n      <ToggleGroupProvider value={values}>\n        <ui.div\n          ref={ref}\n          role=\"group\"\n          className={cx(\"ui-toggle-group\", className)}\n          __css={css}\n          {...rest}\n        />\n      </ToggleGroupProvider>\n    )\n  },\n) as {\n  <Y extends string | number | (string | number)[] = string>(\n    props: ToggleGroupProps<Y> & { ref?: Ref<HTMLDivElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nToggleGroup.displayName = \"ToggleGroup\"\n"],"mappings":"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","names":["import_core","import_use_controllable_state","import_utils","import_react","value","import_jsx_runtime"]}