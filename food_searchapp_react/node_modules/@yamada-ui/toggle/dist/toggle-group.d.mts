import { HTMLUIProps, ThemeProps, ComponentArgs, CSSUIObject } from '@yamada-ui/core';
import { Ref } from 'react';

type ToggleGroupContext = ThemeProps<"Button"> & {
    isControlled: boolean;
    value?: string | number | (string | number)[];
    onChange?: <M extends string | number = string>(value: M | undefined) => void;
    isDisabled?: boolean;
    isReadOnly?: boolean;
};
declare const useToggleGroup: () => ToggleGroupContext;

type ToggleGroupOptions<Y extends string | number | (string | number)[] = string> = {
    /**
     * The value of the toggle button group.
     */
    value?: Y extends any[] ? Y : Y | undefined;
    /**
     * The initial value of the toggle button group.
     */
    defaultValue?: Y extends any[] ? Y : Y | undefined;
    /**
     * The callback fired when any children toggle button is selected or unselected.
     */
    onChange?: (value: Y extends Array<any> ? Y : Y | undefined) => void;
    /**
     * The CSS `flex-direction` property.
     */
    direction?: CSSUIObject["flexDirection"];
    /**
     * If `true`, all wrapped toggle button will be disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * If `true`, all wrapped toggle button will be readonly.
     *
     * @default false
     */
    isReadOnly?: boolean;
};
/**
 * `ToggleGroup` is a set of two-state buttons that can be toggled on or off.
 *
 * @see Docs https://yamada-ui.com/components/forms/toggle
 */
type ToggleGroupProps<Y extends string | number | (string | number)[] = string> = Omit<HTMLUIProps<"div">, "direction" | "onChange"> & ThemeProps<"Toggle"> & ToggleGroupOptions<Y>;
declare const ToggleGroup: (<Y extends string | number | (string | number)[] = string>(props: ToggleGroupProps<Y> & {
    ref?: Ref<HTMLDivElement>;
}) => JSX.Element) & ComponentArgs;

export { ToggleGroup, type ToggleGroupProps, useToggleGroup };
