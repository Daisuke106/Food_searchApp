{"version":3,"sources":["../src/toggle.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  ComponentArgs,\n  HTMLUIProps,\n  ThemeProps,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Ripple, useRipple } from \"@yamada-ui/ripple\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport {\n  cx,\n  dataAttr,\n  handlerAll,\n  isArray,\n  isUndefined,\n} from \"@yamada-ui/utils\"\nimport type { ForwardedRef, ReactElement, Ref } from \"react\"\nimport { useMemo } from \"react\"\nimport { useToggleGroup } from \"./toggle-group\"\n\ntype ToggleOptions<Y extends string | number = string> = {\n  /**\n   * The value of the toggle button.\n   */\n  value?: Y\n  /**\n   * If `true`, the toggle button will be selected.\n   */\n  isSelected?: boolean\n  /**\n    *If `true`, the toggle button will be initially selected.\n   *\n   @default false\n   */\n  defaultIsSelected?: boolean\n  /**\n   * The callback invoked when selected state changes.\n   */\n  onChange?: (isSelected: boolean) => void\n  /**\n   * The icon to be used in the button.\n   */\n  icon?: ReactElement\n  /**\n   * If true, the toggle button is full rounded. Else, it'll be slightly round.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the toggle button is represented as active.\n   *\n   * @default false\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the toggle button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the toggle button will be readonly.\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, disable ripple effects when pressing a element.\n   *\n   * @default false\n   */\n  disableRipple?: boolean\n}\n\nexport type ToggleProps<Y extends string | number = string> = Omit<\n  HTMLUIProps<\"button\">,\n  \"onChange\"\n> &\n  ThemeProps<\"Toggle\"> &\n  ToggleOptions<Y>\n\n/**\n * `Toggle` is a two-state button that can be either on or off.\n *\n * @see Docs https://yamada-ui.com/components/forms/toggle\n */\nexport const Toggle = forwardRef(\n  <Y extends string | number = string>(\n    props: ToggleProps<Y>,\n    ref: ForwardedRef<HTMLButtonElement>,\n  ) => {\n    const {\n      value: groupValue,\n      onChange: onChangeGroup,\n      isControlled,\n      ...group\n    } = useToggleGroup() ?? {}\n    const [styles, mergedProps] = useMultiComponentStyle(\"Toggle\", {\n      ...group,\n      ...props,\n    })\n    const {\n      value,\n      className,\n      icon,\n      isSelected: isSelectedProp,\n      defaultIsSelected = false,\n      onChange,\n      isRounded,\n      isActive,\n      isDisabled = group?.isDisabled,\n      isReadOnly = group?.isReadOnly,\n      disableRipple,\n      children,\n      ...rest\n    } = omitThemeProps(mergedProps)\n    const [isSelected, setIsSelected] = useControllableState({\n      value: isSelectedProp,\n      defaultValue: defaultIsSelected,\n      onChange,\n    })\n\n    if (isControlled && isUndefined(value)) {\n      console.warn(`Toggle: value is required. Please set the value.`)\n    }\n\n    const isMulti = isArray(groupValue)\n    const isIncluded = isMulti\n      ? groupValue.includes(value ?? \"\")\n      : value === groupValue\n    const trulySelected = isControlled ? isIncluded : isSelected\n    const { onPointerDown, ...rippleProps } = useRipple({\n      ...rest,\n      isDisabled: disableRipple || isDisabled,\n    })\n\n    const onClick = () => {\n      setIsSelected((prev) => !prev)\n      onChangeGroup?.(value)\n    }\n\n    const css: CSSUIObject = useMemo(\n      () => ({\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"fallback(2, 0.5rem)\",\n        appearance: \"none\",\n        userSelect: \"none\",\n        position: \"relative\",\n        verticalAlign: \"middle\",\n        overflow: \"hidden\",\n        outline: \"none\",\n        pointerEvents: isReadOnly ? \"none\" : \"auto\",\n        ...styles,\n        ...(isRounded ? { borderRadius: \"fallback(full, 9999px)\" } : {}),\n      }),\n      [isRounded, styles, isReadOnly],\n    )\n\n    return (\n      <ui.button\n        ref={ref}\n        type=\"button\"\n        tabIndex={isReadOnly ? -1 : 0}\n        disabled={isDisabled}\n        data-active={dataAttr(isActive)}\n        data-selected={dataAttr(trulySelected)}\n        data-readonly={dataAttr(isReadOnly)}\n        aria-pressed={trulySelected}\n        className={cx(\"ui-toggle\", className)}\n        __css={css}\n        {...rest}\n        onClick={handlerAll(rest.onClick, onClick)}\n        onPointerDown={onPointerDown}\n      >\n        {children || icon}\n\n        <Ripple isDisabled={disableRipple || isDisabled} {...rippleProps} />\n      </ui.button>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: ToggleProps<Y> & { ref?: Ref<HTMLInputElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nToggle.displayName = \"Toggle\"\n"],"mappings":";;;;;;AAMA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,QAAQ,iBAAiB;AAClC,SAAS,4BAA4B;AACrC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,eAAe;AAiJlB,SAiBE,KAjBF;AA3EC,IAAM,SAAS;AAAA,EACpB,CACE,OACA,QACG;AAhGP;AAiGI,UAAM;AAAA,MACJ,OAAO;AAAA,MACP,UAAU;AAAA,MACV;AAAA,MACA,GAAG;AAAA,IACL,KAAI,oBAAe,MAAf,YAAoB,CAAC;AACzB,UAAM,CAAC,QAAQ,WAAW,IAAI,uBAAuB,UAAU;AAAA,MAC7D,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AACD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MACZ,oBAAoB;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa,+BAAO;AAAA,MACpB,aAAa,+BAAO;AAAA,MACpB;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL,IAAI,eAAe,WAAW;AAC9B,UAAM,CAAC,YAAY,aAAa,IAAI,qBAAqB;AAAA,MACvD,OAAO;AAAA,MACP,cAAc;AAAA,MACd;AAAA,IACF,CAAC;AAED,QAAI,gBAAgB,YAAY,KAAK,GAAG;AACtC,cAAQ,KAAK,kDAAkD;AAAA,IACjE;AAEA,UAAM,UAAU,QAAQ,UAAU;AAClC,UAAM,aAAa,UACf,WAAW,SAAS,wBAAS,EAAE,IAC/B,UAAU;AACd,UAAM,gBAAgB,eAAe,aAAa;AAClD,UAAM,EAAE,eAAe,GAAG,YAAY,IAAI,UAAU;AAAA,MAClD,GAAG;AAAA,MACH,YAAY,iBAAiB;AAAA,IAC/B,CAAC;AAED,UAAM,UAAU,MAAM;AACpB,oBAAc,CAAC,SAAS,CAAC,IAAI;AAC7B,qDAAgB;AAAA,IAClB;AAEA,UAAM,MAAmB;AAAA,MACvB,OAAO;AAAA,QACL,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,gBAAgB;AAAA,QAChB,KAAK;AAAA,QACL,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,eAAe;AAAA,QACf,UAAU;AAAA,QACV,SAAS;AAAA,QACT,eAAe,aAAa,SAAS;AAAA,QACrC,GAAG;AAAA,QACH,GAAI,YAAY,EAAE,cAAc,yBAAyB,IAAI,CAAC;AAAA,MAChE;AAAA,MACA,CAAC,WAAW,QAAQ,UAAU;AAAA,IAChC;AAEA,WACE;AAAA,MAAC,GAAG;AAAA,MAAH;AAAA,QACC;AAAA,QACA,MAAK;AAAA,QACL,UAAU,aAAa,KAAK;AAAA,QAC5B,UAAU;AAAA,QACV,eAAa,SAAS,QAAQ;AAAA,QAC9B,iBAAe,SAAS,aAAa;AAAA,QACrC,iBAAe,SAAS,UAAU;AAAA,QAClC,gBAAc;AAAA,QACd,WAAW,GAAG,aAAa,SAAS;AAAA,QACpC,OAAO;AAAA,QACN,GAAG;AAAA,QACJ,SAAS,WAAW,KAAK,SAAS,OAAO;AAAA,QACzC;AAAA,QAEC;AAAA,sBAAY;AAAA,UAEb,oBAAC,UAAO,YAAY,iBAAiB,YAAa,GAAG,aAAa;AAAA;AAAA;AAAA,IACpE;AAAA,EAEJ;AACF;AAMA,OAAO,cAAc;","names":[]}