"use client"
import {
  useToggleGroup
} from "./chunk-XXOKKKVX.mjs";

// src/toggle.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { Ripple, useRipple } from "@yamada-ui/ripple";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import {
  cx,
  dataAttr,
  handlerAll,
  isArray,
  isUndefined
} from "@yamada-ui/utils";
import { useMemo } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var Toggle = forwardRef(
  (props, ref) => {
    var _a;
    const {
      value: groupValue,
      onChange: onChangeGroup,
      isControlled,
      ...group
    } = (_a = useToggleGroup()) != null ? _a : {};
    const [styles, mergedProps] = useMultiComponentStyle("Toggle", {
      ...group,
      ...props
    });
    const {
      value,
      className,
      icon,
      isSelected: isSelectedProp,
      defaultIsSelected = false,
      onChange,
      isRounded,
      isActive,
      isDisabled = group == null ? void 0 : group.isDisabled,
      isReadOnly = group == null ? void 0 : group.isReadOnly,
      disableRipple,
      children,
      ...rest
    } = omitThemeProps(mergedProps);
    const [isSelected, setIsSelected] = useControllableState({
      value: isSelectedProp,
      defaultValue: defaultIsSelected,
      onChange
    });
    if (isControlled && isUndefined(value)) {
      console.warn(`Toggle: value is required. Please set the value.`);
    }
    const isMulti = isArray(groupValue);
    const isIncluded = isMulti ? groupValue.includes(value != null ? value : "") : value === groupValue;
    const trulySelected = isControlled ? isIncluded : isSelected;
    const { onPointerDown, ...rippleProps } = useRipple({
      ...rest,
      isDisabled: disableRipple || isDisabled
    });
    const onClick = () => {
      setIsSelected((prev) => !prev);
      onChangeGroup == null ? void 0 : onChangeGroup(value);
    };
    const css = useMemo(
      () => ({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "fallback(2, 0.5rem)",
        appearance: "none",
        userSelect: "none",
        position: "relative",
        verticalAlign: "middle",
        overflow: "hidden",
        outline: "none",
        pointerEvents: isReadOnly ? "none" : "auto",
        ...styles,
        ...isRounded ? { borderRadius: "fallback(full, 9999px)" } : {}
      }),
      [isRounded, styles, isReadOnly]
    );
    return /* @__PURE__ */ jsxs(
      ui.button,
      {
        ref,
        type: "button",
        tabIndex: isReadOnly ? -1 : 0,
        disabled: isDisabled,
        "data-active": dataAttr(isActive),
        "data-selected": dataAttr(trulySelected),
        "data-readonly": dataAttr(isReadOnly),
        "aria-pressed": trulySelected,
        className: cx("ui-toggle", className),
        __css: css,
        ...rest,
        onClick: handlerAll(rest.onClick, onClick),
        onPointerDown,
        children: [
          children || icon,
          /* @__PURE__ */ jsx(Ripple, { isDisabled: disableRipple || isDisabled, ...rippleProps })
        ]
      }
    );
  }
);
Toggle.displayName = "Toggle";

export {
  Toggle
};
//# sourceMappingURL=chunk-6DS6FG34.mjs.map