import { HTMLUIProps, ThemeProps, ComponentArgs } from '@yamada-ui/core';
import { Ref, ReactElement } from 'react';

type ToggleOptions<Y extends string | number = string> = {
    /**
     * The value of the toggle button.
     */
    value?: Y;
    /**
     * If `true`, the toggle button will be selected.
     */
    isSelected?: boolean;
    /**
      *If `true`, the toggle button will be initially selected.
     *
     @default false
     */
    defaultIsSelected?: boolean;
    /**
     * The callback invoked when selected state changes.
     */
    onChange?: (isSelected: boolean) => void;
    /**
     * The icon to be used in the button.
     */
    icon?: ReactElement;
    /**
     * If true, the toggle button is full rounded. Else, it'll be slightly round.
     *
     * @default false
     */
    isRounded?: boolean;
    /**
     * If `true`, the toggle button is represented as active.
     *
     * @default false
     */
    isActive?: boolean;
    /**
     * If `true`, the toggle button will be disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * If `true`, the toggle button will be readonly.
     *
     * @default false
     */
    isReadOnly?: boolean;
    /**
     * If `true`, disable ripple effects when pressing a element.
     *
     * @default false
     */
    disableRipple?: boolean;
};
type ToggleProps<Y extends string | number = string> = Omit<HTMLUIProps<"button">, "onChange"> & ThemeProps<"Toggle"> & ToggleOptions<Y>;
/**
 * `Toggle` is a two-state button that can be either on or off.
 *
 * @see Docs https://yamada-ui.com/components/forms/toggle
 */
declare const Toggle: (<Y extends string | number = string>(props: ToggleProps<Y> & {
    ref?: Ref<HTMLInputElement>;
}) => JSX.Element) & ComponentArgs;

export { Toggle, type ToggleProps };
