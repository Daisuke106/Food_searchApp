"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Toggle: () => Toggle,
  ToggleGroup: () => ToggleGroup
});
module.exports = __toCommonJS(src_exports);

// src/toggle.tsx
var import_core2 = require("@yamada-ui/core");
var import_ripple = require("@yamada-ui/ripple");
var import_use_controllable_state2 = require("@yamada-ui/use-controllable-state");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/toggle-group.tsx
var import_core = require("@yamada-ui/core");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var [ToggleGroupProvider, useToggleGroup] = (0, import_utils.createContext)(
  {
    strict: false,
    name: "ToggleGroupContext"
  }
);
var ToggleGroup = (0, import_core.forwardRef)(
  ({
    value: valueProp,
    defaultValue,
    onChange: onChangeProp,
    className,
    size,
    variant,
    direction: flexDirection,
    isDisabled,
    isReadOnly,
    ...rest
  }, ref) => {
    const [value, setValue] = (0, import_use_controllable_state.useControllableState)({
      value: valueProp,
      defaultValue,
      onChange: onChangeProp
    });
    const isControlledRef = (0, import_react.useRef)(!(0, import_utils.isUndefined)(value));
    const onChange = (0, import_react.useCallback)(
      (value2) => {
        if ((0, import_utils.isUndefined)(value2))
          return;
        setValue((prev) => {
          if ((0, import_utils.isArray)(prev)) {
            const isIncluded = prev.includes(value2);
            if (isIncluded) {
              return prev.filter((prevValue) => prevValue !== value2);
            } else {
              return [...prev, value2];
            }
          } else {
            if (value2 === prev) {
              return void 0;
            } else {
              return value2;
            }
          }
        });
      },
      [setValue]
    );
    const css = {
      display: "inline-flex",
      gap: "0.5rem",
      flexDirection
    };
    const values = (0, import_react.useMemo)(
      () => ({
        value,
        size,
        variant,
        isDisabled,
        isReadOnly,
        isControlled: isControlledRef.current,
        onChange
      }),
      [value, size, variant, isDisabled, isReadOnly, onChange]
    );
    (0, import_utils.useUpdateEffect)(() => {
      if ((0, import_utils.isUndefined)(value))
        return;
      isControlledRef.current = true;
    }, [valueProp]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ToggleGroupProvider, { value: values, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        role: "group",
        className: (0, import_utils.cx)("ui-toggle-group", className),
        __css: css,
        ...rest
      }
    ) });
  }
);
ToggleGroup.displayName = "ToggleGroup";

// src/toggle.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var Toggle = (0, import_core2.forwardRef)(
  (props, ref) => {
    var _a;
    const {
      value: groupValue,
      onChange: onChangeGroup,
      isControlled,
      ...group
    } = (_a = useToggleGroup()) != null ? _a : {};
    const [styles, mergedProps] = (0, import_core2.useMultiComponentStyle)("Toggle", {
      ...group,
      ...props
    });
    const {
      value,
      className,
      icon,
      isSelected: isSelectedProp,
      defaultIsSelected = false,
      onChange,
      isRounded,
      isActive,
      isDisabled = group == null ? void 0 : group.isDisabled,
      isReadOnly = group == null ? void 0 : group.isReadOnly,
      disableRipple,
      children,
      ...rest
    } = (0, import_core2.omitThemeProps)(mergedProps);
    const [isSelected, setIsSelected] = (0, import_use_controllable_state2.useControllableState)({
      value: isSelectedProp,
      defaultValue: defaultIsSelected,
      onChange
    });
    if (isControlled && (0, import_utils2.isUndefined)(value)) {
      console.warn(`Toggle: value is required. Please set the value.`);
    }
    const isMulti = (0, import_utils2.isArray)(groupValue);
    const isIncluded = isMulti ? groupValue.includes(value != null ? value : "") : value === groupValue;
    const trulySelected = isControlled ? isIncluded : isSelected;
    const { onPointerDown, ...rippleProps } = (0, import_ripple.useRipple)({
      ...rest,
      isDisabled: disableRipple || isDisabled
    });
    const onClick = () => {
      setIsSelected((prev) => !prev);
      onChangeGroup == null ? void 0 : onChangeGroup(value);
    };
    const css = (0, import_react2.useMemo)(
      () => ({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "fallback(2, 0.5rem)",
        appearance: "none",
        userSelect: "none",
        position: "relative",
        verticalAlign: "middle",
        overflow: "hidden",
        outline: "none",
        pointerEvents: isReadOnly ? "none" : "auto",
        ...styles,
        ...isRounded ? { borderRadius: "fallback(full, 9999px)" } : {}
      }),
      [isRounded, styles, isReadOnly]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      import_core2.ui.button,
      {
        ref,
        type: "button",
        tabIndex: isReadOnly ? -1 : 0,
        disabled: isDisabled,
        "data-active": (0, import_utils2.dataAttr)(isActive),
        "data-selected": (0, import_utils2.dataAttr)(trulySelected),
        "data-readonly": (0, import_utils2.dataAttr)(isReadOnly),
        "aria-pressed": trulySelected,
        className: (0, import_utils2.cx)("ui-toggle", className),
        __css: css,
        ...rest,
        onClick: (0, import_utils2.handlerAll)(rest.onClick, onClick),
        onPointerDown,
        children: [
          children || icon,
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_ripple.Ripple, { isDisabled: disableRipple || isDisabled, ...rippleProps })
        ]
      }
    );
  }
);
Toggle.displayName = "Toggle";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Toggle,
  ToggleGroup
});
//# sourceMappingURL=index.js.map