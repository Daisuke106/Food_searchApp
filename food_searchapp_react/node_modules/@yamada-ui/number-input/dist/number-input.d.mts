import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, ThemeProps, ColorModeToken, CSS } from '@yamada-ui/core';
import { UseFormControlProps } from '@yamada-ui/form-control';
import { UseCounterProps } from '@yamada-ui/use-counter';
import { PropGetter } from '@yamada-ui/utils';
import { InputHTMLAttributes } from 'react';

type ValidityState = "rangeUnderflow" | "rangeOverflow";
type UseNumberInputProps = UseFormControlProps<HTMLInputElement> & UseCounterProps & {
    /**
     * The HTML `name` attribute used for forms.
     */
    name?: string;
    /**
     * Hints at the type of data that might be entered by the user.
     * It also determines the type of keyboard shown to the user on mobile devices.
     *
     * @default 'decimal'
     */
    inputMode?: InputHTMLAttributes<any>["inputMode"];
    /**
     * The pattern used to check the <input> element's value against on form submission.
     *
     * @default '[0-9]*(.[0-9]+)?'
     */
    pattern?: InputHTMLAttributes<any>["pattern"];
    /**
     * If `true`, the input will be focused as you increment or decrement the value with the stepper.
     *
     * @default true
     */
    focusInputOnChange?: boolean;
    /**
     * This controls the value update when you blur out of the input.
     * - If `true` and the value is greater than `max`, the value will be reset to `max`.
     * - Else, the value remains the same.
     *
     * @default true
     */
    clampValueOnBlur?: boolean;
    /**
     * If `true`, the input's value will change based on mouse wheel.
     *
     * @default false
     */
    allowMouseWheel?: boolean;
    /**
     * The callback invoked when invalid number is entered.
     */
    onInvalid?: (message: ValidityState, value: string, valueAsNumber: number) => void;
    /**
     * This is used to format the value so that screen readers
     * can speak out a more human-friendly value.
     *
     * It is used to set the `aria-valuetext` property of the input.
     */
    getAriaValueText?: (value: string | number) => string;
    /**
     * Whether the pressed key should be allowed in the input.
     * The default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\-.]$/.
     */
    isValidCharacter?: (value: string) => boolean;
    /**
     * If using a custom display format, this converts the custom format to a format `parseFloat` understands.
     */
    parse?: (value: string) => string;
    /**
     * If using a custom display format, this converts the default format to the custom format.
     */
    format?: (value: string | number) => string | number;
};
declare const useNumberInput: (props?: UseNumberInputProps) => {
    props: {
        _hover?: {} | undefined;
        _active?: {} | undefined;
        _focus?: {} | undefined;
        _invalid?: {} | undefined;
        _focusVisible?: {} | undefined;
        "aria-disabled": boolean | undefined;
        "aria-readonly": boolean | undefined;
        "aria-required": boolean | undefined;
        "data-readonly": boolean | "true" | "false";
    };
    value: string;
    valueAsNumber: number;
    isFocused: boolean;
    isRequired: boolean | undefined;
    isReadOnly: boolean | undefined;
    isDisabled: boolean | undefined;
    getInputProps: PropGetter;
    getIncrementProps: PropGetter;
    getDecrementProps: PropGetter;
};
type UseNumberInputReturn = ReturnType<typeof useNumberInput>;
type NumberInputOptions = {
    /**
     * If `true`, display the addon for the number input.
     */
    isStepper?: boolean;
    /**
     * Props for container element.
     */
    containerProps?: HTMLUIProps<"div">;
    /**
     * Props for addon component.
     */
    addonProps?: HTMLUIProps<"div">;
    /**
     * Props for increment component.
     */
    incrementProps?: NumberIncrementStepperProps;
    /**
     * Props for decrement component.
     */
    decrementProps?: NumberDecrementStepperProps;
    /**
     * The border color when the input is focused.
     */
    focusBorderColor?: ColorModeToken<CSS.Property.BorderColor, "colors">;
    /**
     * The border color when the input is invalid.
     */
    errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, "colors">;
};
type NumberInputProps = Omit<HTMLUIProps<"input">, "disabled" | "required" | "readOnly" | "size" | "onChange"> & ThemeProps<"NumberInput"> & Omit<UseNumberInputProps, "disabled" | "required" | "readOnly"> & NumberInputOptions;
/**
 * `NumberInput` is a component used to obtain numeric input from the user.
 *
 * @see Docs https://yamada-ui.com/components/forms/number-input
 */
declare const NumberInput: _yamada_ui_core.Component<"input", NumberInputProps>;
type NumberIncrementStepperProps = HTMLUIProps<"div">;
type NumberDecrementStepperProps = HTMLUIProps<"div">;

export { NumberInput, type NumberInputProps, type UseNumberInputProps, type UseNumberInputReturn, useNumberInput };
