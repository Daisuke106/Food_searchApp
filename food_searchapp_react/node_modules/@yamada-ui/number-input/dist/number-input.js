"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/number-input.tsx
var number_input_exports = {};
__export(number_input_exports, {
  NumberInput: () => NumberInput,
  useNumberInput: () => useNumberInput
});
module.exports = __toCommonJS(number_input_exports);
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_icon = require("@yamada-ui/icon");
var import_use_counter = require("@yamada-ui/use-counter");
var import_use_event_listener = require("@yamada-ui/use-event-listener");
var import_use_interval = require("@yamada-ui/use-interval");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var isDefaultValidCharacter = (character) => /^[Ee0-9+\-.]$/.test(character);
var isValidNumericKeyboardEvent = ({ key, ctrlKey, altKey, metaKey }, isValid) => {
  if (key == null)
    return true;
  const isModifierKey = ctrlKey || altKey || metaKey;
  const isSingleCharacterKey = key.length === 1;
  if (!isSingleCharacterKey || isModifierKey)
    return true;
  return isValid(key);
};
var getStep = ({
  ctrlKey,
  shiftKey,
  metaKey
}) => {
  let ratio = 1;
  if (metaKey || ctrlKey)
    ratio = 0.1;
  if (shiftKey)
    ratio = 10;
  return ratio;
};
var useNumberInput = (props = {}) => {
  const {
    id,
    name,
    value: valueProp,
    defaultValue,
    inputMode = "decimal",
    pattern = "[0-9]*(.[0-9]+)?",
    required,
    disabled,
    readOnly,
    focusInputOnChange = true,
    clampValueOnBlur = true,
    keepWithinRange = true,
    allowMouseWheel,
    min = Number.MIN_SAFE_INTEGER,
    max = Number.MAX_SAFE_INTEGER,
    step: stepProp,
    precision,
    parse: parseProp,
    format: formatProp,
    onInvalid: onInvalidProp,
    isValidCharacter: isValidCharacterProp,
    getAriaValueText: getAriaValueTextProp,
    onChange: onChangeProp,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    "aria-invalid": isInvalid,
    ...rest
  } = (0, import_form_control.useFormControlProps)(props);
  const formControlProps = (0, import_utils.pickObject)(rest, import_form_control.formControlProperties);
  const isRequired = required;
  const isReadOnly = readOnly;
  const isDisabled = disabled;
  const [isFocused, setFocused] = (0, import_react.useState)(false);
  const isInteractive = !(readOnly || disabled);
  const inputRef = (0, import_react.useRef)(null);
  const inputSelectionRef = (0, import_react.useRef)(null);
  const incrementRef = (0, import_react.useRef)(null);
  const decrementRef = (0, import_react.useRef)(null);
  const onFocus = (0, import_utils.useCallbackRef)(
    (0, import_utils.handlerAll)(onFocusProp, (ev) => {
      var _a, _b, _c;
      setFocused(true);
      if (!inputSelectionRef.current)
        return;
      ev.target.selectionStart = (_b = inputSelectionRef.current.start) != null ? _b : (_a = ev.currentTarget.value) == null ? void 0 : _a.length;
      ev.currentTarget.selectionEnd = (_c = inputSelectionRef.current.end) != null ? _c : ev.currentTarget.selectionStart;
    })
  );
  const onBlur = (0, import_utils.useCallbackRef)(
    (0, import_utils.handlerAll)(onBlurProp, () => {
      setFocused(false);
      if (clampValueOnBlur)
        validateAndClamp();
    })
  );
  const onInvalid = (0, import_utils.useCallbackRef)(onInvalidProp);
  const getAriaValueText = (0, import_utils.useCallbackRef)(getAriaValueTextProp);
  const isValidCharacter = (0, import_utils.useCallbackRef)(
    isValidCharacterProp != null ? isValidCharacterProp : isDefaultValidCharacter
  );
  const {
    isMin,
    isMax,
    isOut,
    value,
    valueAsNumber,
    setValue,
    update,
    cast,
    ...counter
  } = (0, import_use_counter.useCounter)({
    value: valueProp,
    defaultValue,
    step: stepProp,
    min,
    max,
    precision,
    keepWithinRange,
    onChange: onChangeProp
  });
  const valueText = (0, import_react.useMemo)(() => {
    let text = getAriaValueText == null ? void 0 : getAriaValueText(value);
    if (text != null)
      return text;
    text = value.toString();
    return !text ? void 0 : text;
  }, [value, getAriaValueText]);
  const sanitize = (0, import_react.useCallback)(
    (value2) => value2.split("").filter(isValidCharacter).join(""),
    [isValidCharacter]
  );
  const parse = (0, import_react.useCallback)(
    (value2) => {
      var _a;
      return (_a = parseProp == null ? void 0 : parseProp(value2)) != null ? _a : value2;
    },
    [parseProp]
  );
  const format = (0, import_react.useCallback)(
    (value2) => {
      var _a;
      return ((_a = formatProp == null ? void 0 : formatProp(value2)) != null ? _a : value2).toString();
    },
    [formatProp]
  );
  const increment = (0, import_react.useCallback)(
    (step = stepProp != null ? stepProp : 1) => {
      if (isInteractive)
        counter.increment(step);
    },
    [isInteractive, counter, stepProp]
  );
  const decrement = (0, import_react.useCallback)(
    (step = stepProp != null ? stepProp : 1) => {
      if (isInteractive)
        counter.decrement(step);
    },
    [isInteractive, counter, stepProp]
  );
  const validateAndClamp = (0, import_react.useCallback)(() => {
    let next = value;
    if (value === "")
      return;
    const valueStartsWithE = /^[eE]/.test(value.toString());
    if (valueStartsWithE) {
      setValue("");
    } else {
      if (valueAsNumber < min)
        next = min;
      if (valueAsNumber > max)
        next = max;
      cast(next);
    }
  }, [cast, max, min, setValue, value, valueAsNumber]);
  const onChange = (0, import_react.useCallback)(
    (ev) => {
      if (ev.nativeEvent.isComposing)
        return;
      const parsedInput = parse(ev.currentTarget.value);
      update(sanitize(parsedInput));
      inputSelectionRef.current = {
        start: ev.currentTarget.selectionStart,
        end: ev.currentTarget.selectionEnd
      };
    },
    [parse, update, sanitize]
  );
  const onKeyDown = (0, import_react.useCallback)(
    (ev) => {
      if (ev.nativeEvent.isComposing)
        return;
      if (!isValidNumericKeyboardEvent(ev, isValidCharacter))
        ev.preventDefault();
      const step = getStep(ev) * (stepProp != null ? stepProp : 1);
      const keyMap = {
        ArrowUp: () => increment(step),
        ArrowDown: () => decrement(step),
        Home: () => update(min),
        End: () => update(max)
      };
      const action = keyMap[ev.key];
      if (!action)
        return;
      ev.preventDefault();
      action(ev);
    },
    [decrement, increment, isValidCharacter, max, min, stepProp, update]
  );
  const { up, down, stop, isSpinning } = useSpinner(increment, decrement);
  useAttributeObserver(incrementRef, ["disabled"], isSpinning, stop);
  useAttributeObserver(decrementRef, ["disabled"], isSpinning, stop);
  const focusInput = (0, import_react.useCallback)(() => {
    if (focusInputOnChange)
      requestAnimationFrame(() => {
        var _a;
        (_a = inputRef.current) == null ? void 0 : _a.focus();
      });
  }, [focusInputOnChange]);
  const eventUp = (0, import_react.useCallback)(
    (ev) => {
      ev.preventDefault();
      up();
      focusInput();
    },
    [focusInput, up]
  );
  const eventDown = (0, import_react.useCallback)(
    (ev) => {
      ev.preventDefault();
      down();
      focusInput();
    },
    [focusInput, down]
  );
  (0, import_utils.useUpdateEffect)(() => {
    if (valueAsNumber > max) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format(value), valueAsNumber);
    } else if (valueAsNumber < min) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format(value), valueAsNumber);
    }
  }, [valueAsNumber, value, format, onInvalid]);
  (0, import_utils.useSafeLayoutEffect)(() => {
    if (!inputRef.current)
      return;
    const notInSync = inputRef.current.value != value;
    if (!notInSync)
      return;
    const parsedInput = parse(inputRef.current.value);
    setValue(sanitize(parsedInput));
  }, [parse, sanitize]);
  (0, import_use_event_listener.useEventListener)(
    () => inputRef.current,
    "wheel",
    (ev) => {
      var _a, _b;
      const ownerDocument = (_b = (_a = inputRef.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;
      const isFocused2 = ownerDocument.activeElement === inputRef.current;
      if (!allowMouseWheel || !isFocused2)
        return;
      ev.preventDefault();
      const step = getStep(ev) * (stepProp != null ? stepProp : 1);
      const direction = Math.sign(ev.deltaY);
      if (direction === -1) {
        increment(step);
      } else if (direction === 1) {
        decrement(step);
      }
    },
    { passive: false }
  );
  const getInputProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => ({
      id,
      name,
      type: "text",
      role: "spinbutton",
      inputMode,
      pattern,
      required,
      disabled,
      readOnly,
      ...formControlProps,
      ...props2,
      min,
      max,
      step: stepProp,
      ref: (0, import_utils.mergeRefs)(inputRef, ref),
      value: format(value),
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": Number.isNaN(valueAsNumber) ? void 0 : valueAsNumber,
      "aria-valuetext": valueText,
      "aria-invalid": (0, import_utils.ariaAttr)(isInvalid != null ? isInvalid : isOut),
      autoComplete: "off",
      autoCorrect: "off",
      onChange: (0, import_utils.handlerAll)(props2.onChange, onChange),
      onKeyDown: (0, import_utils.handlerAll)(props2.onKeyDown, onKeyDown),
      onFocus: (0, import_utils.handlerAll)(props2.onFocus, onFocus),
      onBlur: (0, import_utils.handlerAll)(props2.onBlur, onBlur)
    }),
    [
      id,
      name,
      inputMode,
      pattern,
      required,
      disabled,
      readOnly,
      formControlProps,
      min,
      max,
      stepProp,
      format,
      value,
      valueAsNumber,
      valueText,
      isInvalid,
      isOut,
      onChange,
      onKeyDown,
      onFocus,
      onBlur
    ]
  );
  const getIncrementProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      var _a;
      const trulyDisabled = disabled || keepWithinRange && isMax;
      return {
        required,
        readOnly,
        disabled: trulyDisabled,
        ...formControlProps,
        ...props2,
        style: {
          ...props2.style,
          cursor: readOnly ? "not-allowed" : (_a = props2.style) == null ? void 0 : _a.cursor
        },
        ref: (0, import_utils.mergeRefs)(ref, incrementRef),
        role: "button",
        tabIndex: -1,
        onPointerDown: (0, import_utils.handlerAll)(props2.onPointerDown, (ev) => {
          if (ev.button === 0 && !trulyDisabled)
            eventUp(ev);
        }),
        onPointerLeave: (0, import_utils.handlerAll)(props2.onPointerLeave, stop),
        onPointerUp: (0, import_utils.handlerAll)(props2.onPointerUp, stop)
      };
    },
    [
      disabled,
      keepWithinRange,
      isMax,
      required,
      readOnly,
      formControlProps,
      stop,
      eventUp
    ]
  );
  const getDecrementProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      var _a;
      const trulyDisabled = disabled || keepWithinRange && isMin;
      return {
        required,
        readOnly,
        disabled: trulyDisabled,
        ...formControlProps,
        ...props2,
        style: {
          ...props2.style,
          cursor: readOnly ? "not-allowed" : (_a = props2.style) == null ? void 0 : _a.cursor
        },
        ref: (0, import_utils.mergeRefs)(ref, decrementRef),
        role: "button",
        tabIndex: -1,
        onPointerDown: (0, import_utils.handlerAll)(props2.onPointerDown, (ev) => {
          if (ev.button === 0 && !trulyDisabled)
            eventDown(ev);
        }),
        onPointerLeave: (0, import_utils.handlerAll)(props2.onPointerLeave, stop),
        onPointerUp: (0, import_utils.handlerAll)(props2.onPointerUp, stop)
      };
    },
    [
      disabled,
      keepWithinRange,
      isMin,
      required,
      readOnly,
      formControlProps,
      stop,
      eventDown
    ]
  );
  return {
    props: rest,
    value: format(value),
    valueAsNumber,
    isFocused,
    isRequired,
    isReadOnly,
    isDisabled,
    getInputProps,
    getIncrementProps,
    getDecrementProps
  };
};
var INTERVAL = 50;
var DELAY = 300;
var useSpinner = (increment, decrement) => {
  const [isSpinning, setIsSpinning] = (0, import_react.useState)(false);
  const [action, setAction] = (0, import_react.useState)(null);
  const [isOnce, setIsOnce] = (0, import_react.useState)(true);
  const timeoutRef = (0, import_react.useRef)(null);
  const removeTimeout = () => clearTimeout(timeoutRef.current);
  (0, import_use_interval.useInterval)(
    () => {
      if (action === "increment")
        increment();
      if (action === "decrement")
        decrement();
    },
    isSpinning ? INTERVAL : null
  );
  const up = (0, import_react.useCallback)(() => {
    if (isOnce)
      increment();
    timeoutRef.current = setTimeout(() => {
      setIsOnce(false);
      setIsSpinning(true);
      setAction("increment");
    }, DELAY);
  }, [increment, isOnce]);
  const down = (0, import_react.useCallback)(() => {
    if (isOnce)
      decrement();
    timeoutRef.current = setTimeout(() => {
      setIsOnce(false);
      setIsSpinning(true);
      setAction("decrement");
    }, DELAY);
  }, [decrement, isOnce]);
  const stop = (0, import_react.useCallback)(() => {
    setIsOnce(true);
    setIsSpinning(false);
    removeTimeout();
  }, []);
  (0, import_react.useEffect)(() => {
    return () => removeTimeout();
  }, []);
  return { up, down, stop, isSpinning };
};
var useAttributeObserver = (ref, attributeFilter, enabled, func) => {
  (0, import_react.useEffect)(() => {
    var _a;
    if (!ref.current || !enabled)
      return;
    const ownerDocument = (_a = ref.current.ownerDocument.defaultView) != null ? _a : window;
    const observer = new ownerDocument.MutationObserver((changes) => {
      for (const { type, attributeName } of changes) {
        if (type === "attributes" && attributeName && attributeFilter.includes(attributeName))
          func();
      }
    });
    observer.observe(ref.current, { attributes: true, attributeFilter });
    return () => observer.disconnect();
  });
};
var [NumberInputContextProvider, useNumberInputContext] = (0, import_utils.createContext)({
  strict: false,
  name: "NumberInputContext"
});
var NumberInput = (0, import_core.forwardRef)(
  (props, ref) => {
    const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("NumberInput", props);
    const {
      className,
      isStepper = true,
      containerProps,
      addonProps,
      incrementProps,
      decrementProps,
      ...computedProps
    } = (0, import_core.omitThemeProps)(mergedProps);
    const {
      getInputProps,
      getIncrementProps,
      getDecrementProps,
      props: rest
    } = useNumberInput(computedProps);
    const css = {
      position: "relative",
      zIndex: 0,
      ...styles.container
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      NumberInputContextProvider,
      {
        value: { getInputProps, getIncrementProps, getDecrementProps, styles },
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          import_core.ui.div,
          {
            className: (0, import_utils.cx)("ui-number-input", className),
            __css: css,
            ...containerProps,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                NumberInputField,
                {
                  ...getInputProps(rest, ref)
                }
              ),
              isStepper ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(NumberInputAddon, { ...addonProps, children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(NumberIncrementStepper, { ...incrementProps }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(NumberDecrementStepper, { ...decrementProps })
              ] }) : null
            ]
          }
        )
      }
    );
  }
);
var NumberInputField = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useNumberInputContext();
    const css = {
      width: "100%",
      ...styles.field
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.input,
      {
        ref,
        className: (0, import_utils.cx)("ui-number-input__field", className),
        __css: css,
        ...rest
      }
    );
  }
);
var NumberInputAddon = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useNumberInputContext();
    const css = {
      display: "flex",
      flexDirection: "column",
      position: "absolute",
      top: "0",
      insetEnd: "0px",
      margin: "1px",
      height: "calc(100% - 2px)",
      zIndex: "fallback(yamcha, 1)",
      ...styles.addon
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        className: (0, import_utils.cx)("ui-number-input__addon", className),
        "aria-hidden": true,
        __css: css,
        ...rest
      }
    );
  }
);
var Stepper = (0, import_core.ui)("div", {
  baseStyle: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    transitionProperty: "common",
    transitionDuration: "normal",
    userSelect: "none",
    cursor: "pointer",
    lineHeight: "normal"
  }
});
var NumberIncrementStepper = (0, import_core.forwardRef)(
  ({ className, children, ...rest }, ref) => {
    const { getIncrementProps, styles } = useNumberInputContext();
    const css = { ...styles.stepper };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      Stepper,
      {
        className: (0, import_utils.cx)("ui-number-input__stepper--up", className),
        ...getIncrementProps(rest, ref),
        __css: css,
        children: children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_icon.ChevronIcon, { __css: { transform: "rotate(180deg)" } })
      }
    );
  }
);
var NumberDecrementStepper = (0, import_core.forwardRef)(
  ({ className, children, ...rest }, ref) => {
    const { getDecrementProps, styles } = useNumberInputContext();
    const css = { ...styles.stepper };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      Stepper,
      {
        className: (0, import_utils.cx)("ui-number-input__stepper--down", className),
        ...getDecrementProps(rest, ref),
        __css: css,
        children: children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_icon.ChevronIcon, {})
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NumberInput,
  useNumberInput
});
//# sourceMappingURL=number-input.js.map