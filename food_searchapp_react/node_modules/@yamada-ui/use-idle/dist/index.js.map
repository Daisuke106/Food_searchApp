{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\"\n\nconst DEFAULT_EVENTS: (keyof DocumentEventMap)[] = [\n  \"keypress\",\n  \"mousemove\",\n  \"touchmove\",\n  \"click\",\n  \"scroll\",\n]\n\nconst DEFAULT_OPTIONS = {\n  events: DEFAULT_EVENTS,\n  initialState: true,\n}\n\nexport type IdleOptions = Partial<{\n  events: (keyof DocumentEventMap)[]\n  initialState: boolean\n}>\n\n/**\n * `useIdle` is a custom hook that detects whether the user has been idle for a certain amount of time in milliseconds.\n *\n * @see Docs https://yamada-ui.com/hooks/use-idle\n */\nexport const useIdle = (timeout: number, options?: IdleOptions) => {\n  const { events, initialState } = { ...DEFAULT_OPTIONS, ...options }\n  const [idle, setIdle] = useState<boolean>(initialState)\n  const timeoutId = useRef<any>(null)\n\n  useEffect(() => {\n    const handleEvent = () => {\n      setIdle(false)\n\n      if (timeoutId.current) window.clearTimeout(timeoutId.current)\n\n      timeoutId.current = window.setTimeout(() => {\n        setIdle(true)\n      }, timeout)\n    }\n\n    events.forEach((event) => document.addEventListener(event, handleEvent))\n\n    return () => {\n      events.forEach((event) =>\n        document.removeEventListener(event, handleEvent),\n      )\n    }\n  }, [events, timeout])\n\n  return idle\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4C;AAE5C,IAAM,iBAA6C;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAM,kBAAkB;AAAA,EACtB,QAAQ;AAAA,EACR,cAAc;AAChB;AAYO,IAAM,UAAU,CAAC,SAAiB,YAA0B;AACjE,QAAM,EAAE,QAAQ,aAAa,IAAI,EAAE,GAAG,iBAAiB,GAAG,QAAQ;AAClE,QAAM,CAAC,MAAM,OAAO,QAAI,uBAAkB,YAAY;AACtD,QAAM,gBAAY,qBAAY,IAAI;AAElC,8BAAU,MAAM;AACd,UAAM,cAAc,MAAM;AACxB,cAAQ,KAAK;AAEb,UAAI,UAAU;AAAS,eAAO,aAAa,UAAU,OAAO;AAE5D,gBAAU,UAAU,OAAO,WAAW,MAAM;AAC1C,gBAAQ,IAAI;AAAA,MACd,GAAG,OAAO;AAAA,IACZ;AAEA,WAAO,QAAQ,CAAC,UAAU,SAAS,iBAAiB,OAAO,WAAW,CAAC;AAEvE,WAAO,MAAM;AACX,aAAO;AAAA,QAAQ,CAAC,UACd,SAAS,oBAAoB,OAAO,WAAW;AAAA,MACjD;AAAA,IACF;AAAA,EACF,GAAG,CAAC,QAAQ,OAAO,CAAC;AAEpB,SAAO;AACT;","names":[]}