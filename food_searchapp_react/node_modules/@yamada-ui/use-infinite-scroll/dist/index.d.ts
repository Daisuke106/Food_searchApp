import { RefObject } from 'react';

type UseInfiniteScrollProps = Omit<IntersectionObserverInit, "root"> & {
    /**
     * The orientation of the infinite scroll.
     *
     * @default 'vertical'
     */
    orientation?: "vertical" | "horizontal";
    /**
     * The element that is used as the viewport for checking visibility of the target.
     * Defaults to the browser viewport if not specified or if `null`.
     */
    rootRef?: RefObject<HTMLElement>;
    /**
     * Margin around the root. Can have values similar to the CSS margin property,
     * e.g. "10px 20px 30px 40px" (top, right, bottom, left).
     */
    rootMargin?: string;
    /**
     * Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.
     */
    threshold?: number | number[];
    /**
     * If set the `onLoad` function will start from the given index.
     * If `initialLoad` is `true`, index starts from `0`.
     *
     * @default 1
     */
    startIndex?: number;
    /**
     * The callback invoked when trigger is intersect.
     */
    onLoad?: ({ index, entry, finish, }: {
        index: number;
        finish: () => void;
        entry?: IntersectionObserverEntry;
    }) => Promise<void>;
    /**
     * Ref to a reset function.
     */
    resetRef?: RefObject<(index?: number, runScroll?: boolean) => void>;
    /**
     * Ref to a reset index function.
     */
    indexRef?: RefObject<(index: number) => void>;
    /**
     * If `true`, the infinite scroll is disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     *  If `true`, reverse direction.
     *
     * @default false
     */
    isReverse?: boolean;
    /**
     * If `true`, invoke `onLoad` function for the first time.
     *
     * @default false
     */
    initialLoad?: boolean;
    /**
     * Determines whether scrolling is instant or animates smoothly.
     */
    behavior?: ScrollBehavior;
};
/**
 * `useInfiniteScroll` is a custom hook for providing infinite scroll functionality.
 *
 * @see Docs https://yamada-ui.com/hooks/use-infinite-scroll
 */
declare const useInfiniteScroll: <T extends HTMLElement = HTMLDivElement>({ orientation, rootRef, rootMargin, threshold, initialLoad, startIndex, onLoad: onLoadProp, resetRef, indexRef: indexRefProp, isDisabled, isReverse, behavior, }?: UseInfiniteScrollProps) => {
    ref: RefObject<T>;
    isFinish: boolean;
};

export { type UseInfiniteScrollProps, useInfiniteScroll };
