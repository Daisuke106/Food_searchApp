{"version":3,"sources":["../src/menu-list.tsx","../src/menu.tsx"],"sourcesContent":["import type { CSSUIObject } from \"@yamada-ui/core\"\nimport { forwardRef } from \"@yamada-ui/core\"\nimport type { MotionProps } from \"@yamada-ui/motion\"\nimport { PopoverContent } from \"@yamada-ui/popover\"\nimport { cx, handlerAll, mergeRefs } from \"@yamada-ui/utils\"\nimport type { KeyboardEvent, KeyboardEventHandler } from \"react\"\nimport { useCallback } from \"react\"\nimport { useMenu, useMenuDescendantsContext } from \"./menu\"\n\nexport type MenuListProps = MotionProps<\"ul\">\n\nexport const MenuList = forwardRef<MenuListProps, \"ul\">(\n  ({ className, ...rest }, ref) => {\n    const { menuRef, focusedIndex, setFocusedIndex, onClose, styles } =\n      useMenu()\n\n    const descendants = useMenuDescendantsContext()\n\n    const onNext = useCallback(() => {\n      const next = descendants.enabledNextValue(focusedIndex)\n\n      if (next) setFocusedIndex(next.index)\n    }, [descendants, focusedIndex, setFocusedIndex])\n\n    const onPrev = useCallback(() => {\n      const prev = descendants.enabledPrevValue(focusedIndex)\n\n      if (prev) setFocusedIndex(prev.index)\n    }, [descendants, focusedIndex, setFocusedIndex])\n\n    const onFirst = useCallback(() => {\n      const first = descendants.enabledFirstValue()\n\n      if (first) setFocusedIndex(first.index)\n    }, [descendants, setFocusedIndex])\n\n    const onLast = useCallback(() => {\n      const last = descendants.enabledLastValue()\n\n      if (last) setFocusedIndex(last.index)\n    }, [descendants, setFocusedIndex])\n\n    const onKeyDown = useCallback(\n      (ev: KeyboardEvent) => {\n        const actions: Record<string, KeyboardEventHandler> = {\n          Tab: (ev) => ev.preventDefault(),\n          Escape: onClose,\n          ArrowDown: focusedIndex === -1 ? onFirst : onNext,\n          ArrowUp: focusedIndex === -1 ? onLast : onPrev,\n          Home: onFirst,\n          End: onLast,\n        }\n\n        const action = actions[ev.key]\n\n        if (!action) return\n\n        ev.preventDefault()\n        action(ev)\n      },\n      [focusedIndex, onClose, onFirst, onLast, onNext, onPrev],\n    )\n\n    const css: CSSUIObject = { ...styles.list }\n\n    return (\n      <PopoverContent\n        as=\"ul\"\n        ref={mergeRefs(menuRef, ref)}\n        className={cx(\"ui-menu__list\", className)}\n        role=\"menu\"\n        tabIndex={-1}\n        __css={css}\n        {...rest}\n        onKeyDown={handlerAll(rest.onKeyDown, onKeyDown)}\n      />\n    )\n  },\n)\n","import type { CSSUIObject, ThemeProps } from \"@yamada-ui/core\"\nimport { useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\"\nimport type { PopoverProps } from \"@yamada-ui/popover\"\nimport { Popover } from \"@yamada-ui/popover\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport { useDisclosure } from \"@yamada-ui/use-disclosure\"\nimport {\n  createContext,\n  funcAll,\n  useUnmountEffect,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type {\n  Dispatch,\n  FC,\n  MutableRefObject,\n  RefObject,\n  SetStateAction,\n} from \"react\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\nimport { useUpstreamMenuItem } from \"./menu-item\"\n\nconst {\n  DescendantsContextProvider,\n  useDescendantsContext: useMenuDescendantsContext,\n  useDescendants,\n  useDescendant: useMenuDescendant,\n} = createDescendant<HTMLElement>()\n\nexport { useMenuDescendantsContext, useMenuDescendant }\n\ntype MenuContext = MenuOptions & {\n  isOpen: boolean\n  onOpen: () => void\n  onClose: () => void\n  onUpstreamClose?: () => void\n  onFocusFirstItem: () => void\n  onFocusLastItem: () => void\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  menuRef: RefObject<HTMLDivElement>\n  requestAnimationFrameId: MutableRefObject<number | null>\n  isNested: boolean\n  styles: Record<string, CSSUIObject>\n}\n\nconst [MenuProvider, useMenu] = createContext<MenuContext>({\n  name: \"MenuContext\",\n  errorMessage: `useMenu returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\"`,\n})\n\ntype UpstreamMenuContext = {\n  relatedRef: RefObject<HTMLElement>\n  onDownstreamCloseMapRef: MutableRefObject<Map<string, () => void>>\n  onUpstreamClose: () => void\n}\n\nexport const [UpstreamMenuProvider, useUpstreamMenu] =\n  createContext<UpstreamMenuContext>({\n    strict: false,\n    name: \"UpstreamMenuContext\",\n  })\n\nexport { useMenu }\n\ntype MenuOptions = {\n  /**\n   * If `true`, the list element will be closed when value is selected.\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n}\n\nexport type MenuProps = ThemeProps<\"Menu\"> &\n  Omit<PopoverProps, \"closeOnButton\" | \"relatedRef\"> &\n  MenuOptions\n\n/**\n * `Menu` is a component that displays a common dropdown menu.\n *\n * @see Docs https://yamada-ui.com/components/overlay/menu\n */\nexport const Menu: FC<MenuProps> = (props) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Menu\", props)\n  let {\n    initialFocusRef,\n    closeOnSelect = true,\n    closeOnBlur,\n    placement,\n    duration = 0.2,\n    offset,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    ...rest\n  } = omitThemeProps(mergedProps)\n  const { relatedRef, onUpstreamClose, onDownstreamCloseMapRef } =\n    useUpstreamMenu() ?? {}\n  const { setDownstreamOpen, hasDownstreamRef } = useUpstreamMenuItem() ?? {}\n  const isNested = !!relatedRef\n\n  if (isNested) {\n    placement ??= \"right-start\"\n    offset ??= [-8, 8]\n    closeOnBlur ??= false\n  } else {\n    placement ??= \"bottom-start\"\n  }\n\n  const descendants = useDescendants()\n\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n\n  const menuRef = useRef<HTMLDivElement>(null)\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n  const requestAnimationFrameId = useRef<number | null>(null)\n  const onCloseMapRef = useRef<Map<string, () => void>>(new Map())\n\n  const onFocusMenu = useCallback(() => {\n    requestAnimationFrame(() =>\n      menuRef.current?.focus({ preventScroll: false }),\n    )\n  }, [])\n\n  const onFocusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) return\n\n      const first = descendants.enabledFirstValue()\n\n      if (first) setFocusedIndex(first.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const onFocusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) return\n\n      const last = descendants.enabledLastValue()\n\n      if (last) setFocusedIndex(last.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n\n    if (!isNested) onFocusMenu()\n  }, [onOpenProp, isNested, onFocusMenu])\n\n  const onCloseInternal = useCallback(() => {\n    onCloseProp?.()\n\n    for (const onClose of onCloseMapRef.current.values()) {\n      onClose()\n    }\n  }, [onCloseProp])\n\n  const id = useId()\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    ...props,\n    onOpen: onOpenInternal,\n    onClose: onCloseInternal,\n  })\n\n  useEffect(() => {\n    const onCloseMap = onDownstreamCloseMapRef?.current\n\n    onCloseMap?.set(id, onClose)\n\n    return () => {\n      onCloseMap?.delete(id)\n    }\n  }, [id, onClose, onDownstreamCloseMapRef])\n\n  useEffect(() => {\n    if (setDownstreamOpen) setDownstreamOpen(isOpen)\n  }, [setDownstreamOpen, isOpen])\n\n  useEffect(() => {\n    if (hasDownstreamRef) hasDownstreamRef.current = true\n\n    return () => {\n      if (hasDownstreamRef) hasDownstreamRef.current = false\n    }\n  })\n\n  useUpdateEffect(() => {\n    if (!isOpen) setFocusedIndex(-1)\n  }, [isOpen])\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  return (\n    <DescendantsContextProvider value={descendants}>\n      <UpstreamMenuProvider\n        value={{\n          relatedRef: menuRef,\n          onDownstreamCloseMapRef: onCloseMapRef,\n          onUpstreamClose: funcAll(onUpstreamClose, onClose),\n        }}\n      >\n        <MenuProvider\n          value={{\n            isOpen,\n            onOpen,\n            onClose,\n            onUpstreamClose,\n            onFocusFirstItem,\n            onFocusLastItem,\n            closeOnSelect,\n            focusedIndex,\n            setFocusedIndex,\n            menuRef,\n            requestAnimationFrameId,\n            isNested,\n            styles,\n          }}\n        >\n          <Popover\n            {...{\n              trigger: isNested ? \"hover\" : \"click\",\n              ...rest,\n              isOpen,\n              onOpen,\n              onClose,\n              placement,\n              offset,\n              duration,\n              initialFocusRef,\n              relatedRef,\n              closeOnButton: false,\n              closeOnBlur,\n            }}\n          />\n        </MenuProvider>\n      </UpstreamMenuProvider>\n    </DescendantsContextProvider>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,eAA2B;AAE3B,IAAAC,kBAA+B;AAC/B,IAAAC,gBAA0C;AAE1C,IAAAC,gBAA4B;;;ACL5B,kBAAuD;AAEvD,qBAAwB;AACxB,4BAAiC;AACjC,4BAA8B;AAC9B,mBAKO;AAQP,mBAAgE;AA+MtD;AA5MV,IAAM;AAAA,EACJ;AAAA,EACA,uBAAuB;AAAA,EACvB;AAAA,EACA,eAAe;AACjB,QAAI,wCAA8B;AAmBlC,IAAM,CAAC,cAAc,OAAO,QAAI,4BAA2B;AAAA,EACzD,MAAM;AAAA,EACN,cAAc;AAChB,CAAC;AAQM,IAAM,CAAC,sBAAsB,eAAe,QACjD,4BAAmC;AAAA,EACjC,QAAQ;AAAA,EACR,MAAM;AACR,CAAC;;;ADKG,IAAAC,sBAAA;AAvDC,IAAM,eAAW;AAAA,EACtB,CAAC,EAAE,WAAW,GAAG,KAAK,GAAG,QAAQ;AAC/B,UAAM,EAAE,SAAS,cAAc,iBAAiB,SAAS,OAAO,IAC9D,QAAQ;AAEV,UAAM,cAAc,0BAA0B;AAE9C,UAAM,aAAS,2BAAY,MAAM;AAC/B,YAAM,OAAO,YAAY,iBAAiB,YAAY;AAEtD,UAAI;AAAM,wBAAgB,KAAK,KAAK;AAAA,IACtC,GAAG,CAAC,aAAa,cAAc,eAAe,CAAC;AAE/C,UAAM,aAAS,2BAAY,MAAM;AAC/B,YAAM,OAAO,YAAY,iBAAiB,YAAY;AAEtD,UAAI;AAAM,wBAAgB,KAAK,KAAK;AAAA,IACtC,GAAG,CAAC,aAAa,cAAc,eAAe,CAAC;AAE/C,UAAM,cAAU,2BAAY,MAAM;AAChC,YAAM,QAAQ,YAAY,kBAAkB;AAE5C,UAAI;AAAO,wBAAgB,MAAM,KAAK;AAAA,IACxC,GAAG,CAAC,aAAa,eAAe,CAAC;AAEjC,UAAM,aAAS,2BAAY,MAAM;AAC/B,YAAM,OAAO,YAAY,iBAAiB;AAE1C,UAAI;AAAM,wBAAgB,KAAK,KAAK;AAAA,IACtC,GAAG,CAAC,aAAa,eAAe,CAAC;AAEjC,UAAM,gBAAY;AAAA,MAChB,CAAC,OAAsB;AACrB,cAAM,UAAgD;AAAA,UACpD,KAAK,CAACC,QAAOA,IAAG,eAAe;AAAA,UAC/B,QAAQ;AAAA,UACR,WAAW,iBAAiB,KAAK,UAAU;AAAA,UAC3C,SAAS,iBAAiB,KAAK,SAAS;AAAA,UACxC,MAAM;AAAA,UACN,KAAK;AAAA,QACP;AAEA,cAAM,SAAS,QAAQ,GAAG,GAAG;AAE7B,YAAI,CAAC;AAAQ;AAEb,WAAG,eAAe;AAClB,eAAO,EAAE;AAAA,MACX;AAAA,MACA,CAAC,cAAc,SAAS,SAAS,QAAQ,QAAQ,MAAM;AAAA,IACzD;AAEA,UAAM,MAAmB,EAAE,GAAG,OAAO,KAAK;AAE1C,WACE;AAAA,MAAC;AAAA;AAAA,QACC,IAAG;AAAA,QACH,SAAK,yBAAU,SAAS,GAAG;AAAA,QAC3B,eAAW,kBAAG,iBAAiB,SAAS;AAAA,QACxC,MAAK;AAAA,QACL,UAAU;AAAA,QACV,OAAO;AAAA,QACN,GAAG;AAAA,QACJ,eAAW,0BAAW,KAAK,WAAW,SAAS;AAAA;AAAA,IACjD;AAAA,EAEJ;AACF;","names":["import_core","import_popover","import_utils","import_react","import_jsx_runtime","ev"]}