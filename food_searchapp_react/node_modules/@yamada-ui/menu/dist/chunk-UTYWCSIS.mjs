"use client"

// src/menu-item.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { useClickable } from "@yamada-ui/use-clickable";
import {
  ariaAttr,
  createContext as createContext2,
  cx,
  funcAll as funcAll2,
  handlerAll,
  isActiveElement,
  isHTMLElement,
  mergeRefs,
  useUpdateEffect as useUpdateEffect2
} from "@yamada-ui/utils";
import { useCallback as useCallback2, useRef as useRef2, useState as useState2 } from "react";

// src/menu.tsx
import { useMultiComponentStyle, omitThemeProps } from "@yamada-ui/core";
import { Popover } from "@yamada-ui/popover";
import { createDescendant } from "@yamada-ui/use-descendant";
import { useDisclosure } from "@yamada-ui/use-disclosure";
import {
  createContext,
  funcAll,
  useUnmountEffect,
  useUpdateEffect
} from "@yamada-ui/utils";
import { useCallback, useEffect, useId, useRef, useState } from "react";
import { jsx } from "react/jsx-runtime";
var {
  DescendantsContextProvider,
  useDescendantsContext: useMenuDescendantsContext,
  useDescendants,
  useDescendant: useMenuDescendant
} = createDescendant();
var [MenuProvider, useMenu] = createContext({
  name: "MenuContext",
  errorMessage: `useMenu returned is 'undefined'. Seems you forgot to wrap the components in "<Menu />"`
});
var [UpstreamMenuProvider, useUpstreamMenu] = createContext({
  strict: false,
  name: "UpstreamMenuContext"
});
var Menu = (props) => {
  var _a, _b;
  const [styles, mergedProps] = useMultiComponentStyle("Menu", props);
  let {
    initialFocusRef,
    closeOnSelect = true,
    closeOnBlur,
    placement,
    duration = 0.2,
    offset,
    onOpen: onOpenProp,
    onClose: onCloseProp,
    ...rest
  } = omitThemeProps(mergedProps);
  const { relatedRef, onUpstreamClose, onDownstreamCloseMapRef } = (_a = useUpstreamMenu()) != null ? _a : {};
  const { setDownstreamOpen, hasDownstreamRef } = (_b = useUpstreamMenuItem()) != null ? _b : {};
  const isNested = !!relatedRef;
  if (isNested) {
    placement != null ? placement : placement = "right-start";
    offset != null ? offset : offset = [-8, 8];
    closeOnBlur != null ? closeOnBlur : closeOnBlur = false;
  } else {
    placement != null ? placement : placement = "bottom-start";
  }
  const descendants = useDescendants();
  const [focusedIndex, setFocusedIndex] = useState(-1);
  const menuRef = useRef(null);
  const timeoutIds = useRef(/* @__PURE__ */ new Set([]));
  const requestAnimationFrameId = useRef(null);
  const onCloseMapRef = useRef(/* @__PURE__ */ new Map());
  const onFocusMenu = useCallback(() => {
    requestAnimationFrame(
      () => {
        var _a2;
        return (_a2 = menuRef.current) == null ? void 0 : _a2.focus({ preventScroll: false });
      }
    );
  }, []);
  const onFocusFirstItem = useCallback(() => {
    const id2 = setTimeout(() => {
      if (initialFocusRef)
        return;
      const first = descendants.enabledFirstValue();
      if (first)
        setFocusedIndex(first.index);
    });
    timeoutIds.current.add(id2);
  }, [descendants, initialFocusRef]);
  const onFocusLastItem = useCallback(() => {
    const id2 = setTimeout(() => {
      if (initialFocusRef)
        return;
      const last = descendants.enabledLastValue();
      if (last)
        setFocusedIndex(last.index);
    });
    timeoutIds.current.add(id2);
  }, [descendants, initialFocusRef]);
  const onOpenInternal = useCallback(() => {
    onOpenProp == null ? void 0 : onOpenProp();
    if (!isNested)
      onFocusMenu();
  }, [onOpenProp, isNested, onFocusMenu]);
  const onCloseInternal = useCallback(() => {
    onCloseProp == null ? void 0 : onCloseProp();
    for (const onClose2 of onCloseMapRef.current.values()) {
      onClose2();
    }
  }, [onCloseProp]);
  const id = useId();
  const { isOpen, onOpen, onClose } = useDisclosure({
    ...props,
    onOpen: onOpenInternal,
    onClose: onCloseInternal
  });
  useEffect(() => {
    const onCloseMap = onDownstreamCloseMapRef == null ? void 0 : onDownstreamCloseMapRef.current;
    onCloseMap == null ? void 0 : onCloseMap.set(id, onClose);
    return () => {
      onCloseMap == null ? void 0 : onCloseMap.delete(id);
    };
  }, [id, onClose, onDownstreamCloseMapRef]);
  useEffect(() => {
    if (setDownstreamOpen)
      setDownstreamOpen(isOpen);
  }, [setDownstreamOpen, isOpen]);
  useEffect(() => {
    if (hasDownstreamRef)
      hasDownstreamRef.current = true;
    return () => {
      if (hasDownstreamRef)
        hasDownstreamRef.current = false;
    };
  });
  useUpdateEffect(() => {
    if (!isOpen)
      setFocusedIndex(-1);
  }, [isOpen]);
  useUnmountEffect(() => {
    timeoutIds.current.forEach((id2) => clearTimeout(id2));
    timeoutIds.current.clear();
  });
  return /* @__PURE__ */ jsx(DescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ jsx(
    UpstreamMenuProvider,
    {
      value: {
        relatedRef: menuRef,
        onDownstreamCloseMapRef: onCloseMapRef,
        onUpstreamClose: funcAll(onUpstreamClose, onClose)
      },
      children: /* @__PURE__ */ jsx(
        MenuProvider,
        {
          value: {
            isOpen,
            onOpen,
            onClose,
            onUpstreamClose,
            onFocusFirstItem,
            onFocusLastItem,
            closeOnSelect,
            focusedIndex,
            setFocusedIndex,
            menuRef,
            requestAnimationFrameId,
            isNested,
            styles
          },
          children: /* @__PURE__ */ jsx(
            Popover,
            {
              ...{
                trigger: isNested ? "hover" : "click",
                ...rest,
                isOpen,
                onOpen,
                onClose,
                placement,
                offset,
                duration,
                initialFocusRef,
                relatedRef,
                closeOnButton: false,
                closeOnBlur
              }
            }
          )
        }
      )
    }
  ) });
};

// src/menu-item.tsx
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var [UpstreamMenuItemProvider, useUpstreamMenuItem] = createContext2({
  strict: false,
  name: "UpstreamMenuItemContext"
});
var isTargetMenuItem = (target) => {
  var _a;
  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute("role")) == null ? void 0 : _a.startsWith("menu-item"));
};
var MenuItem = forwardRef(
  ({
    as,
    className,
    type,
    isDisabled,
    isFocusable,
    closeOnSelect: customCloseOnSelect,
    icon,
    command,
    children,
    onClick: onClickProp,
    onFocus: onFocusProp,
    onMouseEnter: onMouseEnterProp,
    onMouseMove: onMouseMoveProp,
    onMouseLeave: onMouseLeaveProp,
    onKeyDown: onKeyDownProp,
    ...props
  }, ref) => {
    var _a;
    const {
      focusedIndex,
      setFocusedIndex,
      isOpen,
      onClose,
      onUpstreamClose,
      closeOnSelect: generalCloseOnSelect,
      menuRef,
      requestAnimationFrameId,
      isNested,
      styles
    } = useMenu();
    const { onUpstreamRestoreFocus } = (_a = useUpstreamMenuItem()) != null ? _a : {};
    const trulyDisabled = isDisabled && !isFocusable;
    const buttonRef = useRef2(null);
    const hasDownstreamRef = useRef2(false);
    const onKeyDownRef = useRef2(
      () => void 0
    );
    const { index, register } = useMenuDescendant({ disabled: trulyDisabled });
    const [isDownstreamOpen, setDownstreamOpen] = useState2(false);
    const isFocused = index === focusedIndex;
    const onMouseEnter = useCallback2(
      (event) => {
        onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
        if (isDisabled)
          return;
        setFocusedIndex(index);
      },
      [setFocusedIndex, index, isDisabled, onMouseEnterProp]
    );
    const onMouseMove = useCallback2(
      (event) => {
        onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
        if (buttonRef.current && !isActiveElement(buttonRef.current))
          onMouseEnter(event);
      },
      [onMouseEnter, onMouseMoveProp]
    );
    const onMouseLeave = useCallback2(
      (event) => {
        onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
        if (isDisabled)
          return;
        setFocusedIndex(-1);
      },
      [setFocusedIndex, isDisabled, onMouseLeaveProp]
    );
    const onClick = useCallback2(
      (ev) => {
        onClickProp == null ? void 0 : onClickProp(ev);
        if (!isTargetMenuItem(ev.currentTarget))
          return;
        const hasDownstream = hasDownstreamRef.current;
        if (customCloseOnSelect != null ? customCloseOnSelect : !hasDownstream && generalCloseOnSelect) {
          onClose();
          onUpstreamClose == null ? void 0 : onUpstreamClose();
        }
      },
      [
        onClickProp,
        customCloseOnSelect,
        generalCloseOnSelect,
        onClose,
        onUpstreamClose
      ]
    );
    const onFocus = useCallback2(
      (ev) => {
        onFocusProp == null ? void 0 : onFocusProp(ev);
        setFocusedIndex(index);
      },
      [onFocusProp, setFocusedIndex, index]
    );
    const onRestoreFocus = useCallback2(() => {
      var _a2;
      (_a2 = buttonRef.current) == null ? void 0 : _a2.focus();
      setFocusedIndex(index);
    }, [setFocusedIndex, index]);
    const onKeyDown = useCallback2(
      (ev) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(ev);
        const actions = {
          ArrowLeft: isNested ? funcAll2(onUpstreamRestoreFocus, onClose) : void 0
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        ev.stopPropagation();
        action();
      },
      [onKeyDownProp, onUpstreamRestoreFocus, onClose, isNested]
    );
    const rest = useClickable({
      focusOnClick: false,
      ...props,
      onClick,
      onFocus,
      onMouseEnter,
      onMouseMove,
      onMouseLeave,
      onKeyDown: handlerAll(onKeyDown, onKeyDownRef.current),
      ref: mergeRefs(register, buttonRef, ref),
      isDisabled,
      isFocusable
    });
    useUpdateEffect2(() => {
      if (!isOpen)
        return;
      const id = requestAnimationFrameId.current;
      if (isFocused && !trulyDisabled && buttonRef.current) {
        if (id)
          cancelAnimationFrame(id);
        requestAnimationFrameId.current = requestAnimationFrame(() => {
          var _a2;
          (_a2 = buttonRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });
          requestAnimationFrameId.current = null;
        });
      } else if (menuRef.current && !isActiveElement(menuRef.current)) {
        menuRef.current.focus({ preventScroll: true });
      }
      return () => {
        if (id)
          cancelAnimationFrame(id);
      };
    }, [isFocused, trulyDisabled, menuRef, isOpen]);
    type = as || type ? type != null ? type : void 0 : "button";
    children = icon || command ? /* @__PURE__ */ jsx2(ui.span, { style: { flex: 1 }, children }) : children;
    const css = {
      textDecoration: "none",
      color: "inherit",
      userSelect: "none",
      display: "flex",
      width: "100%",
      alignItems: "center",
      textAlign: "start",
      flex: "0 0 auto",
      outline: 0,
      gap: "0.75rem",
      ...styles.item
    };
    return /* @__PURE__ */ jsx2(
      UpstreamMenuItemProvider,
      {
        value: {
          onKeyDownRef,
          onUpstreamRestoreFocus: onRestoreFocus,
          setDownstreamOpen,
          hasDownstreamRef
        },
        children: /* @__PURE__ */ jsxs(
          ui.li,
          {
            ...rest,
            ...isDownstreamOpen ? { "data-active": "" } : {},
            as,
            type,
            role: "menu-item",
            tabIndex: isFocused ? 0 : -1,
            className: cx("ui-menu__item", className),
            __css: css,
            children: [
              icon ? /* @__PURE__ */ jsx2(MenuIcon, { children: icon }) : null,
              children,
              command ? /* @__PURE__ */ jsx2(MenuCommand, { children: command }) : null
            ]
          }
        )
      }
    );
  }
);
var MenuOptionItem = forwardRef(
  ({ className, icon, isChecked, closeOnSelect = false, children, ...rest }, ref) => {
    return /* @__PURE__ */ jsxs(
      MenuItem,
      {
        ref,
        className: cx("ui-menu__item--option", className),
        "aria-checked": ariaAttr(isChecked),
        closeOnSelect,
        ...rest,
        children: [
          icon !== null ? /* @__PURE__ */ jsx2(MenuIcon, { opacity: isChecked ? 1 : 0, children: icon || /* @__PURE__ */ jsx2(CheckIcon, {}) }) : null,
          children
        ]
      }
    );
  }
);
var MenuIcon = forwardRef(
  ({ className, ...rest }, ref) => {
    const { styles } = useMenu();
    const css = {
      flexShrink: 0,
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      fontSize: "0.85em",
      ...styles.icon
    };
    return /* @__PURE__ */ jsx2(
      ui.span,
      {
        ref,
        className: cx("ui-menu__item__icon", className),
        __css: css,
        ...rest
      }
    );
  }
);
var MenuCommand = forwardRef(
  ({ className, ...rest }, ref) => {
    const { styles } = useMenu();
    const css = { ...styles.command };
    return /* @__PURE__ */ jsx2(
      ui.span,
      {
        ref,
        className: cx("ui-menu__item__command", className),
        __css: css,
        ...rest
      }
    );
  }
);
var CheckIcon = () => /* @__PURE__ */ jsx2("svg", { viewBox: "0 0 14 14", width: "1em", height: "1em", children: /* @__PURE__ */ jsx2(
  "polygon",
  {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }
) });

export {
  UpstreamMenuItemProvider,
  useUpstreamMenuItem,
  MenuItem,
  MenuOptionItem,
  MenuIcon,
  MenuCommand,
  useMenuDescendantsContext,
  useMenuDescendant,
  useMenu,
  UpstreamMenuProvider,
  useUpstreamMenu,
  Menu
};
//# sourceMappingURL=chunk-UTYWCSIS.mjs.map