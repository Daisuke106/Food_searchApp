{"version":3,"sources":["../src/menu-item.tsx","../src/menu.tsx"],"sourcesContent":["import type { HTMLUIProps, CSSUIObject } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { useClickable } from \"@yamada-ui/use-clickable\"\nimport {\n  ariaAttr,\n  createContext,\n  cx,\n  funcAll,\n  handlerAll,\n  isActiveElement,\n  isHTMLElement,\n  mergeRefs,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type {\n  Dispatch,\n  FC,\n  FocusEvent,\n  KeyboardEvent,\n  KeyboardEventHandler,\n  MouseEvent,\n  MutableRefObject,\n  ReactElement,\n  RefObject,\n  SetStateAction,\n} from \"react\"\nimport { useCallback, useRef, useState } from \"react\"\nimport { useMenu, useMenuDescendant } from \"./menu\"\n\ntype UpstreamMenuItemContext = {\n  onUpstreamRestoreFocus: () => void\n  onKeyDownRef: RefObject<KeyboardEventHandler<HTMLButtonElement>>\n  setDownstreamOpen: Dispatch<SetStateAction<boolean>>\n  hasDownstreamRef: MutableRefObject<boolean>\n}\n\nexport const [UpstreamMenuItemProvider, useUpstreamMenuItem] =\n  createContext<UpstreamMenuItemContext>({\n    strict: false,\n    name: \"UpstreamMenuItemContext\",\n  })\n\nconst isTargetMenuItem = (target: EventTarget | null) => {\n  return (\n    isHTMLElement(target) &&\n    !!target?.getAttribute(\"role\")?.startsWith(\"menu-item\")\n  )\n}\n\ntype MenuItemOptions = {\n  /**\n   * If `true`, the menu item will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the menu item will be focusable.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the list element will be closed when selected.\n   *\n   * @default false\n   */\n  closeOnSelect?: boolean\n  /**\n   * The menu item icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * Right-aligned label text content, useful for displaying hotkeys.\n   */\n  command?: string\n}\n\nexport type MenuItemProps = HTMLUIProps<\"button\"> & MenuItemOptions\n\nexport const MenuItem = forwardRef<MenuItemProps, \"button\">(\n  (\n    {\n      as,\n      className,\n      type,\n      isDisabled,\n      isFocusable,\n      closeOnSelect: customCloseOnSelect,\n      icon,\n      command,\n      children,\n      onClick: onClickProp,\n      onFocus: onFocusProp,\n      onMouseEnter: onMouseEnterProp,\n      onMouseMove: onMouseMoveProp,\n      onMouseLeave: onMouseLeaveProp,\n      onKeyDown: onKeyDownProp,\n      ...props\n    },\n    ref,\n  ) => {\n    const {\n      focusedIndex,\n      setFocusedIndex,\n      isOpen,\n      onClose,\n      onUpstreamClose,\n      closeOnSelect: generalCloseOnSelect,\n      menuRef,\n      requestAnimationFrameId,\n      isNested,\n      styles,\n    } = useMenu()\n    const { onUpstreamRestoreFocus } = useUpstreamMenuItem() ?? {}\n\n    const trulyDisabled = isDisabled && !isFocusable\n\n    const buttonRef = useRef<HTMLButtonElement>(null)\n    const hasDownstreamRef = useRef<boolean>(false)\n    const onKeyDownRef = useRef<KeyboardEventHandler<HTMLButtonElement>>(\n      () => void 0,\n    )\n    const { index, register } = useMenuDescendant({ disabled: trulyDisabled })\n    const [isDownstreamOpen, setDownstreamOpen] = useState<boolean>(false)\n\n    const isFocused = index === focusedIndex\n\n    const onMouseEnter = useCallback(\n      (event: any) => {\n        onMouseEnterProp?.(event)\n\n        if (isDisabled) return\n\n        setFocusedIndex(index)\n      },\n      [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n    )\n\n    const onMouseMove = useCallback(\n      (event: any) => {\n        onMouseMoveProp?.(event)\n\n        if (buttonRef.current && !isActiveElement(buttonRef.current))\n          onMouseEnter(event)\n      },\n      [onMouseEnter, onMouseMoveProp],\n    )\n\n    const onMouseLeave = useCallback(\n      (event: any) => {\n        onMouseLeaveProp?.(event)\n\n        if (isDisabled) return\n\n        setFocusedIndex(-1)\n      },\n      [setFocusedIndex, isDisabled, onMouseLeaveProp],\n    )\n\n    const onClick = useCallback(\n      (ev: MouseEvent<HTMLButtonElement>) => {\n        onClickProp?.(ev)\n\n        if (!isTargetMenuItem(ev.currentTarget)) return\n\n        const hasDownstream = hasDownstreamRef.current\n\n        if (customCloseOnSelect ?? (!hasDownstream && generalCloseOnSelect)) {\n          onClose()\n          onUpstreamClose?.()\n        }\n      },\n      [\n        onClickProp,\n        customCloseOnSelect,\n        generalCloseOnSelect,\n        onClose,\n        onUpstreamClose,\n      ],\n    )\n\n    const onFocus = useCallback(\n      (ev: FocusEvent<HTMLButtonElement>) => {\n        onFocusProp?.(ev)\n\n        setFocusedIndex(index)\n      },\n      [onFocusProp, setFocusedIndex, index],\n    )\n\n    const onRestoreFocus = useCallback(() => {\n      buttonRef.current?.focus()\n\n      setFocusedIndex(index)\n    }, [setFocusedIndex, index])\n\n    const onKeyDown = useCallback(\n      (ev: KeyboardEvent<HTMLButtonElement>) => {\n        onKeyDownProp?.(ev)\n\n        const actions: Record<string, Function | undefined> = {\n          ArrowLeft: isNested\n            ? funcAll(onUpstreamRestoreFocus, onClose)\n            : undefined,\n        }\n\n        const action = actions[ev.key]\n\n        if (!action) return\n\n        ev.preventDefault()\n        ev.stopPropagation()\n\n        action()\n      },\n      [onKeyDownProp, onUpstreamRestoreFocus, onClose, isNested],\n    )\n\n    const rest = useClickable<HTMLButtonElement>({\n      focusOnClick: false,\n      ...props,\n      onClick,\n      onFocus,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      onKeyDown: handlerAll(onKeyDown, onKeyDownRef.current),\n      ref: mergeRefs(register, buttonRef, ref),\n      isDisabled,\n      isFocusable,\n    })\n\n    useUpdateEffect(() => {\n      if (!isOpen) return\n\n      const id = requestAnimationFrameId.current\n\n      if (isFocused && !trulyDisabled && buttonRef.current) {\n        if (id) cancelAnimationFrame(id)\n\n        requestAnimationFrameId.current = requestAnimationFrame(() => {\n          buttonRef.current?.focus({ preventScroll: true })\n\n          requestAnimationFrameId.current = null\n        })\n      } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n        menuRef.current.focus({ preventScroll: true })\n      }\n\n      return () => {\n        if (id) cancelAnimationFrame(id)\n      }\n    }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n    type = as || type ? type ?? undefined : \"button\"\n\n    children =\n      icon || command ? (\n        <ui.span style={{ flex: 1 }}>{children}</ui.span>\n      ) : (\n        children\n      )\n\n    const css: CSSUIObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      gap: \"0.75rem\",\n      ...styles.item,\n    }\n\n    return (\n      <UpstreamMenuItemProvider\n        value={{\n          onKeyDownRef,\n          onUpstreamRestoreFocus: onRestoreFocus,\n          setDownstreamOpen,\n          hasDownstreamRef,\n        }}\n      >\n        <ui.li\n          {...rest}\n          {...(isDownstreamOpen ? { \"data-active\": \"\" } : {})}\n          as={as}\n          type={type}\n          role=\"menu-item\"\n          tabIndex={isFocused ? 0 : -1}\n          className={cx(\"ui-menu__item\", className)}\n          __css={css}\n        >\n          {icon ? <MenuIcon>{icon}</MenuIcon> : null}\n          {children}\n          {command ? <MenuCommand>{command}</MenuCommand> : null}\n        </ui.li>\n      </UpstreamMenuItemProvider>\n    )\n  },\n)\n\ntype MenuOptionItemOptions = {\n  /**\n   * The menu option item icon to use.\n   */\n  icon?: ReactElement | null\n  /**\n   * The value of the menu option item.\n   */\n  value?: string\n  /**\n   * If `true`, the checkbox or radio will be checked.\n   *\n   * @default false\n   */\n  isChecked?: boolean\n  /**\n   * The type of the menu option item.\n   */\n  type?: \"radio\" | \"checkbox\"\n}\n\nexport type MenuOptionItemProps = Omit<MenuItemProps, \"icon\" | \"command\"> &\n  MenuOptionItemOptions\n\nexport const MenuOptionItem = forwardRef<MenuOptionItemProps, \"button\">(\n  (\n    { className, icon, isChecked, closeOnSelect = false, children, ...rest },\n    ref,\n  ) => {\n    return (\n      <MenuItem\n        ref={ref}\n        className={cx(\"ui-menu__item--option\", className)}\n        aria-checked={ariaAttr(isChecked)}\n        closeOnSelect={closeOnSelect}\n        {...rest}\n      >\n        {icon !== null ? (\n          <MenuIcon opacity={isChecked ? 1 : 0}>\n            {icon || <CheckIcon />}\n          </MenuIcon>\n        ) : null}\n        {children}\n      </MenuItem>\n    )\n  },\n)\n\nexport type MenuIconProps = HTMLUIProps<\"span\">\n\nexport const MenuIcon = forwardRef<MenuIconProps, \"span\">(\n  ({ className, ...rest }, ref) => {\n    const { styles } = useMenu()\n\n    const css: CSSUIObject = {\n      flexShrink: 0,\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      fontSize: \"0.85em\",\n      ...styles.icon,\n    }\n\n    return (\n      <ui.span\n        ref={ref}\n        className={cx(\"ui-menu__item__icon\", className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n\nexport type MenuCommandProps = HTMLUIProps<\"span\">\n\nexport const MenuCommand = forwardRef<MenuCommandProps, \"span\">(\n  ({ className, ...rest }, ref) => {\n    const { styles } = useMenu()\n\n    const css: CSSUIObject = { ...styles.command }\n\n    return (\n      <ui.span\n        ref={ref}\n        className={cx(\"ui-menu__item__command\", className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n\nconst CheckIcon: FC = () => (\n  <svg viewBox=\"0 0 14 14\" width=\"1em\" height=\"1em\">\n    <polygon\n      fill=\"currentColor\"\n      points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n    />\n  </svg>\n)\n","import type { CSSUIObject, ThemeProps } from \"@yamada-ui/core\"\nimport { useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\"\nimport type { PopoverProps } from \"@yamada-ui/popover\"\nimport { Popover } from \"@yamada-ui/popover\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport { useDisclosure } from \"@yamada-ui/use-disclosure\"\nimport {\n  createContext,\n  funcAll,\n  useUnmountEffect,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type {\n  Dispatch,\n  FC,\n  MutableRefObject,\n  RefObject,\n  SetStateAction,\n} from \"react\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\nimport { useUpstreamMenuItem } from \"./menu-item\"\n\nconst {\n  DescendantsContextProvider,\n  useDescendantsContext: useMenuDescendantsContext,\n  useDescendants,\n  useDescendant: useMenuDescendant,\n} = createDescendant<HTMLElement>()\n\nexport { useMenuDescendantsContext, useMenuDescendant }\n\ntype MenuContext = MenuOptions & {\n  isOpen: boolean\n  onOpen: () => void\n  onClose: () => void\n  onUpstreamClose?: () => void\n  onFocusFirstItem: () => void\n  onFocusLastItem: () => void\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  menuRef: RefObject<HTMLDivElement>\n  requestAnimationFrameId: MutableRefObject<number | null>\n  isNested: boolean\n  styles: Record<string, CSSUIObject>\n}\n\nconst [MenuProvider, useMenu] = createContext<MenuContext>({\n  name: \"MenuContext\",\n  errorMessage: `useMenu returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\"`,\n})\n\ntype UpstreamMenuContext = {\n  relatedRef: RefObject<HTMLElement>\n  onDownstreamCloseMapRef: MutableRefObject<Map<string, () => void>>\n  onUpstreamClose: () => void\n}\n\nexport const [UpstreamMenuProvider, useUpstreamMenu] =\n  createContext<UpstreamMenuContext>({\n    strict: false,\n    name: \"UpstreamMenuContext\",\n  })\n\nexport { useMenu }\n\ntype MenuOptions = {\n  /**\n   * If `true`, the list element will be closed when value is selected.\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n}\n\nexport type MenuProps = ThemeProps<\"Menu\"> &\n  Omit<PopoverProps, \"closeOnButton\" | \"relatedRef\"> &\n  MenuOptions\n\n/**\n * `Menu` is a component that displays a common dropdown menu.\n *\n * @see Docs https://yamada-ui.com/components/overlay/menu\n */\nexport const Menu: FC<MenuProps> = (props) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Menu\", props)\n  let {\n    initialFocusRef,\n    closeOnSelect = true,\n    closeOnBlur,\n    placement,\n    duration = 0.2,\n    offset,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    ...rest\n  } = omitThemeProps(mergedProps)\n  const { relatedRef, onUpstreamClose, onDownstreamCloseMapRef } =\n    useUpstreamMenu() ?? {}\n  const { setDownstreamOpen, hasDownstreamRef } = useUpstreamMenuItem() ?? {}\n  const isNested = !!relatedRef\n\n  if (isNested) {\n    placement ??= \"right-start\"\n    offset ??= [-8, 8]\n    closeOnBlur ??= false\n  } else {\n    placement ??= \"bottom-start\"\n  }\n\n  const descendants = useDescendants()\n\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n\n  const menuRef = useRef<HTMLDivElement>(null)\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n  const requestAnimationFrameId = useRef<number | null>(null)\n  const onCloseMapRef = useRef<Map<string, () => void>>(new Map())\n\n  const onFocusMenu = useCallback(() => {\n    requestAnimationFrame(() =>\n      menuRef.current?.focus({ preventScroll: false }),\n    )\n  }, [])\n\n  const onFocusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) return\n\n      const first = descendants.enabledFirstValue()\n\n      if (first) setFocusedIndex(first.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const onFocusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) return\n\n      const last = descendants.enabledLastValue()\n\n      if (last) setFocusedIndex(last.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n\n    if (!isNested) onFocusMenu()\n  }, [onOpenProp, isNested, onFocusMenu])\n\n  const onCloseInternal = useCallback(() => {\n    onCloseProp?.()\n\n    for (const onClose of onCloseMapRef.current.values()) {\n      onClose()\n    }\n  }, [onCloseProp])\n\n  const id = useId()\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    ...props,\n    onOpen: onOpenInternal,\n    onClose: onCloseInternal,\n  })\n\n  useEffect(() => {\n    const onCloseMap = onDownstreamCloseMapRef?.current\n\n    onCloseMap?.set(id, onClose)\n\n    return () => {\n      onCloseMap?.delete(id)\n    }\n  }, [id, onClose, onDownstreamCloseMapRef])\n\n  useEffect(() => {\n    if (setDownstreamOpen) setDownstreamOpen(isOpen)\n  }, [setDownstreamOpen, isOpen])\n\n  useEffect(() => {\n    if (hasDownstreamRef) hasDownstreamRef.current = true\n\n    return () => {\n      if (hasDownstreamRef) hasDownstreamRef.current = false\n    }\n  })\n\n  useUpdateEffect(() => {\n    if (!isOpen) setFocusedIndex(-1)\n  }, [isOpen])\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  return (\n    <DescendantsContextProvider value={descendants}>\n      <UpstreamMenuProvider\n        value={{\n          relatedRef: menuRef,\n          onDownstreamCloseMapRef: onCloseMapRef,\n          onUpstreamClose: funcAll(onUpstreamClose, onClose),\n        }}\n      >\n        <MenuProvider\n          value={{\n            isOpen,\n            onOpen,\n            onClose,\n            onUpstreamClose,\n            onFocusFirstItem,\n            onFocusLastItem,\n            closeOnSelect,\n            focusedIndex,\n            setFocusedIndex,\n            menuRef,\n            requestAnimationFrameId,\n            isNested,\n            styles,\n          }}\n        >\n          <Popover\n            {...{\n              trigger: isNested ? \"hover\" : \"click\",\n              ...rest,\n              isOpen,\n              onOpen,\n              onClose,\n              placement,\n              offset,\n              duration,\n              initialFocusRef,\n              relatedRef,\n              closeOnButton: false,\n              closeOnBlur,\n            }}\n          />\n        </MenuProvider>\n      </UpstreamMenuProvider>\n    </DescendantsContextProvider>\n  )\n}\n"],"mappings":"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","names":["import_core","import_utils","import_react","import_jsx_runtime","_a"]}