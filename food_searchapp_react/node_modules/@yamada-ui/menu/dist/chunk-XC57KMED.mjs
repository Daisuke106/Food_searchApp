"use client"
import {
  useMenu,
  useMenuDescendantsContext
} from "./chunk-UTYWCSIS.mjs";

// src/menu-list.tsx
import { forwardRef } from "@yamada-ui/core";
import { PopoverContent } from "@yamada-ui/popover";
import { cx, handlerAll, mergeRefs } from "@yamada-ui/utils";
import { useCallback } from "react";
import { jsx } from "react/jsx-runtime";
var MenuList = forwardRef(
  ({ className, ...rest }, ref) => {
    const { menuRef, focusedIndex, setFocusedIndex, onClose, styles } = useMenu();
    const descendants = useMenuDescendantsContext();
    const onNext = useCallback(() => {
      const next = descendants.enabledNextValue(focusedIndex);
      if (next)
        setFocusedIndex(next.index);
    }, [descendants, focusedIndex, setFocusedIndex]);
    const onPrev = useCallback(() => {
      const prev = descendants.enabledPrevValue(focusedIndex);
      if (prev)
        setFocusedIndex(prev.index);
    }, [descendants, focusedIndex, setFocusedIndex]);
    const onFirst = useCallback(() => {
      const first = descendants.enabledFirstValue();
      if (first)
        setFocusedIndex(first.index);
    }, [descendants, setFocusedIndex]);
    const onLast = useCallback(() => {
      const last = descendants.enabledLastValue();
      if (last)
        setFocusedIndex(last.index);
    }, [descendants, setFocusedIndex]);
    const onKeyDown = useCallback(
      (ev) => {
        const actions = {
          Tab: (ev2) => ev2.preventDefault(),
          Escape: onClose,
          ArrowDown: focusedIndex === -1 ? onFirst : onNext,
          ArrowUp: focusedIndex === -1 ? onLast : onPrev,
          Home: onFirst,
          End: onLast
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        action(ev);
      },
      [focusedIndex, onClose, onFirst, onLast, onNext, onPrev]
    );
    const css = { ...styles.list };
    return /* @__PURE__ */ jsx(
      PopoverContent,
      {
        as: "ul",
        ref: mergeRefs(menuRef, ref),
        className: cx("ui-menu__list", className),
        role: "menu",
        tabIndex: -1,
        __css: css,
        ...rest,
        onKeyDown: handlerAll(rest.onKeyDown, onKeyDown)
      }
    );
  }
);

export {
  MenuList
};
//# sourceMappingURL=chunk-XC57KMED.mjs.map