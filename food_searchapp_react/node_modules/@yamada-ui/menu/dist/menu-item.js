"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/menu-item.tsx
var menu_item_exports = {};
__export(menu_item_exports, {
  MenuCommand: () => MenuCommand,
  MenuIcon: () => MenuIcon,
  MenuItem: () => MenuItem,
  MenuOptionItem: () => MenuOptionItem,
  UpstreamMenuItemProvider: () => UpstreamMenuItemProvider,
  useUpstreamMenuItem: () => useUpstreamMenuItem
});
module.exports = __toCommonJS(menu_item_exports);
var import_core2 = require("@yamada-ui/core");
var import_use_clickable = require("@yamada-ui/use-clickable");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/menu.tsx
var import_core = require("@yamada-ui/core");
var import_popover = require("@yamada-ui/popover");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var {
  DescendantsContextProvider,
  useDescendantsContext: useMenuDescendantsContext,
  useDescendants,
  useDescendant: useMenuDescendant
} = (0, import_use_descendant.createDescendant)();
var [MenuProvider, useMenu] = (0, import_utils.createContext)({
  name: "MenuContext",
  errorMessage: `useMenu returned is 'undefined'. Seems you forgot to wrap the components in "<Menu />"`
});
var [UpstreamMenuProvider, useUpstreamMenu] = (0, import_utils.createContext)({
  strict: false,
  name: "UpstreamMenuContext"
});

// src/menu-item.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var [UpstreamMenuItemProvider, useUpstreamMenuItem] = (0, import_utils2.createContext)({
  strict: false,
  name: "UpstreamMenuItemContext"
});
var isTargetMenuItem = (target) => {
  var _a;
  return (0, import_utils2.isHTMLElement)(target) && !!((_a = target == null ? void 0 : target.getAttribute("role")) == null ? void 0 : _a.startsWith("menu-item"));
};
var MenuItem = (0, import_core2.forwardRef)(
  ({
    as,
    className,
    type,
    isDisabled,
    isFocusable,
    closeOnSelect: customCloseOnSelect,
    icon,
    command,
    children,
    onClick: onClickProp,
    onFocus: onFocusProp,
    onMouseEnter: onMouseEnterProp,
    onMouseMove: onMouseMoveProp,
    onMouseLeave: onMouseLeaveProp,
    onKeyDown: onKeyDownProp,
    ...props
  }, ref) => {
    var _a;
    const {
      focusedIndex,
      setFocusedIndex,
      isOpen,
      onClose,
      onUpstreamClose,
      closeOnSelect: generalCloseOnSelect,
      menuRef,
      requestAnimationFrameId,
      isNested,
      styles
    } = useMenu();
    const { onUpstreamRestoreFocus } = (_a = useUpstreamMenuItem()) != null ? _a : {};
    const trulyDisabled = isDisabled && !isFocusable;
    const buttonRef = (0, import_react2.useRef)(null);
    const hasDownstreamRef = (0, import_react2.useRef)(false);
    const onKeyDownRef = (0, import_react2.useRef)(
      () => void 0
    );
    const { index, register } = useMenuDescendant({ disabled: trulyDisabled });
    const [isDownstreamOpen, setDownstreamOpen] = (0, import_react2.useState)(false);
    const isFocused = index === focusedIndex;
    const onMouseEnter = (0, import_react2.useCallback)(
      (event) => {
        onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
        if (isDisabled)
          return;
        setFocusedIndex(index);
      },
      [setFocusedIndex, index, isDisabled, onMouseEnterProp]
    );
    const onMouseMove = (0, import_react2.useCallback)(
      (event) => {
        onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
        if (buttonRef.current && !(0, import_utils2.isActiveElement)(buttonRef.current))
          onMouseEnter(event);
      },
      [onMouseEnter, onMouseMoveProp]
    );
    const onMouseLeave = (0, import_react2.useCallback)(
      (event) => {
        onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
        if (isDisabled)
          return;
        setFocusedIndex(-1);
      },
      [setFocusedIndex, isDisabled, onMouseLeaveProp]
    );
    const onClick = (0, import_react2.useCallback)(
      (ev) => {
        onClickProp == null ? void 0 : onClickProp(ev);
        if (!isTargetMenuItem(ev.currentTarget))
          return;
        const hasDownstream = hasDownstreamRef.current;
        if (customCloseOnSelect != null ? customCloseOnSelect : !hasDownstream && generalCloseOnSelect) {
          onClose();
          onUpstreamClose == null ? void 0 : onUpstreamClose();
        }
      },
      [
        onClickProp,
        customCloseOnSelect,
        generalCloseOnSelect,
        onClose,
        onUpstreamClose
      ]
    );
    const onFocus = (0, import_react2.useCallback)(
      (ev) => {
        onFocusProp == null ? void 0 : onFocusProp(ev);
        setFocusedIndex(index);
      },
      [onFocusProp, setFocusedIndex, index]
    );
    const onRestoreFocus = (0, import_react2.useCallback)(() => {
      var _a2;
      (_a2 = buttonRef.current) == null ? void 0 : _a2.focus();
      setFocusedIndex(index);
    }, [setFocusedIndex, index]);
    const onKeyDown = (0, import_react2.useCallback)(
      (ev) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(ev);
        const actions = {
          ArrowLeft: isNested ? (0, import_utils2.funcAll)(onUpstreamRestoreFocus, onClose) : void 0
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        ev.stopPropagation();
        action();
      },
      [onKeyDownProp, onUpstreamRestoreFocus, onClose, isNested]
    );
    const rest = (0, import_use_clickable.useClickable)({
      focusOnClick: false,
      ...props,
      onClick,
      onFocus,
      onMouseEnter,
      onMouseMove,
      onMouseLeave,
      onKeyDown: (0, import_utils2.handlerAll)(onKeyDown, onKeyDownRef.current),
      ref: (0, import_utils2.mergeRefs)(register, buttonRef, ref),
      isDisabled,
      isFocusable
    });
    (0, import_utils2.useUpdateEffect)(() => {
      if (!isOpen)
        return;
      const id = requestAnimationFrameId.current;
      if (isFocused && !trulyDisabled && buttonRef.current) {
        if (id)
          cancelAnimationFrame(id);
        requestAnimationFrameId.current = requestAnimationFrame(() => {
          var _a2;
          (_a2 = buttonRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });
          requestAnimationFrameId.current = null;
        });
      } else if (menuRef.current && !(0, import_utils2.isActiveElement)(menuRef.current)) {
        menuRef.current.focus({ preventScroll: true });
      }
      return () => {
        if (id)
          cancelAnimationFrame(id);
      };
    }, [isFocused, trulyDisabled, menuRef, isOpen]);
    type = as || type ? type != null ? type : void 0 : "button";
    children = icon || command ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core2.ui.span, { style: { flex: 1 }, children }) : children;
    const css = {
      textDecoration: "none",
      color: "inherit",
      userSelect: "none",
      display: "flex",
      width: "100%",
      alignItems: "center",
      textAlign: "start",
      flex: "0 0 auto",
      outline: 0,
      gap: "0.75rem",
      ...styles.item
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      UpstreamMenuItemProvider,
      {
        value: {
          onKeyDownRef,
          onUpstreamRestoreFocus: onRestoreFocus,
          setDownstreamOpen,
          hasDownstreamRef
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
          import_core2.ui.li,
          {
            ...rest,
            ...isDownstreamOpen ? { "data-active": "" } : {},
            as,
            type,
            role: "menu-item",
            tabIndex: isFocused ? 0 : -1,
            className: (0, import_utils2.cx)("ui-menu__item", className),
            __css: css,
            children: [
              icon ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(MenuIcon, { children: icon }) : null,
              children,
              command ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(MenuCommand, { children: command }) : null
            ]
          }
        )
      }
    );
  }
);
var MenuOptionItem = (0, import_core2.forwardRef)(
  ({ className, icon, isChecked, closeOnSelect = false, children, ...rest }, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      MenuItem,
      {
        ref,
        className: (0, import_utils2.cx)("ui-menu__item--option", className),
        "aria-checked": (0, import_utils2.ariaAttr)(isChecked),
        closeOnSelect,
        ...rest,
        children: [
          icon !== null ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(MenuIcon, { opacity: isChecked ? 1 : 0, children: icon || /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(CheckIcon, {}) }) : null,
          children
        ]
      }
    );
  }
);
var MenuIcon = (0, import_core2.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useMenu();
    const css = {
      flexShrink: 0,
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      fontSize: "0.85em",
      ...styles.icon
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.span,
      {
        ref,
        className: (0, import_utils2.cx)("ui-menu__item__icon", className),
        __css: css,
        ...rest
      }
    );
  }
);
var MenuCommand = (0, import_core2.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useMenu();
    const css = { ...styles.command };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.span,
      {
        ref,
        className: (0, import_utils2.cx)("ui-menu__item__command", className),
        __css: css,
        ...rest
      }
    );
  }
);
var CheckIcon = () => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("svg", { viewBox: "0 0 14 14", width: "1em", height: "1em", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
  "polygon",
  {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }
) });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MenuCommand,
  MenuIcon,
  MenuItem,
  MenuOptionItem,
  UpstreamMenuItemProvider,
  useUpstreamMenuItem
});
//# sourceMappingURL=menu-item.js.map