"use client"
import {
  MenuIcon,
  useMenu,
  useUpstreamMenuItem
} from "./chunk-UTYWCSIS.mjs";

// src/menu-button.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { ChevronIcon } from "@yamada-ui/icon";
import { PopoverTrigger } from "@yamada-ui/popover";
import { assignRef, cx, dataAttr, funcAll, handlerAll } from "@yamada-ui/utils";
import { useCallback } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var MenuButton = forwardRef(
  ({ className, children, as: As, ...rest }, ref) => {
    var _a;
    const { onKeyDownRef, onUpstreamRestoreFocus } = (_a = useUpstreamMenuItem()) != null ? _a : {};
    const { isOpen, onOpen, onClose, onFocusFirstItem, onFocusLastItem } = useMenu();
    const onKeyDown = useCallback(
      (ev) => {
        const actions = {
          Enter: funcAll(onOpen, onFocusFirstItem),
          ArrowDown: funcAll(onOpen, onFocusFirstItem),
          ArrowUp: funcAll(onOpen, onFocusLastItem)
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        action();
      },
      [onFocusFirstItem, onFocusLastItem, onOpen]
    );
    const onItemKeyDown = useCallback(
      (ev) => {
        const actions = {
          ArrowRight: !isOpen ? funcAll(onOpen, onFocusFirstItem) : void 0,
          ArrowLeft: isOpen ? funcAll(onUpstreamRestoreFocus, onClose) : void 0
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        action();
      },
      [isOpen, onOpen, onFocusFirstItem, onUpstreamRestoreFocus, onClose]
    );
    assignRef(onKeyDownRef, onItemKeyDown);
    const Component = As ? ui(As) : Button;
    return /* @__PURE__ */ jsx(PopoverTrigger, { children: /* @__PURE__ */ jsx(
      Component,
      {
        ref,
        className: cx("ui-menu", className),
        "aria-haspopup": "menu",
        "aria-expanded": isOpen,
        ...rest,
        "data-active": dataAttr(isOpen),
        onKeyDown: handlerAll(rest.onKeyDown, onKeyDown),
        children
      }
    ) });
  }
);
var Button = forwardRef((rest, ref) => {
  const { styles } = useMenu();
  const css = {
    display: "inline-flex",
    appearance: "none",
    alignItems: "center",
    outline: 0,
    ...styles.button
  };
  return /* @__PURE__ */ jsx(ui.button, { ref, __css: css, ...rest });
});
var MenuItemButton = forwardRef(
  ({ className, children, innerProps, icon, iconProps, ...rest }, ref) => {
    return /* @__PURE__ */ jsxs(
      MenuButton,
      {
        ref,
        className: cx("ui-menu__item-button", className),
        flex: "1",
        ...rest,
        children: [
          /* @__PURE__ */ jsx(ui.span, { as: "span", flex: "1", ...innerProps, children }),
          /* @__PURE__ */ jsx(MenuIcon, { ...iconProps, children: icon != null ? icon : /* @__PURE__ */ jsx(ChevronIcon, { fontSize: "1.5em", transform: "rotate(-90deg)" }) })
        ]
      }
    );
  }
);

export {
  MenuButton,
  MenuItemButton
};
//# sourceMappingURL=chunk-74RMGTSQ.mjs.map