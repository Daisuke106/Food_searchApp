{"version":3,"sources":["../src/menu-group.tsx","../src/menu.tsx"],"sourcesContent":["import type { HTMLUIProps, CSSUIObject } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useMenu } from \"./menu\"\n\nexport type MenuGroupProps = HTMLUIProps<\"div\"> & {\n  /**\n   * The label of the group.\n   */\n  label?: string\n}\n\nexport const MenuGroup = forwardRef<MenuGroupProps, \"div\">(\n  ({ className, label, children, ...rest }, ref) => {\n    const { styles } = useMenu()\n\n    const css: CSSUIObject = { ...styles.group }\n\n    return (\n      <ui.li\n        ref={ref}\n        className={cx(\"ui-menu__item\", \"ui-menu__item--group\", className)}\n        role=\"group\"\n        __css={css}\n        {...rest}\n      >\n        {label ? (\n          <ui.span\n            className={cx(\"ui-menu__item--group-label\")}\n            __css={styles.groupLabel}\n          >\n            {label}\n          </ui.span>\n        ) : null}\n\n        <ui.ul className=\"ui-menu__item__group\">{children}</ui.ul>\n      </ui.li>\n    )\n  },\n)\n","import type { CSSUIObject, ThemeProps } from \"@yamada-ui/core\"\nimport { useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\"\nimport type { PopoverProps } from \"@yamada-ui/popover\"\nimport { Popover } from \"@yamada-ui/popover\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport { useDisclosure } from \"@yamada-ui/use-disclosure\"\nimport {\n  createContext,\n  funcAll,\n  useUnmountEffect,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type {\n  Dispatch,\n  FC,\n  MutableRefObject,\n  RefObject,\n  SetStateAction,\n} from \"react\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\nimport { useUpstreamMenuItem } from \"./menu-item\"\n\nconst {\n  DescendantsContextProvider,\n  useDescendantsContext: useMenuDescendantsContext,\n  useDescendants,\n  useDescendant: useMenuDescendant,\n} = createDescendant<HTMLElement>()\n\nexport { useMenuDescendantsContext, useMenuDescendant }\n\ntype MenuContext = MenuOptions & {\n  isOpen: boolean\n  onOpen: () => void\n  onClose: () => void\n  onUpstreamClose?: () => void\n  onFocusFirstItem: () => void\n  onFocusLastItem: () => void\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  menuRef: RefObject<HTMLDivElement>\n  requestAnimationFrameId: MutableRefObject<number | null>\n  isNested: boolean\n  styles: Record<string, CSSUIObject>\n}\n\nconst [MenuProvider, useMenu] = createContext<MenuContext>({\n  name: \"MenuContext\",\n  errorMessage: `useMenu returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\"`,\n})\n\ntype UpstreamMenuContext = {\n  relatedRef: RefObject<HTMLElement>\n  onDownstreamCloseMapRef: MutableRefObject<Map<string, () => void>>\n  onUpstreamClose: () => void\n}\n\nexport const [UpstreamMenuProvider, useUpstreamMenu] =\n  createContext<UpstreamMenuContext>({\n    strict: false,\n    name: \"UpstreamMenuContext\",\n  })\n\nexport { useMenu }\n\ntype MenuOptions = {\n  /**\n   * If `true`, the list element will be closed when value is selected.\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n}\n\nexport type MenuProps = ThemeProps<\"Menu\"> &\n  Omit<PopoverProps, \"closeOnButton\" | \"relatedRef\"> &\n  MenuOptions\n\n/**\n * `Menu` is a component that displays a common dropdown menu.\n *\n * @see Docs https://yamada-ui.com/components/overlay/menu\n */\nexport const Menu: FC<MenuProps> = (props) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Menu\", props)\n  let {\n    initialFocusRef,\n    closeOnSelect = true,\n    closeOnBlur,\n    placement,\n    duration = 0.2,\n    offset,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    ...rest\n  } = omitThemeProps(mergedProps)\n  const { relatedRef, onUpstreamClose, onDownstreamCloseMapRef } =\n    useUpstreamMenu() ?? {}\n  const { setDownstreamOpen, hasDownstreamRef } = useUpstreamMenuItem() ?? {}\n  const isNested = !!relatedRef\n\n  if (isNested) {\n    placement ??= \"right-start\"\n    offset ??= [-8, 8]\n    closeOnBlur ??= false\n  } else {\n    placement ??= \"bottom-start\"\n  }\n\n  const descendants = useDescendants()\n\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n\n  const menuRef = useRef<HTMLDivElement>(null)\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n  const requestAnimationFrameId = useRef<number | null>(null)\n  const onCloseMapRef = useRef<Map<string, () => void>>(new Map())\n\n  const onFocusMenu = useCallback(() => {\n    requestAnimationFrame(() =>\n      menuRef.current?.focus({ preventScroll: false }),\n    )\n  }, [])\n\n  const onFocusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) return\n\n      const first = descendants.enabledFirstValue()\n\n      if (first) setFocusedIndex(first.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const onFocusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) return\n\n      const last = descendants.enabledLastValue()\n\n      if (last) setFocusedIndex(last.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n\n    if (!isNested) onFocusMenu()\n  }, [onOpenProp, isNested, onFocusMenu])\n\n  const onCloseInternal = useCallback(() => {\n    onCloseProp?.()\n\n    for (const onClose of onCloseMapRef.current.values()) {\n      onClose()\n    }\n  }, [onCloseProp])\n\n  const id = useId()\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    ...props,\n    onOpen: onOpenInternal,\n    onClose: onCloseInternal,\n  })\n\n  useEffect(() => {\n    const onCloseMap = onDownstreamCloseMapRef?.current\n\n    onCloseMap?.set(id, onClose)\n\n    return () => {\n      onCloseMap?.delete(id)\n    }\n  }, [id, onClose, onDownstreamCloseMapRef])\n\n  useEffect(() => {\n    if (setDownstreamOpen) setDownstreamOpen(isOpen)\n  }, [setDownstreamOpen, isOpen])\n\n  useEffect(() => {\n    if (hasDownstreamRef) hasDownstreamRef.current = true\n\n    return () => {\n      if (hasDownstreamRef) hasDownstreamRef.current = false\n    }\n  })\n\n  useUpdateEffect(() => {\n    if (!isOpen) setFocusedIndex(-1)\n  }, [isOpen])\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  return (\n    <DescendantsContextProvider value={descendants}>\n      <UpstreamMenuProvider\n        value={{\n          relatedRef: menuRef,\n          onDownstreamCloseMapRef: onCloseMapRef,\n          onUpstreamClose: funcAll(onUpstreamClose, onClose),\n        }}\n      >\n        <MenuProvider\n          value={{\n            isOpen,\n            onOpen,\n            onClose,\n            onUpstreamClose,\n            onFocusFirstItem,\n            onFocusLastItem,\n            closeOnSelect,\n            focusedIndex,\n            setFocusedIndex,\n            menuRef,\n            requestAnimationFrameId,\n            isNested,\n            styles,\n          }}\n        >\n          <Popover\n            {...{\n              trigger: isNested ? \"hover\" : \"click\",\n              ...rest,\n              isOpen,\n              onOpen,\n              onClose,\n              placement,\n              offset,\n              duration,\n              initialFocusRef,\n              relatedRef,\n              closeOnButton: false,\n              closeOnBlur,\n            }}\n          />\n        </MenuProvider>\n      </UpstreamMenuProvider>\n    </DescendantsContextProvider>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,eAA+B;AAC/B,IAAAC,gBAAmB;;;ACDnB,kBAAuD;AAEvD,qBAAwB;AACxB,4BAAiC;AACjC,4BAA8B;AAC9B,mBAKO;AAQP,mBAAgE;AA+MtD;AA5MV,IAAM;AAAA,EACJ;AAAA,EACA,uBAAuB;AAAA,EACvB;AAAA,EACA,eAAe;AACjB,QAAI,wCAA8B;AAmBlC,IAAM,CAAC,cAAc,OAAO,QAAI,4BAA2B;AAAA,EACzD,MAAM;AAAA,EACN,cAAc;AAChB,CAAC;AAQM,IAAM,CAAC,sBAAsB,eAAe,QACjD,4BAAmC;AAAA,EACjC,QAAQ;AAAA,EACR,MAAM;AACR,CAAC;;;AD1CG,IAAAC,sBAAA;AAPC,IAAM,gBAAY;AAAA,EACvB,CAAC,EAAE,WAAW,OAAO,UAAU,GAAG,KAAK,GAAG,QAAQ;AAChD,UAAM,EAAE,OAAO,IAAI,QAAQ;AAE3B,UAAM,MAAmB,EAAE,GAAG,OAAO,MAAM;AAE3C,WACE;AAAA,MAAC,gBAAG;AAAA,MAAH;AAAA,QACC;AAAA,QACA,eAAW,kBAAG,iBAAiB,wBAAwB,SAAS;AAAA,QAChE,MAAK;AAAA,QACL,OAAO;AAAA,QACN,GAAG;AAAA,QAEH;AAAA,kBACC;AAAA,YAAC,gBAAG;AAAA,YAAH;AAAA,cACC,eAAW,kBAAG,4BAA4B;AAAA,cAC1C,OAAO,OAAO;AAAA,cAEb;AAAA;AAAA,UACH,IACE;AAAA,UAEJ,6CAAC,gBAAG,IAAH,EAAM,WAAU,wBAAwB,UAAS;AAAA;AAAA;AAAA,IACpD;AAAA,EAEJ;AACF;","names":["import_core","import_utils","import_jsx_runtime"]}