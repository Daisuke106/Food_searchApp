"use client"

// src/file-input.tsx
import {
  ui,
  forwardRef,
  omitThemeProps,
  useMultiComponentStyle
} from "@yamada-ui/core";
import {
  useFormControlProps,
  formControlProperties
} from "@yamada-ui/form-control";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import {
  assignRef,
  cx,
  dataAttr,
  handlerAll,
  isNull,
  mergeRefs,
  pickObject
} from "@yamada-ui/utils";
import { cloneElement, useCallback, useMemo, useRef } from "react";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var defaultFormat = ({ name }) => name;
var FileInput = forwardRef(
  ({ children, ...props }, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle("FileInput", props);
    const {
      className,
      id,
      name,
      accept,
      multiple,
      form,
      placeholder,
      value,
      defaultValue,
      component,
      format = defaultFormat,
      lineClamp = 1,
      separator = ",",
      resetRef,
      "aria-readonly": ariaReadonly,
      onChange: onChangeProp,
      onClick: onClickProp,
      ...rest
    } = useFormControlProps(omitThemeProps(mergedProps));
    const { disabled, readOnly } = rest;
    const inputRef = useRef(null);
    const [values, setValues] = useControllableState({
      value,
      defaultValue,
      onChange: onChangeProp
    });
    const onClick = useCallback(() => {
      var _a;
      if (disabled || readOnly)
        return;
      (_a = inputRef.current) == null ? void 0 : _a.click();
    }, [disabled, readOnly]);
    const onChange = useCallback(
      (ev) => {
        let files = !isNull(ev.currentTarget.files) ? Array.from(ev.currentTarget.files) : void 0;
        if (!(files == null ? void 0 : files.length))
          files = void 0;
        setValues(files);
      },
      [setValues]
    );
    const onReset = useCallback(() => {
      if (inputRef.current)
        inputRef.current.value = "";
      setValues(void 0);
    }, [setValues]);
    assignRef(resetRef, onReset);
    const cloneChildren = useMemo(() => {
      if (!(values == null ? void 0 : values.length))
        return /* @__PURE__ */ jsx(ui.span, { lineClamp, children: placeholder });
      if (children)
        return children(values);
      if (component) {
        return /* @__PURE__ */ jsx(ui.span, { lineClamp, children: values.map((value2, index) => {
          const el = component({ value: value2, index });
          const style = {
            marginBlockStart: "0.125rem",
            marginBlockEnd: "0.125rem",
            marginInlineEnd: "0.25rem"
          };
          return el ? cloneElement(el, { style, key: index }) : null;
        }) });
      } else {
        return /* @__PURE__ */ jsx(ui.span, { lineClamp, children: values.map((value2, index) => {
          const isLast = values.length === index + 1;
          return /* @__PURE__ */ jsxs(ui.span, { display: "inline-block", me: "0.25rem", children: [
            format(value2, index),
            !isLast ? separator : null
          ] }, index);
        }) });
      }
    }, [children, format, lineClamp, placeholder, separator, component, values]);
    const css = {
      display: "flex",
      alignItems: "center",
      cursor: !readOnly ? "pointer" : "auto",
      ...styles.field
    };
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        ui.input,
        {
          ref: mergeRefs(inputRef, ref),
          type: "file",
          "aria-hidden": true,
          tabIndex: -1,
          id,
          name,
          form,
          accept,
          multiple,
          style: {
            border: "0px",
            clip: "rect(0px, 0px, 0px, 0px)",
            height: "1px",
            width: "1px",
            margin: "-1px",
            padding: "0px",
            overflow: "hidden",
            whiteSpace: "nowrap",
            position: "absolute"
          },
          onChange,
          "aria-readonly": ariaReadonly,
          ...pickObject(rest, formControlProperties)
        }
      ),
      /* @__PURE__ */ jsx(
        ui.div,
        {
          ref,
          className: cx("ui-file-input", className),
          py: (values == null ? void 0 : values.length) && component ? "0.125rem" : void 0,
          ...rest,
          __css: css,
          tabIndex: 0,
          "data-placeholder": dataAttr(!(values == null ? void 0 : values.length)),
          onClick: handlerAll(onClickProp, onClick),
          children: cloneChildren
        }
      )
    ] });
  }
);

export {
  FileInput
};
//# sourceMappingURL=chunk-C5S6UOQX.mjs.map