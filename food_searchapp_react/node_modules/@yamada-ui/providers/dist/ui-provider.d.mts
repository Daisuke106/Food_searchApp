import { ThemeConfig, ColorModeManager, ThemeSchemeManager } from '@yamada-ui/core';
import { Dict } from '@yamada-ui/utils';
import { ReactNode, FC } from 'react';
import { Environment } from './environment-provider.mjs';

type UIProviderProps = {
    /**
     * The theme of the yamada ui.
     *
     * If omitted, uses the default theme provided by yamada ui.
     */
    theme?: Dict;
    /**
     * The config of the yamada ui.
     *
     * If omitted, uses the default config provided by yamada ui.
     */
    config?: ThemeConfig;
    /**
     * If `true`, `ResetStyle` component will be mounted to help reset browser styles.
     *
     * @default true
     */
    disableResetStyle?: boolean;
    /**
     * If `true`, will not mount the global styles defined in the theme.
     *
     * @default true
     */
    disableGlobalStyle?: boolean;
    /**
     * Manager to persist a user's color mode preference.
     *
     * Omit if you don't render server-side.
     * For SSR, choose `colorModeManager.ssr`.
     *
     * @default 'colorModeManager.localStorage'
     */
    colorModeManager?: ColorModeManager;
    /**
     * Manager to persist a user's theme scheme preference.
     *
     * Omit if you don't render server-side.
     * For SSR, choose `themeSchemeManager.ssr`.
     *
     * @default 'themeSchemeManager.localStorage'
     */
    themeSchemeManager?: ThemeSchemeManager;
    /**
     * The environment `window` and `document` to be used by all components and hooks.
     *
     * By default, we smartly determine the ownerDocument and defaultView
     * based on where `UIProvider` is rendered.
     */
    environment?: Environment;
    /**
     * If `true`,  the use of automatic window and document detection will be disabled.
     *
     * @default false
     */
    disableEnvironment?: boolean;
    /**
     * Application content.
     */
    children: ReactNode;
    /**
     * Key of value saved in storage.
     * By default, it is saved to `local storage`.
     */
    colorModeStorageKey?: string;
    /**
     * Key of value saved in storage.
     * By default, it is saved to `local storage`.
     */
    themeSchemeStorageKey?: string;
};
/**
 * The global provider that must be added to make all Yamada UI components work correctly.
 */
declare const UIProvider: FC<UIProviderProps>;

export { UIProvider, type UIProviderProps };
