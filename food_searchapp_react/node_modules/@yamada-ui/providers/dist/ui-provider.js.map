{"version":3,"sources":["../src/ui-provider.tsx","../src/environment-provider.tsx"],"sourcesContent":["import type {\n  ThemeConfig,\n  ColorModeManager,\n  ThemeSchemeManager,\n} from \"@yamada-ui/core\"\nimport {\n  ThemeProvider,\n  ColorModeProvider,\n  ResetStyle,\n  GlobalStyle,\n} from \"@yamada-ui/core\"\nimport { LoadingProvider } from \"@yamada-ui/loading\"\nimport { MotionConfig } from \"@yamada-ui/motion\"\nimport { NoticeProvider } from \"@yamada-ui/notice\"\nimport { defaultTheme, defaultConfig } from \"@yamada-ui/theme\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode } from \"react\"\nimport type { Environment } from \"./environment-provider\"\nimport { EnvironmentProvider } from \"./environment-provider\"\n\nexport type UIProviderProps = {\n  /**\n   * The theme of the yamada ui.\n   *\n   * If omitted, uses the default theme provided by yamada ui.\n   */\n  theme?: Dict\n  /**\n   * The config of the yamada ui.\n   *\n   * If omitted, uses the default config provided by yamada ui.\n   */\n  config?: ThemeConfig\n  /**\n   * If `true`, `ResetStyle` component will be mounted to help reset browser styles.\n   *\n   * @default true\n   */\n  disableResetStyle?: boolean\n  /**\n   * If `true`, will not mount the global styles defined in the theme.\n   *\n   * @default true\n   */\n  disableGlobalStyle?: boolean\n  /**\n   * Manager to persist a user's color mode preference.\n   *\n   * Omit if you don't render server-side.\n   * For SSR, choose `colorModeManager.ssr`.\n   *\n   * @default 'colorModeManager.localStorage'\n   */\n  colorModeManager?: ColorModeManager\n  /**\n   * Manager to persist a user's theme scheme preference.\n   *\n   * Omit if you don't render server-side.\n   * For SSR, choose `themeSchemeManager.ssr`.\n   *\n   * @default 'themeSchemeManager.localStorage'\n   */\n  themeSchemeManager?: ThemeSchemeManager\n  /**\n   * The environment `window` and `document` to be used by all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `UIProvider` is rendered.\n   */\n  environment?: Environment\n  /**\n   * If `true`,  the use of automatic window and document detection will be disabled.\n   *\n   * @default false\n   */\n  disableEnvironment?: boolean\n  /**\n   * Application content.\n   */\n  children: ReactNode\n  /**\n   * Key of value saved in storage.\n   * By default, it is saved to `local storage`.\n   */\n  colorModeStorageKey?: string\n  /**\n   * Key of value saved in storage.\n   * By default, it is saved to `local storage`.\n   */\n  themeSchemeStorageKey?: string\n}\n\n/**\n * The global provider that must be added to make all Yamada UI components work correctly.\n */\nexport const UIProvider: FC<UIProviderProps> = ({\n  theme = defaultTheme,\n  config = defaultConfig,\n  disableResetStyle,\n  disableGlobalStyle,\n  colorModeManager,\n  colorModeStorageKey,\n  themeSchemeManager,\n  themeSchemeStorageKey,\n  environment,\n  disableEnvironment,\n  children,\n}) => {\n  return (\n    <ThemeProvider\n      theme={theme}\n      config={config}\n      themeSchemeManager={themeSchemeManager}\n      storageKey={themeSchemeStorageKey}\n    >\n      <ColorModeProvider\n        colorModeManager={colorModeManager}\n        storageKey={colorModeStorageKey}\n        config={config}\n      >\n        <EnvironmentProvider\n          environment={environment}\n          disabled={disableEnvironment}\n        >\n          <MotionConfig {...config.motion?.config}>\n            <LoadingProvider {...config.loading}>\n              {!disableResetStyle ? <ResetStyle /> : null}\n              {!disableGlobalStyle ? <GlobalStyle /> : null}\n\n              {children}\n\n              <NoticeProvider {...config.notice} />\n            </LoadingProvider>\n          </MotionConfig>\n        </EnvironmentProvider>\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n","import { useSafeLayoutEffect } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode } from \"react\"\nimport { createContext, useContext, useMemo, useReducer, useRef } from \"react\"\n\nexport type Environment = {\n  getWindow: () => Window | undefined\n  getDocument: () => Document | undefined\n}\n\nconst environment: Environment = {\n  getDocument: () => document,\n  getWindow: () => window,\n}\n\nconst EnvironmentContext = createContext<Environment>(environment)\n\nexport type EnvironmentProviderProps = {\n  children: ReactNode\n  disabled?: boolean\n  environment?: Environment\n}\n\nexport const EnvironmentProvider: FC<EnvironmentProviderProps> = ({\n  children,\n  environment,\n  disabled,\n}) => {\n  const ref = useRef<HTMLSpanElement>(null)\n\n  const context = useMemo<Environment>(() => {\n    if (environment) return environment\n\n    return {\n      getDocument: () => ref.current?.ownerDocument ?? document,\n      getWindow: () => ref.current?.ownerDocument.defaultView ?? window,\n    }\n  }, [environment])\n\n  const enabled = !disabled || !environment\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {children}\n\n      {enabled ? <span id=\"__ui_dev\" hidden ref={ref} /> : null}\n    </EnvironmentContext.Provider>\n  )\n}\n\nEnvironmentProvider.displayName = \"EnvironmentProvider\"\n\nexport const useEnvironment = ({ isDefer }: { isDefer?: boolean } = {}) => {\n  const [, forceUpdate] = useReducer((c) => c + 1, 0)\n\n  useSafeLayoutEffect(() => {\n    if (!isDefer) return\n\n    forceUpdate()\n  }, [isDefer])\n\n  return useContext(EnvironmentContext)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,kBAKO;AACP,qBAAgC;AAChC,oBAA6B;AAC7B,oBAA+B;AAC/B,mBAA4C;;;ACd5C,mBAAoC;AAEpC,mBAAuE;AAuCnE;AAhCJ,IAAM,cAA2B;AAAA,EAC/B,aAAa,MAAM;AAAA,EACnB,WAAW,MAAM;AACnB;AAEA,IAAM,yBAAqB,4BAA2B,WAAW;AAQ1D,IAAM,sBAAoD,CAAC;AAAA,EAChE;AAAA,EACA,aAAAA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,UAAM,qBAAwB,IAAI;AAExC,QAAM,cAAU,sBAAqB,MAAM;AACzC,QAAIA;AAAa,aAAOA;AAExB,WAAO;AAAA,MACL,aAAa,MAAG;AAjCtB;AAiCyB,+BAAI,YAAJ,mBAAa,kBAAb,YAA8B;AAAA;AAAA,MACjD,WAAW,MAAG;AAlCpB;AAkCuB,+BAAI,YAAJ,mBAAa,cAAc,gBAA3B,YAA0C;AAAA;AAAA,IAC7D;AAAA,EACF,GAAG,CAACA,YAAW,CAAC;AAEhB,QAAM,UAAU,CAAC,YAAY,CAACA;AAE9B,SACE,6CAAC,mBAAmB,UAAnB,EAA4B,OAAO,SACjC;AAAA;AAAA,IAEA,UAAU,4CAAC,UAAK,IAAG,YAAW,QAAM,MAAC,KAAU,IAAK;AAAA,KACvD;AAEJ;AAEA,oBAAoB,cAAc;;;AD4EtB,IAAAC,sBAAA;AA9BL,IAAM,aAAkC,CAAC;AAAA,EAC9C,QAAQ;AAAA,EACR,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAAC;AAAA,EACA;AAAA,EACA;AACF,MAAM;AA3GN;AA4GE,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MAEZ;AAAA,QAAC;AAAA;AAAA,UACC;AAAA,UACA,YAAY;AAAA,UACZ;AAAA,UAEA;AAAA,YAAC;AAAA;AAAA,cACC,aAAaA;AAAA,cACb,UAAU;AAAA,cAEV,uDAAC,8BAAc,IAAG,YAAO,WAAP,mBAAe,QAC/B,wDAAC,kCAAiB,GAAG,OAAO,SACzB;AAAA,iBAAC,oBAAoB,6CAAC,0BAAW,IAAK;AAAA,gBACtC,CAAC,qBAAqB,6CAAC,2BAAY,IAAK;AAAA,gBAExC;AAAA,gBAED,6CAAC,gCAAgB,GAAG,OAAO,QAAQ;AAAA,iBACrC,GACF;AAAA;AAAA,UACF;AAAA;AAAA,MACF;AAAA;AAAA,EACF;AAEJ;","names":["environment","import_jsx_runtime","environment"]}