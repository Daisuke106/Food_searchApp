{"version":3,"sources":["../src/ui-provider.tsx"],"sourcesContent":["import type {\n  ThemeConfig,\n  ColorModeManager,\n  ThemeSchemeManager,\n} from \"@yamada-ui/core\"\nimport {\n  ThemeProvider,\n  ColorModeProvider,\n  ResetStyle,\n  GlobalStyle,\n} from \"@yamada-ui/core\"\nimport { LoadingProvider } from \"@yamada-ui/loading\"\nimport { MotionConfig } from \"@yamada-ui/motion\"\nimport { NoticeProvider } from \"@yamada-ui/notice\"\nimport { defaultTheme, defaultConfig } from \"@yamada-ui/theme\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode } from \"react\"\nimport type { Environment } from \"./environment-provider\"\nimport { EnvironmentProvider } from \"./environment-provider\"\n\nexport type UIProviderProps = {\n  /**\n   * The theme of the yamada ui.\n   *\n   * If omitted, uses the default theme provided by yamada ui.\n   */\n  theme?: Dict\n  /**\n   * The config of the yamada ui.\n   *\n   * If omitted, uses the default config provided by yamada ui.\n   */\n  config?: ThemeConfig\n  /**\n   * If `true`, `ResetStyle` component will be mounted to help reset browser styles.\n   *\n   * @default true\n   */\n  disableResetStyle?: boolean\n  /**\n   * If `true`, will not mount the global styles defined in the theme.\n   *\n   * @default true\n   */\n  disableGlobalStyle?: boolean\n  /**\n   * Manager to persist a user's color mode preference.\n   *\n   * Omit if you don't render server-side.\n   * For SSR, choose `colorModeManager.ssr`.\n   *\n   * @default 'colorModeManager.localStorage'\n   */\n  colorModeManager?: ColorModeManager\n  /**\n   * Manager to persist a user's theme scheme preference.\n   *\n   * Omit if you don't render server-side.\n   * For SSR, choose `themeSchemeManager.ssr`.\n   *\n   * @default 'themeSchemeManager.localStorage'\n   */\n  themeSchemeManager?: ThemeSchemeManager\n  /**\n   * The environment `window` and `document` to be used by all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `UIProvider` is rendered.\n   */\n  environment?: Environment\n  /**\n   * If `true`,  the use of automatic window and document detection will be disabled.\n   *\n   * @default false\n   */\n  disableEnvironment?: boolean\n  /**\n   * Application content.\n   */\n  children: ReactNode\n  /**\n   * Key of value saved in storage.\n   * By default, it is saved to `local storage`.\n   */\n  colorModeStorageKey?: string\n  /**\n   * Key of value saved in storage.\n   * By default, it is saved to `local storage`.\n   */\n  themeSchemeStorageKey?: string\n}\n\n/**\n * The global provider that must be added to make all Yamada UI components work correctly.\n */\nexport const UIProvider: FC<UIProviderProps> = ({\n  theme = defaultTheme,\n  config = defaultConfig,\n  disableResetStyle,\n  disableGlobalStyle,\n  colorModeManager,\n  colorModeStorageKey,\n  themeSchemeManager,\n  themeSchemeStorageKey,\n  environment,\n  disableEnvironment,\n  children,\n}) => {\n  return (\n    <ThemeProvider\n      theme={theme}\n      config={config}\n      themeSchemeManager={themeSchemeManager}\n      storageKey={themeSchemeStorageKey}\n    >\n      <ColorModeProvider\n        colorModeManager={colorModeManager}\n        storageKey={colorModeStorageKey}\n        config={config}\n      >\n        <EnvironmentProvider\n          environment={environment}\n          disabled={disableEnvironment}\n        >\n          <MotionConfig {...config.motion?.config}>\n            <LoadingProvider {...config.loading}>\n              {!disableResetStyle ? <ResetStyle /> : null}\n              {!disableGlobalStyle ? <GlobalStyle /> : null}\n\n              {children}\n\n              <NoticeProvider {...config.notice} />\n            </LoadingProvider>\n          </MotionConfig>\n        </EnvironmentProvider>\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n"],"mappings":";;;;;;AAKA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,uBAAuB;AAChC,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B,SAAS,cAAc,qBAAqB;AA+GhC,SACwB,KADxB;AA9BL,IAAM,aAAkC,CAAC;AAAA,EAC9C,QAAQ;AAAA,EACR,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AA3GN;AA4GE,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MAEZ;AAAA,QAAC;AAAA;AAAA,UACC;AAAA,UACA,YAAY;AAAA,UACZ;AAAA,UAEA;AAAA,YAAC;AAAA;AAAA,cACC;AAAA,cACA,UAAU;AAAA,cAEV,8BAAC,gBAAc,IAAG,YAAO,WAAP,mBAAe,QAC/B,+BAAC,mBAAiB,GAAG,OAAO,SACzB;AAAA,iBAAC,oBAAoB,oBAAC,cAAW,IAAK;AAAA,gBACtC,CAAC,qBAAqB,oBAAC,eAAY,IAAK;AAAA,gBAExC;AAAA,gBAED,oBAAC,kBAAgB,GAAG,OAAO,QAAQ;AAAA,iBACrC,GACF;AAAA;AAAA,UACF;AAAA;AAAA,MACF;AAAA;AAAA,EACF;AAEJ;","names":[]}