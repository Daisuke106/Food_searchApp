"use client"

// src/environment-provider.tsx
import { useSafeLayoutEffect } from "@yamada-ui/utils";
import { createContext, useContext, useMemo, useReducer, useRef } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var environment = {
  getDocument: () => document,
  getWindow: () => window
};
var EnvironmentContext = createContext(environment);
var EnvironmentProvider = ({
  children,
  environment: environment2,
  disabled
}) => {
  const ref = useRef(null);
  const context = useMemo(() => {
    if (environment2)
      return environment2;
    return {
      getDocument: () => {
        var _a, _b;
        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;
      },
      getWindow: () => {
        var _a, _b;
        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument.defaultView) != null ? _b : window;
      }
    };
  }, [environment2]);
  const enabled = !disabled || !environment2;
  return /* @__PURE__ */ jsxs(EnvironmentContext.Provider, { value: context, children: [
    children,
    enabled ? /* @__PURE__ */ jsx("span", { id: "__ui_dev", hidden: true, ref }) : null
  ] });
};
EnvironmentProvider.displayName = "EnvironmentProvider";
var useEnvironment = ({ isDefer } = {}) => {
  const [, forceUpdate] = useReducer((c) => c + 1, 0);
  useSafeLayoutEffect(() => {
    if (!isDefer)
      return;
    forceUpdate();
  }, [isDefer]);
  return useContext(EnvironmentContext);
};

export {
  EnvironmentProvider,
  useEnvironment
};
//# sourceMappingURL=chunk-4UFTGRYY.mjs.map