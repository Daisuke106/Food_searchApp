"use client"

// src/native-select.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps,
  layoutStyleProperties
} from "@yamada-ui/core";
import {
  formControlProperties,
  useFormControlProps
} from "@yamada-ui/form-control";
import { ChevronIcon } from "@yamada-ui/icon";
import {
  createContext,
  cx,
  splitObject,
  getValidChildren,
  isValidElement,
  pickObject,
  omitObject
} from "@yamada-ui/utils";
import { cloneElement } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var [NativeSelectProvider, useNativeSelect] = createContext({
  name: "NativeSelectContext",
  errorMessage: `useNativeSelect returned is 'undefined'. Seems you forgot to wrap the components in "<NativeSelect />"`
});
var NativeSelect = forwardRef(
  (props, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle("NativeSelect", props);
    let {
      className,
      children,
      placeholderInOptions = true,
      color,
      h,
      height,
      minH,
      minHeight,
      items = [],
      placeholder,
      containerProps,
      iconProps,
      ...rest
    } = omitThemeProps(mergedProps);
    rest = useFormControlProps(rest);
    const { "aria-readonly": _ariaReadonly, ...formControlProps } = pickObject(
      rest,
      formControlProperties
    );
    const [layoutProps, selectProps] = splitObject(
      omitObject(rest, ["aria-readonly"]),
      layoutStyleProperties
    );
    let computedChildren = [];
    if (!children && items.length) {
      computedChildren = items.map((item, i) => {
        if ("value" in item) {
          const { label, value, ...props2 } = item;
          return /* @__PURE__ */ jsx(NativeOption, { value, ...props2, children: label }, i);
        } else if ("items" in item) {
          const { label, items: items2 = [], ...props2 } = item;
          return /* @__PURE__ */ jsx(NativeOptionGroup, { label, ...props2, children: items2.map(({ label: label2, value, ...props3 }, i2) => /* @__PURE__ */ jsx(NativeOption, { value, ...props3, children: label2 }, i2)) }, i);
        }
      }).filter(Boolean);
    }
    return /* @__PURE__ */ jsx(NativeSelectProvider, { value: styles, children: /* @__PURE__ */ jsxs(
      ui.div,
      {
        className: "ui-select",
        __css: {
          position: "relative",
          w: "100%",
          h: "fit-content",
          color,
          ...styles.container
        },
        ...layoutProps,
        ...containerProps,
        ...formControlProps,
        children: [
          /* @__PURE__ */ jsxs(
            ui.select,
            {
              ref,
              className: cx("ui-select__field", className),
              __css: {
                pe: "2rem",
                h: h != null ? h : height,
                minH: minH != null ? minH : minHeight,
                ...styles.field
              },
              ...selectProps,
              children: [
                placeholder ? /* @__PURE__ */ jsx(NativeOption, { value: "", hidden: !placeholderInOptions, children: placeholder }) : null,
                children != null ? children : computedChildren
              ]
            }
          ),
          /* @__PURE__ */ jsx(NativeSelectIcon, { ...iconProps, ...formControlProps })
        ]
      }
    ) });
  }
);
var NativeSelectIcon = ({
  className,
  children,
  ...rest
}) => {
  const styles = useNativeSelect();
  const css = {
    position: "absolute",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    pointerEvents: "none",
    top: "50%",
    transform: "translateY(-50%)",
    ...styles.icon
  };
  const validChildren = getValidChildren(children);
  const cloneChildren = validChildren.map(
    (child) => cloneElement(child, {
      focusable: false,
      "aria-hidden": true,
      style: {
        width: "1em",
        height: "1em",
        color: "currentColor"
      }
    })
  );
  return /* @__PURE__ */ jsx(ui.div, { className: cx("ui-select__icon", className), __css: css, ...rest, children: isValidElement(children) ? cloneChildren : /* @__PURE__ */ jsx(ChevronIcon, {}) });
};
var NativeOptionGroup = forwardRef(
  (props, ref) => /* @__PURE__ */ jsx(ui.optgroup, { ref, ...props })
);
var NativeOption = forwardRef(
  (props, ref) => /* @__PURE__ */ jsx(ui.option, { ref, ...props })
);

export {
  NativeSelect,
  NativeOptionGroup,
  NativeOption
};
//# sourceMappingURL=chunk-CIF2ZN57.mjs.map