"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  RangeSlider: () => RangeSlider,
  RangeSliderEndThumb: () => RangeSliderEndThumb,
  RangeSliderFilledTrack: () => RangeSliderFilledTrack,
  RangeSliderMark: () => RangeSliderMark,
  RangeSliderStartThumb: () => RangeSliderStartThumb,
  RangeSliderTrack: () => RangeSliderTrack,
  Slider: () => Slider,
  SliderFilledTrack: () => SliderFilledTrack,
  SliderMark: () => SliderMark,
  SliderThumb: () => SliderThumb,
  SliderTrack: () => SliderTrack
});
module.exports = __toCommonJS(src_exports);

// src/slider.tsx
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_latest_ref = require("@yamada-ui/use-latest-ref");
var import_use_pan_event = require("@yamada-ui/use-pan-event");
var import_use_size = require("@yamada-ui/use-size");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var useSlider = ({
  focusThumbOnChange = true,
  ...props
}) => {
  if (!focusThumbOnChange)
    props.isReadOnly = true;
  let {
    id,
    name,
    min = 0,
    max = 100,
    step = 1,
    defaultValue,
    orientation = "horizontal",
    isReversed,
    required,
    disabled,
    readOnly,
    value: valueProp,
    onChange,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    onFocus,
    onBlur,
    "aria-readonly": ariaReadonly,
    ...rest
  } = (0, import_form_control.useFormControlProps)(props);
  const formControlProps = (0, import_utils.pickObject)(rest, import_form_control.formControlProperties);
  if (max < min)
    throw new Error("Do not assign a number less than 'min' to 'max'");
  const onChangeStart = (0, import_utils.useCallbackRef)(onChangeStartProp);
  const onChangeEnd = (0, import_utils.useCallbackRef)(onChangeEndProp);
  const [computedValue, setValue] = (0, import_use_controllable_state.useControllableState)({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : min + (max - min) / 2,
    onChange
  });
  const [isDragging, setDragging] = (0, import_react.useState)(false);
  const [isFocused, setFocused] = (0, import_react.useState)(false);
  const isInteractive = !(disabled || readOnly);
  const tenStep = (max - min) / 10;
  const oneStep = step || (max - min) / 100;
  const value = (0, import_utils.clampNumber)(computedValue, min, max);
  const reversedValue = max - value + min;
  const thumbValue = isReversed ? reversedValue : value;
  const thumbPercent = (0, import_utils.valueToPercent)(thumbValue, min, max);
  const isVertical = orientation === "vertical";
  const latestRef = (0, import_use_latest_ref.useLatestRef)({
    min,
    max,
    step,
    value,
    isInteractive,
    focusThumbOnChange
  });
  const eventSourceRef = (0, import_react.useRef)(null);
  const containerRef = (0, import_react.useRef)(null);
  const trackRef = (0, import_react.useRef)(null);
  const thumbRef = (0, import_react.useRef)(null);
  const thumbSize = (0, import_use_size.useSize)(thumbRef);
  (0, import_use_pan_event.usePanEvent)(containerRef, {
    onSessionStart: (ev) => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(true);
      focusThumb();
      setValueFromPointer(ev);
      onChangeStart(value2);
    },
    onSessionEnd: () => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(false);
      onChangeEnd(value2);
    },
    onMove: (ev) => {
      const { isInteractive: isInteractive2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setValueFromPointer(ev);
    }
  });
  const getValueFromPointer = (0, import_react.useCallback)(
    (ev) => {
      var _a, _b;
      if (!trackRef.current)
        return;
      const { min: min2, max: max2, step: step2 } = latestRef.current;
      eventSourceRef.current = "pointer";
      const { bottom, left, height, width } = trackRef.current.getBoundingClientRect();
      const { clientX, clientY } = (_b = (_a = ev.touches) == null ? void 0 : _a[0]) != null ? _b : ev;
      const diff = isVertical ? bottom - clientY : clientX - left;
      const length = isVertical ? height : width;
      let percent = diff / length;
      if (isReversed)
        percent = 1 - percent;
      let nextValue = (0, import_utils.percentToValue)(percent, min2, max2);
      if (step2)
        nextValue = parseFloat((0, import_utils.roundNumberToStep)(nextValue, min2, step2));
      nextValue = (0, import_utils.clampNumber)(nextValue, min2, max2);
      return nextValue;
    },
    [isVertical, isReversed, latestRef]
  );
  const setValueFromPointer = (ev) => {
    const { value: value2 } = latestRef.current;
    const nextValue = getValueFromPointer(ev);
    if (nextValue != null && nextValue !== value2)
      setValue(nextValue);
  };
  const focusThumb = (0, import_react.useCallback)(() => {
    const { focusThumbOnChange: focusThumbOnChange2 } = latestRef.current;
    if (focusThumbOnChange2)
      setTimeout(() => {
        var _a;
        return (_a = thumbRef.current) == null ? void 0 : _a.focus();
      });
  }, [latestRef]);
  const constrain = (0, import_react.useCallback)(
    (value2) => {
      const { isInteractive: isInteractive2, min: min2, max: max2 } = latestRef.current;
      if (!isInteractive2)
        return;
      value2 = parseFloat((0, import_utils.roundNumberToStep)(value2, min2, oneStep));
      value2 = (0, import_utils.clampNumber)(value2, min2, max2);
      setValue(value2);
    },
    [oneStep, setValue, latestRef]
  );
  const stepUp = (0, import_react.useCallback)(
    (step2 = oneStep) => constrain(isReversed ? value - step2 : value + step2),
    [constrain, isReversed, oneStep, value]
  );
  const stepDown = (0, import_react.useCallback)(
    (step2 = oneStep) => constrain(isReversed ? value + step2 : value - step2),
    [constrain, isReversed, oneStep, value]
  );
  const reset = (0, import_react.useCallback)(
    () => constrain(defaultValue || 0),
    [constrain, defaultValue]
  );
  const stepTo = (0, import_react.useCallback)((value2) => constrain(value2), [constrain]);
  const onKeyDown = (0, import_react.useCallback)(
    (ev) => {
      const { min: min2, max: max2 } = latestRef.current;
      const actions = {
        ArrowRight: () => stepUp(),
        ArrowUp: () => stepUp(),
        ArrowLeft: () => stepDown(),
        ArrowDown: () => stepDown(),
        PageUp: () => stepUp(tenStep),
        PageDown: () => stepDown(tenStep),
        Home: () => constrain(min2),
        End: () => constrain(max2)
      };
      const action = actions[ev.key];
      if (!action)
        return;
      ev.preventDefault();
      ev.stopPropagation();
      action(ev);
      eventSourceRef.current = "keyboard";
    },
    [constrain, latestRef, stepDown, stepUp, tenStep]
  );
  (0, import_utils.useUpdateEffect)(() => {
    const { value: value2 } = latestRef.current;
    focusThumb();
    if (eventSourceRef.current === "keyboard")
      onChangeEnd(value2);
  }, [value, onChangeEnd]);
  const getContainerProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const { width: w, height: h } = thumbSize != null ? thumbSize : { width: 0, height: 0 };
      const style = {
        ...props2.style,
        position: "relative",
        userSelect: "none",
        touchAction: "none",
        WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
        outline: 0,
        ...isVertical ? { paddingLeft: w / 2, paddingRight: w / 2 } : { paddingTop: h / 2, paddingBottom: h / 2 }
      };
      return {
        ...rest,
        ...props2,
        ref: (0, import_utils.mergeRefs)(ref, containerRef),
        tabIndex: -1,
        style
      };
    },
    [isVertical, rest, thumbSize]
  );
  const getInputProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => ({
      "aria-readonly": ariaReadonly,
      ...formControlProps,
      ...props2,
      id,
      ref,
      type: "hidden",
      name,
      value,
      required,
      disabled,
      readOnly
    }),
    [
      ariaReadonly,
      disabled,
      formControlProps,
      id,
      name,
      readOnly,
      required,
      value
    ]
  );
  const getTrackProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const style = {
        ...props2.style,
        position: "absolute",
        ...isVertical ? {
          left: "50%",
          transform: "translateX(-50%)",
          height: "100%"
        } : {
          top: "50%",
          transform: "translateY(-50%)",
          width: "100%"
        }
      };
      return {
        ...formControlProps,
        ...props2,
        ref: (0, import_utils.mergeRefs)(ref, trackRef),
        style
      };
    },
    [isVertical, formControlProps]
  );
  const getFilledTrackProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const n = Math.abs(isReversed ? 100 - thumbPercent : thumbPercent);
      const style = {
        ...props2.style,
        position: "absolute",
        ...isVertical ? {
          left: "50%",
          transform: "translateX(-50%)",
          height: `${n}%`,
          ...isReversed ? { top: "0%" } : { bottom: "0%" }
        } : {
          top: "50%",
          transform: "translateY(-50%)",
          width: `${n}%`,
          ...isReversed ? { right: "0%" } : { left: "0%" }
        }
      };
      return {
        ...formControlProps,
        ...props2,
        ref,
        style
      };
    },
    [isReversed, isVertical, formControlProps, thumbPercent]
  );
  const getMarkProps = (0, import_react.useCallback)(
    (props2, ref = null) => {
      let n = (0, import_utils.valueToPercent)(props2.value, min, max);
      n = isReversed ? 100 - n : n;
      const style = {
        ...props2.style,
        position: "absolute",
        pointerEvents: "none",
        ...isVertical ? { bottom: `${n}%` } : { left: `${n}%` }
      };
      return {
        ...formControlProps,
        ...props2,
        ref,
        "aria-hidden": true,
        "data-invalid": (0, import_utils.dataAttr)(props2.value < min || max < props2.value),
        "data-highlighted": (0, import_utils.dataAttr)(props2.value <= value),
        style
      };
    },
    [isReversed, isVertical, max, min, formControlProps, value]
  );
  const getThumbProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const n = thumbPercent;
      const { width: w, height: h } = thumbSize != null ? thumbSize : { width: 0, height: 0 };
      const style = {
        ...props2.style,
        position: "absolute",
        userSelect: "none",
        touchAction: "none",
        ...isVertical ? { bottom: `calc(${n}% - ${h / 2}px)` } : { left: `calc(${n}% - ${w / 2}px)` }
      };
      return {
        "aria-label": "Slider thumb",
        "aria-readonly": ariaReadonly,
        ...formControlProps,
        ...props2,
        ref: (0, import_utils.mergeRefs)(ref, thumbRef),
        tabIndex: isInteractive && focusThumbOnChange ? 0 : void 0,
        role: "slider",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value,
        "data-active": (0, import_utils.dataAttr)(isDragging && focusThumbOnChange),
        "aria-orientation": orientation,
        onKeyDown: (0, import_utils.handlerAll)(props2.onKeyDown, onKeyDown),
        onFocus: (0, import_utils.handlerAll)(props2.onFocus, onFocus, () => setFocused(true)),
        onBlur: (0, import_utils.handlerAll)(props2.onBlur, onBlur, () => setFocused(false)),
        style
      };
    },
    [
      thumbPercent,
      thumbSize,
      isVertical,
      ariaReadonly,
      formControlProps,
      isInteractive,
      focusThumbOnChange,
      min,
      max,
      value,
      isDragging,
      orientation,
      onKeyDown,
      onFocus,
      onBlur
    ]
  );
  return {
    value,
    isFocused,
    isDragging,
    isVertical,
    stepUp,
    stepDown,
    reset,
    stepTo,
    getContainerProps,
    getInputProps,
    getTrackProps,
    getFilledTrackProps,
    getMarkProps,
    getThumbProps
  };
};
var [SliderProvider, useSliderContext] = (0, import_utils.createContext)({
  name: "SliderContext",
  errorMessage: `useSliderContext returned is 'undefined'. Seems you forgot to wrap the components in "<Slider />" `
});
var Slider = (0, import_core.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Slider", props);
  const {
    className,
    children,
    inputProps,
    trackProps,
    filledTrackProps,
    thumbProps,
    trackColor,
    filledTrackColor,
    trackSize,
    thumbColor,
    thumbSize,
    ...rest
  } = (0, import_core.omitThemeProps)(mergedProps);
  const {
    isVertical,
    getContainerProps,
    getInputProps,
    getTrackProps,
    getFilledTrackProps,
    getMarkProps,
    getThumbProps
  } = useSlider(rest);
  const css = { ...styles.container };
  const validChildren = (0, import_utils.getValidChildren)(children);
  const [customSliderTrack] = (0, import_utils.findChildren)(validChildren, SliderTrack);
  const [customSliderThumb] = (0, import_utils.findChildren)(validChildren, SliderThumb);
  const hasSliderThumb = (0, import_utils.includesChildren)(validChildren, SliderThumb);
  const cloneChildren = !(0, import_utils.isEmpty)(validChildren) ? (0, import_utils.omitChildren)(validChildren, SliderTrack, SliderThumb) : children;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    SliderProvider,
    {
      value: {
        isVertical,
        getTrackProps,
        getFilledTrackProps,
        getMarkProps,
        getThumbProps,
        trackProps,
        trackColor,
        trackSize,
        filledTrackProps,
        filledTrackColor,
        thumbProps,
        thumbColor,
        thumbSize,
        styles
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
        import_core.ui.div,
        {
          className: (0, import_utils.cx)("ui-slider", className),
          __css: css,
          ...getContainerProps(),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.ui.input, { ...getInputProps(inputProps, ref) }),
            customSliderTrack != null ? customSliderTrack : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SliderTrack, {}),
            cloneChildren,
            customSliderThumb != null ? customSliderThumb : !hasSliderThumb ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SliderThumb, {}) : null
          ]
        }
      )
    }
  );
});
var SliderTrack = (0, import_core.forwardRef)(
  ({ className, children, filledTrackProps, ...rest }, ref) => {
    const {
      styles,
      trackProps,
      trackColor,
      trackSize,
      isVertical,
      getTrackProps
    } = useSliderContext();
    const css = { ...styles.track };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__track", className),
        __css: css,
        ...getTrackProps(
          {
            ...trackColor ? { bg: trackColor } : {},
            ...trackSize ? isVertical ? { w: trackSize } : { h: trackSize } : {},
            ...trackProps,
            ...rest
          },
          ref
        ),
        children: children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SliderFilledTrack, { ...filledTrackProps })
      }
    );
  }
);
var SliderFilledTrack = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles, filledTrackProps, filledTrackColor, getFilledTrackProps } = useSliderContext();
    const css = { ...styles.filledTrack };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__track-filled", className),
        __css: css,
        ...getFilledTrackProps(
          {
            ...filledTrackColor ? { bg: filledTrackColor } : {},
            ...filledTrackProps,
            ...rest
          },
          ref
        )
      }
    );
  }
);
var SliderMark = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles, getMarkProps } = useSliderContext();
    const css = {
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      ...styles.mark
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__mark", className),
        __css: css,
        ...getMarkProps(rest, ref)
      }
    );
  }
);
var SliderThumb = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles, thumbProps, thumbColor, thumbSize, getThumbProps } = useSliderContext();
    const css = { ...styles.thumb };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__thumb", className),
        __css: css,
        ...getThumbProps(
          {
            ...thumbColor ? { bg: thumbColor } : {},
            ...thumbSize ? { boxSize: thumbSize } : {},
            ...thumbProps,
            ...rest
          },
          ref
        )
      }
    );
  }
);

// src/range-slider.tsx
var import_core2 = require("@yamada-ui/core");
var import_form_control2 = require("@yamada-ui/form-control");
var import_use_controllable_state2 = require("@yamada-ui/use-controllable-state");
var import_use_latest_ref2 = require("@yamada-ui/use-latest-ref");
var import_use_pan_event2 = require("@yamada-ui/use-pan-event");
var import_use_size2 = require("@yamada-ui/use-size");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");
var import_jsx_runtime2 = require("react/jsx-runtime");
var useRangeSlider = ({
  focusThumbOnChange = true,
  ...props
}) => {
  if (!focusThumbOnChange)
    props.isReadOnly = true;
  let {
    id,
    name,
    min = 0,
    max = 100,
    step = 1,
    defaultValue,
    orientation = "horizontal",
    isReversed,
    betweenThumbs = 0,
    required,
    disabled,
    readOnly,
    value: valueProp,
    onChange,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    onFocus,
    onBlur,
    "aria-readonly": ariaReadonly,
    ...rest
  } = (0, import_form_control2.useFormControlProps)(props);
  const formControlProps = (0, import_utils2.pickObject)(rest, import_form_control2.formControlProperties);
  defaultValue = defaultValue != null ? defaultValue : [min + (max - min) / 4, max - (max - min) / 4];
  if (max < min)
    throw new Error("Do not assign a number less than 'min' to 'max'");
  const onChangeStart = (0, import_utils2.useCallbackRef)(onChangeStartProp);
  const onChangeEnd = (0, import_utils2.useCallbackRef)(onChangeEndProp);
  const [computedValues, setValues] = (0, import_use_controllable_state2.useControllableState)({
    value: valueProp,
    defaultValue,
    onChange
  });
  const [isDragging, setDragging] = (0, import_react2.useState)(false);
  const [isFocused, setFocused] = (0, import_react2.useState)(false);
  const [activeIndex, setActiveIndex] = (0, import_react2.useState)(-1);
  const isInteractive = !(disabled || readOnly);
  const tenStep = (max - min) / 10;
  const oneStep = step || (max - min) / 100;
  const spacing = betweenThumbs * step;
  const values = computedValues.map(
    (value) => (0, import_utils2.clampNumber)(value, min, max)
  );
  const [startValue, endValue] = values;
  const reversedValues = values.map((value) => max - value + min);
  const thumbValues = isReversed ? reversedValues : values;
  const thumbPercents = thumbValues.map(
    (value) => (0, import_utils2.valueToPercent)(value, min, max)
  );
  const valueBounds = [
    { min, max: endValue - spacing },
    { min: startValue + spacing, max }
  ];
  const isVertical = orientation === "vertical";
  const latestRef = (0, import_use_latest_ref2.useLatestRef)({
    min,
    max,
    step,
    disabled,
    values,
    valueBounds,
    isInteractive,
    isReversed,
    isVertical,
    focusThumbOnChange,
    betweenThumbs,
    orientation
  });
  const eventSourceRef = (0, import_react2.useRef)(null);
  const containerRef = (0, import_react2.useRef)(null);
  const trackRef = (0, import_react2.useRef)(null);
  const thumbSizes = (0, import_use_size2.useSizes)({
    getNodes: () => {
      var _a;
      const nodes = (_a = containerRef.current) == null ? void 0 : _a.querySelectorAll("[role=slider]");
      return nodes ? Array.from(nodes) : [];
    }
  });
  id != null ? id : id = (0, import_react2.useId)();
  name != null ? name : name = id;
  const getThumbId = (0, import_react2.useCallback)((i) => `slider-thumb-${id}-${i}`, [id]);
  const getInputId = (0, import_react2.useCallback)((i) => `slider-input-${id}-${i}`, [id]);
  const getMarkerId = (0, import_react2.useCallback)(
    (i) => `slider-marker-${id}-${i}`,
    [id]
  );
  (0, import_use_pan_event2.usePanEvent)(containerRef, {
    onSessionStart: (ev) => {
      const { isInteractive: isInteractive2, values: values2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(true);
      const pointValue = getValueFromPointer(ev) || 0;
      const distances = values2.map((value) => Math.abs(value - pointValue));
      const closest = Math.min(...distances);
      let i = distances.indexOf(closest);
      const thumbsPosition = distances.filter(
        (distance) => distance === closest
      );
      const isThumbStacked = thumbsPosition.length > 1;
      if (isThumbStacked && pointValue > values2[i])
        i = i + thumbsPosition.length - 1;
      setActiveIndex(i);
      constrain(i, pointValue);
      focusThumb(i);
      onChangeStart(values2);
    },
    onSessionEnd: () => {
      const { isInteractive: isInteractive2, values: values2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(false);
      onChangeEnd(values2);
    },
    onMove: (ev) => {
      const { isInteractive: isInteractive2 } = latestRef.current;
      if (!isInteractive2 || activeIndex == -1)
        return;
      const pointValue = getValueFromPointer(ev) || 0;
      setActiveIndex(activeIndex);
      constrain(activeIndex, pointValue);
      focusThumb(activeIndex);
    }
  });
  const getValueFromPointer = (0, import_react2.useCallback)(
    (ev) => {
      var _a, _b;
      if (!trackRef.current)
        return;
      const { min: min2, max: max2 } = latestRef.current;
      eventSourceRef.current = "pointer";
      const { bottom, left, height, width } = trackRef.current.getBoundingClientRect();
      const { clientX, clientY } = (_b = (_a = ev.touches) == null ? void 0 : _a[0]) != null ? _b : ev;
      const diff = isVertical ? bottom - clientY : clientX - left;
      const length = isVertical ? height : width;
      let percent = diff / length;
      if (isReversed)
        percent = 1 - percent;
      let nextValue = (0, import_utils2.percentToValue)(percent, min2, max2);
      return nextValue;
    },
    [latestRef, isVertical, isReversed]
  );
  const focusThumb = (0, import_react2.useCallback)(
    (i) => {
      var _a;
      i != null ? i : i = activeIndex;
      if (i === -1 || !focusThumbOnChange)
        return;
      const id2 = getThumbId(i);
      const el = (_a = containerRef.current) == null ? void 0 : _a.ownerDocument.getElementById(id2);
      if (el)
        setTimeout(() => el.focus());
    },
    [activeIndex, focusThumbOnChange, getThumbId]
  );
  const constrain = (0, import_react2.useCallback)(
    (i, value) => {
      const { isInteractive: isInteractive2, valueBounds: valueBounds2, values: values2 } = latestRef.current;
      if (!isInteractive2)
        return;
      const { min: min2, max: max2 } = valueBounds2[i];
      value = parseFloat((0, import_utils2.roundNumberToStep)(value, min2, oneStep));
      value = (0, import_utils2.clampNumber)(value, min2, max2);
      const nextValues = [...values2];
      nextValues[i] = value;
      setValues(nextValues);
    },
    [latestRef, oneStep, setValues]
  );
  const stepUp = (0, import_react2.useCallback)(
    (i, step2 = oneStep) => {
      const { values: values2 } = latestRef.current;
      const value = values2[i];
      constrain(i, isReversed ? value - step2 : value + step2);
    },
    [constrain, isReversed, latestRef, oneStep]
  );
  const stepDown = (0, import_react2.useCallback)(
    (i, step2 = oneStep) => {
      const { values: values2 } = latestRef.current;
      const value = values2[i];
      constrain(i, isReversed ? value + step2 : value - step2);
    },
    [constrain, isReversed, latestRef, oneStep]
  );
  const reset = (0, import_react2.useCallback)(
    () => setValues(defaultValue),
    [defaultValue, setValues]
  );
  const onKeyDown = (0, import_react2.useCallback)(
    (ev) => {
      const { valueBounds: valueBounds2 } = latestRef.current;
      const { min: min2, max: max2 } = valueBounds2[activeIndex];
      const actions = {
        ArrowRight: () => stepUp(activeIndex),
        ArrowUp: () => stepUp(activeIndex),
        ArrowLeft: () => stepDown(activeIndex),
        ArrowDown: () => stepDown(activeIndex),
        PageUp: () => stepUp(activeIndex, tenStep),
        PageDown: () => stepDown(activeIndex, tenStep),
        Home: () => constrain(activeIndex, min2),
        End: () => constrain(activeIndex, max2)
      };
      const action = actions[ev.key];
      if (!action)
        return;
      ev.preventDefault();
      ev.stopPropagation();
      action(ev);
      eventSourceRef.current = "keyboard";
    },
    [activeIndex, constrain, latestRef, stepDown, stepUp, tenStep]
  );
  (0, import_utils2.useUpdateEffect)(() => {
    const { values: values2 } = latestRef.current;
    if (eventSourceRef.current === "keyboard")
      onChangeEnd(values2);
  }, [startValue, endValue, onChangeEnd]);
  const getContainerProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => {
      var _a;
      const z = { width: 0, height: 0 };
      const p = isVertical ? "height" : "width";
      const { width: w, height: h } = (_a = thumbSizes.reduce((a = z, b = z) => a[p] > b[p] ? a : b, z)) != null ? _a : {};
      const style = {
        ...props2.style,
        position: "relative",
        userSelect: "none",
        touchAction: "none",
        WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
        outline: 0,
        ...isVertical ? w ? { paddingLeft: w / 2, paddingRight: w / 2 } : {} : h ? { paddingTop: h / 2, paddingBottom: h / 2 } : {}
      };
      return {
        ...rest,
        ...props2,
        id: `slider-container-${id}`,
        ref: (0, import_utils2.mergeRefs)(ref, containerRef),
        tabIndex: -1,
        style
      };
    },
    [id, isVertical, rest, thumbSizes]
  );
  const getInputProps = (0, import_react2.useCallback)(
    ({ index: i, ...props2 }, ref = null) => ({
      "aria-readonly": ariaReadonly,
      ...formControlProps,
      ...props2,
      ref,
      id: getInputId(i),
      type: "hidden",
      name: (0, import_utils2.isArray)(name) ? name[i] : `${name}-${i}`,
      value: values[i],
      required,
      disabled,
      readOnly
    }),
    [
      ariaReadonly,
      disabled,
      getInputId,
      name,
      readOnly,
      required,
      formControlProps,
      values
    ]
  );
  const getTrackProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => {
      const style = {
        ...props2.style,
        position: "absolute",
        ...isVertical ? {
          left: "50%",
          transform: "translateX(-50%)",
          height: "100%"
        } : {
          top: "50%",
          transform: "translateY(-50%)",
          width: "100%"
        }
      };
      return {
        ...formControlProps,
        ...props2,
        id: `slider-track-${id}`,
        ref: (0, import_utils2.mergeRefs)(ref, trackRef),
        style
      };
    },
    [id, isVertical, formControlProps]
  );
  const getFilledTrackProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => {
      const n = Math.abs(thumbPercents[1] - thumbPercents[0]);
      const s = isReversed ? 100 - thumbPercents[0] : thumbPercents[0];
      const style = {
        ...props2.style,
        position: "absolute",
        ...isVertical ? {
          left: "50%",
          transform: "translateX(-50%)",
          height: `${n}%`,
          ...isReversed ? { top: `${s}%` } : { bottom: `${s}%` }
        } : {
          top: "50%",
          transform: "translateY(-50%)",
          width: `${n}%`,
          ...isReversed ? { right: `${s}%` } : { left: `${s}%` }
        }
      };
      return {
        ...formControlProps,
        ...props2,
        id: `slider-filled-track-${id}`,
        ref,
        style
      };
    },
    [id, isReversed, isVertical, formControlProps, thumbPercents]
  );
  const getMarkProps = (0, import_react2.useCallback)(
    (props2, ref = null) => {
      let n = (0, import_utils2.valueToPercent)(props2.value, min, max);
      n = isReversed ? 100 - n : n;
      const style = {
        ...props2.style,
        position: "absolute",
        pointerEvents: "none",
        ...isVertical ? { bottom: `${n}%` } : { left: `${n}%` }
      };
      return {
        ...formControlProps,
        ...props2,
        ref,
        id: getMarkerId(props2.value),
        "aria-hidden": true,
        "data-invalid": (0, import_utils2.dataAttr)(props2.value < min || max < props2.value),
        "data-highlighted": (0, import_utils2.dataAttr)(
          values[0] <= props2.value && props2.value <= values[1]
        ),
        style
      };
    },
    [getMarkerId, isReversed, isVertical, max, min, formControlProps, values]
  );
  const getThumbProps = (0, import_react2.useCallback)(
    ({ index: i, ...props2 }, ref = null) => {
      var _a;
      const n = thumbPercents[i];
      const { width: w, height: h } = (_a = thumbSizes[i]) != null ? _a : { width: 0, height: 0 };
      const style = {
        ...props2.style,
        position: "absolute",
        userSelect: "none",
        touchAction: "none",
        ...isVertical ? { bottom: `calc(${n}% - ${h / 2}px)` } : { left: `calc(${n}% - ${w / 2}px)` }
      };
      const value = values[i];
      if (value == null)
        throw new Error(
          `Cannot find value at index '${i}'. The 'value' or 'defaultValue'`
        );
      return {
        "aria-label": "Slider thumb",
        "aria-readonly": ariaReadonly,
        ...formControlProps,
        ...props2,
        ref,
        id: getThumbId(i),
        tabIndex: isInteractive && focusThumbOnChange ? 0 : void 0,
        role: "slider",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value,
        "data-active": (0, import_utils2.dataAttr)(
          isDragging && focusThumbOnChange && activeIndex === i
        ),
        "aria-orientation": orientation,
        onKeyDown: (0, import_utils2.handlerAll)(props2.onKeyDown, onKeyDown),
        onFocus: (0, import_utils2.handlerAll)(props2.onFocus, onFocus, () => {
          setFocused(true);
          setActiveIndex(i);
        }),
        onBlur: (0, import_utils2.handlerAll)(props2.onBlur, onBlur, () => {
          setFocused(false);
          setActiveIndex(-1);
        }),
        style
      };
    },
    [
      thumbPercents,
      thumbSizes,
      isVertical,
      values,
      ariaReadonly,
      formControlProps,
      getThumbId,
      isInteractive,
      focusThumbOnChange,
      min,
      max,
      isDragging,
      activeIndex,
      orientation,
      onKeyDown,
      onFocus,
      onBlur
    ]
  );
  return {
    values,
    isFocused,
    isDragging,
    isVertical,
    stepUp,
    stepDown,
    reset,
    setActiveIndex,
    getThumbId,
    getInputId,
    getMarkerId,
    getContainerProps,
    getInputProps,
    getTrackProps,
    getFilledTrackProps,
    getMarkProps,
    getThumbProps
  };
};
var [RangeSliderProvider, useRangeSliderContext] = (0, import_utils2.createContext)({
  name: "RangeSliderContext",
  errorMessage: `useRangeSliderContext returned is 'undefined'. Seems you forgot to wrap the components in "<RangeSlider />" `
});
var RangeSlider = (0, import_core2.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core2.useMultiComponentStyle)("RangeSlider", props);
  const {
    className,
    children,
    inputProps,
    trackProps,
    filledTrackProps,
    thumbProps,
    trackColor,
    filledTrackColor,
    trackSize,
    thumbColor,
    thumbSize,
    ...rest
  } = (0, import_core2.omitThemeProps)(mergedProps);
  const {
    isVertical,
    getContainerProps,
    getInputProps,
    getTrackProps,
    getFilledTrackProps,
    getMarkProps,
    getThumbProps
  } = useRangeSlider(rest);
  const css = { ...styles.container };
  const validChildren = (0, import_utils2.getValidChildren)(children);
  const [customRangeSliderTrack] = (0, import_utils2.findChildren)(validChildren, RangeSliderTrack);
  const [customRangeSliderStartThumb] = (0, import_utils2.findChildren)(
    validChildren,
    RangeSliderStartThumb
  );
  const [customRangeSliderEndThumb] = (0, import_utils2.findChildren)(
    validChildren,
    RangeSliderEndThumb
  );
  const hasRangeSliderStartThumb = (0, import_utils2.includesChildren)(
    validChildren,
    RangeSliderStartThumb
  );
  const hasRangeSliderEndThumb = (0, import_utils2.includesChildren)(
    validChildren,
    RangeSliderEndThumb
  );
  const cloneChildren = !(0, import_utils2.isEmpty)(validChildren) ? (0, import_utils2.omitChildren)(
    validChildren,
    RangeSliderTrack,
    RangeSliderStartThumb,
    RangeSliderEndThumb
  ) : children;
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    RangeSliderProvider,
    {
      value: {
        isVertical,
        getTrackProps,
        getFilledTrackProps,
        getMarkProps,
        getThumbProps,
        getInputProps,
        trackProps,
        trackColor,
        trackSize,
        filledTrackProps,
        filledTrackColor,
        thumbProps,
        thumbColor,
        thumbSize,
        inputProps,
        styles
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
        import_core2.ui.div,
        {
          className: (0, import_utils2.cx)("ui-slider", className),
          __css: css,
          ...getContainerProps({}, ref),
          children: [
            customRangeSliderTrack != null ? customRangeSliderTrack : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RangeSliderTrack, {}),
            cloneChildren,
            customRangeSliderStartThumb != null ? customRangeSliderStartThumb : !hasRangeSliderStartThumb ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RangeSliderStartThumb, {}) : null,
            customRangeSliderEndThumb != null ? customRangeSliderEndThumb : !hasRangeSliderEndThumb ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RangeSliderEndThumb, {}) : null
          ]
        }
      )
    }
  );
});
var RangeSliderTrack = (0, import_core2.forwardRef)(
  ({ className, children, filledTrackProps, ...rest }, ref) => {
    const {
      styles,
      trackProps,
      trackColor,
      trackSize,
      isVertical,
      getTrackProps
    } = useRangeSliderContext();
    const css = { ...styles.track };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.div,
      {
        className: (0, import_utils2.cx)("ui-slider__track", className),
        __css: css,
        ...getTrackProps(
          {
            ...trackColor ? { bg: trackColor } : {},
            ...trackSize ? isVertical ? { w: trackSize } : { h: trackSize } : {},
            ...trackProps,
            ...rest
          },
          ref
        ),
        children: children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RangeSliderFilledTrack, { ...filledTrackProps })
      }
    );
  }
);
var RangeSliderFilledTrack = (0, import_core2.forwardRef)(({ className, ...rest }, ref) => {
  const { styles, filledTrackProps, filledTrackColor, getFilledTrackProps } = useRangeSliderContext();
  const css = { ...styles.filledTrack };
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_core2.ui.div,
    {
      className: (0, import_utils2.cx)("ui-slider__track-filled", className),
      __css: css,
      ...getFilledTrackProps(
        {
          ...filledTrackColor ? { bg: filledTrackColor } : {},
          ...filledTrackProps,
          ...rest
        },
        ref
      )
    }
  );
});
var RangeSliderMark = (0, import_core2.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles, getMarkProps } = useRangeSliderContext();
    const css = {
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      ...styles.mark
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.div,
      {
        className: (0, import_utils2.cx)("ui-slider__mark", className),
        __css: css,
        ...getMarkProps(rest, ref)
      }
    );
  }
);
var RangeSliderThumb = (0, import_core2.forwardRef)(({ className, index, children, ...rest }, ref) => {
  const {
    styles,
    thumbProps,
    thumbColor,
    thumbSize,
    inputProps,
    getThumbProps,
    getInputProps
  } = useRangeSliderContext();
  const css = { ...styles.thumb };
  const { children: propChildren } = thumbProps != null ? thumbProps : {};
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    import_core2.ui.div,
    {
      className: (0, import_utils2.cx)("ui-slider__thumb", className),
      __css: css,
      ...getThumbProps(
        {
          index,
          ...thumbColor ? { bg: thumbColor } : {},
          ...thumbSize ? { boxSize: thumbSize } : {},
          ...thumbProps,
          ...rest
        },
        ref
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core2.ui.input, { ...getInputProps({ ...inputProps, index }, ref) }),
        children != null ? children : propChildren
      ]
    }
  );
});
var RangeSliderStartThumb = (0, import_core2.forwardRef)(
  (rest, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RangeSliderThumb, { ref, index: 0, ...rest });
  }
);
var RangeSliderEndThumb = (0, import_core2.forwardRef)(
  (rest, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RangeSliderThumb, { ref, index: 1, ...rest });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RangeSlider,
  RangeSliderEndThumb,
  RangeSliderFilledTrack,
  RangeSliderMark,
  RangeSliderStartThumb,
  RangeSliderTrack,
  Slider,
  SliderFilledTrack,
  SliderMark,
  SliderThumb,
  SliderTrack
});
//# sourceMappingURL=index.js.map