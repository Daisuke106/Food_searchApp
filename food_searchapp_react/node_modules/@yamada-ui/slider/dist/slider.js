"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/slider.tsx
var slider_exports = {};
__export(slider_exports, {
  Slider: () => Slider,
  SliderFilledTrack: () => SliderFilledTrack,
  SliderMark: () => SliderMark,
  SliderThumb: () => SliderThumb,
  SliderTrack: () => SliderTrack,
  useSlider: () => useSlider
});
module.exports = __toCommonJS(slider_exports);
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_latest_ref = require("@yamada-ui/use-latest-ref");
var import_use_pan_event = require("@yamada-ui/use-pan-event");
var import_use_size = require("@yamada-ui/use-size");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var useSlider = ({
  focusThumbOnChange = true,
  ...props
}) => {
  if (!focusThumbOnChange)
    props.isReadOnly = true;
  let {
    id,
    name,
    min = 0,
    max = 100,
    step = 1,
    defaultValue,
    orientation = "horizontal",
    isReversed,
    required,
    disabled,
    readOnly,
    value: valueProp,
    onChange,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    onFocus,
    onBlur,
    "aria-readonly": ariaReadonly,
    ...rest
  } = (0, import_form_control.useFormControlProps)(props);
  const formControlProps = (0, import_utils.pickObject)(rest, import_form_control.formControlProperties);
  if (max < min)
    throw new Error("Do not assign a number less than 'min' to 'max'");
  const onChangeStart = (0, import_utils.useCallbackRef)(onChangeStartProp);
  const onChangeEnd = (0, import_utils.useCallbackRef)(onChangeEndProp);
  const [computedValue, setValue] = (0, import_use_controllable_state.useControllableState)({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : min + (max - min) / 2,
    onChange
  });
  const [isDragging, setDragging] = (0, import_react.useState)(false);
  const [isFocused, setFocused] = (0, import_react.useState)(false);
  const isInteractive = !(disabled || readOnly);
  const tenStep = (max - min) / 10;
  const oneStep = step || (max - min) / 100;
  const value = (0, import_utils.clampNumber)(computedValue, min, max);
  const reversedValue = max - value + min;
  const thumbValue = isReversed ? reversedValue : value;
  const thumbPercent = (0, import_utils.valueToPercent)(thumbValue, min, max);
  const isVertical = orientation === "vertical";
  const latestRef = (0, import_use_latest_ref.useLatestRef)({
    min,
    max,
    step,
    value,
    isInteractive,
    focusThumbOnChange
  });
  const eventSourceRef = (0, import_react.useRef)(null);
  const containerRef = (0, import_react.useRef)(null);
  const trackRef = (0, import_react.useRef)(null);
  const thumbRef = (0, import_react.useRef)(null);
  const thumbSize = (0, import_use_size.useSize)(thumbRef);
  (0, import_use_pan_event.usePanEvent)(containerRef, {
    onSessionStart: (ev) => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(true);
      focusThumb();
      setValueFromPointer(ev);
      onChangeStart(value2);
    },
    onSessionEnd: () => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(false);
      onChangeEnd(value2);
    },
    onMove: (ev) => {
      const { isInteractive: isInteractive2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setValueFromPointer(ev);
    }
  });
  const getValueFromPointer = (0, import_react.useCallback)(
    (ev) => {
      var _a, _b;
      if (!trackRef.current)
        return;
      const { min: min2, max: max2, step: step2 } = latestRef.current;
      eventSourceRef.current = "pointer";
      const { bottom, left, height, width } = trackRef.current.getBoundingClientRect();
      const { clientX, clientY } = (_b = (_a = ev.touches) == null ? void 0 : _a[0]) != null ? _b : ev;
      const diff = isVertical ? bottom - clientY : clientX - left;
      const length = isVertical ? height : width;
      let percent = diff / length;
      if (isReversed)
        percent = 1 - percent;
      let nextValue = (0, import_utils.percentToValue)(percent, min2, max2);
      if (step2)
        nextValue = parseFloat((0, import_utils.roundNumberToStep)(nextValue, min2, step2));
      nextValue = (0, import_utils.clampNumber)(nextValue, min2, max2);
      return nextValue;
    },
    [isVertical, isReversed, latestRef]
  );
  const setValueFromPointer = (ev) => {
    const { value: value2 } = latestRef.current;
    const nextValue = getValueFromPointer(ev);
    if (nextValue != null && nextValue !== value2)
      setValue(nextValue);
  };
  const focusThumb = (0, import_react.useCallback)(() => {
    const { focusThumbOnChange: focusThumbOnChange2 } = latestRef.current;
    if (focusThumbOnChange2)
      setTimeout(() => {
        var _a;
        return (_a = thumbRef.current) == null ? void 0 : _a.focus();
      });
  }, [latestRef]);
  const constrain = (0, import_react.useCallback)(
    (value2) => {
      const { isInteractive: isInteractive2, min: min2, max: max2 } = latestRef.current;
      if (!isInteractive2)
        return;
      value2 = parseFloat((0, import_utils.roundNumberToStep)(value2, min2, oneStep));
      value2 = (0, import_utils.clampNumber)(value2, min2, max2);
      setValue(value2);
    },
    [oneStep, setValue, latestRef]
  );
  const stepUp = (0, import_react.useCallback)(
    (step2 = oneStep) => constrain(isReversed ? value - step2 : value + step2),
    [constrain, isReversed, oneStep, value]
  );
  const stepDown = (0, import_react.useCallback)(
    (step2 = oneStep) => constrain(isReversed ? value + step2 : value - step2),
    [constrain, isReversed, oneStep, value]
  );
  const reset = (0, import_react.useCallback)(
    () => constrain(defaultValue || 0),
    [constrain, defaultValue]
  );
  const stepTo = (0, import_react.useCallback)((value2) => constrain(value2), [constrain]);
  const onKeyDown = (0, import_react.useCallback)(
    (ev) => {
      const { min: min2, max: max2 } = latestRef.current;
      const actions = {
        ArrowRight: () => stepUp(),
        ArrowUp: () => stepUp(),
        ArrowLeft: () => stepDown(),
        ArrowDown: () => stepDown(),
        PageUp: () => stepUp(tenStep),
        PageDown: () => stepDown(tenStep),
        Home: () => constrain(min2),
        End: () => constrain(max2)
      };
      const action = actions[ev.key];
      if (!action)
        return;
      ev.preventDefault();
      ev.stopPropagation();
      action(ev);
      eventSourceRef.current = "keyboard";
    },
    [constrain, latestRef, stepDown, stepUp, tenStep]
  );
  (0, import_utils.useUpdateEffect)(() => {
    const { value: value2 } = latestRef.current;
    focusThumb();
    if (eventSourceRef.current === "keyboard")
      onChangeEnd(value2);
  }, [value, onChangeEnd]);
  const getContainerProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const { width: w, height: h } = thumbSize != null ? thumbSize : { width: 0, height: 0 };
      const style = {
        ...props2.style,
        position: "relative",
        userSelect: "none",
        touchAction: "none",
        WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
        outline: 0,
        ...isVertical ? { paddingLeft: w / 2, paddingRight: w / 2 } : { paddingTop: h / 2, paddingBottom: h / 2 }
      };
      return {
        ...rest,
        ...props2,
        ref: (0, import_utils.mergeRefs)(ref, containerRef),
        tabIndex: -1,
        style
      };
    },
    [isVertical, rest, thumbSize]
  );
  const getInputProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => ({
      "aria-readonly": ariaReadonly,
      ...formControlProps,
      ...props2,
      id,
      ref,
      type: "hidden",
      name,
      value,
      required,
      disabled,
      readOnly
    }),
    [
      ariaReadonly,
      disabled,
      formControlProps,
      id,
      name,
      readOnly,
      required,
      value
    ]
  );
  const getTrackProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const style = {
        ...props2.style,
        position: "absolute",
        ...isVertical ? {
          left: "50%",
          transform: "translateX(-50%)",
          height: "100%"
        } : {
          top: "50%",
          transform: "translateY(-50%)",
          width: "100%"
        }
      };
      return {
        ...formControlProps,
        ...props2,
        ref: (0, import_utils.mergeRefs)(ref, trackRef),
        style
      };
    },
    [isVertical, formControlProps]
  );
  const getFilledTrackProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const n = Math.abs(isReversed ? 100 - thumbPercent : thumbPercent);
      const style = {
        ...props2.style,
        position: "absolute",
        ...isVertical ? {
          left: "50%",
          transform: "translateX(-50%)",
          height: `${n}%`,
          ...isReversed ? { top: "0%" } : { bottom: "0%" }
        } : {
          top: "50%",
          transform: "translateY(-50%)",
          width: `${n}%`,
          ...isReversed ? { right: "0%" } : { left: "0%" }
        }
      };
      return {
        ...formControlProps,
        ...props2,
        ref,
        style
      };
    },
    [isReversed, isVertical, formControlProps, thumbPercent]
  );
  const getMarkProps = (0, import_react.useCallback)(
    (props2, ref = null) => {
      let n = (0, import_utils.valueToPercent)(props2.value, min, max);
      n = isReversed ? 100 - n : n;
      const style = {
        ...props2.style,
        position: "absolute",
        pointerEvents: "none",
        ...isVertical ? { bottom: `${n}%` } : { left: `${n}%` }
      };
      return {
        ...formControlProps,
        ...props2,
        ref,
        "aria-hidden": true,
        "data-invalid": (0, import_utils.dataAttr)(props2.value < min || max < props2.value),
        "data-highlighted": (0, import_utils.dataAttr)(props2.value <= value),
        style
      };
    },
    [isReversed, isVertical, max, min, formControlProps, value]
  );
  const getThumbProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const n = thumbPercent;
      const { width: w, height: h } = thumbSize != null ? thumbSize : { width: 0, height: 0 };
      const style = {
        ...props2.style,
        position: "absolute",
        userSelect: "none",
        touchAction: "none",
        ...isVertical ? { bottom: `calc(${n}% - ${h / 2}px)` } : { left: `calc(${n}% - ${w / 2}px)` }
      };
      return {
        "aria-label": "Slider thumb",
        "aria-readonly": ariaReadonly,
        ...formControlProps,
        ...props2,
        ref: (0, import_utils.mergeRefs)(ref, thumbRef),
        tabIndex: isInteractive && focusThumbOnChange ? 0 : void 0,
        role: "slider",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value,
        "data-active": (0, import_utils.dataAttr)(isDragging && focusThumbOnChange),
        "aria-orientation": orientation,
        onKeyDown: (0, import_utils.handlerAll)(props2.onKeyDown, onKeyDown),
        onFocus: (0, import_utils.handlerAll)(props2.onFocus, onFocus, () => setFocused(true)),
        onBlur: (0, import_utils.handlerAll)(props2.onBlur, onBlur, () => setFocused(false)),
        style
      };
    },
    [
      thumbPercent,
      thumbSize,
      isVertical,
      ariaReadonly,
      formControlProps,
      isInteractive,
      focusThumbOnChange,
      min,
      max,
      value,
      isDragging,
      orientation,
      onKeyDown,
      onFocus,
      onBlur
    ]
  );
  return {
    value,
    isFocused,
    isDragging,
    isVertical,
    stepUp,
    stepDown,
    reset,
    stepTo,
    getContainerProps,
    getInputProps,
    getTrackProps,
    getFilledTrackProps,
    getMarkProps,
    getThumbProps
  };
};
var [SliderProvider, useSliderContext] = (0, import_utils.createContext)({
  name: "SliderContext",
  errorMessage: `useSliderContext returned is 'undefined'. Seems you forgot to wrap the components in "<Slider />" `
});
var Slider = (0, import_core.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Slider", props);
  const {
    className,
    children,
    inputProps,
    trackProps,
    filledTrackProps,
    thumbProps,
    trackColor,
    filledTrackColor,
    trackSize,
    thumbColor,
    thumbSize,
    ...rest
  } = (0, import_core.omitThemeProps)(mergedProps);
  const {
    isVertical,
    getContainerProps,
    getInputProps,
    getTrackProps,
    getFilledTrackProps,
    getMarkProps,
    getThumbProps
  } = useSlider(rest);
  const css = { ...styles.container };
  const validChildren = (0, import_utils.getValidChildren)(children);
  const [customSliderTrack] = (0, import_utils.findChildren)(validChildren, SliderTrack);
  const [customSliderThumb] = (0, import_utils.findChildren)(validChildren, SliderThumb);
  const hasSliderThumb = (0, import_utils.includesChildren)(validChildren, SliderThumb);
  const cloneChildren = !(0, import_utils.isEmpty)(validChildren) ? (0, import_utils.omitChildren)(validChildren, SliderTrack, SliderThumb) : children;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    SliderProvider,
    {
      value: {
        isVertical,
        getTrackProps,
        getFilledTrackProps,
        getMarkProps,
        getThumbProps,
        trackProps,
        trackColor,
        trackSize,
        filledTrackProps,
        filledTrackColor,
        thumbProps,
        thumbColor,
        thumbSize,
        styles
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
        import_core.ui.div,
        {
          className: (0, import_utils.cx)("ui-slider", className),
          __css: css,
          ...getContainerProps(),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.ui.input, { ...getInputProps(inputProps, ref) }),
            customSliderTrack != null ? customSliderTrack : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SliderTrack, {}),
            cloneChildren,
            customSliderThumb != null ? customSliderThumb : !hasSliderThumb ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SliderThumb, {}) : null
          ]
        }
      )
    }
  );
});
var SliderTrack = (0, import_core.forwardRef)(
  ({ className, children, filledTrackProps, ...rest }, ref) => {
    const {
      styles,
      trackProps,
      trackColor,
      trackSize,
      isVertical,
      getTrackProps
    } = useSliderContext();
    const css = { ...styles.track };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__track", className),
        __css: css,
        ...getTrackProps(
          {
            ...trackColor ? { bg: trackColor } : {},
            ...trackSize ? isVertical ? { w: trackSize } : { h: trackSize } : {},
            ...trackProps,
            ...rest
          },
          ref
        ),
        children: children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SliderFilledTrack, { ...filledTrackProps })
      }
    );
  }
);
var SliderFilledTrack = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles, filledTrackProps, filledTrackColor, getFilledTrackProps } = useSliderContext();
    const css = { ...styles.filledTrack };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__track-filled", className),
        __css: css,
        ...getFilledTrackProps(
          {
            ...filledTrackColor ? { bg: filledTrackColor } : {},
            ...filledTrackProps,
            ...rest
          },
          ref
        )
      }
    );
  }
);
var SliderMark = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles, getMarkProps } = useSliderContext();
    const css = {
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      ...styles.mark
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__mark", className),
        __css: css,
        ...getMarkProps(rest, ref)
      }
    );
  }
);
var SliderThumb = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles, thumbProps, thumbColor, thumbSize, getThumbProps } = useSliderContext();
    const css = { ...styles.thumb };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils.cx)("ui-slider__thumb", className),
        __css: css,
        ...getThumbProps(
          {
            ...thumbColor ? { bg: thumbColor } : {},
            ...thumbSize ? { boxSize: thumbSize } : {},
            ...thumbProps,
            ...rest
          },
          ref
        )
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Slider,
  SliderFilledTrack,
  SliderMark,
  SliderThumb,
  SliderTrack,
  useSlider
});
//# sourceMappingURL=slider.js.map