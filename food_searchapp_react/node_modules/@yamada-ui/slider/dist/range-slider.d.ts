import * as _yamada_ui_core from '@yamada-ui/core';
import { UIPropGetter, RequiredUIPropGetter, HTMLUIProps, ThemeProps, CSSUIProps } from '@yamada-ui/core';
import * as react from 'react';
import { FormControlOptions } from '@yamada-ui/form-control';

type UseRangeSliderProps = FormControlOptions & {
    /**
     * The base `id` to use for the slider.
     */
    id?: string;
    /**
     * The name attribute of the hidden `input` field.
     * This is particularly useful in forms.
     */
    name?: string | [string, string];
    /**
     * The minimum allowed value of the slider. Cannot be greater than max.
     *
     * @default 0
     */
    min?: number;
    /**
     * The maximum allowed value of the slider. Cannot be less than min.
     *
     * @default 100
     */
    max?: number;
    /**
     * The step in which increments or decrements have to be made.
     *
     * @default 1
     */
    step?: number;
    /**
     * The value of the slider.
     */
    value?: [number, number];
    /**
     * The initial value of the slider.
     */
    defaultValue?: [number, number];
    /**
     * The orientation of the slider.
     *
     * @default 'horizontal'
     */
    orientation?: "horizontal" | "vertical";
    /**
     * If `true`, the value will be incremented or decremented in reverse.
     */
    isReversed?: boolean;
    /**
     * If `false`, the slider handle will not capture focus when value changes.
     *
     * @default true
     */
    focusThumbOnChange?: boolean;
    /**
     * The minimum distance between slider thumbs.
     * Useful for preventing the thumbs from being too close together.
     *
     * @default 0
     */
    betweenThumbs?: number;
    /**
     * Function called when the user starts selecting a new value.
     */
    onChangeStart?: (value: [number, number]) => void;
    /**
     * Function called when the user is done selecting a new value.
     */
    onChangeEnd?: (value: [number, number]) => void;
    /**
     * Function called whenever the slider value changes.
     */
    onChange?: (value: [number, number]) => void;
};
declare const useRangeSlider: ({ focusThumbOnChange, ...props }: UseRangeSliderProps) => {
    values: [number, number];
    isFocused: boolean;
    isDragging: boolean;
    isVertical: boolean;
    stepUp: (i: number, step?: number) => void;
    stepDown: (i: number, step?: number) => void;
    reset: () => void;
    setActiveIndex: react.Dispatch<react.SetStateAction<number>>;
    getThumbId: (i: number) => string;
    getInputId: (i: number) => string;
    getMarkerId: (i: number) => string;
    getContainerProps: UIPropGetter;
    getInputProps: RequiredUIPropGetter<"input", {
        index: number;
    }>;
    getTrackProps: UIPropGetter;
    getFilledTrackProps: UIPropGetter;
    getMarkProps: RequiredUIPropGetter<"div", {
        value: number;
    }>;
    getThumbProps: RequiredUIPropGetter<"div", {
        index: number;
    }>;
};
type ReturnUseRangeSliderProps = ReturnType<typeof useRangeSlider>;
type RangeSliderOptions = {
    /**
     * Props for range slider input element.
     */
    inputProps?: HTMLUIProps<"input">;
    /**
     * Props for range slider track element.
     */
    trackProps?: RangeSliderTrackProps;
    /**
     * Props for range slider filled track element.
     */
    filledTrackProps?: RangeSliderFilledTrackProps;
    /**
     * Props for range slider thumb element.
     */
    thumbProps?: RangeSliderThumbProps;
    /**
     * The CSS `color` property. Used in `color` of track element.
     */
    trackColor?: CSSUIProps["color"];
    /**
     * The CSS `color` property. Used in `color` of filled track element.
     */
    filledTrackColor?: CSSUIProps["color"];
    /**
     * The CSS `height` property. Used in `height` of track element.
     */
    trackSize?: CSSUIProps["h"];
    /**
     * The CSS `background` property. Used in `background` of thumb element.
     */
    thumbColor?: CSSUIProps["bg"];
    /**
     * The CSS `box-size` property. Used in `box-size` of thumb element.
     */
    thumbSize?: CSSUIProps["boxSize"];
};
type RangeSliderProps = Omit<HTMLUIProps<"div">, keyof UseRangeSliderProps> & ThemeProps<"RangeSlider"> & UseRangeSliderProps & RangeSliderOptions;
/**
 * `RangeSlider` is a component used for users to select a range of related values.
 *
 * @see Docs https://yamada-ui.com/components/forms/range-slider
 */
declare const RangeSlider: _yamada_ui_core.Component<"div", RangeSliderProps>;
type RangeSliderTrackProps = HTMLUIProps<"div"> & Pick<RangeSliderOptions, "filledTrackProps">;
declare const RangeSliderTrack: _yamada_ui_core.Component<"div", RangeSliderTrackProps>;
type RangeSliderFilledTrackProps = HTMLUIProps<"div">;
declare const RangeSliderFilledTrack: _yamada_ui_core.Component<"div", RangeSliderFilledTrackProps>;
type RangeSliderMarkProps = HTMLUIProps<"div"> & {
    value: number;
};
declare const RangeSliderMark: _yamada_ui_core.Component<"div", RangeSliderMarkProps>;
type RangeSliderThumbProps = HTMLUIProps<"div">;
declare const RangeSliderStartThumb: _yamada_ui_core.Component<"div", RangeSliderThumbProps>;
declare const RangeSliderEndThumb: _yamada_ui_core.Component<"div", RangeSliderThumbProps>;

export { RangeSlider, RangeSliderEndThumb, RangeSliderFilledTrack, type RangeSliderFilledTrackProps, RangeSliderMark, type RangeSliderMarkProps, type RangeSliderProps, RangeSliderStartThumb, type RangeSliderThumbProps, RangeSliderTrack, type RangeSliderTrackProps, type ReturnUseRangeSliderProps, type UseRangeSliderProps, useRangeSlider };
