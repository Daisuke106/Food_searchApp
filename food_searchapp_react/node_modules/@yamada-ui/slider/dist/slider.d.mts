import * as _yamada_ui_core from '@yamada-ui/core';
import { UIPropGetter, RequiredUIPropGetter, HTMLUIProps, ThemeProps, CSSUIProps } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';

type UseSliderProps = FormControlOptions & {
    /**
     * The base `id` to use for the slider.
     */
    id?: string;
    /**
     * The name attribute of the hidden `input` field.
     * This is particularly useful in forms.
     */
    name?: string;
    /**
     * The minimum allowed value of the slider. Cannot be greater than max.
     *
     * @default 0
     */
    min?: number;
    /**
     * The maximum allowed value of the slider. Cannot be less than min.
     *
     * @default 100
     */
    max?: number;
    /**
     * The step in which increments or decrements have to be made.
     *
     * @default 1
     */
    step?: number;
    /**
     * The value of the slider.
     */
    value?: number;
    /**
     * The initial value of the slider.
     */
    defaultValue?: number;
    /**
     * The orientation of the slider.
     *
     * @default 'horizontal'
     */
    orientation?: "horizontal" | "vertical";
    /**
     * If `true`, the value will be incremented or decremented in reverse.
     */
    isReversed?: boolean;
    /**
     * If `false`, the slider handle will not capture focus when value changes.
     *
     * @default true
     */
    focusThumbOnChange?: boolean;
    /**
     * Function called when the user starts selecting a new value.
     */
    onChangeStart?: (value: number) => void;
    /**
     * Function called when the user is done selecting a new value.
     */
    onChangeEnd?: (value: number) => void;
    /**
     * Function called whenever the slider value changes.
     */
    onChange?: (value: number) => void;
};
declare const useSlider: ({ focusThumbOnChange, ...props }: UseSliderProps) => {
    value: number;
    isFocused: boolean;
    isDragging: boolean;
    isVertical: boolean;
    stepUp: (step?: number) => void;
    stepDown: (step?: number) => void;
    reset: () => void;
    stepTo: (value: number) => void;
    getContainerProps: UIPropGetter;
    getInputProps: UIPropGetter;
    getTrackProps: UIPropGetter;
    getFilledTrackProps: UIPropGetter;
    getMarkProps: RequiredUIPropGetter<"div", {
        value: number;
    }>;
    getThumbProps: UIPropGetter;
};
type ReturnUseSlider = ReturnType<typeof useSlider>;
type SliderOptions = {
    /**
     * Props for slider input element.
     */
    inputProps?: HTMLUIProps<"input">;
    /**
     * Props for slider track element.
     */
    trackProps?: SliderTrackProps;
    /**
     * Props for slider filled track element.
     */
    filledTrackProps?: SliderFilledTrackProps;
    /**
     * Props for slider thumb element.
     */
    thumbProps?: SliderThumbProps;
    /**
     * The CSS `color` property. Used in `color` of track element.
     */
    trackColor?: CSSUIProps["color"];
    /**
     * The CSS `color` property. Used in `color` of filled track element.
     */
    filledTrackColor?: CSSUIProps["color"];
    /**
     * The CSS `height` property. Used in `height` of track element.
     */
    trackSize?: CSSUIProps["h"];
    /**
     * The CSS `background` property. Used in `background` of thumb element.
     */
    thumbColor?: CSSUIProps["bg"];
    /**
     * The CSS `box-size` property. Used in `box-size` of thumb element.
     */
    thumbSize?: CSSUIProps["boxSize"];
};
type SliderProps = Omit<HTMLUIProps<"div">, keyof UseSliderProps> & ThemeProps<"Slider"> & UseSliderProps & SliderOptions;
/**
 * `Slider` is a component used for allowing users to select a value from a range.
 *
 * @see Docs https://yamada-ui.com/components/forms/slider
 */
declare const Slider: _yamada_ui_core.Component<"input", SliderProps>;
type SliderTrackProps = HTMLUIProps<"div"> & Pick<SliderOptions, "filledTrackProps">;
declare const SliderTrack: _yamada_ui_core.Component<"div", SliderTrackProps>;
type SliderFilledTrackProps = HTMLUIProps<"div">;
declare const SliderFilledTrack: _yamada_ui_core.Component<"div", SliderFilledTrackProps>;
type SliderMarkProps = HTMLUIProps<"div"> & {
    value: number;
};
declare const SliderMark: _yamada_ui_core.Component<"div", SliderMarkProps>;
type SliderThumbProps = HTMLUIProps<"div">;
declare const SliderThumb: _yamada_ui_core.Component<"div", SliderThumbProps>;

export { type ReturnUseSlider, Slider, SliderFilledTrack, type SliderFilledTrackProps, SliderMark, type SliderMarkProps, type SliderProps, SliderThumb, type SliderThumbProps, SliderTrack, type SliderTrackProps, type UseSliderProps, useSlider };
