import * as _yamada_ui_core from '@yamada-ui/core';
import { UIPropGetter, HTMLUIProps, ThemeProps, ColorModeToken, CSS } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';
import { PropGetter } from '@yamada-ui/utils';
import { ReactNode } from 'react';

type UseEditableProps = FormControlOptions & {
    /**
     * The placeholder text when the value is empty.
     */
    placeholder?: string;
    /**
     * The value of the Editable in both edit & preview mode.
     */
    value?: string;
    /**
     * The initial value of the Editable in both edit & preview mode.
     */
    defaultValue?: string;
    /**
     * If `true`, the Editable will start with edit mode by default.
     */
    startWithEditView?: boolean;
    /**
     * If `true`, the read only view, has a `tabIndex` set to `0`
     * so it can receive focus via the keyboard or click.
     *
     * @default true
     */
    isPreviewFocusable?: boolean;
    /**
     * If `true`, it'll update the value onBlur and turn off the edit mode.
     *
     * @default true
     */
    submitOnBlur?: boolean;
    /**
     * If `true`, the input's text will be highlighted on focus.
     *
     * @default true
     */
    selectAllOnFocus?: boolean;
    /**
     * A callback invoked when user changes input.
     */
    onChange?: (value: string) => void;
    /**
     * Callback invoked when user cancels input with the `Esc` key.
     * It provides the last confirmed value as argument.
     */
    onCancel?: (preValue: string) => void;
    /**
     * A callback invoked when user confirms value with `enter` key or by blurring input.
     */
    onSubmit?: (value: string) => void;
    /**
     * A callback invoked once the user enters edit mode.
     */
    onEdit?: () => void;
};
declare const useEditable: (props: UseEditableProps) => {
    isEditing: boolean;
    value: string;
    onEdit: () => void;
    onCancel: () => void;
    onSubmit: () => void;
    getPreviewProps: UIPropGetter;
    getInputProps: UIPropGetter<"input">;
    getTextareaProps: UIPropGetter<"textarea">;
    getEditProps: PropGetter;
    getSubmitProps: PropGetter;
    getCancelProps: PropGetter;
};
type UseEditableReturn = ReturnType<typeof useEditable>;
declare const useEditableControl: () => {
    isEditing: boolean;
    getEditProps: PropGetter;
    getCancelProps: PropGetter;
    getSubmitProps: PropGetter;
};
type EditableElementProps = Pick<UseEditableReturn, "isEditing" | "onSubmit" | "onCancel" | "onEdit">;
type EditableElement = (props: EditableElementProps) => ReactNode;
type EditableOptions = {
    /**
     * The border color when the input is focused.
     */
    focusBorderColor?: ColorModeToken<CSS.Property.BorderColor, "colors">;
    /**
     * The border color when the input is invalid.
     */
    errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, "colors">;
    children?: ReactNode | EditableElement;
};
type EditableProps = Omit<HTMLUIProps<"div">, "onChange" | "value" | "defaultValue" | "onSubmit" | "children"> & ThemeProps<"Editable"> & UseEditableProps & EditableOptions;
/**
 * `Editable` is a component used to obtain inline editable text input.
 *
 * @see Docs https://yamada-ui.com/components/forms/editable
 */
declare const Editable: _yamada_ui_core.Component<"div", EditableProps>;
type EditablePreviewProps = HTMLUIProps<"span">;
declare const EditablePreview: _yamada_ui_core.Component<"span", EditablePreviewProps>;
type EditableInputProps = HTMLUIProps<"input">;
declare const EditableInput: _yamada_ui_core.Component<"input", EditableInputProps>;
type EditableTextareaProps = HTMLUIProps<"textarea">;
declare const EditableTextarea: _yamada_ui_core.Component<"textarea", EditableTextareaProps>;

export { Editable, EditableInput, type EditableInputProps, EditablePreview, type EditablePreviewProps, type EditableProps, EditableTextarea, type EditableTextareaProps, type UseEditableProps, type UseEditableReturn, useEditable, useEditableControl };
