"use client"

// src/editable.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import {
  formControlProperties,
  useFormControlProps
} from "@yamada-ui/form-control";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import { useFocusOnPointerDown } from "@yamada-ui/use-focus";
import {
  createContext,
  cx,
  runIfFunc,
  useCallbackRef,
  useSafeLayoutEffect,
  useUpdateEffect,
  isContains,
  handlerAll,
  mergeRefs,
  pickObject
} from "@yamada-ui/utils";
import { useCallback, useEffect, useRef, useState } from "react";
import { jsx } from "react/jsx-runtime";
var useEditable = (props) => {
  const {
    id,
    placeholder,
    value: valueProp,
    onChange: onChangeProp,
    onCancel: onCancelProp,
    onSubmit: onSubmitProp,
    onEdit: onEditProp,
    defaultValue,
    required,
    disabled,
    readOnly,
    startWithEditView,
    isPreviewFocusable = true,
    submitOnBlur = true,
    selectAllOnFocus = true,
    ...rest
  } = useFormControlProps(props);
  const onEditRef = useCallbackRef(onEditProp);
  const formControlProps = pickObject(rest, formControlProperties);
  const [isEditing, setIsEditing] = useState(
    !!startWithEditView && !disabled
  );
  const [value, setValue] = useControllableState({
    defaultValue: defaultValue || "",
    value: valueProp,
    onChange: onChangeProp
  });
  const isInteractive = !isEditing && !disabled;
  const isValueEmpty = value.length === 0;
  const [prevValue, setPrevValue] = useState(value);
  const inputRef = useRef(null);
  const previewRef = useRef(null);
  const editRef = useRef(null);
  const cancelRef = useRef(null);
  const submitRef = useRef(null);
  useFocusOnPointerDown({
    ref: inputRef,
    enabled: isEditing,
    elements: [cancelRef, submitRef]
  });
  useSafeLayoutEffect(() => {
    var _a, _b;
    if (!isEditing)
      return;
    (_a = inputRef.current) == null ? void 0 : _a.focus();
    if (selectAllOnFocus)
      (_b = inputRef.current) == null ? void 0 : _b.select();
  }, []);
  useUpdateEffect(() => {
    var _a, _b, _c;
    if (!isEditing) {
      (_a = editRef.current) == null ? void 0 : _a.focus();
      return;
    }
    (_b = inputRef.current) == null ? void 0 : _b.focus();
    if (selectAllOnFocus)
      (_c = inputRef.current) == null ? void 0 : _c.select();
    onEditRef();
  }, [isEditing, onEditRef, selectAllOnFocus]);
  useEffect(() => {
    if (isEditing)
      return;
    const el = inputRef.current;
    const activeEl = el == null ? void 0 : el.ownerDocument.activeElement;
    if (activeEl === el)
      el == null ? void 0 : el.blur();
  }, [isEditing]);
  const onChange = useCallback(
    (ev) => setValue(ev.currentTarget.value),
    [setValue]
  );
  const onUpdatePrevValue = useCallback(() => setPrevValue(value), [value]);
  const onEdit = useCallback(() => {
    if (isInteractive)
      setIsEditing(true);
  }, [isInteractive]);
  const onCancel = useCallback(() => {
    setIsEditing(false);
    setValue(prevValue);
    onCancelProp == null ? void 0 : onCancelProp(prevValue);
  }, [prevValue, onCancelProp, setValue]);
  const onSubmit = useCallback(() => {
    setIsEditing(false);
    setPrevValue(value);
    onSubmitProp == null ? void 0 : onSubmitProp(value);
  }, [onSubmitProp, value]);
  const onKeyDown = useCallback(
    (ev) => {
      if (ev.key !== "Escape" && ev.key !== "Enter")
        return;
      ev.preventDefault();
      if (ev.key === "Escape") {
        onCancel();
      } else {
        const { shiftKey, metaKey } = ev;
        if (!shiftKey && !metaKey)
          onSubmit();
      }
    },
    [onCancel, onSubmit]
  );
  const onKeyDownWithoutSubmit = useCallback(
    (ev) => {
      if (ev.key !== "Escape")
        return;
      ev.preventDefault();
      onCancel();
    },
    [onCancel]
  );
  const onBlur = useCallback(
    (ev) => {
      var _a;
      if (!isEditing)
        return;
      const ownerDocument = ev.currentTarget.ownerDocument;
      const relatedTarget = (_a = ev.relatedTarget) != null ? _a : ownerDocument.activeElement;
      const targetIsCancel = isContains(cancelRef.current, relatedTarget);
      const targetIsSubmit = isContains(submitRef.current, relatedTarget);
      const isValidBlur = !targetIsCancel && !targetIsSubmit;
      if (!isValidBlur)
        return;
      if (submitOnBlur) {
        onSubmit();
      } else {
        onCancel();
      }
    },
    [isEditing, submitOnBlur, onSubmit, onCancel]
  );
  const getPreviewProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs(ref, previewRef),
      hidden: isEditing,
      tabIndex: isInteractive && isPreviewFocusable ? 0 : void 0,
      children: isValueEmpty ? placeholder : value,
      onFocus: handlerAll(props2.onFocus, onEdit, onUpdatePrevValue)
    }),
    [
      isEditing,
      isInteractive,
      isPreviewFocusable,
      isValueEmpty,
      onEdit,
      onUpdatePrevValue,
      placeholder,
      value
    ]
  );
  const getInputProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref: mergeRefs(ref, inputRef),
      id,
      placeholder,
      hidden: !isEditing,
      value,
      required,
      disabled,
      readOnly,
      onBlur: handlerAll(props2.onBlur, onBlur),
      onChange: handlerAll(props2.onChange, onChange),
      onKeyDown: handlerAll(props2.onKeyDown, onKeyDown),
      onFocus: handlerAll(props2.onFocus, onUpdatePrevValue)
    }),
    [
      disabled,
      id,
      isEditing,
      onBlur,
      onChange,
      onKeyDown,
      onUpdatePrevValue,
      placeholder,
      readOnly,
      required,
      formControlProps,
      value
    ]
  );
  const getTextareaProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref: mergeRefs(ref, inputRef),
      id,
      placeholder,
      hidden: !isEditing,
      value,
      required,
      disabled,
      readOnly,
      onBlur: handlerAll(props2.onBlur, onBlur),
      onChange: handlerAll(props2.onChange, onChange),
      onKeyDown: handlerAll(props2.onKeyDown, onKeyDownWithoutSubmit),
      onFocus: handlerAll(props2.onFocus, onUpdatePrevValue)
    }),
    [
      disabled,
      id,
      isEditing,
      onBlur,
      onChange,
      onKeyDownWithoutSubmit,
      onUpdatePrevValue,
      placeholder,
      readOnly,
      required,
      formControlProps,
      value
    ]
  );
  const getEditProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref: mergeRefs(ref, editRef),
      type: "button",
      disabled,
      readOnly,
      onClick: handlerAll(props2.onClick, onEdit)
    }),
    [disabled, onEdit, readOnly, formControlProps]
  );
  const getSubmitProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref: mergeRefs(submitRef, ref),
      type: "button",
      disabled,
      readOnly,
      onClick: handlerAll(props2.onClick, onSubmit)
    }),
    [disabled, onSubmit, readOnly, formControlProps]
  );
  const getCancelProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...formControlProps,
      ...props2,
      ref: mergeRefs(cancelRef, ref),
      type: "button",
      disabled,
      readOnly,
      onClick: handlerAll(props2.onClick, onCancel)
    }),
    [disabled, onCancel, readOnly, formControlProps]
  );
  return {
    isEditing,
    value,
    onEdit,
    onCancel,
    onSubmit,
    getPreviewProps,
    getInputProps,
    getTextareaProps,
    getEditProps,
    getSubmitProps,
    getCancelProps
  };
};
var useEditableControl = () => {
  const { isEditing, getEditProps, getCancelProps, getSubmitProps } = useEditableContext();
  return { isEditing, getEditProps, getCancelProps, getSubmitProps };
};
var [EditableProvider, useEditableContext] = createContext({
  name: "EditableContext",
  errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
});
var Editable = forwardRef(
  ({ focusBorderColor, errorBorderColor, ...props }, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle("Editable", {
      focusBorderColor,
      errorBorderColor,
      ...props
    });
    const {
      className,
      children,
      isInvalid,
      isReadOnly,
      isRequired,
      isDisabled,
      placeholder,
      value,
      defaultValue,
      startWithEditView,
      isPreviewFocusable,
      submitOnBlur,
      selectAllOnFocus,
      onChange,
      onCancel: onCancelProp,
      onSubmit: onSubmitProp,
      onEdit: onEditProp,
      ...rest
    } = omitThemeProps(mergedProps);
    const {
      isEditing,
      getPreviewProps,
      getInputProps,
      getTextareaProps,
      getEditProps,
      getCancelProps,
      getSubmitProps,
      onSubmit,
      onCancel,
      onEdit
    } = useEditable({
      isInvalid,
      isReadOnly,
      isRequired,
      isDisabled,
      placeholder,
      value,
      defaultValue,
      startWithEditView,
      isPreviewFocusable,
      submitOnBlur,
      selectAllOnFocus,
      onChange,
      onCancel: onCancelProp,
      onSubmit: onSubmitProp,
      onEdit: onEditProp
    });
    const cloneChildren = runIfFunc(children, {
      isEditing,
      onSubmit,
      onCancel,
      onEdit
    });
    const css = { ...styles.container };
    return /* @__PURE__ */ jsx(
      EditableProvider,
      {
        value: {
          isEditing,
          getPreviewProps,
          getInputProps,
          getTextareaProps,
          getEditProps,
          getCancelProps,
          getSubmitProps,
          styles
        },
        children: /* @__PURE__ */ jsx(
          ui.div,
          {
            ref,
            className: cx("ui-editable", className),
            ...rest,
            __css: css,
            children: cloneChildren
          }
        )
      }
    );
  }
);
var EditablePreview = forwardRef(
  ({ className, ...rest }, ref) => {
    const { styles, getPreviewProps } = useEditableContext();
    const css = {
      cursor: "text",
      display: "inline-block",
      fontSize: "inherit",
      fontWeight: "inherit",
      textAlign: "inherit",
      bg: "transparent",
      ...styles.preview
    };
    return /* @__PURE__ */ jsx(
      ui.span,
      {
        className: cx("ui-editable__preview", className),
        ...getPreviewProps(rest, ref),
        __css: css
      }
    );
  }
);
var EditableInput = forwardRef(
  ({ className, ...rest }, ref) => {
    const { styles, getInputProps } = useEditableContext();
    const css = {
      outline: 0,
      fontSize: "inherit",
      fontWeight: "inherit",
      textAlign: "inherit",
      bg: "transparent",
      ...styles.input
    };
    return /* @__PURE__ */ jsx(
      ui.input,
      {
        className: cx("ui-editable__input", className),
        ...getInputProps(rest, ref),
        __css: css
      }
    );
  }
);
var EditableTextarea = forwardRef(
  ({ className, ...rest }, ref) => {
    const { styles, getTextareaProps } = useEditableContext();
    const css = {
      outline: 0,
      fontSize: "inherit",
      fontWeight: "inherit",
      textAlign: "inherit",
      bg: "transparent",
      ...styles.textarea
    };
    return /* @__PURE__ */ jsx(
      ui.textarea,
      {
        className: cx("ui-editable__textarea", className),
        ...getTextareaProps(rest, ref),
        __css: css
      }
    );
  }
);

export {
  useEditable,
  useEditableControl,
  Editable,
  EditablePreview,
  EditableInput,
  EditableTextarea
};
//# sourceMappingURL=chunk-YGKMFHSX.mjs.map