{"version":3,"sources":["../src/with-default.ts"],"sourcesContent":["import type { Theme, ComponentDefaultProps, UsageTheme } from \"@yamada-ui/core\"\nimport type { Union } from \"@yamada-ui/utils\"\nimport { isArray, merge } from \"@yamada-ui/utils\"\n\nexport const withDefaultSize =\n  ({\n    size,\n    components,\n  }: {\n    size: ComponentDefaultProps[\"size\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { size } }]),\n      ),\n    })\n  }\n\nexport const withDefaultVariant =\n  ({\n    variant,\n    components,\n  }: {\n    variant: ComponentDefaultProps[\"variant\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { variant } }]),\n      ),\n    })\n  }\n\nexport const withDefaultColorScheme =\n  ({\n    colorScheme,\n    components,\n  }: {\n    colorScheme: ComponentDefaultProps[\"colorScheme\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { colorScheme } }]),\n      ),\n    })\n  }\n\nexport const withDefaultProps =\n  ({\n    defaultProps,\n    components,\n  }: {\n    defaultProps: ComponentDefaultProps\n    components?: Union<keyof Theme[\"components\"]>[]\n  }): UsageTheme =>\n  (theme: UsageTheme) => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps }]),\n      ),\n    })\n  }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAA+B;AAExB,IAAM,kBACX,CAAC;AAAA,EACC;AAAA,EACA;AACF,MAIA,CAAC,UAAkC;AAZrC;AAaI,MAAI,OAAiB,OAAO,MAAK,WAAM,eAAN,YAAoB,CAAC,CAAC;AAEvD,UAAI,sBAAQ,UAAU;AAAG,WAAO;AAEhC,aAAO,oBAAM,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,MACjB,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;AAAA,IACrD;AAAA,EACF,CAAC;AACH;AAEK,IAAM,qBACX,CAAC;AAAA,EACC;AAAA,EACA;AACF,MAIA,CAAC,UAAkC;AAhCrC;AAiCI,MAAI,OAAiB,OAAO,MAAK,WAAM,eAAN,YAAoB,CAAC,CAAC;AAEvD,UAAI,sBAAQ,UAAU;AAAG,WAAO;AAEhC,aAAO,oBAAM,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,MACjB,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC,CAAC;AAAA,IACxD;AAAA,EACF,CAAC;AACH;AAEK,IAAM,yBACX,CAAC;AAAA,EACC;AAAA,EACA;AACF,MAIA,CAAC,UAAkC;AApDrC;AAqDI,MAAI,OAAiB,OAAO,MAAK,WAAM,eAAN,YAAoB,CAAC,CAAC;AAEvD,UAAI,sBAAQ,UAAU;AAAG,WAAO;AAEhC,aAAO,oBAAM,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,MACjB,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,cAAc,EAAE,YAAY,EAAE,CAAC,CAAC;AAAA,IAC5D;AAAA,EACF,CAAC;AACH;AAEK,IAAM,mBACX,CAAC;AAAA,EACC;AAAA,EACA;AACF,MAIA,CAAC,UAAsB;AAxEzB;AAyEI,MAAI,OAAiB,OAAO,MAAK,WAAM,eAAN,YAAoB,CAAC,CAAC;AAEvD,UAAI,sBAAQ,UAAU;AAAG,WAAO;AAEhC,aAAO,oBAAM,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,MACjB,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;AAAA,IAC3C;AAAA,EACF,CAAC;AACH;","names":[]}