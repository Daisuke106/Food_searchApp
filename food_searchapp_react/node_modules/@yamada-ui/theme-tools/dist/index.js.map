{"version":3,"sources":["../src/index.ts","../src/extend-theme.ts","../src/extend-config.ts","../src/with-default.ts"],"sourcesContent":["export * from \"./extend-theme\"\nexport * from \"./extend-config\"\nexport * from \"./with-default\"\n","import type {\n  UsageTheme,\n  ThemeToken,\n  ThemeTokens,\n  ComponentStyle,\n  ComponentSizes,\n  ComponentVariants,\n  ComponentDefaultProps,\n  UIStyle,\n  UIStyleProps,\n  ComponentMultiSizes,\n  ComponentMultiVariants,\n  ComponentMultiStyle,\n} from \"@yamada-ui/core\"\nimport { baseTheme, defaultTheme } from \"@yamada-ui/theme\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport {\n  merge as mergeObject,\n  getMemoizedObject as get,\n  runIfFunc,\n  omitObject,\n  pickObject,\n  isFunction,\n} from \"@yamada-ui/utils\"\n\ntype Options = {\n  merge?: boolean\n  omit?: (keyof typeof defaultTheme)[]\n  pick?: (keyof typeof defaultTheme)[]\n}\n\nconst createExtendTheme =\n  (initialTheme: Dict = defaultTheme) =>\n  (...extensions: (UsageTheme | ((theme: UsageTheme) => UsageTheme))[]) =>\n  ({ merge = true, pick = [], omit = [] }: Options = {}): Dict => {\n    let overrides = [...extensions]\n    let theme = extensions[extensions.length - 1]\n\n    if (omit.length) initialTheme = omitObject(initialTheme, omit)\n    if (pick.length) initialTheme = pickObject(initialTheme, pick)\n\n    if (!isFunction(theme) && overrides.length > 1) {\n      overrides = overrides.slice(0, overrides.length - 1)\n\n      if (merge) theme = mergeObject(initialTheme, theme)\n    } else {\n      theme = merge ? initialTheme : {}\n    }\n\n    return overrides.reduce(\n      (prev, extension) => mergeObject(prev, runIfFunc(extension, prev)),\n      theme as Dict,\n    )\n  }\n\n/**\n * Create a new theme by inheriting the default theme.\n * It is also possible to pass multiple objects and specify options.\n *\n * @see Docs https://yamada-ui.com/styled-system/theming/customize-theme#using-extendtheme\n */\nexport const extendTheme = createExtendTheme(defaultTheme)\n\n/**\n * This creates a new theme that inherits only the tokens such as global styles and colors of the default theme.\n * It is also possible to pass multiple objects and specify options.\n *\n * @see Docs https://yamada-ui.com/styled-system/theming/customize-theme#using-extendbasetheme\n */\nexport const extendBaseTheme = createExtendTheme(baseTheme)\n\nexport const extendToken = (\n  token: ThemeToken,\n  tokens?: ThemeTokens,\n): ThemeTokens =>\n  mergeObject(get<ThemeTokens>(defaultTheme, token, {}), tokens ?? {})\n\nexport const extendStyle = (\n  name: \"globalStyle\" | \"resetStyle\",\n  style: UIStyle,\n): UIStyle => {\n  const props: UIStyleProps = {\n    theme: {\n      __config: {},\n      __cssMap: {},\n      __cssVars: {},\n      __breakpoints: undefined,\n    },\n  }\n\n  return mergeObject(\n    runIfFunc(get<UIStyle>(defaultTheme, `styles.${name}`, {}), props),\n    runIfFunc(style, props) ?? {},\n  )\n}\n\nexport const extendComponent = (\n  name: keyof (typeof defaultTheme)[\"components\"],\n  componentStyle?: ComponentStyle | ComponentMultiStyle,\n): ComponentStyle | ComponentMultiStyle =>\n  mergeObject(\n    get<ComponentStyle | ComponentMultiStyle>(\n      defaultTheme,\n      `components.${name}`,\n      {},\n    ),\n    componentStyle ?? {},\n  )\n\nexport const extendComponentSize = (\n  name: keyof (typeof defaultTheme)[\"components\"],\n  componentSizes?: ComponentSizes | ComponentMultiSizes,\n): ComponentSizes | ComponentMultiSizes =>\n  mergeObject(\n    get<ComponentSizes>(defaultTheme, `components.${name}.sizes`, {}),\n    componentSizes ?? {},\n  )\n\nexport const extendComponentVariant = (\n  name: keyof (typeof defaultTheme)[\"components\"],\n  componentVariants?: ComponentVariants | ComponentMultiVariants,\n): ComponentVariants | ComponentMultiVariants =>\n  mergeObject(\n    get<ComponentVariants | ComponentMultiVariants>(\n      defaultTheme,\n      `components.${name}.variants`,\n      {},\n    ),\n    componentVariants ?? {},\n  )\n\nexport const extendComponentDefaultProps = (\n  name: keyof (typeof defaultTheme)[\"components\"],\n  componentDefaultProps?: ComponentDefaultProps,\n): ComponentDefaultProps =>\n  mergeObject(\n    get<ComponentDefaultProps>(\n      defaultTheme,\n      `components.${name}.defaultProps`,\n      {},\n    ),\n    componentDefaultProps ?? {},\n  )\n","import type { ThemeConfig } from \"@yamada-ui/core\"\nimport { defaultConfig } from \"@yamada-ui/theme\"\nimport { merge } from \"@yamada-ui/utils\"\n\nexport const extendConfig = (config: ThemeConfig): ThemeConfig =>\n  merge(defaultConfig, config)\n","import type { Theme, ComponentDefaultProps, UsageTheme } from \"@yamada-ui/core\"\nimport type { Union } from \"@yamada-ui/utils\"\nimport { isArray, merge } from \"@yamada-ui/utils\"\n\nexport const withDefaultSize =\n  ({\n    size,\n    components,\n  }: {\n    size: ComponentDefaultProps[\"size\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { size } }]),\n      ),\n    })\n  }\n\nexport const withDefaultVariant =\n  ({\n    variant,\n    components,\n  }: {\n    variant: ComponentDefaultProps[\"variant\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { variant } }]),\n      ),\n    })\n  }\n\nexport const withDefaultColorScheme =\n  ({\n    colorScheme,\n    components,\n  }: {\n    colorScheme: ComponentDefaultProps[\"colorScheme\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { colorScheme } }]),\n      ),\n    })\n  }\n\nexport const withDefaultProps =\n  ({\n    defaultProps,\n    components,\n  }: {\n    defaultProps: ComponentDefaultProps\n    components?: Union<keyof Theme[\"components\"]>[]\n  }): UsageTheme =>\n  (theme: UsageTheme) => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps }]),\n      ),\n    })\n  }\n"],"mappings":"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","names":["merge","mergeObject","get","import_theme","import_utils","import_utils"]}