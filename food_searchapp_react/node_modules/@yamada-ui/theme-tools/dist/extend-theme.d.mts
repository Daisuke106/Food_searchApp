import { UsageTheme, ThemeToken, ThemeTokens, UIStyle, ComponentStyle, ComponentMultiStyle, ComponentSizes, ComponentMultiSizes, ComponentVariants, ComponentMultiVariants, ComponentDefaultProps } from '@yamada-ui/core';
import { defaultTheme } from '@yamada-ui/theme';
import { Dict } from '@yamada-ui/utils';

type Options = {
    merge?: boolean;
    omit?: (keyof typeof defaultTheme)[];
    pick?: (keyof typeof defaultTheme)[];
};
/**
 * Create a new theme by inheriting the default theme.
 * It is also possible to pass multiple objects and specify options.
 *
 * @see Docs https://yamada-ui.com/styled-system/theming/customize-theme#using-extendtheme
 */
declare const extendTheme: (...extensions: (UsageTheme | ((theme: UsageTheme) => UsageTheme))[]) => ({ merge, pick, omit }?: Options) => Dict;
/**
 * This creates a new theme that inherits only the tokens such as global styles and colors of the default theme.
 * It is also possible to pass multiple objects and specify options.
 *
 * @see Docs https://yamada-ui.com/styled-system/theming/customize-theme#using-extendbasetheme
 */
declare const extendBaseTheme: (...extensions: (UsageTheme | ((theme: UsageTheme) => UsageTheme))[]) => ({ merge, pick, omit }?: Options) => Dict;
declare const extendToken: (token: ThemeToken, tokens?: ThemeTokens) => ThemeTokens;
declare const extendStyle: (name: "globalStyle" | "resetStyle", style: UIStyle) => UIStyle;
declare const extendComponent: (name: keyof (typeof defaultTheme)["components"], componentStyle?: ComponentStyle | ComponentMultiStyle) => ComponentStyle | ComponentMultiStyle;
declare const extendComponentSize: (name: keyof (typeof defaultTheme)["components"], componentSizes?: ComponentSizes | ComponentMultiSizes) => ComponentSizes | ComponentMultiSizes;
declare const extendComponentVariant: (name: keyof (typeof defaultTheme)["components"], componentVariants?: ComponentVariants | ComponentMultiVariants) => ComponentVariants | ComponentMultiVariants;
declare const extendComponentDefaultProps: (name: keyof (typeof defaultTheme)["components"], componentDefaultProps?: ComponentDefaultProps) => ComponentDefaultProps;

export { extendBaseTheme, extendComponent, extendComponentDefaultProps, extendComponentSize, extendComponentVariant, extendStyle, extendTheme, extendToken };
