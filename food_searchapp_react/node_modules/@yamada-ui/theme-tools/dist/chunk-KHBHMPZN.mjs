// src/extend-theme.ts
import { baseTheme, defaultTheme } from "@yamada-ui/theme";
import {
  merge as mergeObject,
  getMemoizedObject as get,
  runIfFunc,
  omitObject,
  pickObject,
  isFunction
} from "@yamada-ui/utils";
var createExtendTheme = (initialTheme = defaultTheme) => (...extensions) => ({ merge = true, pick = [], omit = [] } = {}) => {
  let overrides = [...extensions];
  let theme = extensions[extensions.length - 1];
  if (omit.length)
    initialTheme = omitObject(initialTheme, omit);
  if (pick.length)
    initialTheme = pickObject(initialTheme, pick);
  if (!isFunction(theme) && overrides.length > 1) {
    overrides = overrides.slice(0, overrides.length - 1);
    if (merge)
      theme = mergeObject(initialTheme, theme);
  } else {
    theme = merge ? initialTheme : {};
  }
  return overrides.reduce(
    (prev, extension) => mergeObject(prev, runIfFunc(extension, prev)),
    theme
  );
};
var extendTheme = createExtendTheme(defaultTheme);
var extendBaseTheme = createExtendTheme(baseTheme);
var extendToken = (token, tokens) => mergeObject(get(defaultTheme, token, {}), tokens != null ? tokens : {});
var extendStyle = (name, style) => {
  var _a;
  const props = {
    theme: {
      __config: {},
      __cssMap: {},
      __cssVars: {},
      __breakpoints: void 0
    }
  };
  return mergeObject(
    runIfFunc(get(defaultTheme, `styles.${name}`, {}), props),
    (_a = runIfFunc(style, props)) != null ? _a : {}
  );
};
var extendComponent = (name, componentStyle) => mergeObject(
  get(
    defaultTheme,
    `components.${name}`,
    {}
  ),
  componentStyle != null ? componentStyle : {}
);
var extendComponentSize = (name, componentSizes) => mergeObject(
  get(defaultTheme, `components.${name}.sizes`, {}),
  componentSizes != null ? componentSizes : {}
);
var extendComponentVariant = (name, componentVariants) => mergeObject(
  get(
    defaultTheme,
    `components.${name}.variants`,
    {}
  ),
  componentVariants != null ? componentVariants : {}
);
var extendComponentDefaultProps = (name, componentDefaultProps) => mergeObject(
  get(
    defaultTheme,
    `components.${name}.defaultProps`,
    {}
  ),
  componentDefaultProps != null ? componentDefaultProps : {}
);

export {
  extendTheme,
  extendBaseTheme,
  extendToken,
  extendStyle,
  extendComponent,
  extendComponentSize,
  extendComponentVariant,
  extendComponentDefaultProps
};
//# sourceMappingURL=chunk-KHBHMPZN.mjs.map