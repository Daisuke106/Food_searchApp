"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  extendBaseTheme: () => extendBaseTheme,
  extendComponent: () => extendComponent,
  extendComponentDefaultProps: () => extendComponentDefaultProps,
  extendComponentSize: () => extendComponentSize,
  extendComponentVariant: () => extendComponentVariant,
  extendConfig: () => extendConfig,
  extendStyle: () => extendStyle,
  extendTheme: () => extendTheme,
  extendToken: () => extendToken,
  withDefaultColorScheme: () => withDefaultColorScheme,
  withDefaultProps: () => withDefaultProps,
  withDefaultSize: () => withDefaultSize,
  withDefaultVariant: () => withDefaultVariant
});
module.exports = __toCommonJS(src_exports);

// src/extend-theme.ts
var import_theme = require("@yamada-ui/theme");
var import_utils = require("@yamada-ui/utils");
var createExtendTheme = (initialTheme = import_theme.defaultTheme) => (...extensions) => ({ merge: merge3 = true, pick = [], omit = [] } = {}) => {
  let overrides = [...extensions];
  let theme = extensions[extensions.length - 1];
  if (omit.length)
    initialTheme = (0, import_utils.omitObject)(initialTheme, omit);
  if (pick.length)
    initialTheme = (0, import_utils.pickObject)(initialTheme, pick);
  if (!(0, import_utils.isFunction)(theme) && overrides.length > 1) {
    overrides = overrides.slice(0, overrides.length - 1);
    if (merge3)
      theme = (0, import_utils.merge)(initialTheme, theme);
  } else {
    theme = merge3 ? initialTheme : {};
  }
  return overrides.reduce(
    (prev, extension) => (0, import_utils.merge)(prev, (0, import_utils.runIfFunc)(extension, prev)),
    theme
  );
};
var extendTheme = createExtendTheme(import_theme.defaultTheme);
var extendBaseTheme = createExtendTheme(import_theme.baseTheme);
var extendToken = (token, tokens) => (0, import_utils.merge)((0, import_utils.getMemoizedObject)(import_theme.defaultTheme, token, {}), tokens != null ? tokens : {});
var extendStyle = (name, style) => {
  var _a;
  const props = {
    theme: {
      __config: {},
      __cssMap: {},
      __cssVars: {},
      __breakpoints: void 0
    }
  };
  return (0, import_utils.merge)(
    (0, import_utils.runIfFunc)((0, import_utils.getMemoizedObject)(import_theme.defaultTheme, `styles.${name}`, {}), props),
    (_a = (0, import_utils.runIfFunc)(style, props)) != null ? _a : {}
  );
};
var extendComponent = (name, componentStyle) => (0, import_utils.merge)(
  (0, import_utils.getMemoizedObject)(
    import_theme.defaultTheme,
    `components.${name}`,
    {}
  ),
  componentStyle != null ? componentStyle : {}
);
var extendComponentSize = (name, componentSizes) => (0, import_utils.merge)(
  (0, import_utils.getMemoizedObject)(import_theme.defaultTheme, `components.${name}.sizes`, {}),
  componentSizes != null ? componentSizes : {}
);
var extendComponentVariant = (name, componentVariants) => (0, import_utils.merge)(
  (0, import_utils.getMemoizedObject)(
    import_theme.defaultTheme,
    `components.${name}.variants`,
    {}
  ),
  componentVariants != null ? componentVariants : {}
);
var extendComponentDefaultProps = (name, componentDefaultProps) => (0, import_utils.merge)(
  (0, import_utils.getMemoizedObject)(
    import_theme.defaultTheme,
    `components.${name}.defaultProps`,
    {}
  ),
  componentDefaultProps != null ? componentDefaultProps : {}
);

// src/extend-config.ts
var import_theme2 = require("@yamada-ui/theme");
var import_utils2 = require("@yamada-ui/utils");
var extendConfig = (config) => (0, import_utils2.merge)(import_theme2.defaultConfig, config);

// src/with-default.ts
var import_utils3 = require("@yamada-ui/utils");
var withDefaultSize = ({
  size,
  components
}) => (theme) => {
  var _a;
  let keys = Object.keys((_a = theme.components) != null ? _a : {});
  if ((0, import_utils3.isArray)(components))
    keys = components;
  return (0, import_utils3.merge)(theme, {
    components: Object.fromEntries(
      keys.map((key) => [key, { defaultProps: { size } }])
    )
  });
};
var withDefaultVariant = ({
  variant,
  components
}) => (theme) => {
  var _a;
  let keys = Object.keys((_a = theme.components) != null ? _a : {});
  if ((0, import_utils3.isArray)(components))
    keys = components;
  return (0, import_utils3.merge)(theme, {
    components: Object.fromEntries(
      keys.map((key) => [key, { defaultProps: { variant } }])
    )
  });
};
var withDefaultColorScheme = ({
  colorScheme,
  components
}) => (theme) => {
  var _a;
  let keys = Object.keys((_a = theme.components) != null ? _a : {});
  if ((0, import_utils3.isArray)(components))
    keys = components;
  return (0, import_utils3.merge)(theme, {
    components: Object.fromEntries(
      keys.map((key) => [key, { defaultProps: { colorScheme } }])
    )
  });
};
var withDefaultProps = ({
  defaultProps,
  components
}) => (theme) => {
  var _a;
  let keys = Object.keys((_a = theme.components) != null ? _a : {});
  if ((0, import_utils3.isArray)(components))
    keys = components;
  return (0, import_utils3.merge)(theme, {
    components: Object.fromEntries(
      keys.map((key) => [key, { defaultProps }])
    )
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extendBaseTheme,
  extendComponent,
  extendComponentDefaultProps,
  extendComponentSize,
  extendComponentVariant,
  extendConfig,
  extendStyle,
  extendTheme,
  extendToken,
  withDefaultColorScheme,
  withDefaultProps,
  withDefaultSize,
  withDefaultVariant
});
//# sourceMappingURL=index.js.map