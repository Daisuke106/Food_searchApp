"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useEventListener: () => useEventListener,
  useEventListeners: () => useEventListeners
});
module.exports = __toCommonJS(src_exports);
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var useEventListener = (target, event, handler, options) => {
  const listener = (0, import_utils.useCallbackRef)(handler);
  (0, import_react.useEffect)(() => {
    const el = typeof target === "function" ? target() : target != null ? target : document;
    if (!handler || !el)
      return;
    el.addEventListener(
      event,
      listener,
      options
    );
    return () => {
      el.removeEventListener(
        event,
        listener,
        options
      );
    };
  }, [event, target, options, listener, handler]);
  return () => {
    const el = typeof target === "function" ? target() : target != null ? target : document;
    el == null ? void 0 : el.removeEventListener(
      event,
      listener,
      options
    );
  };
};
var useEventListeners = () => {
  const listeners = (0, import_react.useRef)(/* @__PURE__ */ new Map());
  const currentListeners = listeners.current;
  const add = (0, import_react.useCallback)(
    (el, event, listener, options) => {
      listeners.current.set(listener, { event, el, options });
      el.addEventListener(
        event,
        listener,
        options
      );
    },
    []
  );
  const remove = (0, import_react.useCallback)(
    (el, event, listener, options) => {
      el.removeEventListener(
        event,
        listener,
        options
      );
      listeners.current.delete(listener);
    },
    []
  );
  (0, import_react.useEffect)(
    () => () => {
      currentListeners.forEach(
        ({ el, event, options }, key) => remove(el, event, key, options)
      );
    },
    [remove, currentListeners]
  );
  return { add, remove };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useEventListener,
  useEventListeners
});
//# sourceMappingURL=index.js.map