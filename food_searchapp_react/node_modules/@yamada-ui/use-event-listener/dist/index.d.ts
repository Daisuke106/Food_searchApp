type Events = keyof DocumentEventMap | keyof WindowEventMap | keyof GlobalEventHandlersEventMap;
type Target = EventTarget | null | (() => EventTarget | null);
type Options = boolean | AddEventListenerOptions;
type Handler<E extends Events> = E extends keyof DocumentEventMap ? (event: DocumentEventMap[E]) => void : E extends keyof WindowEventMap ? (event: WindowEventMap[E]) => void : E extends keyof GlobalEventHandlersEventMap ? (event: GlobalEventHandlersEventMap[E]) => void : ((event: Event) => void) | undefined;
declare const useEventListener: <E extends Events>(target: Target, event: E, handler: Handler<E>, options?: Options) => () => void;
declare const useEventListeners: () => {
    add: <E extends Events>(el: EventTarget, event: E, listener: any, options: boolean | AddEventListenerOptions) => void;
    remove: <E_1 extends Events>(el: EventTarget, event: E_1, listener: any, options: boolean | EventListenerOptions) => void;
};

export { useEventListener, useEventListeners };
