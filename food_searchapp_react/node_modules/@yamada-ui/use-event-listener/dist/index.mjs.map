{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { useCallbackRef } from \"@yamada-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\ntype Events =\n  | keyof DocumentEventMap\n  | keyof WindowEventMap\n  | keyof GlobalEventHandlersEventMap\ntype Target = EventTarget | null | (() => EventTarget | null)\ntype Options = boolean | AddEventListenerOptions\ntype Handler<E extends Events> = E extends keyof DocumentEventMap\n  ? (event: DocumentEventMap[E]) => void\n  : E extends keyof WindowEventMap\n    ? (event: WindowEventMap[E]) => void\n    : E extends keyof GlobalEventHandlersEventMap\n      ? (event: GlobalEventHandlersEventMap[E]) => void\n      : ((event: Event) => void) | undefined\n\nexport const useEventListener = <E extends Events>(\n  target: Target,\n  event: E,\n  handler: Handler<E>,\n  options?: Options,\n) => {\n  const listener = useCallbackRef(handler)\n\n  useEffect(() => {\n    const el = typeof target === \"function\" ? target() : target ?? document\n\n    if (!handler || !el) return\n\n    el.addEventListener(\n      event,\n      listener as EventListenerOrEventListenerObject,\n      options,\n    )\n\n    return () => {\n      el.removeEventListener(\n        event,\n        listener as EventListenerOrEventListenerObject,\n        options,\n      )\n    }\n  }, [event, target, options, listener, handler])\n\n  return () => {\n    const el = typeof target === \"function\" ? target() : target ?? document\n\n    el?.removeEventListener(\n      event,\n      listener as EventListenerOrEventListenerObject,\n      options,\n    )\n  }\n}\n\nexport const useEventListeners = () => {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback(\n    <E extends Events>(\n      el: EventTarget,\n      event: E,\n      listener: any,\n      options: boolean | AddEventListenerOptions,\n    ) => {\n      listeners.current.set(listener, { event, el, options })\n\n      el.addEventListener(\n        event,\n        listener as EventListenerOrEventListenerObject,\n        options,\n      )\n    },\n    [],\n  )\n\n  const remove = useCallback(\n    <E extends Events>(\n      el: EventTarget,\n      event: E,\n      listener: any,\n      options: boolean | EventListenerOptions,\n    ) => {\n      el.removeEventListener(\n        event,\n        listener as EventListenerOrEventListenerObject,\n        options,\n      )\n\n      listeners.current.delete(listener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach(({ el, event, options }, key) =>\n        remove(el, event, key, options),\n      )\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"],"mappings":";;;AAAA,SAAS,sBAAsB;AAC/B,SAAS,aAAa,WAAW,cAAc;AAgBxC,IAAM,mBAAmB,CAC9B,QACA,OACA,SACA,YACG;AACH,QAAM,WAAW,eAAe,OAAO;AAEvC,YAAU,MAAM;AACd,UAAM,KAAK,OAAO,WAAW,aAAa,OAAO,IAAI,0BAAU;AAE/D,QAAI,CAAC,WAAW,CAAC;AAAI;AAErB,OAAG;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,WAAO,MAAM;AACX,SAAG;AAAA,QACD;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF,GAAG,CAAC,OAAO,QAAQ,SAAS,UAAU,OAAO,CAAC;AAE9C,SAAO,MAAM;AACX,UAAM,KAAK,OAAO,WAAW,aAAa,OAAO,IAAI,0BAAU;AAE/D,6BAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA;AAAA,EAEJ;AACF;AAEO,IAAM,oBAAoB,MAAM;AACrC,QAAM,YAAY,OAAO,oBAAI,IAAI,CAAC;AAClC,QAAM,mBAAmB,UAAU;AAEnC,QAAM,MAAM;AAAA,IACV,CACE,IACA,OACA,UACA,YACG;AACH,gBAAU,QAAQ,IAAI,UAAU,EAAE,OAAO,IAAI,QAAQ,CAAC;AAEtD,SAAG;AAAA,QACD;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,SAAS;AAAA,IACb,CACE,IACA,OACA,UACA,YACG;AACH,SAAG;AAAA,QACD;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,gBAAU,QAAQ,OAAO,QAAQ;AAAA,IACnC;AAAA,IACA,CAAC;AAAA,EACH;AAEA;AAAA,IACE,MAAM,MAAM;AACV,uBAAiB;AAAA,QAAQ,CAAC,EAAE,IAAI,OAAO,QAAQ,GAAG,QAChD,OAAO,IAAI,OAAO,KAAK,OAAO;AAAA,MAChC;AAAA,IACF;AAAA,IACA,CAAC,QAAQ,gBAAgB;AAAA,EAC3B;AAEA,SAAO,EAAE,KAAK,OAAO;AACvB;","names":[]}