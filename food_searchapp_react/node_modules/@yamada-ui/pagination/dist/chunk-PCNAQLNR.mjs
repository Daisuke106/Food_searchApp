"use client"
import {
  PaginationItem
} from "./chunk-TCLV3SLM.mjs";
import {
  PaginationProvider,
  usePagination
} from "./chunk-EKJTBKZD.mjs";

// src/pagination.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { useValue } from "@yamada-ui/use-value";
import { cx, dataAttr, handlerAll } from "@yamada-ui/utils";
import { useMemo } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var Pagination = forwardRef((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle("Pagination", props);
  const {
    className,
    component: Component = PaginationItem,
    itemProps,
    withControls = true,
    withEdges = false,
    innerProps,
    controlProps,
    controlPrevProps,
    controlNextProps,
    edgeProps,
    edgeFirstProps,
    edgeLastProps,
    page,
    defaultPage,
    total,
    siblings,
    boundaries,
    isDisabled,
    onChange: onChangeProp,
    ...rest
  } = omitThemeProps(mergedProps);
  const computedWithControls = useValue(withControls);
  const computedWithEdges = useValue(withEdges);
  const { currentPage, onFirst, onLast, onPrev, onNext, onChange, range } = usePagination({
    page,
    defaultPage,
    total,
    siblings,
    boundaries,
    isDisabled,
    onChange: onChangeProp
  });
  const children = useMemo(
    () => range.map((page2, key) => /* @__PURE__ */ jsx(
      Component,
      {
        page: page2,
        isActive: currentPage === page2,
        isDisabled,
        "aria-label": page2 === "dots" ? "Jump to omitted pages" : `Go to page ${page2}`,
        ...itemProps,
        onClick: handlerAll(
          itemProps == null ? void 0 : itemProps.onClick,
          page2 !== "dots" ? () => onChange(page2) : void 0
        )
      },
      key
    )),
    [Component, currentPage, isDisabled, onChange, range, itemProps]
  );
  const css = {
    display: "flex",
    alignItems: "center",
    ...styles.container
  };
  return /* @__PURE__ */ jsx(PaginationProvider, { value: styles, children: /* @__PURE__ */ jsxs(
    ui.div,
    {
      ref,
      className: cx("ui-pagination", className),
      role: "navigation",
      __css: css,
      ...rest,
      "data-disabled": dataAttr(isDisabled),
      children: [
        computedWithEdges ? /* @__PURE__ */ jsx(
          Component,
          {
            page: "first",
            "aria-label": "Go to first page",
            className: "ui-pagination__item--first",
            isDisabled: isDisabled || currentPage === 1,
            ...edgeProps,
            ...edgeFirstProps,
            onClick: handlerAll(
              edgeProps == null ? void 0 : edgeProps.onClick,
              edgeFirstProps == null ? void 0 : edgeFirstProps.onClick,
              onFirst
            )
          }
        ) : null,
        computedWithControls ? /* @__PURE__ */ jsx(
          Component,
          {
            page: "prev",
            "aria-label": "Go to previous page",
            className: "ui-pagination__item--prev",
            isDisabled: isDisabled || currentPage === 1,
            ...controlProps,
            ...controlPrevProps,
            onClick: handlerAll(
              controlProps == null ? void 0 : controlProps.onClick,
              controlPrevProps == null ? void 0 : controlPrevProps.onClick,
              onPrev
            )
          }
        ) : null,
        /* @__PURE__ */ jsx(
          ui.div,
          {
            className: "ui-pagination-inner",
            __css: {
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              ...styles.inner
            },
            ...innerProps,
            children
          }
        ),
        computedWithControls ? /* @__PURE__ */ jsx(
          Component,
          {
            page: "next",
            "aria-label": "Go to next page",
            className: "ui-pagination__item--next",
            isDisabled: isDisabled || currentPage === total,
            ...controlProps,
            ...controlNextProps,
            onClick: handlerAll(
              controlProps == null ? void 0 : controlProps.onClick,
              controlNextProps == null ? void 0 : controlNextProps.onClick,
              onNext
            )
          }
        ) : null,
        computedWithEdges ? /* @__PURE__ */ jsx(
          Component,
          {
            page: "last",
            "aria-label": "Go to last page",
            className: "ui-pagination__item--last",
            isDisabled: isDisabled || currentPage === total,
            ...edgeProps,
            ...edgeLastProps,
            onClick: handlerAll(
              edgeProps == null ? void 0 : edgeProps.onClick,
              edgeLastProps == null ? void 0 : edgeLastProps.onClick,
              onLast
            )
          }
        ) : null
      ]
    }
  ) });
});

export {
  Pagination
};
//# sourceMappingURL=chunk-PCNAQLNR.mjs.map