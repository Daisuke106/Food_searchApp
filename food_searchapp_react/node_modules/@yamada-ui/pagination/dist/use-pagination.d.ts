import * as react from 'react';
import { Token, CSSUIObject } from '@yamada-ui/core';

type PaginationContext = Record<string, CSSUIObject>;
declare const PaginationProvider: react.Provider<PaginationContext>;
declare const usePaginationContext: () => PaginationContext;
type UsePaginationProps = {
    /**
     * The page of the pagination.
     * Should be less than `total` and greater than `1`.
     */
    page?: number;
    /**
     * The initial page of the pagination.
     * Should be less than `total` and greater than `1`.
     *
     * @default 1
     */
    defaultPage?: number;
    /**
     * The total number of pages in pagination.
     */
    total: number;
    /** Number of siblings displayed on the left/right side of selected page.
     *
     * @default 1
     */
    siblings?: Token<number>;
    /**
     * Number of elements visible on the left/right edges.
     *
     * @default 1
     */
    boundaries?: Token<number>;
    /**
     * If `true`, the pagination all item will be disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * The callback invoked when the page changes.
     */
    onChange?: (page: number) => void;
};
declare const computedRange: (start: number, end: number) => number[];
declare const usePagination: ({ page, defaultPage, total, siblings, boundaries, isDisabled, onChange: onChangeProp, }: UsePaginationProps) => {
    currentPage: number;
    total: number;
    isDisabled: boolean;
    onFirst: () => void;
    onLast: () => void;
    onPrev: () => void;
    onNext: () => void;
    onChange: (page: number) => void;
    range: (number | "dots")[];
};
type UsePaginationReturn = ReturnType<typeof usePagination>;

export { PaginationProvider, type UsePaginationProps, type UsePaginationReturn, computedRange, usePagination, usePaginationContext };
