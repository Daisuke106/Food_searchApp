"use client"

// src/button-group.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { createContext, cx, dataAttr } from "@yamada-ui/utils";
import { useMemo } from "react";
import { jsx } from "react/jsx-runtime";
var [ButtonGroupProvider, useButtonGroup] = createContext(
  {
    strict: false,
    name: "ButtonGroupContext"
  }
);
var ButtonGroup = forwardRef(
  ({
    className,
    size,
    variant,
    direction: flexDirection,
    isAttached,
    isDisabled,
    gap,
    columnGap,
    rowGap,
    ...rest
  }, ref) => {
    const isColumn = flexDirection === "column" || flexDirection === "column-reverse";
    const css = {
      display: "inline-flex",
      flexDirection
    };
    const context = useMemo(
      () => ({ size, variant, isDisabled }),
      [size, variant, isDisabled]
    );
    if (isAttached) {
      Object.assign(css, {
        "> *:first-of-type:not(:last-of-type)": isColumn ? { borderBottomRadius: 0, marginBlockEnd: "-1px" } : { borderRightRadius: 0, marginInlineEnd: "-1px" },
        "> *:not(:first-of-type):not(:last-of-type)": isColumn ? { borderRadius: 0, marginBlockStart: "-1px" } : { borderRadius: 0, marginInlineEnd: "-1px" },
        "> *:not(:first-of-type):last-of-type": isColumn ? { borderTopRadius: 0, marginBlockStart: "-1px" } : { borderLeftRadius: 0 }
      });
    } else {
      Object.assign(css, {
        gap,
        columnGap,
        rowGap
      });
    }
    return /* @__PURE__ */ jsx(ButtonGroupProvider, { value: context, children: /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        role: "group",
        className: cx("ui-button-group", className),
        "data-attached": dataAttr(isAttached),
        __css: css,
        ...rest
      }
    ) });
  }
);

export {
  useButtonGroup,
  ButtonGroup
};
//# sourceMappingURL=chunk-QEKFZB7J.mjs.map