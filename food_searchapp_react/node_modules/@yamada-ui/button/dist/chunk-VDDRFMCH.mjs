"use client"
import {
  useButtonGroup
} from "./chunk-QEKFZB7J.mjs";

// src/button.tsx
import {
  ui,
  forwardRef,
  useComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { Loading as LoadingIcon } from "@yamada-ui/loading";
import { Ripple, useRipple } from "@yamada-ui/ripple";
import { cx, merge, dataAttr, mergeRefs } from "@yamada-ui/utils";
import { useCallback, useMemo, useRef } from "react";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var Button = forwardRef(
  ({ children, ...props }, ref) => {
    const group = useButtonGroup();
    const [styles, mergedProps] = useComponentStyle("Button", {
      ...group,
      ...props
    });
    const {
      className,
      as,
      type,
      isRounded,
      isLoading,
      isActive,
      isDisabled = group == null ? void 0 : group.isDisabled,
      leftIcon,
      rightIcon,
      loadingIcon,
      loadingText,
      loadingPlacement = "start",
      disableRipple,
      __css,
      ...rest
    } = omitThemeProps(mergedProps);
    const trulyDisabled = isDisabled || isLoading;
    const { ref: buttonRef, type: defaultType } = useButtonType(as);
    const { onPointerDown, ...rippleProps } = useRipple({
      ...rest,
      isDisabled: disableRipple || trulyDisabled
    });
    const css = useMemo(() => {
      var _a;
      const _focus = "_focus" in styles ? merge((_a = styles._focus) != null ? _a : {}, { zIndex: "fallback(yamcha, 1)" }) : {};
      return {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "fallback(2, 0.5rem)",
        appearance: "none",
        userSelect: "none",
        position: "relative",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        overflow: "hidden",
        outline: "none",
        ...styles,
        ...__css,
        ...!!group ? { _focus } : {},
        ...isRounded ? { borderRadius: "fallback(full, 9999px)" } : {}
      };
    }, [styles, __css, group, isRounded]);
    const contentProps = {
      leftIcon,
      rightIcon,
      children
    };
    const loadingProps = {
      loadingIcon,
      loadingText
    };
    return /* @__PURE__ */ jsxs(
      ui.button,
      {
        ref: mergeRefs(ref, buttonRef),
        as,
        className: cx("ui-button", className),
        type: type != null ? type : defaultType,
        disabled: trulyDisabled,
        "data-active": dataAttr(isActive),
        "data-loading": dataAttr(isLoading),
        __css: css,
        ...rest,
        onPointerDown,
        children: [
          isLoading && loadingPlacement === "start" ? /* @__PURE__ */ jsx(Loading, { className: "ui-button__loading--start", ...loadingProps }) : null,
          isLoading ? loadingText || /* @__PURE__ */ jsx(ui.span, { opacity: 0, children: /* @__PURE__ */ jsx(Content, { ...contentProps }) }) : /* @__PURE__ */ jsx(Content, { ...contentProps }),
          isLoading && loadingPlacement === "end" ? /* @__PURE__ */ jsx(Loading, { className: "ui-button__loading--end", ...loadingProps }) : null,
          /* @__PURE__ */ jsx(Ripple, { isDisabled: disableRipple || trulyDisabled, ...rippleProps })
        ]
      }
    );
  }
);
var Loading = ({ className, loadingIcon, loadingText }) => {
  const css = useMemo(
    () => ({
      display: "flex",
      alignItems: "center",
      position: loadingText ? "relative" : "absolute",
      fontSize: "1em",
      lineHeight: "normal"
    }),
    [loadingText]
  );
  const element = useMemo(() => {
    if (typeof loadingIcon === "string") {
      return /* @__PURE__ */ jsx(LoadingIcon, { color: "current", variant: loadingIcon });
    } else {
      return loadingIcon || /* @__PURE__ */ jsx(LoadingIcon, { color: "current" });
    }
  }, [loadingIcon]);
  return /* @__PURE__ */ jsx(ui.div, { className: cx("ui-button__loading", className), __css: css, children: element });
};
var Content = ({
  leftIcon,
  rightIcon,
  children
}) => {
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    leftIcon ? /* @__PURE__ */ jsx(Icon, { children: leftIcon }) : null,
    children,
    rightIcon ? /* @__PURE__ */ jsx(Icon, { children: rightIcon }) : null
  ] });
};
var Icon = ({ children, className, ...rest }) => {
  return /* @__PURE__ */ jsx(
    ui.span,
    {
      className: cx("ui-button__icon", className),
      display: "inline-flex",
      alignSelf: "center",
      flexShrink: 0,
      "aria-hidden": true,
      ...rest,
      children
    }
  );
};
var useButtonType = (value) => {
  const isButton = useRef(!value);
  const ref = useCallback((node) => {
    if (node)
      isButton.current = node.tagName === "BUTTON";
  }, []);
  const type = isButton.current ? "button" : void 0;
  return { ref, type };
};

export {
  Button,
  useButtonType
};
//# sourceMappingURL=chunk-VDDRFMCH.mjs.map