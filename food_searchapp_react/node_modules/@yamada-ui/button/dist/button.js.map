{"version":3,"sources":["../src/button.tsx","../src/button-group.tsx"],"sourcesContent":["import type { HTMLUIProps, ThemeProps, CSSUIObject } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport type { LoadingProps } from \"@yamada-ui/loading\"\nimport { Loading as LoadingIcon } from \"@yamada-ui/loading\"\nimport { Ripple, useRipple } from \"@yamada-ui/ripple\"\nimport { cx, merge, dataAttr, mergeRefs } from \"@yamada-ui/utils\"\nimport type { ElementType, FC, ReactElement } from \"react\"\nimport { useCallback, useMemo, useRef } from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\ntype ButtonOptions = {\n  /**\n   * The type of button. Accepts `button`, `reset`, or `submit`.\n   *\n   * @default 'button'\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If true, the button is full rounded. Else, it'll be slightly round.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the loading state of the button is represented.\n   *\n   * @default false\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button is represented as active.\n   *\n   * @default false\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button is disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * The icon to display at the left side of the button.\n   */\n  leftIcon?: ReactElement\n  /**\n   * The icon to display at the right side of the button.\n   */\n  rightIcon?: ReactElement\n  /**\n   * The icon to display when the button is loading.\n   */\n  loadingIcon?: ReactElement | LoadingProps[\"variant\"]\n  /**\n   * The text to display when the button is loading.\n   */\n  loadingText?: string\n  /**\n   * The placement of the loading indicator. Accepts `start` or `end`.\n   *\n   * @default 'start'\n   */\n  loadingPlacement?: \"start\" | \"end\"\n  /**\n   * If `true`, disable ripple effects when pressing a element.\n   *\n   * @default false\n   */\n  disableRipple?: boolean\n}\n\nexport type ButtonProps = HTMLUIProps<\"button\"> &\n  ThemeProps<\"Button\"> &\n  ButtonOptions\n\n/**\n * `Button` is an interactive component that allows users to perform actions such as submitting forms and toggling modals.\n *\n * @see Docs https://yamada-ui.com/components/forms/button\n */\nexport const Button = forwardRef<ButtonProps, \"button\">(\n  ({ children, ...props }, ref) => {\n    const group = useButtonGroup()\n    const [styles, mergedProps] = useComponentStyle(\"Button\", {\n      ...group,\n      ...props,\n    })\n    const {\n      className,\n      as,\n      type,\n      isRounded,\n      isLoading,\n      isActive,\n      isDisabled = group?.isDisabled,\n      leftIcon,\n      rightIcon,\n      loadingIcon,\n      loadingText,\n      loadingPlacement = \"start\",\n      disableRipple,\n      __css,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    const trulyDisabled = isDisabled || isLoading\n\n    const { ref: buttonRef, type: defaultType } = useButtonType(as)\n    const { onPointerDown, ...rippleProps } = useRipple({\n      ...rest,\n      isDisabled: disableRipple || trulyDisabled,\n    })\n\n    const css: CSSUIObject = useMemo(() => {\n      const _focus =\n        \"_focus\" in styles\n          ? merge(styles._focus ?? {}, { zIndex: \"fallback(yamcha, 1)\" })\n          : {}\n\n      return {\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: \"fallback(2, 0.5rem)\",\n        appearance: \"none\",\n        userSelect: \"none\",\n        position: \"relative\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"middle\",\n        overflow: \"hidden\",\n        outline: \"none\",\n        ...styles,\n        ...__css,\n        ...(!!group ? { _focus } : {}),\n        ...(isRounded ? { borderRadius: \"fallback(full, 9999px)\" } : {}),\n      }\n    }, [styles, __css, group, isRounded])\n\n    const contentProps = {\n      leftIcon,\n      rightIcon,\n      children,\n    }\n\n    const loadingProps = {\n      loadingIcon,\n      loadingText,\n    }\n\n    return (\n      <ui.button\n        ref={mergeRefs(ref, buttonRef)}\n        as={as}\n        className={cx(\"ui-button\", className)}\n        type={type ?? defaultType}\n        disabled={trulyDisabled}\n        data-active={dataAttr(isActive)}\n        data-loading={dataAttr(isLoading)}\n        __css={css}\n        {...rest}\n        onPointerDown={onPointerDown}\n      >\n        {isLoading && loadingPlacement === \"start\" ? (\n          <Loading className=\"ui-button__loading--start\" {...loadingProps} />\n        ) : null}\n\n        {isLoading ? (\n          loadingText || (\n            <ui.span opacity={0}>\n              <Content {...contentProps} />\n            </ui.span>\n          )\n        ) : (\n          <Content {...contentProps} />\n        )}\n\n        {isLoading && loadingPlacement === \"end\" ? (\n          <Loading className=\"ui-button__loading--end\" {...loadingProps} />\n        ) : null}\n\n        <Ripple isDisabled={disableRipple || trulyDisabled} {...rippleProps} />\n      </ui.button>\n    )\n  },\n)\n\nconst Loading: FC<\n  Pick<ButtonProps, \"className\" | \"loadingIcon\" | \"loadingText\">\n> = ({ className, loadingIcon, loadingText }) => {\n  const css = useMemo(\n    (): CSSUIObject => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: loadingText ? \"relative\" : \"absolute\",\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n    }),\n    [loadingText],\n  )\n\n  const element = useMemo(() => {\n    if (typeof loadingIcon === \"string\") {\n      return <LoadingIcon color=\"current\" variant={loadingIcon} />\n    } else {\n      return loadingIcon || <LoadingIcon color=\"current\" />\n    }\n  }, [loadingIcon])\n\n  return (\n    <ui.div className={cx(\"ui-button__loading\", className)} __css={css}>\n      {element}\n    </ui.div>\n  )\n}\n\nconst Content: FC<Pick<ButtonProps, \"leftIcon\" | \"rightIcon\" | \"children\">> = ({\n  leftIcon,\n  rightIcon,\n  children,\n}) => {\n  return (\n    <>\n      {leftIcon ? <Icon>{leftIcon}</Icon> : null}\n      {children}\n      {rightIcon ? <Icon>{rightIcon}</Icon> : null}\n    </>\n  )\n}\n\nconst Icon: FC<HTMLUIProps<\"span\">> = ({ children, className, ...rest }) => {\n  return (\n    <ui.span\n      className={cx(\"ui-button__icon\", className)}\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      aria-hidden={true}\n      {...rest}\n    >\n      {children}\n    </ui.span>\n  )\n}\n\nexport const useButtonType = (value?: ElementType) => {\n  const isButton = useRef(!value)\n\n  const ref = useCallback((node: HTMLElement | null) => {\n    if (node) isButton.current = node.tagName === \"BUTTON\"\n  }, [])\n\n  const type = isButton.current ? \"button\" : undefined\n\n  return { ref, type } as const\n}\n","import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { createContext, cx, dataAttr } from \"@yamada-ui/utils\"\nimport { useMemo } from \"react\"\n\ntype ButtonGroupOptions = {\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIObject[\"flexDirection\"]\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered to look flushed together.\n   *\n   * @default false\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport type ButtonGroupProps = Omit<HTMLUIProps<\"div\">, \"direction\"> &\n  ThemeProps<\"Button\"> &\n  ButtonGroupOptions\n\ntype ButtonGroupContext = ThemeProps<\"Button\"> & {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: \"ButtonGroupContext\",\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">(\n  (\n    {\n      className,\n      size,\n      variant,\n      direction: flexDirection,\n      isAttached,\n      isDisabled,\n      gap,\n      columnGap,\n      rowGap,\n      ...rest\n    },\n    ref,\n  ) => {\n    const isColumn =\n      flexDirection === \"column\" || flexDirection === \"column-reverse\"\n\n    const css: CSSUIObject = {\n      display: \"inline-flex\",\n      flexDirection,\n    }\n\n    const context: ButtonGroupContext = useMemo(\n      () => ({ size, variant, isDisabled }),\n      [size, variant, isDisabled],\n    )\n\n    if (isAttached) {\n      Object.assign(css, {\n        \"> *:first-of-type:not(:last-of-type)\": isColumn\n          ? { borderBottomRadius: 0, marginBlockEnd: \"-1px\" }\n          : { borderRightRadius: 0, marginInlineEnd: \"-1px\" },\n        \"> *:not(:first-of-type):not(:last-of-type)\": isColumn\n          ? { borderRadius: 0, marginBlockStart: \"-1px\" }\n          : { borderRadius: 0, marginInlineEnd: \"-1px\" },\n        \"> *:not(:first-of-type):last-of-type\": isColumn\n          ? { borderTopRadius: 0, marginBlockStart: \"-1px\" }\n          : { borderLeftRadius: 0 },\n      })\n    } else {\n      Object.assign(css, {\n        gap,\n        columnGap,\n        rowGap,\n      })\n    }\n\n    return (\n      <ButtonGroupProvider value={context}>\n        <ui.div\n          ref={ref}\n          role=\"group\"\n          className={cx(\"ui-button-group\", className)}\n          data-attached={dataAttr(isAttached)}\n          __css={css}\n          {...rest}\n        />\n      </ButtonGroupProvider>\n    )\n  },\n)\n"],"mappings":"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","names":["import_core","import_utils","import_react","import_jsx_runtime","LoadingIcon"]}