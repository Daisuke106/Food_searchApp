{"version":3,"sources":["../src/button-group.tsx"],"sourcesContent":["import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { createContext, cx, dataAttr } from \"@yamada-ui/utils\"\nimport { useMemo } from \"react\"\n\ntype ButtonGroupOptions = {\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIObject[\"flexDirection\"]\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered to look flushed together.\n   *\n   * @default false\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport type ButtonGroupProps = Omit<HTMLUIProps<\"div\">, \"direction\"> &\n  ThemeProps<\"Button\"> &\n  ButtonGroupOptions\n\ntype ButtonGroupContext = ThemeProps<\"Button\"> & {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: \"ButtonGroupContext\",\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">(\n  (\n    {\n      className,\n      size,\n      variant,\n      direction: flexDirection,\n      isAttached,\n      isDisabled,\n      gap,\n      columnGap,\n      rowGap,\n      ...rest\n    },\n    ref,\n  ) => {\n    const isColumn =\n      flexDirection === \"column\" || flexDirection === \"column-reverse\"\n\n    const css: CSSUIObject = {\n      display: \"inline-flex\",\n      flexDirection,\n    }\n\n    const context: ButtonGroupContext = useMemo(\n      () => ({ size, variant, isDisabled }),\n      [size, variant, isDisabled],\n    )\n\n    if (isAttached) {\n      Object.assign(css, {\n        \"> *:first-of-type:not(:last-of-type)\": isColumn\n          ? { borderBottomRadius: 0, marginBlockEnd: \"-1px\" }\n          : { borderRightRadius: 0, marginInlineEnd: \"-1px\" },\n        \"> *:not(:first-of-type):not(:last-of-type)\": isColumn\n          ? { borderRadius: 0, marginBlockStart: \"-1px\" }\n          : { borderRadius: 0, marginInlineEnd: \"-1px\" },\n        \"> *:not(:first-of-type):last-of-type\": isColumn\n          ? { borderTopRadius: 0, marginBlockStart: \"-1px\" }\n          : { borderLeftRadius: 0 },\n      })\n    } else {\n      Object.assign(css, {\n        gap,\n        columnGap,\n        rowGap,\n      })\n    }\n\n    return (\n      <ButtonGroupProvider value={context}>\n        <ui.div\n          ref={ref}\n          role=\"group\"\n          className={cx(\"ui-button-group\", className)}\n          data-attached={dataAttr(isAttached)}\n          __css={css}\n          {...rest}\n        />\n      </ButtonGroupProvider>\n    )\n  },\n)\n"],"mappings":";;;AACA,SAAS,IAAI,kBAAkB;AAC/B,SAAS,eAAe,IAAI,gBAAgB;AAC5C,SAAS,eAAe;AAyFhB;AA5DR,IAAM,CAAC,qBAAqB,cAAc,IAAI;AAAA,EAC5C;AAAA,IACE,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AACF;AAIO,IAAM,cAAc;AAAA,EACzB,CACE;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,GACA,QACG;AACH,UAAM,WACJ,kBAAkB,YAAY,kBAAkB;AAElD,UAAM,MAAmB;AAAA,MACvB,SAAS;AAAA,MACT;AAAA,IACF;AAEA,UAAM,UAA8B;AAAA,MAClC,OAAO,EAAE,MAAM,SAAS,WAAW;AAAA,MACnC,CAAC,MAAM,SAAS,UAAU;AAAA,IAC5B;AAEA,QAAI,YAAY;AACd,aAAO,OAAO,KAAK;AAAA,QACjB,wCAAwC,WACpC,EAAE,oBAAoB,GAAG,gBAAgB,OAAO,IAChD,EAAE,mBAAmB,GAAG,iBAAiB,OAAO;AAAA,QACpD,8CAA8C,WAC1C,EAAE,cAAc,GAAG,kBAAkB,OAAO,IAC5C,EAAE,cAAc,GAAG,iBAAiB,OAAO;AAAA,QAC/C,wCAAwC,WACpC,EAAE,iBAAiB,GAAG,kBAAkB,OAAO,IAC/C,EAAE,kBAAkB,EAAE;AAAA,MAC5B,CAAC;AAAA,IACH,OAAO;AACL,aAAO,OAAO,KAAK;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WACE,oBAAC,uBAAoB,OAAO,SAC1B;AAAA,MAAC,GAAG;AAAA,MAAH;AAAA,QACC;AAAA,QACA,MAAK;AAAA,QACL,WAAW,GAAG,mBAAmB,SAAS;AAAA,QAC1C,iBAAe,SAAS,UAAU;AAAA,QAClC,OAAO;AAAA,QACN,GAAG;AAAA;AAAA,IACN,GACF;AAAA,EAEJ;AACF;","names":[]}