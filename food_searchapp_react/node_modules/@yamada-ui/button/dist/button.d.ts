import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, ThemeProps } from '@yamada-ui/core';
import { LoadingProps } from '@yamada-ui/loading';
import { ElementType, ReactElement } from 'react';

type ButtonOptions = {
    /**
     * The type of button. Accepts `button`, `reset`, or `submit`.
     *
     * @default 'button'
     */
    type?: "button" | "reset" | "submit";
    /**
     * If true, the button is full rounded. Else, it'll be slightly round.
     *
     * @default false
     */
    isRounded?: boolean;
    /**
     * If `true`, the loading state of the button is represented.
     *
     * @default false
     */
    isLoading?: boolean;
    /**
     * If `true`, the button is represented as active.
     *
     * @default false
     */
    isActive?: boolean;
    /**
     * If `true`, the button is disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * The icon to display at the left side of the button.
     */
    leftIcon?: ReactElement;
    /**
     * The icon to display at the right side of the button.
     */
    rightIcon?: ReactElement;
    /**
     * The icon to display when the button is loading.
     */
    loadingIcon?: ReactElement | LoadingProps["variant"];
    /**
     * The text to display when the button is loading.
     */
    loadingText?: string;
    /**
     * The placement of the loading indicator. Accepts `start` or `end`.
     *
     * @default 'start'
     */
    loadingPlacement?: "start" | "end";
    /**
     * If `true`, disable ripple effects when pressing a element.
     *
     * @default false
     */
    disableRipple?: boolean;
};
type ButtonProps = HTMLUIProps<"button"> & ThemeProps<"Button"> & ButtonOptions;
/**
 * `Button` is an interactive component that allows users to perform actions such as submitting forms and toggling modals.
 *
 * @see Docs https://yamada-ui.com/components/forms/button
 */
declare const Button: _yamada_ui_core.Component<"button", ButtonProps>;
declare const useButtonType: (value?: ElementType) => {
    readonly ref: (node: HTMLElement | null) => void;
    readonly type: "button" | undefined;
};

export { Button, type ButtonProps, useButtonType };
