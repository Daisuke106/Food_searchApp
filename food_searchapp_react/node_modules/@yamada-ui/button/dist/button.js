"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/button.tsx
var button_exports = {};
__export(button_exports, {
  Button: () => Button,
  useButtonType: () => useButtonType
});
module.exports = __toCommonJS(button_exports);
var import_core2 = require("@yamada-ui/core");
var import_loading = require("@yamada-ui/loading");
var import_ripple = require("@yamada-ui/ripple");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/button-group.tsx
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var [ButtonGroupProvider, useButtonGroup] = (0, import_utils.createContext)(
  {
    strict: false,
    name: "ButtonGroupContext"
  }
);
var ButtonGroup = (0, import_core.forwardRef)(
  ({
    className,
    size,
    variant,
    direction: flexDirection,
    isAttached,
    isDisabled,
    gap,
    columnGap,
    rowGap,
    ...rest
  }, ref) => {
    const isColumn = flexDirection === "column" || flexDirection === "column-reverse";
    const css = {
      display: "inline-flex",
      flexDirection
    };
    const context = (0, import_react.useMemo)(
      () => ({ size, variant, isDisabled }),
      [size, variant, isDisabled]
    );
    if (isAttached) {
      Object.assign(css, {
        "> *:first-of-type:not(:last-of-type)": isColumn ? { borderBottomRadius: 0, marginBlockEnd: "-1px" } : { borderRightRadius: 0, marginInlineEnd: "-1px" },
        "> *:not(:first-of-type):not(:last-of-type)": isColumn ? { borderRadius: 0, marginBlockStart: "-1px" } : { borderRadius: 0, marginInlineEnd: "-1px" },
        "> *:not(:first-of-type):last-of-type": isColumn ? { borderTopRadius: 0, marginBlockStart: "-1px" } : { borderLeftRadius: 0 }
      });
    } else {
      Object.assign(css, {
        gap,
        columnGap,
        rowGap
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ButtonGroupProvider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        role: "group",
        className: (0, import_utils.cx)("ui-button-group", className),
        "data-attached": (0, import_utils.dataAttr)(isAttached),
        __css: css,
        ...rest
      }
    ) });
  }
);

// src/button.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var Button = (0, import_core2.forwardRef)(
  ({ children, ...props }, ref) => {
    const group = useButtonGroup();
    const [styles, mergedProps] = (0, import_core2.useComponentStyle)("Button", {
      ...group,
      ...props
    });
    const {
      className,
      as,
      type,
      isRounded,
      isLoading,
      isActive,
      isDisabled = group == null ? void 0 : group.isDisabled,
      leftIcon,
      rightIcon,
      loadingIcon,
      loadingText,
      loadingPlacement = "start",
      disableRipple,
      __css,
      ...rest
    } = (0, import_core2.omitThemeProps)(mergedProps);
    const trulyDisabled = isDisabled || isLoading;
    const { ref: buttonRef, type: defaultType } = useButtonType(as);
    const { onPointerDown, ...rippleProps } = (0, import_ripple.useRipple)({
      ...rest,
      isDisabled: disableRipple || trulyDisabled
    });
    const css = (0, import_react2.useMemo)(() => {
      var _a;
      const _focus = "_focus" in styles ? (0, import_utils2.merge)((_a = styles._focus) != null ? _a : {}, { zIndex: "fallback(yamcha, 1)" }) : {};
      return {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "fallback(2, 0.5rem)",
        appearance: "none",
        userSelect: "none",
        position: "relative",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        overflow: "hidden",
        outline: "none",
        ...styles,
        ...__css,
        ...!!group ? { _focus } : {},
        ...isRounded ? { borderRadius: "fallback(full, 9999px)" } : {}
      };
    }, [styles, __css, group, isRounded]);
    const contentProps = {
      leftIcon,
      rightIcon,
      children
    };
    const loadingProps = {
      loadingIcon,
      loadingText
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      import_core2.ui.button,
      {
        ref: (0, import_utils2.mergeRefs)(ref, buttonRef),
        as,
        className: (0, import_utils2.cx)("ui-button", className),
        type: type != null ? type : defaultType,
        disabled: trulyDisabled,
        "data-active": (0, import_utils2.dataAttr)(isActive),
        "data-loading": (0, import_utils2.dataAttr)(isLoading),
        __css: css,
        ...rest,
        onPointerDown,
        children: [
          isLoading && loadingPlacement === "start" ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Loading, { className: "ui-button__loading--start", ...loadingProps }) : null,
          isLoading ? loadingText || /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core2.ui.span, { opacity: 0, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Content, { ...contentProps }) }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Content, { ...contentProps }),
          isLoading && loadingPlacement === "end" ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Loading, { className: "ui-button__loading--end", ...loadingProps }) : null,
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_ripple.Ripple, { isDisabled: disableRipple || trulyDisabled, ...rippleProps })
        ]
      }
    );
  }
);
var Loading = ({ className, loadingIcon, loadingText }) => {
  const css = (0, import_react2.useMemo)(
    () => ({
      display: "flex",
      alignItems: "center",
      position: loadingText ? "relative" : "absolute",
      fontSize: "1em",
      lineHeight: "normal"
    }),
    [loadingText]
  );
  const element = (0, import_react2.useMemo)(() => {
    if (typeof loadingIcon === "string") {
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_loading.Loading, { color: "current", variant: loadingIcon });
    } else {
      return loadingIcon || /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_loading.Loading, { color: "current" });
    }
  }, [loadingIcon]);
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core2.ui.div, { className: (0, import_utils2.cx)("ui-button__loading", className), __css: css, children: element });
};
var Content = ({
  leftIcon,
  rightIcon,
  children
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    leftIcon ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Icon, { children: leftIcon }) : null,
    children,
    rightIcon ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Icon, { children: rightIcon }) : null
  ] });
};
var Icon = ({ children, className, ...rest }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_core2.ui.span,
    {
      className: (0, import_utils2.cx)("ui-button__icon", className),
      display: "inline-flex",
      alignSelf: "center",
      flexShrink: 0,
      "aria-hidden": true,
      ...rest,
      children
    }
  );
};
var useButtonType = (value) => {
  const isButton = (0, import_react2.useRef)(!value);
  const ref = (0, import_react2.useCallback)((node) => {
    if (node)
      isButton.current = node.tagName === "BUTTON";
  }, []);
  const type = isButton.current ? "button" : void 0;
  return { ref, type };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Button,
  useButtonType
});
//# sourceMappingURL=button.js.map