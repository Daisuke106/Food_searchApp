"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/button-group.tsx
var button_group_exports = {};
__export(button_group_exports, {
  ButtonGroup: () => ButtonGroup,
  useButtonGroup: () => useButtonGroup
});
module.exports = __toCommonJS(button_group_exports);
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var [ButtonGroupProvider, useButtonGroup] = (0, import_utils.createContext)(
  {
    strict: false,
    name: "ButtonGroupContext"
  }
);
var ButtonGroup = (0, import_core.forwardRef)(
  ({
    className,
    size,
    variant,
    direction: flexDirection,
    isAttached,
    isDisabled,
    gap,
    columnGap,
    rowGap,
    ...rest
  }, ref) => {
    const isColumn = flexDirection === "column" || flexDirection === "column-reverse";
    const css = {
      display: "inline-flex",
      flexDirection
    };
    const context = (0, import_react.useMemo)(
      () => ({ size, variant, isDisabled }),
      [size, variant, isDisabled]
    );
    if (isAttached) {
      Object.assign(css, {
        "> *:first-of-type:not(:last-of-type)": isColumn ? { borderBottomRadius: 0, marginBlockEnd: "-1px" } : { borderRightRadius: 0, marginInlineEnd: "-1px" },
        "> *:not(:first-of-type):not(:last-of-type)": isColumn ? { borderRadius: 0, marginBlockStart: "-1px" } : { borderRadius: 0, marginInlineEnd: "-1px" },
        "> *:not(:first-of-type):last-of-type": isColumn ? { borderTopRadius: 0, marginBlockStart: "-1px" } : { borderLeftRadius: 0 }
      });
    } else {
      Object.assign(css, {
        gap,
        columnGap,
        rowGap
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ButtonGroupProvider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        role: "group",
        className: (0, import_utils.cx)("ui-button-group", className),
        "data-attached": (0, import_utils.dataAttr)(isAttached),
        __css: css,
        ...rest
      }
    ) });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ButtonGroup,
  useButtonGroup
});
//# sourceMappingURL=button-group.js.map