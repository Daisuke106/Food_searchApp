"use client"
import {
  Loading
} from "./chunk-CVMB44NZ.mjs";

// src/loading-provider.tsx
import { ui } from "@yamada-ui/core";
import { AnimatePresence, Motion, motion } from "@yamada-ui/motion";
import { Portal } from "@yamada-ui/portal";
import { useTimeout } from "@yamada-ui/use-timeout";
import {
  isValidElement,
  assignRef,
  useUpdateEffect,
  isNumber
} from "@yamada-ui/utils";
import {
  createContext,
  memo,
  useContext,
  useMemo,
  useState,
  Fragment,
  useRef,
  createRef
} from "react";
import { RemoveScroll } from "react-remove-scroll";
import { Fragment as Fragment2, jsx, jsxs } from "react/jsx-runtime";
var LoadingContext = createContext({});
var createLoadingRefs = () => ({
  isLoading: createRef(),
  start: createRef(),
  finish: createRef(),
  update: createRef(),
  force: createRef()
});
var createLoadingFunc = (refs) => ({
  isLoading: () => {
    var _a, _b, _c;
    return (_c = (_b = (_a = refs.current.isLoading).current) == null ? void 0 : _b.call(_a)) != null ? _c : false;
  },
  start: (props) => {
    var _a, _b;
    return (_b = (_a = refs.current.start).current) == null ? void 0 : _b.call(_a, props);
  },
  finish: () => {
    var _a, _b;
    return (_b = (_a = refs.current.finish).current) == null ? void 0 : _b.call(_a);
  },
  update: (props) => {
    var _a, _b;
    return (_b = (_a = refs.current.update).current) == null ? void 0 : _b.call(_a, props);
  },
  force: (state) => {
    var _a, _b;
    return (_b = (_a = refs.current.force).current) == null ? void 0 : _b.call(_a, state);
  }
});
var incrementCount = (prev) => prev + 1;
var decrementCount = (prev) => prev === 0 ? prev : prev - 1;
var LoadingProvider = ({
  screen,
  page,
  background,
  custom,
  children
}) => {
  var _a, _b, _c, _d, _e;
  const screenRefs = useRef(createLoadingRefs());
  const pageRefs = useRef(createLoadingRefs());
  const backgroundRefs = useRef(createLoadingRefs());
  const customRefs = useRef(createLoadingRefs());
  const screenLoadingFunc = createLoadingFunc(screenRefs);
  const pageLoadingFunc = createLoadingFunc(pageRefs);
  const backgroundLoadingFunc = createLoadingFunc(backgroundRefs);
  const customLoadingFunc = createLoadingFunc(customRefs);
  const value = {
    screen: screenLoadingFunc,
    page: pageLoadingFunc,
    background: backgroundLoadingFunc,
    custom: customLoadingFunc
  };
  return /* @__PURE__ */ jsxs(LoadingContext.Provider, { value, children: [
    children,
    /* @__PURE__ */ jsx(
      Controller,
      {
        controlRefs: screenRefs,
        ...screen,
        component: (_a = screen == null ? void 0 : screen.component) != null ? _a : (props) => /* @__PURE__ */ jsx(ScreenComponent, { ...props })
      }
    ),
    /* @__PURE__ */ jsx(
      Controller,
      {
        controlRefs: pageRefs,
        ...page,
        component: (_b = page == null ? void 0 : page.component) != null ? _b : (props) => /* @__PURE__ */ jsx(PageComponent, { ...props })
      }
    ),
    /* @__PURE__ */ jsx(
      Controller,
      {
        controlRefs: backgroundRefs,
        ...background,
        blockScrollOnMount: (_c = background == null ? void 0 : background.blockScrollOnMount) != null ? _c : false,
        component: (_d = background == null ? void 0 : background.component) != null ? _d : (props) => /* @__PURE__ */ jsx(BackgroundComponent, { ...props })
      }
    ),
    /* @__PURE__ */ jsx(
      Controller,
      {
        controlRefs: customRefs,
        blockScrollOnMount: (_e = background == null ? void 0 : background.blockScrollOnMount) != null ? _e : false,
        ...custom,
        component: custom == null ? void 0 : custom.component
      }
    )
  ] });
};
var Controller = ({
  controlRefs,
  appendToParentPortal,
  containerRef,
  allowPinchZoom = false,
  blockScrollOnMount = true,
  initialState,
  duration: durationProps = null,
  icon,
  text,
  component
}) => {
  const isLoadingRef = useRef(false);
  const [{ loadingCount, message, duration }, setState] = useState({
    loadingCount: initialState ? 1 : 0,
    message: void 0,
    duration: durationProps
  });
  const { isLoading, start, finish, update, force } = useMemo(
    () => ({
      isLoading: () => isLoadingRef.current,
      start: ({ message: message2, duration: duration2 = durationProps } = {}) => {
        isLoadingRef.current = true;
        setState(({ loadingCount: loadingCount2 }) => ({
          loadingCount: incrementCount(loadingCount2),
          message: message2,
          duration: duration2
        }));
      },
      update: (next) => setState((prev) => ({ ...prev, ...next })),
      finish: () => {
        isLoadingRef.current = false;
        setState(({ loadingCount: loadingCount2 }) => ({
          loadingCount: decrementCount(loadingCount2),
          message: void 0,
          duration: durationProps
        }));
      },
      force: ({ loadingCount: loadingCount2 = 0, message: message2, duration: duration2 = durationProps }) => {
        isLoadingRef.current = !!loadingCount2;
        setState({
          loadingCount: loadingCount2,
          message: message2,
          duration: duration2
        });
      }
    }),
    [durationProps]
  );
  assignRef(controlRefs.current.isLoading, isLoading);
  assignRef(controlRefs.current.start, start);
  assignRef(controlRefs.current.finish, finish);
  assignRef(controlRefs.current.update, update);
  assignRef(controlRefs.current.force, force);
  const props = {
    initialState,
    icon,
    text,
    message,
    duration,
    onFinish: finish
  };
  useUpdateEffect(() => {
    if (initialState || isNumber(durationProps))
      setState({
        loadingCount: initialState ? 1 : 0,
        message: void 0,
        duration: durationProps
      });
  }, [initialState, durationProps]);
  return /* @__PURE__ */ jsx(AnimatePresence, { initial: false, children: loadingCount ? /* @__PURE__ */ jsx(
    Portal,
    {
      appendToParentPortal,
      containerRef,
      children: /* @__PURE__ */ jsx(
        RemoveScroll,
        {
          allowPinchZoom,
          enabled: blockScrollOnMount,
          forwardProps: true,
          children: /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(Render, { component, ...props }) })
        }
      )
    }
  ) : null });
};
var Render = ({ component, ...props }) => {
  if (typeof component === "function") {
    return component(props);
  } else {
    return /* @__PURE__ */ jsx(Fragment2, {});
  }
};
var Message = ({ message, ...rest }) => {
  return message ? isValidElement(message) ? message : /* @__PURE__ */ jsx(ui.p, { ...rest, children: message }) : null;
};
var getVariants = (type = "fade") => ({
  initial: {
    opacity: 0,
    scale: type === "scaleFade" ? 0.95 : void 0
  },
  animate: {
    opacity: 1,
    scale: type === "scaleFade" ? 1 : void 0,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: type === "scaleFade" ? 0.95 : void 0,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 1, 1]
    }
  }
});
var getOverlayStyle = (type = "fill") => ({
  position: "fixed",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  zIndex: "fallback(beerus, 9999)",
  bg: type === "fill" ? ["fallback(white, #fbfbfb)", "fallback(black, #141414)"] : "fallback(blackAlpha.600, rgba(0, 0, 0, 0.48))",
  w: "100vw",
  h: "100dvh",
  p: "fallback(4, 1rem)",
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
});
var getMotionProps = (initialState, type = "fade") => ({
  initial: initialState ? false : "initial",
  animate: "animate",
  exit: "exit",
  variants: getVariants(type)
});
var ScreenComponent = memo(
  ({
    initialState,
    icon,
    text,
    message,
    duration,
    onFinish
  }) => {
    const css = {
      maxW: "24rem",
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      gap: "fallback(2, 0.5rem)"
    };
    useTimeout(onFinish, duration);
    return /* @__PURE__ */ jsx(
      Motion,
      {
        className: "ui-loading-screen",
        ...getMotionProps(initialState),
        __css: getOverlayStyle(),
        children: /* @__PURE__ */ jsxs(ui.div, { __css: css, children: [
          /* @__PURE__ */ jsx(Loading, { size: "6xl", ...icon }),
          /* @__PURE__ */ jsx(Message, { message, lineClamp: 3, ...text })
        ] })
      }
    );
  }
);
ScreenComponent.displayName = "ScreenComponent";
var PageComponent = memo(
  ({
    initialState,
    icon,
    text,
    message,
    duration,
    onFinish
  }) => {
    const css = {
      bg: ["fallback(white, #fbfbfb)", "fallback(black, #141414)"],
      maxW: "24rem",
      p: "fallback(4, 1rem)",
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      gap: "fallback(2, 0.5rem)",
      rounded: "fallback(md, 0.375rem)",
      boxShadow: [
        "fallback(lg, 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05))",
        "fallback(dark-lg, 0px 0px 0px 1px rgba(0, 0, 0, 0.1), 0px 5px 10px rgba(0, 0, 0, 0.2), 0px 15px 40px rgba(0, 0, 0, 0.4))"
      ]
    };
    useTimeout(onFinish, duration);
    return /* @__PURE__ */ jsx(
      Motion,
      {
        className: "ui-loading-page",
        ...getMotionProps(initialState),
        __css: getOverlayStyle("transparent"),
        children: /* @__PURE__ */ jsxs(
          ui.div,
          {
            as: motion.div,
            className: "ui-loading-page__inner",
            ...getMotionProps(initialState, "scaleFade"),
            __css: css,
            children: [
              /* @__PURE__ */ jsx(Loading, { size: "6xl", ...icon }),
              /* @__PURE__ */ jsx(Message, { message, lineClamp: 3, ...text })
            ]
          }
        )
      }
    );
  }
);
PageComponent.displayName = "PageComponent";
var BackgroundComponent = memo(
  ({
    initialState,
    icon,
    text,
    message,
    duration,
    onFinish
  }) => {
    const css = {
      position: "fixed",
      right: "fallback(4, 1rem)",
      bottom: "fallback(4, 1rem)",
      zIndex: "fallback(beerus, 9999)",
      bg: ["fallback(white, #fbfbfb)", "fallback(black, #141414)"],
      maxW: "20rem",
      p: "fallback(2, 0.5rem)",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      gap: "fallback(2, 0.5rem)",
      rounded: "fallback(md, 0.375rem)",
      boxShadow: [
        "fallback(3xl, 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 -25px 50px -12px rgba(0, 0, 0, 0.25))",
        "fallback(dark-lg, 0px 0px 0px 1px rgba(0, 0, 0, 0.1), 0px 5px 10px rgba(0, 0, 0, 0.2), 0px 15px 40px rgba(0, 0, 0, 0.4))"
      ]
    };
    useTimeout(onFinish, duration);
    return /* @__PURE__ */ jsxs(
      Motion,
      {
        className: "ui-loading-background",
        ...getMotionProps(initialState, "scaleFade"),
        __css: css,
        children: [
          /* @__PURE__ */ jsx(Loading, { size: "xl", ...icon }),
          /* @__PURE__ */ jsx(Message, { message, fontSize: "sm", lineClamp: 1, ...text })
        ]
      }
    );
  }
);
BackgroundComponent.displayName = "BackgroundComponent";
var useLoading = () => {
  const { screen, page, background, custom } = useContext(LoadingContext);
  return { screen, page, background, custom };
};

export {
  LoadingProvider,
  useLoading
};
//# sourceMappingURL=chunk-DN5U2A2I.mjs.map