import * as react from 'react';
import { PropsWithChildren, FC, ReactNode } from 'react';
import { ThemeConfig } from '@yamada-ui/core';

type LoadingContextProps = {
    /**
     * Returns a judgement on whether it is currently loading or not.
     */
    isLoading: () => boolean;
    /**
     * Function to start loading.
     *
     * If you specify a `message` etc. as an argument, the loading will change accordingly.
     */
    start: (props?: Partial<LoadingProps>) => void;
    /**
     * Function to finish loading.
     */
    finish: () => void;
    /**
     * Function to update loading.
     *
     * If you specify a `message` etc. as an argument, the loading will change accordingly.
     */
    update: (props: Partial<LoadingProps>) => void;
    /**
     * Function to forcefully update the loading state.
     *
     * Please be careful, as it will forcefully overwrite the state of the loading component.
     */
    force: (state: Partial<LoadingState>) => void;
};
type LoadingProps = {
    message: ReactNode | undefined;
    duration: number | null;
};
type LoadingState = {
    loadingCount: number;
    message: ReactNode | undefined;
    duration: number | null;
};
type LoadingProviderProps = PropsWithChildren<ThemeConfig["loading"]>;
type LoadingContext = {
    /**
     * The screen loading animation.
     */
    screen: LoadingContextProps;
    /**
     * The page loading animation.
     */
    page: LoadingContextProps;
    /**
     * The background loading animation.
     */
    background: LoadingContextProps;
    /**
     * The custom loading animation.
     *
     * This cannot be used unless a component is defined at `config/loading/custom.`
     */
    custom: LoadingContextProps;
};
declare const LoadingContext: react.Context<LoadingContext>;
declare const LoadingProvider: FC<LoadingProviderProps>;
/**
 * `useLoading` is a custom hook for controlling the loading of the application.
 *
 * @see Docs https://yamada-ui.com/hooks/use-loading
 */
declare const useLoading: () => LoadingContext;

export { LoadingProvider, type LoadingProviderProps, useLoading };
