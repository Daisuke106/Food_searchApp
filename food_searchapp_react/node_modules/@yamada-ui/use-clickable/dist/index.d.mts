import * as react from 'react';
import { HTMLAttributes, Ref, MouseEvent, KeyboardEvent } from 'react';
import { Dict } from '@yamada-ui/utils';

type UseClickableProps<Y extends HTMLElement = HTMLElement, M extends HTMLAttributes<Y> = Dict> = M & {
    /**
     * If `true`, the element will be disabled. It will set the `disabled` HTML attribute.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * If `true` and isDisabled, the element will have only `aria-disabled` set to `true`.
     *
     * @default false
     */
    isFocusable?: boolean;
    /**
     * Whether or not trigger click on pressing `Enter`.
     *
     * @default true
     */
    clickOnEnter?: boolean;
    /**
     * Whether or not trigger click on pressing `Space`.
     *
     * @default true
     */
    clickOnSpace?: boolean;
    /**
     * Whether or not to focus the element when it is clicked.
     * If `true`, the element will receive focus upon click.
     *
     * @default true
     */
    focusOnClick?: boolean;
    /**
     * The ref for the element.
     */
    ref?: Ref<HTMLElement>;
};
declare const useClickable: <Y extends HTMLElement = HTMLElement, M extends HTMLAttributes<Y> = Dict>({ ref, isDisabled, isFocusable, clickOnEnter, clickOnSpace, focusOnClick, onMouseDown, onMouseUp, onClick, onKeyDown, onKeyUp, tabIndex: _tabIndex, onMouseOver, onMouseLeave, ...props }?: UseClickableProps<Y, M>) => (Omit<UseClickableProps<Y, M>, "ref" | "isDisabled" | "isFocusable" | "clickOnEnter" | "clickOnSpace" | "focusOnClick" | "onMouseDown" | "onMouseUp" | "onClick" | "onKeyDown" | "onKeyUp" | "tabIndex" | "onMouseOver" | "onMouseLeave"> & {
    ref: (node: any) => void;
    type: string;
    "aria-disabled": boolean | undefined;
    disabled: boolean | undefined;
    onClick: (ev: MouseEvent<Y>) => void;
    onMouseDown: react.MouseEventHandler<Y> | undefined;
    onMouseUp: react.MouseEventHandler<Y> | undefined;
    onKeyUp: react.KeyboardEventHandler<Y> | undefined;
    onKeyDown: react.KeyboardEventHandler<Y> | undefined;
    onMouseOver: react.MouseEventHandler<Y> | undefined;
    onMouseLeave: react.MouseEventHandler<Y> | undefined;
}) | (Omit<UseClickableProps<Y, M>, "ref" | "isDisabled" | "isFocusable" | "clickOnEnter" | "clickOnSpace" | "focusOnClick" | "onMouseDown" | "onMouseUp" | "onClick" | "onKeyDown" | "onKeyUp" | "tabIndex" | "onMouseOver" | "onMouseLeave"> & {
    ref: (node: any) => void;
    role: string;
    "data-active": boolean | "true" | "false";
    "aria-disabled": "true" | undefined;
    tabIndex: number | undefined;
    onClick: (ev: MouseEvent<Y>) => void;
    onMouseDown: (ev: MouseEvent<Y>) => void;
    onMouseUp: (ev: MouseEvent<Y>) => void;
    onKeyUp: (ev: KeyboardEvent<Y>) => void;
    onKeyDown: (ev: KeyboardEvent<Y>) => void;
    onMouseOver: (ev: MouseEvent<Y>) => void;
    onMouseLeave: (ev: MouseEvent<Y>) => void;
});
type UseClickableReturn = ReturnType<typeof useClickable>;

export { type UseClickableProps, type UseClickableReturn, useClickable };
