"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useClickable: () => useClickable
});
module.exports = __toCommonJS(src_exports);
var import_use_event_listener = require("@yamada-ui/use-event-listener");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var isValidElement = (ev) => {
  const { tagName, isContentEditable } = ev.target;
  return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable !== true;
};
var useClickable = ({
  ref,
  isDisabled,
  isFocusable,
  clickOnEnter = true,
  clickOnSpace = true,
  focusOnClick = true,
  onMouseDown,
  onMouseUp,
  onClick,
  onKeyDown,
  onKeyUp,
  tabIndex: _tabIndex,
  onMouseOver,
  onMouseLeave,
  ...props
} = {}) => {
  const [isButton, setIsButton] = (0, import_react.useState)(true);
  const [isPressed, setIsPressed] = (0, import_react.useState)(false);
  const listeners = (0, import_use_event_listener.useEventListeners)();
  const tabIndex = isButton ? _tabIndex : _tabIndex || 0;
  const trulyDisabled = isDisabled && !isFocusable;
  const refCb = (node) => {
    if (!node)
      return;
    if (node.tagName !== "BUTTON")
      setIsButton(false);
  };
  const handleClick = (0, import_react.useCallback)(
    (ev) => {
      if (isDisabled) {
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }
      if (focusOnClick)
        ev.currentTarget.focus();
      onClick == null ? void 0 : onClick(ev);
    },
    [isDisabled, focusOnClick, onClick]
  );
  const onDocumentKeyUp = (0, import_react.useCallback)(
    (ev) => {
      if (isPressed && isValidElement(ev)) {
        ev.preventDefault();
        ev.stopPropagation();
        setIsPressed(false);
        listeners.remove(document, "keyup", onDocumentKeyUp, false);
      }
    },
    [isPressed, listeners]
  );
  const handleKeyDown = (0, import_react.useCallback)(
    (ev) => {
      onKeyDown == null ? void 0 : onKeyDown(ev);
      if (isDisabled || ev.defaultPrevented || ev.metaKey)
        return;
      if (!isValidElement(ev.nativeEvent) || isButton)
        return;
      if (clickOnSpace && ev.key === " ") {
        ev.preventDefault();
        setIsPressed(true);
      }
      if (clickOnEnter && ev.key === "Enter") {
        ev.preventDefault();
        ev.currentTarget.click();
      }
      listeners.add(document, "keyup", onDocumentKeyUp, false);
    },
    [
      isDisabled,
      isButton,
      onKeyDown,
      clickOnEnter,
      clickOnSpace,
      listeners,
      onDocumentKeyUp
    ]
  );
  const handleKeyUp = (0, import_react.useCallback)(
    (ev) => {
      onKeyUp == null ? void 0 : onKeyUp(ev);
      if (isDisabled || ev.defaultPrevented || ev.metaKey)
        return;
      if (!isValidElement(ev.nativeEvent) || isButton)
        return;
      if (clickOnSpace && ev.key === " ") {
        ev.preventDefault();
        setIsPressed(false);
        ev.currentTarget.click();
      }
    },
    [clickOnSpace, isButton, isDisabled, onKeyUp]
  );
  const onDocumentMouseUp = (0, import_react.useCallback)(
    (ev) => {
      if (ev.button !== 0)
        return;
      setIsPressed(false);
      listeners.remove(document, "mouseup", onDocumentMouseUp, false);
    },
    [listeners]
  );
  const handleMouseDown = (0, import_react.useCallback)(
    (ev) => {
      if (ev.button !== 0)
        return;
      if (isDisabled) {
        ev.stopPropagation();
        ev.preventDefault();
        return;
      }
      if (!isButton)
        setIsPressed(true);
      ev.currentTarget.focus({ preventScroll: true });
      listeners.add(document, "mouseup", onDocumentMouseUp, false);
      onMouseDown == null ? void 0 : onMouseDown(ev);
    },
    [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]
  );
  const handleMouseUp = (0, import_react.useCallback)(
    (ev) => {
      if (ev.button !== 0)
        return;
      if (!isButton)
        setIsPressed(false);
      onMouseUp == null ? void 0 : onMouseUp(ev);
    },
    [onMouseUp, isButton]
  );
  const handleMouseOver = (0, import_react.useCallback)(
    (ev) => {
      if (isDisabled) {
        ev.preventDefault();
        return;
      }
      onMouseOver == null ? void 0 : onMouseOver(ev);
    },
    [isDisabled, onMouseOver]
  );
  const handleMouseLeave = (0, import_react.useCallback)(
    (ev) => {
      if (isPressed) {
        ev.preventDefault();
        setIsPressed(false);
      }
      onMouseLeave == null ? void 0 : onMouseLeave(ev);
    },
    [isPressed, onMouseLeave]
  );
  if (isButton) {
    return {
      ...props,
      ref: (0, import_utils.mergeRefs)(ref, refCb),
      type: "button",
      "aria-disabled": trulyDisabled ? void 0 : isDisabled,
      disabled: trulyDisabled,
      onClick: handleClick,
      onMouseDown,
      onMouseUp,
      onKeyUp,
      onKeyDown,
      onMouseOver,
      onMouseLeave
    };
  } else {
    return {
      ...props,
      ref: (0, import_utils.mergeRefs)(ref, refCb),
      role: "button",
      "data-active": (0, import_utils.dataAttr)(isPressed),
      "aria-disabled": isDisabled ? "true" : void 0,
      tabIndex: trulyDisabled ? void 0 : tabIndex,
      onClick: handleClick,
      onMouseDown: handleMouseDown,
      onMouseUp: handleMouseUp,
      onKeyUp: handleKeyUp,
      onKeyDown: handleKeyDown,
      onMouseOver: handleMouseOver,
      onMouseLeave: handleMouseLeave
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useClickable
});
//# sourceMappingURL=index.js.map