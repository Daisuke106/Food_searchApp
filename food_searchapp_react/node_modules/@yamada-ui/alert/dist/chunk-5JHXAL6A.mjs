"use client"

// src/alert.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps,
  useTheme
} from "@yamada-ui/core";
import { InfoIcon, WarningIcon, CheckIcon } from "@yamada-ui/icon";
import { Loading } from "@yamada-ui/loading";
import { createContext, cx } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var defaultStatuses = {
  info: { icon: InfoIcon, colorScheme: "info" },
  success: { icon: CheckIcon, colorScheme: "success" },
  warning: { icon: WarningIcon, colorScheme: "warning" },
  error: { icon: WarningIcon, colorScheme: "danger" },
  loading: { icon: Loading, colorScheme: "primary" }
};
var [AlertProvider, useAlert] = createContext({
  name: `AlertStylesContext`,
  errorMessage: `useAlert returned is 'undefined'. Seems you forgot to wrap the components in "<Alert />" `
});
var getStatusColorScheme = (status, statuses) => {
  var _a, _b;
  return (_b = (_a = statuses == null ? void 0 : statuses[status]) == null ? void 0 : _a.colorScheme) != null ? _b : defaultStatuses[status].colorScheme;
};
var getStatusIcon = (status, statuses) => {
  var _a, _b;
  return (_b = (_a = statuses == null ? void 0 : statuses[status]) == null ? void 0 : _a.icon) != null ? _b : defaultStatuses[status].icon;
};
var Alert = forwardRef(
  ({ status = "info", colorScheme, ...props }, ref) => {
    var _a, _b, _c;
    const { theme } = useTheme();
    const statuses = (_c = (_b = (_a = theme.__config) == null ? void 0 : _a.alert) == null ? void 0 : _b.statuses) != null ? _c : {};
    colorScheme != null ? colorScheme : colorScheme = getStatusColorScheme(status, statuses);
    const [styles, mergedProps] = useMultiComponentStyle("Alert", {
      ...props,
      colorScheme
    });
    const { className, children, ...rest } = omitThemeProps(mergedProps);
    const css = {
      w: "100%",
      display: "flex",
      alignItems: "center",
      position: "relative",
      overflow: "hidden",
      ...styles.container
    };
    return /* @__PURE__ */ jsx(AlertProvider, { value: { status, styles }, children: /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-alert", className),
        role: "alert",
        __css: css,
        ...rest,
        children
      }
    ) });
  }
);
var AlertIcon = ({
  className,
  children,
  variant = "oval",
  ...rest
}) => {
  var _a, _b, _c;
  const { status, styles } = useAlert();
  const { theme } = useTheme();
  const statuses = (_c = (_b = (_a = theme.__config) == null ? void 0 : _a.alert) == null ? void 0 : _b.statuses) != null ? _c : {};
  const Icon = getStatusIcon(status, statuses);
  const css = {
    ...styles.icon,
    ...status === "loading" ? styles.loading : {}
  };
  return /* @__PURE__ */ jsx(
    ui.span,
    {
      display: "inherit",
      className: cx("ui-alert__icon", className),
      __css: css,
      ...rest,
      children: children || /* @__PURE__ */ jsx(
        Icon,
        {
          ...status === "loading" ? { variant, color: "currentcolor" } : { boxSize: "100%" }
        }
      )
    }
  );
};
var AlertTitle = forwardRef(
  ({ className, ...rest }, ref) => {
    const { styles } = useAlert();
    const css = {
      display: "block",
      ...styles.title
    };
    return /* @__PURE__ */ jsx(
      ui.p,
      {
        ref,
        className: cx("ui-alert__title", className),
        __css: css,
        ...rest
      }
    );
  }
);
var AlertDescription = forwardRef(
  ({ className, ...rest }, ref) => {
    const { styles } = useAlert();
    const css = {
      ...styles.description
    };
    return /* @__PURE__ */ jsx(
      ui.span,
      {
        ref,
        className: cx("ui-alert__desc", className),
        __css: css,
        ...rest
      }
    );
  }
);

export {
  getStatusColorScheme,
  getStatusIcon,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription
};
//# sourceMappingURL=chunk-5JHXAL6A.mjs.map