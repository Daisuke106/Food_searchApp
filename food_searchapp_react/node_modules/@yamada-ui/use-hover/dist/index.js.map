{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { useRef, useEffect, useCallback, useState } from \"react\"\n\n/**\n * `useHover` is a custom hook that detects whether the pointer has moved over or away from an element.\n *\n * @see Docs https://yamada-ui.com/hooks/use-hover\n */\nexport const useHover = <T extends HTMLElement = HTMLDivElement>() => {\n  const [hovered, setHovered] = useState(false)\n  const ref = useRef<T>(null)\n\n  const onMouseEnter = useCallback(() => setHovered(true), [])\n  const onMouseLeave = useCallback(() => setHovered(false), [])\n\n  useEffect(() => {\n    const el = ref.current\n\n    if (el) {\n      el.addEventListener(\"mouseenter\", onMouseEnter)\n      el.addEventListener(\"mouseleave\", onMouseLeave)\n\n      return () => {\n        el.removeEventListener(\"mouseenter\", onMouseEnter)\n        el.removeEventListener(\"mouseleave\", onMouseLeave)\n      }\n    }\n  }, [onMouseEnter, onMouseLeave])\n\n  return { ref, hovered }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyD;AAOlD,IAAM,WAAW,MAA8C;AACpE,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,KAAK;AAC5C,QAAM,UAAM,qBAAU,IAAI;AAE1B,QAAM,mBAAe,0BAAY,MAAM,WAAW,IAAI,GAAG,CAAC,CAAC;AAC3D,QAAM,mBAAe,0BAAY,MAAM,WAAW,KAAK,GAAG,CAAC,CAAC;AAE5D,8BAAU,MAAM;AACd,UAAM,KAAK,IAAI;AAEf,QAAI,IAAI;AACN,SAAG,iBAAiB,cAAc,YAAY;AAC9C,SAAG,iBAAiB,cAAc,YAAY;AAE9C,aAAO,MAAM;AACX,WAAG,oBAAoB,cAAc,YAAY;AACjD,WAAG,oBAAoB,cAAc,YAAY;AAAA,MACnD;AAAA,IACF;AAAA,EACF,GAAG,CAAC,cAAc,YAAY,CAAC;AAE/B,SAAO,EAAE,KAAK,QAAQ;AACxB;","names":[]}