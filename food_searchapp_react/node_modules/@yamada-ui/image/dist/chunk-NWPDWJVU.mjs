"use client"
import {
  shouldShowFallbackImage,
  useImage
} from "./chunk-MCA2V6UE.mjs";

// src/image.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { cx, omitObject } from "@yamada-ui/utils";
import { isValidElement, useMemo } from "react";
import { jsx } from "react/jsx-runtime";
var Image = forwardRef((props, ref) => {
  let {
    fallback,
    src,
    srcSet,
    loading,
    ignoreFallback,
    crossOrigin,
    className,
    fallbackStrategy = "beforeLoadOrError",
    onError,
    onLoad,
    referrerPolicy,
    size: boxSize,
    fit: objectFit,
    ...rest
  } = props;
  ignoreFallback = loading != null || ignoreFallback || !fallback;
  const status = useImage({ ...props, ignoreFallback });
  const css = useMemo(() => ({ boxSize, objectFit }), [boxSize, objectFit]);
  const isFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);
  if (isFallbackImage) {
    if (isValidElement(fallback)) {
      return fallback;
    } else {
      return /* @__PURE__ */ jsx(
        ui.img,
        {
          ref,
          className: cx("ui-image--fallback", className),
          src: fallback,
          __css: css,
          ...ignoreFallback ? { ...rest, onError, onLoad } : rest
        }
      );
    }
  }
  return /* @__PURE__ */ jsx(
    ui.img,
    {
      ref,
      src,
      srcSet,
      crossOrigin,
      loading,
      referrerPolicy,
      className: cx("ui-image", className),
      __css: css,
      ...ignoreFallback ? rest : omitObject(rest, ["onError", "onLoad"])
    }
  );
});

export {
  Image
};
//# sourceMappingURL=chunk-NWPDWJVU.mjs.map