import { ImgHTMLAttributes } from 'react';

type HTMLImageElementProps = ImgHTMLAttributes<HTMLImageElement>;
type UseImageProps = {
    /**
     * The image `src` attribute.
     */
    src?: string;
    /**
     * The image `srcset` attribute.
     */
    srcSet?: string;
    /**
     * The image `sizes` attribute.
     */
    sizes?: string;
    /**
     * A callback for when the image `src` has been loaded.
     */
    onLoad?: HTMLImageElementProps["onLoad"];
    /**
     * A callback for when there was an error loading the image `src`.
     */
    onError?: HTMLImageElementProps["onError"];
    /**
     * If `true`, opt out of the `fallbackSrc` logic and use as `img`.
     *
     * @default false
     */
    ignoreFallback?: boolean;
    /**
     * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.
     * This tells the browser to request cross-origin access when trying to download the image data.
     */
    crossOrigin?: HTMLImageElementProps["crossOrigin"];
    /**
     * The image `loading` attribute.
     */
    loading?: HTMLImageElementProps["loading"];
};
type Status = "loading" | "failed" | "pending" | "loaded";
declare const shouldShowFallbackImage: (status: Status, fallbackStrategy: "onError" | "beforeLoadOrError") => boolean;
declare const useImage: ({ loading, src, srcSet, onLoad, onError, crossOrigin, sizes, ignoreFallback, }: UseImageProps) => Status;
type UseImageReturn = ReturnType<typeof useImage>;

export { type UseImageProps, type UseImageReturn, shouldShowFallbackImage, useImage };
