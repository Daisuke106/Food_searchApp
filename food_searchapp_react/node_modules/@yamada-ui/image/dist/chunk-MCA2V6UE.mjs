"use client"

// src/use-image.ts
import { useSafeLayoutEffect } from "@yamada-ui/utils";
import { useCallback, useEffect, useRef, useState } from "react";
var shouldShowFallbackImage = (status, fallbackStrategy) => status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";
var useImage = ({
  loading,
  src,
  srcSet,
  onLoad,
  onError,
  crossOrigin,
  sizes,
  ignoreFallback
}) => {
  const [status, setStatus] = useState("pending");
  useEffect(() => {
    setStatus(src ? "loading" : "pending");
  }, [src]);
  const imageRef = useRef();
  const load = useCallback(() => {
    if (!src)
      return;
    flush();
    const img = new Image();
    img.src = src;
    if (crossOrigin)
      img.crossOrigin = crossOrigin;
    if (srcSet)
      img.srcset = srcSet;
    if (sizes)
      img.sizes = sizes;
    if (loading)
      img.loading = loading;
    img.onload = (ev) => {
      flush();
      setStatus("loaded");
      onLoad == null ? void 0 : onLoad(ev);
    };
    img.onerror = (error) => {
      flush();
      setStatus("failed");
      onError == null ? void 0 : onError(error);
    };
    imageRef.current = img;
  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);
  const flush = () => {
    if (!imageRef.current)
      return;
    imageRef.current.onload = null;
    imageRef.current.onerror = null;
    imageRef.current = null;
  };
  useSafeLayoutEffect(() => {
    if (ignoreFallback)
      return;
    if (status === "loading")
      load();
    return () => {
      flush();
    };
  }, [status, load, ignoreFallback]);
  return ignoreFallback ? "loaded" : status;
};

export {
  shouldShowFallbackImage,
  useImage
};
//# sourceMappingURL=chunk-MCA2V6UE.mjs.map