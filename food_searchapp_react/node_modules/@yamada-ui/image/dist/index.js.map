{"version":3,"sources":["../src/index.ts","../src/image.tsx","../src/use-image.ts"],"sourcesContent":["export { Image } from \"./image\"\nexport type { ImageProps } from \"./image\"\nexport { useImage } from \"./use-image\"\nexport type { UseImageProps, UseImageReturn } from \"./use-image\"\n","import type { HTMLUIProps, CSSUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx, omitObject } from \"@yamada-ui/utils\"\nimport type { ReactElement } from \"react\"\nimport { isValidElement, useMemo } from \"react\"\nimport type { UseImageProps } from \"./use-image\"\nimport { shouldShowFallbackImage, useImage } from \"./use-image\"\n\ntype ImageOptions = {\n  /**\n   * Fallback image `src` or element to show if image is loading or image fails.\n   */\n  fallback?: string | ReactElement\n  /**\n   * - beforeLoadOrError: loads the fallbackImage while loading the src.\n   * - onError: loads the fallbackImage only if there is an error fetching the src.\n   *\n   * @default \"beforeLoadOrError\"\n   */\n  fallbackStrategy?: \"onError\" | \"beforeLoadOrError\"\n  /**\n   * The CSS `box-size` property.\n   */\n  size?: CSSUIProps[\"boxSize\"]\n  /**\n   * The CSS `object-fit` property.\n   */\n  fit?: CSSUIProps[\"objectFit\"]\n}\n\nexport type ImageProps = Omit<HTMLUIProps<\"img\">, keyof UseImageProps> &\n  UseImageProps &\n  ImageOptions\n\n/**\n * `Image` is a component that displays images with fallback support.\n *\n * @see Docs https://yamada-ui.com/components/media-and-icons/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">((props, ref) => {\n  let {\n    fallback,\n    src,\n    srcSet,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    className,\n    fallbackStrategy = \"beforeLoadOrError\",\n    onError,\n    onLoad,\n    referrerPolicy,\n    size: boxSize,\n    fit: objectFit,\n    ...rest\n  } = props\n\n  ignoreFallback = loading != null || ignoreFallback || !fallback\n\n  const status = useImage({ ...props, ignoreFallback })\n\n  const css = useMemo(() => ({ boxSize, objectFit }), [boxSize, objectFit])\n\n  const isFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  if (isFallbackImage) {\n    if (isValidElement(fallback)) {\n      return fallback\n    } else {\n      return (\n        <ui.img\n          ref={ref}\n          className={cx(\"ui-image--fallback\", className)}\n          src={fallback as string | undefined}\n          __css={css}\n          {...(ignoreFallback ? { ...rest, onError, onLoad } : rest)}\n        />\n      )\n    }\n  }\n\n  return (\n    <ui.img\n      ref={ref}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className={cx(\"ui-image\", className)}\n      __css={css}\n      {...(ignoreFallback ? rest : omitObject(rest, [\"onError\", \"onLoad\"]))}\n    />\n  )\n})\n","import { useSafeLayoutEffect } from \"@yamada-ui/utils\"\nimport type { ImgHTMLAttributes, SyntheticEvent } from \"react\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype HTMLImageElementProps = ImgHTMLAttributes<HTMLImageElement>\n\nexport type UseImageProps = {\n  /**\n   * The image `src` attribute.\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute.\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute.\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded.\n   */\n  onLoad?: HTMLImageElementProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`.\n   */\n  onError?: HTMLImageElementProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: HTMLImageElementProps[\"crossOrigin\"]\n  /**\n   * The image `loading` attribute.\n   */\n  loading?: HTMLImageElementProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: \"onError\" | \"beforeLoadOrError\",\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport const useImage = ({\n  loading,\n  src,\n  srcSet,\n  onLoad,\n  onError,\n  crossOrigin,\n  sizes,\n  ignoreFallback,\n}: UseImageProps) => {\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n\n    img.src = src\n\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (ev) => {\n      flush()\n\n      setStatus(\"loaded\")\n\n      onLoad?.(ev as unknown as SyntheticEvent<HTMLImageElement, Event>)\n    }\n\n    img.onerror = (error) => {\n      flush()\n\n      setStatus(\"failed\")\n\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (!imageRef.current) return\n\n    imageRef.current.onload = null\n    imageRef.current.onerror = null\n    imageRef.current = null\n  }\n\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return\n\n    if (status === \"loading\") load()\n\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,eAAAA;AAAA,EAAA;AAAA;AAAA;;;ACCA,kBAA+B;AAC/B,IAAAC,gBAA+B;AAE/B,IAAAC,gBAAwC;;;ACJxC,mBAAoC;AAEpC,mBAAyD;AA4ClD,IAAM,0BAA0B,CACrC,QACA,qBAEC,WAAW,YAAY,qBAAqB,uBAC5C,WAAW,YAAY,qBAAqB;AAExC,IAAM,WAAW,CAAC;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAqB;AACnB,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAiB,SAAS;AAEtD,8BAAU,MAAM;AACd,cAAU,MAAM,YAAY,SAAS;AAAA,EACvC,GAAG,CAAC,GAAG,CAAC;AAER,QAAM,eAAW,qBAAgC;AAEjD,QAAM,WAAO,0BAAY,MAAM;AAC7B,QAAI,CAAC;AAAK;AAEV,UAAM;AAEN,UAAM,MAAM,IAAI,MAAM;AAEtB,QAAI,MAAM;AAEV,QAAI;AAAa,UAAI,cAAc;AACnC,QAAI;AAAQ,UAAI,SAAS;AACzB,QAAI;AAAO,UAAI,QAAQ;AACvB,QAAI;AAAS,UAAI,UAAU;AAE3B,QAAI,SAAS,CAAC,OAAO;AACnB,YAAM;AAEN,gBAAU,QAAQ;AAElB,uCAAS;AAAA,IACX;AAEA,QAAI,UAAU,CAAC,UAAU;AACvB,YAAM;AAEN,gBAAU,QAAQ;AAElB,yCAAU;AAAA,IACZ;AAEA,aAAS,UAAU;AAAA,EACrB,GAAG,CAAC,KAAK,aAAa,QAAQ,OAAO,QAAQ,SAAS,OAAO,CAAC;AAE9D,QAAM,QAAQ,MAAM;AAClB,QAAI,CAAC,SAAS;AAAS;AAEvB,aAAS,QAAQ,SAAS;AAC1B,aAAS,QAAQ,UAAU;AAC3B,aAAS,UAAU;AAAA,EACrB;AAEA,wCAAoB,MAAM;AACxB,QAAI;AAAgB;AAEpB,QAAI,WAAW;AAAW,WAAK;AAE/B,WAAO,MAAM;AACX,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,QAAQ,MAAM,cAAc,CAAC;AAEjC,SAAO,iBAAiB,WAAW;AACrC;;;ADrDQ;AA/BD,IAAMC,aAAQ,wBAA8B,CAAC,OAAO,QAAQ;AACjE,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,IACN,KAAK;AAAA,IACL,GAAG;AAAA,EACL,IAAI;AAEJ,mBAAiB,WAAW,QAAQ,kBAAkB,CAAC;AAEvD,QAAM,SAAS,SAAS,EAAE,GAAG,OAAO,eAAe,CAAC;AAEpD,QAAM,UAAM,uBAAQ,OAAO,EAAE,SAAS,UAAU,IAAI,CAAC,SAAS,SAAS,CAAC;AAExE,QAAM,kBAAkB,wBAAwB,QAAQ,gBAAgB;AAExE,MAAI,iBAAiB;AACnB,YAAI,8BAAe,QAAQ,GAAG;AAC5B,aAAO;AAAA,IACT,OAAO;AACL,aACE;AAAA,QAAC,eAAG;AAAA,QAAH;AAAA,UACC;AAAA,UACA,eAAW,kBAAG,sBAAsB,SAAS;AAAA,UAC7C,KAAK;AAAA,UACL,OAAO;AAAA,UACN,GAAI,iBAAiB,EAAE,GAAG,MAAM,SAAS,OAAO,IAAI;AAAA;AAAA,MACvD;AAAA,IAEJ;AAAA,EACF;AAEA,SACE;AAAA,IAAC,eAAG;AAAA,IAAH;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAW,kBAAG,YAAY,SAAS;AAAA,MACnC,OAAO;AAAA,MACN,GAAI,iBAAiB,WAAO,0BAAW,MAAM,CAAC,WAAW,QAAQ,CAAC;AAAA;AAAA,EACrE;AAEJ,CAAC;","names":["Image","import_utils","import_react","Image"]}