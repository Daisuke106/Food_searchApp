{"version":3,"sources":["../src/skeleton.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  CSSUIProps,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport { useAnimation } from \"@yamada-ui/use-animation\"\nimport { usePrevious } from \"@yamada-ui/use-previous\"\nimport { useValue } from \"@yamada-ui/use-value\"\nimport { cx, getValidChildren, useIsMounted } from \"@yamada-ui/utils\"\n\ntype SkeletonOptions = {\n  /**\n   * The color at the animation start.\n   */\n  startColor?: CSSUIProps[\"color\"]\n  /**\n   * The color at the animation end.\n   */\n  endColor?: CSSUIProps[\"color\"]\n  /**\n   * If `true`, it'll render its children with a nice fade transition.\n   *\n   * @default false\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds.\n   *\n   * @default 0.8\n   */\n  speed?: string | number\n  /**\n   * The fadeIn duration in seconds. Requires `isLoaded` toggled to `true` in order to see the transition.\n   *\n   * @default 0.4\n   */\n  fadeDuration?: string | number\n  /**\n   * If `true`, the skeleton will take the width of it's children.\n   *\n   * @default false\n   */\n  isFitContent?: boolean\n}\n\nexport type SkeletonProps = HTMLUIProps<\"div\"> &\n  ThemeProps<\"Skeleton\"> &\n  SkeletonOptions\n\n/**\n * `Skeleton` is a component that acts as a placeholder until content is loaded.\n *\n * @see Docs https://yamada-ui.com/components/feedback/skeleton\n */\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const [styles, mergedProps] = useComponentStyle(\"Skeleton\", props)\n  let {\n    className,\n    startColor,\n    endColor,\n    fadeDuration = 0.4,\n    speed = 0.8,\n    isLoaded,\n    isFitContent,\n    children,\n    ...rest\n  } = omitThemeProps(mergedProps)\n  const [isMounted] = useIsMounted()\n  const validChildren = getValidChildren(children)\n  const prevIsLoaded = usePrevious(isLoaded)\n  const computedStartColor = useValue(startColor)\n  const computedEndColor = useValue(endColor)\n  const hasChildren = !!validChildren.length\n\n  isFitContent ??= hasChildren\n\n  const fadeIn = useAnimation({\n    keyframes: {\n      \"0%\": {\n        opacity: 0,\n      },\n      \"100%\": {\n        opacity: 1,\n      },\n    },\n    duration:\n      typeof fadeDuration === \"string\" ? fadeDuration : `${fadeDuration}s`,\n  })\n\n  const animation = useAnimation({\n    keyframes: {\n      \"0%\": {\n        borderColor: computedStartColor,\n        background: computedStartColor,\n      },\n      \"100%\": {\n        borderColor: computedEndColor,\n        background: computedEndColor,\n      },\n    },\n    duration: typeof speed === \"string\" ? speed : `${speed}s`,\n    iterationCount: \"infinite\",\n    direction: \"alternate\",\n    timingFunction: \"linear\",\n  })\n\n  const css: CSSUIObject = {\n    w: isFitContent ? \"fit-content\" : \"100%\",\n    maxW: \"100%\",\n    h: isFitContent ? \"fit-content\" : \"fallback(4, 1rem)\",\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n    ...styles,\n  }\n\n  if (isLoaded) {\n    const animation = !isMounted() || prevIsLoaded ? \"none\" : fadeIn\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-skeleton\", \"ui-skeleton--loaded\", className)}\n        {...rest}\n        animation={animation}\n      >\n        {validChildren}\n      </ui.div>\n    )\n  } else {\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-skeleton\", className)}\n        __css={css}\n        {...rest}\n        animation={animation}\n      >\n        {validChildren}\n      </ui.div>\n    )\n  }\n})\n"],"mappings":";;;AAMA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AACzB,SAAS,IAAI,kBAAkB,oBAAoB;AAsH7C;AAxEC,IAAM,WAAW,WAAiC,CAAC,OAAO,QAAQ;AACvE,QAAM,CAAC,QAAQ,WAAW,IAAI,kBAAkB,YAAY,KAAK;AACjE,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe;AAAA,IACf,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,IAAI,eAAe,WAAW;AAC9B,QAAM,CAAC,SAAS,IAAI,aAAa;AACjC,QAAM,gBAAgB,iBAAiB,QAAQ;AAC/C,QAAM,eAAe,YAAY,QAAQ;AACzC,QAAM,qBAAqB,SAAS,UAAU;AAC9C,QAAM,mBAAmB,SAAS,QAAQ;AAC1C,QAAM,cAAc,CAAC,CAAC,cAAc;AAEpC,uDAAiB;AAEjB,QAAM,SAAS,aAAa;AAAA,IAC1B,WAAW;AAAA,MACT,MAAM;AAAA,QACJ,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UACE,OAAO,iBAAiB,WAAW,eAAe,GAAG,YAAY;AAAA,EACrE,CAAC;AAED,QAAM,YAAY,aAAa;AAAA,IAC7B,WAAW;AAAA,MACT,MAAM;AAAA,QACJ,aAAa;AAAA,QACb,YAAY;AAAA,MACd;AAAA,MACA,QAAQ;AAAA,QACN,aAAa;AAAA,QACb,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IACA,UAAU,OAAO,UAAU,WAAW,QAAQ,GAAG,KAAK;AAAA,IACtD,gBAAgB;AAAA,IAChB,WAAW;AAAA,IACX,gBAAgB;AAAA,EAClB,CAAC;AAED,QAAM,MAAmB;AAAA,IACvB,GAAG,eAAe,gBAAgB;AAAA,IAClC,MAAM;AAAA,IACN,GAAG,eAAe,gBAAgB;AAAA,IAClC,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,0BAA0B;AAAA,MACxB,YAAY;AAAA,IACd;AAAA,IACA,GAAG;AAAA,EACL;AAEA,MAAI,UAAU;AACZ,UAAMA,aAAY,CAAC,UAAU,KAAK,eAAe,SAAS;AAE1D,WACE;AAAA,MAAC,GAAG;AAAA,MAAH;AAAA,QACC;AAAA,QACA,WAAW,GAAG,eAAe,uBAAuB,SAAS;AAAA,QAC5D,GAAG;AAAA,QACJ,WAAWA;AAAA,QAEV;AAAA;AAAA,IACH;AAAA,EAEJ,OAAO;AACL,WACE;AAAA,MAAC,GAAG;AAAA,MAAH;AAAA,QACC;AAAA,QACA,WAAW,GAAG,eAAe,SAAS;AAAA,QACtC,OAAO;AAAA,QACN,GAAG;AAAA,QACJ;AAAA,QAEC;AAAA;AAAA,IACH;AAAA,EAEJ;AACF,CAAC;","names":["animation"]}