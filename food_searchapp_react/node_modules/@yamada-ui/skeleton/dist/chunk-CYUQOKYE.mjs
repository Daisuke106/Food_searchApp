"use client"

// src/skeleton.tsx
import {
  ui,
  forwardRef,
  omitThemeProps,
  useComponentStyle
} from "@yamada-ui/core";
import { useAnimation } from "@yamada-ui/use-animation";
import { usePrevious } from "@yamada-ui/use-previous";
import { useValue } from "@yamada-ui/use-value";
import { cx, getValidChildren, useIsMounted } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var Skeleton = forwardRef((props, ref) => {
  const [styles, mergedProps] = useComponentStyle("Skeleton", props);
  let {
    className,
    startColor,
    endColor,
    fadeDuration = 0.4,
    speed = 0.8,
    isLoaded,
    isFitContent,
    children,
    ...rest
  } = omitThemeProps(mergedProps);
  const [isMounted] = useIsMounted();
  const validChildren = getValidChildren(children);
  const prevIsLoaded = usePrevious(isLoaded);
  const computedStartColor = useValue(startColor);
  const computedEndColor = useValue(endColor);
  const hasChildren = !!validChildren.length;
  isFitContent != null ? isFitContent : isFitContent = hasChildren;
  const fadeIn = useAnimation({
    keyframes: {
      "0%": {
        opacity: 0
      },
      "100%": {
        opacity: 1
      }
    },
    duration: typeof fadeDuration === "string" ? fadeDuration : `${fadeDuration}s`
  });
  const animation = useAnimation({
    keyframes: {
      "0%": {
        borderColor: computedStartColor,
        background: computedStartColor
      },
      "100%": {
        borderColor: computedEndColor,
        background: computedEndColor
      }
    },
    duration: typeof speed === "string" ? speed : `${speed}s`,
    iterationCount: "infinite",
    direction: "alternate",
    timingFunction: "linear"
  });
  const css = {
    w: isFitContent ? "fit-content" : "100%",
    maxW: "100%",
    h: isFitContent ? "fit-content" : "fallback(4, 1rem)",
    boxShadow: "none",
    backgroundClip: "padding-box",
    cursor: "default",
    color: "transparent",
    pointerEvents: "none",
    userSelect: "none",
    "&::before, &::after, *": {
      visibility: "hidden"
    },
    ...styles
  };
  if (isLoaded) {
    const animation2 = !isMounted() || prevIsLoaded ? "none" : fadeIn;
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-skeleton", "ui-skeleton--loaded", className),
        ...rest,
        animation: animation2,
        children: validChildren
      }
    );
  } else {
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-skeleton", className),
        __css: css,
        ...rest,
        animation,
        children: validChildren
      }
    );
  }
});

export {
  Skeleton
};
//# sourceMappingURL=chunk-CYUQOKYE.mjs.map