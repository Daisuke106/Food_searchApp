"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Skeleton: () => Skeleton,
  SkeletonCircle: () => SkeletonCircle,
  SkeletonText: () => SkeletonText
});
module.exports = __toCommonJS(src_exports);

// src/skeleton.tsx
var import_core = require("@yamada-ui/core");
var import_use_animation = require("@yamada-ui/use-animation");
var import_use_previous = require("@yamada-ui/use-previous");
var import_use_value = require("@yamada-ui/use-value");
var import_utils = require("@yamada-ui/utils");
var import_jsx_runtime = require("react/jsx-runtime");
var Skeleton = (0, import_core.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core.useComponentStyle)("Skeleton", props);
  let {
    className,
    startColor,
    endColor,
    fadeDuration = 0.4,
    speed = 0.8,
    isLoaded,
    isFitContent,
    children,
    ...rest
  } = (0, import_core.omitThemeProps)(mergedProps);
  const [isMounted] = (0, import_utils.useIsMounted)();
  const validChildren = (0, import_utils.getValidChildren)(children);
  const prevIsLoaded = (0, import_use_previous.usePrevious)(isLoaded);
  const computedStartColor = (0, import_use_value.useValue)(startColor);
  const computedEndColor = (0, import_use_value.useValue)(endColor);
  const hasChildren = !!validChildren.length;
  isFitContent != null ? isFitContent : isFitContent = hasChildren;
  const fadeIn = (0, import_use_animation.useAnimation)({
    keyframes: {
      "0%": {
        opacity: 0
      },
      "100%": {
        opacity: 1
      }
    },
    duration: typeof fadeDuration === "string" ? fadeDuration : `${fadeDuration}s`
  });
  const animation = (0, import_use_animation.useAnimation)({
    keyframes: {
      "0%": {
        borderColor: computedStartColor,
        background: computedStartColor
      },
      "100%": {
        borderColor: computedEndColor,
        background: computedEndColor
      }
    },
    duration: typeof speed === "string" ? speed : `${speed}s`,
    iterationCount: "infinite",
    direction: "alternate",
    timingFunction: "linear"
  });
  const css = {
    w: isFitContent ? "fit-content" : "100%",
    maxW: "100%",
    h: isFitContent ? "fit-content" : "fallback(4, 1rem)",
    boxShadow: "none",
    backgroundClip: "padding-box",
    cursor: "default",
    color: "transparent",
    pointerEvents: "none",
    userSelect: "none",
    "&::before, &::after, *": {
      visibility: "hidden"
    },
    ...styles
  };
  if (isLoaded) {
    const animation2 = !isMounted() || prevIsLoaded ? "none" : fadeIn;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        className: (0, import_utils.cx)("ui-skeleton", "ui-skeleton--loaded", className),
        ...rest,
        animation: animation2,
        children: validChildren
      }
    );
  } else {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        className: (0, import_utils.cx)("ui-skeleton", className),
        __css: css,
        ...rest,
        animation,
        children: validChildren
      }
    );
  }
});

// src/skeleton-circle.tsx
var import_core2 = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");
var import_jsx_runtime2 = require("react/jsx-runtime");
var SkeletonCircle = (0, import_core2.forwardRef)(
  ({
    className,
    boxSize = "fallback(12, 3rem)",
    children,
    isFitContent,
    ...rest
  }, ref) => {
    const validChildren = (0, import_utils2.getValidChildren)(children);
    const hasChildren = !!validChildren.length;
    isFitContent != null ? isFitContent : isFitContent = hasChildren;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      Skeleton,
      {
        ref,
        className: (0, import_utils2.cx)("ui-skeleton__circle", className),
        rounded: "fallback(full, 9999px)",
        isFitContent,
        ...!isFitContent ? { boxSize } : {},
        ...rest,
        children: validChildren
      }
    );
  }
);

// src/skeleton-text.tsx
var import_core3 = require("@yamada-ui/core");
var import_use_value2 = require("@yamada-ui/use-value");
var import_utils3 = require("@yamada-ui/utils");
var import_jsx_runtime3 = require("react/jsx-runtime");
var SkeletonText = (0, import_core3.forwardRef)(
  ({
    className,
    lineClamp = 3,
    startColor,
    endColor,
    fadeDuration,
    speed,
    isLoaded,
    gap = "fallback(2, 0.5rem)",
    textHeight = "fallback(2, 0.5rem)",
    children,
    ...rest
  }, ref) => {
    const computedLineClamp = (0, import_use_value2.useValue)(lineClamp);
    const css = {
      w: "100%"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_core3.ui.div,
      {
        ref,
        className: (0, import_utils3.cx)("ui-skeleton__text", className),
        __css: css,
        ...rest,
        children: Array(computedLineClamp).fill(0).map((_, index) => {
          if (isLoaded && index > 0)
            return null;
          const isLast = index + 1 === computedLineClamp;
          const props = !isLoaded ? {
            mb: !isLast ? gap : void 0,
            w: computedLineClamp > 1 ? !isLast ? "100%" : "80%" : "100%",
            h: textHeight
          } : {};
          return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            Skeleton,
            {
              ...{
                startColor,
                endColor,
                fadeDuration,
                speed,
                isLoaded,
                ...props
              },
              children: index === 0 ? children : void 0
            },
            index
          );
        })
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Skeleton,
  SkeletonCircle,
  SkeletonText
});
//# sourceMappingURL=index.js.map