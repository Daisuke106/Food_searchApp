"use client"
import {
  Skeleton
} from "./chunk-CYUQOKYE.mjs";

// src/skeleton-circle.tsx
import { forwardRef as forwardRef2 } from "@yamada-ui/core";
import { cx as cx2, getValidChildren } from "@yamada-ui/utils";

// src/skeleton-text.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { useValue } from "@yamada-ui/use-value";
import { cx } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var SkeletonText = forwardRef(
  ({
    className,
    lineClamp = 3,
    startColor,
    endColor,
    fadeDuration,
    speed,
    isLoaded,
    gap = "fallback(2, 0.5rem)",
    textHeight = "fallback(2, 0.5rem)",
    children,
    ...rest
  }, ref) => {
    const computedLineClamp = useValue(lineClamp);
    const css = {
      w: "100%"
    };
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-skeleton__text", className),
        __css: css,
        ...rest,
        children: Array(computedLineClamp).fill(0).map((_, index) => {
          if (isLoaded && index > 0)
            return null;
          const isLast = index + 1 === computedLineClamp;
          const props = !isLoaded ? {
            mb: !isLast ? gap : void 0,
            w: computedLineClamp > 1 ? !isLast ? "100%" : "80%" : "100%",
            h: textHeight
          } : {};
          return /* @__PURE__ */ jsx(
            Skeleton,
            {
              ...{
                startColor,
                endColor,
                fadeDuration,
                speed,
                isLoaded,
                ...props
              },
              children: index === 0 ? children : void 0
            },
            index
          );
        })
      }
    );
  }
);

// src/skeleton-circle.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var SkeletonCircle = forwardRef2(
  ({
    className,
    boxSize = "fallback(12, 3rem)",
    children,
    isFitContent,
    ...rest
  }, ref) => {
    const validChildren = getValidChildren(children);
    const hasChildren = !!validChildren.length;
    isFitContent != null ? isFitContent : isFitContent = hasChildren;
    return /* @__PURE__ */ jsx2(
      Skeleton,
      {
        ref,
        className: cx2("ui-skeleton__circle", className),
        rounded: "fallback(full, 9999px)",
        isFitContent,
        ...!isFitContent ? { boxSize } : {},
        ...rest,
        children: validChildren
      }
    );
  }
);

export {
  SkeletonCircle,
  SkeletonText
};
//# sourceMappingURL=chunk-CNSEGHUJ.mjs.map