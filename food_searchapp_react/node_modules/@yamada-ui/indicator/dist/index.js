"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Indicator: () => Indicator
});
module.exports = __toCommonJS(src_exports);

// src/indicator.tsx
var import_core = require("@yamada-ui/core");
var import_use_animation = require("@yamada-ui/use-animation");
var import_use_value = require("@yamada-ui/use-value");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var getPlacementStyle = (placement, offset) => {
  const styles = {};
  let translateX = "";
  let translateY = "";
  if (placement.includes("top")) {
    styles.top = offset;
    translateY = "-50%";
  } else if (placement.includes("bottom")) {
    styles.bottom = offset;
    translateY = "50%";
  } else {
    styles.top = "50%";
    translateY = "-50%";
  }
  if (placement.includes("left")) {
    styles.left = offset;
    translateX = "-50%";
  } else if (placement.includes("right")) {
    styles.right = offset;
    translateX = "50%";
  } else {
    styles.left = "50%";
    translateX = "-50%";
  }
  styles.transform = `translate(${translateX}, ${translateY})`;
  return styles;
};
var Indicator = (0, import_core.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core.useComponentStyle)("Indicator", props);
  let {
    className,
    inline = false,
    placement = "top-right",
    offset = 0,
    label,
    overflowCount = 99,
    showZero = true,
    children,
    isDisabled,
    containerProps,
    ping,
    pingColor = "var(--ui-ping)",
    pingDuration = "1.4s",
    pingCount = "infinite",
    pingScale = 1.8,
    ...rest
  } = (0, import_core.omitThemeProps)(mergedProps, ["withBorder"]);
  const animation = (0, import_use_animation.useAnimation)({
    keyframes: {
      "75%, 100%": {
        transform: `scale(${pingScale})`,
        opacity: 0
      }
    },
    fillMode: "forwards",
    duration: pingDuration,
    timingFunction: "cubic-bezier(0, 0, 0.2, 1)",
    iterationCount: pingCount
  });
  const isNumeric = typeof label === "number";
  if (isNumeric && !showZero && label <= 0)
    isDisabled != null ? isDisabled : isDisabled = true;
  const computedInline = (0, import_use_value.useValue)(inline);
  const computedPlacement = (0, import_use_value.useValue)(placement);
  const computedOffset = (0, import_use_value.useValue)(offset);
  const renderLabel = (0, import_react.useMemo)(() => {
    if (isNumeric) {
      if (label > overflowCount) {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
          overflowCount,
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.ui.span, { lineHeight: 1, children: "+" })
        ] });
      } else {
        return label;
      }
    } else {
      return label;
    }
  }, [isNumeric, label, overflowCount]);
  const css = {
    position: "absolute",
    ...getPlacementStyle(computedPlacement, computedOffset),
    ...isNumeric ? { fontWeight: "medium" } : {},
    ...styles
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_core.ui.div,
    {
      ref,
      className: (0, import_utils.cx)("ui-indicator", className),
      __css: {
        position: "relative",
        display: computedInline ? "inline-block" : "block"
      },
      ...containerProps,
      children: [
        !isDisabled ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          import_core.ui.div,
          {
            ref,
            className: (0, import_utils.cx)("ui-indicator__icon", className),
            __css: css,
            ...rest,
            children: [
              renderLabel,
              ping ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_core.ui.div,
                {
                  className: "ui-indicator__icon__ping",
                  __css: {
                    position: "absolute",
                    boxSize: "100%",
                    rounded: "fallback(full, 9999px)",
                    opacity: 0.75,
                    zIndex: -1,
                    bg: pingColor
                  },
                  animation
                }
              ) : null
            ]
          }
        ) : null,
        children
      ]
    }
  );
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Indicator
});
//# sourceMappingURL=index.js.map