import * as _yamada_ui_core from '@yamada-ui/core';
import { SnackComponentProps, CSSUIProps, CSSUIObject, SnackConfigOptions } from '@yamada-ui/core';
import { AlertProps } from '@yamada-ui/alert';
import { ReactNode } from 'react';

type Snack = {
    id: string | number;
    duration: UseSnacksOptions["duration"];
    status: UseSnacksOptions["status"];
    message: (props: SnackComponentProps) => ReactNode;
    onClose: () => void;
    onCloseComplete?: () => void;
    boxShadow?: CSSUIProps["boxShadow"];
    style?: CSSUIObject;
};
type SnackMethodsOptions = Omit<UseSnacksOptions, "direction" | "limit" | "startIndex"> & Partial<Pick<Snack, "id" | "onCloseComplete">>;
type UseSnacksOptions = SnackConfigOptions;
/**
 * `useSnacks` is a custom hook for controlling notifications used in forms and the like.
 *
 * @see Docs https://yamada-ui.com/hooks/use-snacks
 */
declare const useSnacks: (defaultOptions?: UseSnacksOptions) => {
    snack: {
        (options?: SnackMethodsOptions): string | number;
        update(id: string | number, options: Omit<SnackMethodsOptions, "id">): void;
        closeAll(): void;
        close(id: string | number): void;
        isActive(id: string | number): boolean;
    };
    snacks: {
        direction: _yamada_ui_core.SnackDirection | undefined;
        startIndex: number | undefined;
        items: Snack[];
    };
};
type UseSnacksReturn = ReturnType<typeof useSnacks>;
type SnackProps = Omit<AlertProps, keyof UseSnacksOptions> & UseSnacksOptions & {
    index: number;
    onClose?: () => void;
};

export { type Snack, type SnackProps, type UseSnacksOptions, type UseSnacksReturn, useSnacks };
