{"version":3,"sources":["../src/use-snacks.tsx"],"sourcesContent":["import type { AlertProps } from \"@yamada-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@yamada-ui/alert\"\nimport { CloseButton } from \"@yamada-ui/close-button\"\nimport type {\n  CSSUIObject,\n  CSSUIProps,\n  SnackComponentProps,\n  SnackConfigOptions,\n} from \"@yamada-ui/core\"\nimport { forwardRef, ui, useTheme } from \"@yamada-ui/core\"\nimport { cx, merge } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode } from \"react\"\nimport { useCallback, useMemo, useState } from \"react\"\n\nconst createRender = (options: UseSnacksOptions): FC<SnackComponentProps> => {\n  const { component } = options\n\n  const Render: FC<SnackComponentProps> = (props) => {\n    if (typeof component === \"function\") {\n      return component({ ...props, ...options }) as JSX.Element\n    } else {\n      return <Snack {...props} {...options} />\n    }\n  }\n\n  return Render\n}\n\nexport type Snack = {\n  id: string | number\n  duration: UseSnacksOptions[\"duration\"]\n  status: UseSnacksOptions[\"status\"]\n  message: (props: SnackComponentProps) => ReactNode\n  onClose: () => void\n  onCloseComplete?: () => void\n  boxShadow?: CSSUIProps[\"boxShadow\"]\n  style?: CSSUIObject\n}\n\nlet counter = 0\n\ntype SnackMethodsOptions = Omit<\n  UseSnacksOptions,\n  \"direction\" | \"limit\" | \"startIndex\"\n> &\n  Partial<Pick<Snack, \"id\" | \"onCloseComplete\">>\n\nexport type UseSnacksOptions = SnackConfigOptions\n\n/**\n * `useSnacks` is a custom hook for controlling notifications used in forms and the like.\n *\n * @see Docs https://yamada-ui.com/hooks/use-snacks\n */\nexport const useSnacks = (defaultOptions: UseSnacksOptions = {}) => {\n  const [items, setItems] = useState<Snack[]>([])\n  const { theme } = useTheme()\n\n  const themeOptions = useMemo(\n    () => theme.__config.snacks?.options ?? {},\n    [theme],\n  )\n\n  const computedOptions = useMemo(\n    () => merge<UseSnacksOptions>(themeOptions, defaultOptions),\n    [defaultOptions, themeOptions],\n  )\n  const { direction, startIndex, limit = 3 } = computedOptions\n\n  const getOptions = useCallback(\n    (options: SnackMethodsOptions) => merge(computedOptions, options),\n    [computedOptions],\n  )\n\n  const snack = useMemo(() => {\n    const methods = (options: SnackMethodsOptions = {}) => {\n      options = getOptions(options)\n\n      const message = createRender(options)\n\n      counter += 1\n\n      let {\n        id = counter,\n        duration,\n        onCloseComplete,\n        status,\n        boxShadow,\n        style,\n      } = options\n\n      const onClose = () =>\n        setItems((prev) => prev.filter((child) => child.id !== id))\n\n      const snack: Snack = {\n        id,\n        status,\n        duration,\n        message,\n        onClose,\n        onCloseComplete,\n        boxShadow,\n        style,\n      }\n\n      setItems((prev) => [\n        ...prev.splice(-1 * ((limit ?? Infinity) - 1)),\n        snack,\n      ])\n\n      return id\n    }\n\n    methods.update = (\n      id: string | number,\n      options: Omit<SnackMethodsOptions, \"id\">,\n    ) => {\n      options = getOptions(options)\n\n      setItems((prev) =>\n        prev.map((props) => {\n          if (props.id === id) {\n            return { ...props, ...options, message: createRender(options) }\n          } else {\n            return props\n          }\n        }),\n      )\n    }\n\n    methods.closeAll = () => {\n      setItems([])\n    }\n\n    methods.close = (id: string | number) => {\n      setItems((prev) => prev.filter((props) => props.id !== id))\n    }\n\n    methods.isActive = (id: string | number) =>\n      !!items.find((props) => props.id === id)\n\n    return methods\n  }, [items, limit, getOptions])\n\n  const snacks = useMemo(\n    () => ({ direction, startIndex, items }),\n    [direction, startIndex, items],\n  )\n\n  return { snack, snacks }\n}\n\nexport type UseSnacksReturn = ReturnType<typeof useSnacks>\n\nexport type SnackProps = Omit<AlertProps, keyof UseSnacksOptions> &\n  UseSnacksOptions & {\n    index: number\n    onClose?: () => void\n  }\n\nconst defaultBoxShadow: CSSUIProps[\"boxShadow\"] = [\n  \"0 -1px 3px 0 rgba(0, 0, 0, 0.1), 0 -1px 2px 0 rgba(0, 0, 0, 0.06), 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)\",\n  \"0px 0px 0px 1px rgba(0, 0, 0, 0.1), 0px -1px 2px rgba(0, 0, 0, 0.2), 0px 1px 2px rgba(0, 0, 0, 0.2)\",\n]\n\nconst Snack = forwardRef<SnackProps, \"div\">(\n  (\n    {\n      variant = \"basic\",\n      colorScheme,\n      status,\n      icon,\n      title,\n      description,\n      isClosable = true,\n      boxShadow = defaultBoxShadow,\n      className,\n      index,\n      onClose,\n    },\n    ref,\n  ) => {\n    return (\n      <Alert\n        ref={ref}\n        className={cx(\"ui-snack\", className)}\n        status={status}\n        variant={variant}\n        colorScheme={colorScheme}\n        alignItems=\"start\"\n        boxShadow={index ? boxShadow : undefined}\n        pe={isClosable ? 8 : undefined}\n      >\n        <AlertIcon\n          variant={icon?.variant}\n          className=\"ui-snack__icon\"\n          {...(icon?.color ? { color: icon.color } : {})}\n        >\n          {icon?.children}\n        </AlertIcon>\n\n        <ui.div flex=\"1\">\n          {title ? (\n            <AlertTitle className=\"ui-snack__title\" lineClamp={1}>\n              {title}\n            </AlertTitle>\n          ) : null}\n          {description ? (\n            <AlertDescription className=\"ui-snack__desc\" lineClamp={3}>\n              {description}\n            </AlertDescription>\n          ) : null}\n        </ui.div>\n\n        {isClosable ? (\n          <CloseButton\n            className=\"ui-snack__close-button\"\n            size=\"sm\"\n            onClick={onClose}\n            position=\"absolute\"\n            top={2}\n            right={2}\n          />\n        ) : null}\n      </Alert>\n    )\n  },\n)\n"],"mappings":"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","names":["snack"]}