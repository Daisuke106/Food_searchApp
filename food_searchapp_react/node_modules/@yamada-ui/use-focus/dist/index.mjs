"use client"

// src/index.ts
import { useEventListener } from "@yamada-ui/use-event-listener";
import {
  getActiveElement,
  getAllFocusable,
  isRefObject,
  isTabbable,
  useSafeLayoutEffect,
  useUpdateEffect,
  isSafari
} from "@yamada-ui/utils";
import { useCallback, useRef } from "react";
var preventReturnFocus = (containerRef) => {
  const el = containerRef.current;
  if (!el)
    return false;
  const activeElement = getActiveElement(el);
  if (!activeElement)
    return false;
  if (el.contains(activeElement))
    return false;
  if (isTabbable(activeElement))
    return true;
  return false;
};
var useFocusOnHide = (containerRef, { shouldFocus: shouldFocusProp, visible, focusRef }) => {
  const shouldFocus = shouldFocusProp && !visible;
  useUpdateEffect(() => {
    if (!shouldFocus)
      return;
    if (preventReturnFocus(containerRef))
      return;
    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
    if (el) {
      requestAnimationFrame(() => {
        el.focus();
      });
    }
  }, [shouldFocus, containerRef, focusRef]);
};
var useFocusOnShow = (target, { focusRef, preventScroll, shouldFocus, visible } = {
  preventScroll: true,
  shouldFocus: false
}) => {
  const element = isRefObject(target) ? target.current : target;
  const autoFocusValue = shouldFocus && visible;
  const autoFocusRef = useRef(autoFocusValue);
  const lastVisibleRef = useRef(visible);
  useSafeLayoutEffect(() => {
    if (!lastVisibleRef.current && visible)
      autoFocusRef.current = autoFocusValue;
    lastVisibleRef.current = visible;
  }, [visible, autoFocusValue]);
  const onFocus = useCallback(() => {
    if (!visible || !element || !autoFocusRef.current)
      return;
    autoFocusRef.current = false;
    if (element.contains(document.activeElement))
      return;
    if (focusRef == null ? void 0 : focusRef.current) {
      requestAnimationFrame(() => {
        var _a;
        (_a = focusRef.current) == null ? void 0 : _a.focus({ preventScroll });
      });
    } else {
      const tabbableEls = getAllFocusable(element);
      if (tabbableEls.length > 0)
        requestAnimationFrame(() => {
          tabbableEls[0].focus({ preventScroll });
        });
    }
  }, [visible, preventScroll, element, focusRef]);
  useUpdateEffect(() => {
    onFocus();
  }, [onFocus]);
  useEventListener(element, "transitionend", onFocus);
};
var useFocusOnPointerDown = ({
  ref,
  elements,
  enabled
}) => {
  const doc = () => {
    var _a, _b;
    return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;
  };
  useEventListener(doc, "pointerdown", (ev) => {
    if (!isSafari() || !enabled)
      return;
    const target = ev.target;
    const els = elements != null ? elements : [ref];
    const isValidTarget = els.some((elementOrRef) => {
      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;
      return (el == null ? void 0 : el.contains(target)) || el === target;
    });
    if (doc().activeElement !== target && isValidTarget) {
      ev.preventDefault();
      target.focus();
    }
  });
};
export {
  useFocusOnHide,
  useFocusOnPointerDown,
  useFocusOnShow
};
//# sourceMappingURL=index.mjs.map