import { FocusableElement } from '@yamada-ui/utils';
import { RefObject } from 'react';

type UseFocusOnHideProps = {
    focusRef: RefObject<FocusableElement>;
    shouldFocus?: boolean;
    visible?: boolean;
};
declare const useFocusOnHide: (containerRef: RefObject<HTMLElement>, { shouldFocus: shouldFocusProp, visible, focusRef }: UseFocusOnHideProps) => void;
type UseFocusOnShowProps = {
    visible?: boolean;
    shouldFocus?: boolean;
    preventScroll?: boolean;
    focusRef?: React.RefObject<FocusableElement>;
};
declare const useFocusOnShow: <T extends HTMLElement>(target: React.RefObject<T> | T, { focusRef, preventScroll, shouldFocus, visible }?: UseFocusOnShowProps) => void;
type UseFocusOnMouseDownProps = {
    ref: React.RefObject<HTMLElement>;
    enabled?: boolean;
    elements?: Array<React.RefObject<HTMLElement> | HTMLElement | null>;
};
declare const useFocusOnPointerDown: ({ ref, elements, enabled, }: UseFocusOnMouseDownProps) => void;

export { type UseFocusOnHideProps, type UseFocusOnMouseDownProps, type UseFocusOnShowProps, useFocusOnHide, useFocusOnPointerDown, useFocusOnShow };
