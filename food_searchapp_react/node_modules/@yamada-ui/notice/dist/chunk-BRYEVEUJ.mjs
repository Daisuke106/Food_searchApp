"use client"
import {
  noticeStore
} from "./chunk-C5HTYJYN.mjs";

// src/notice-provider.tsx
import { ui } from "@yamada-ui/core";
import { AnimatePresence, motion, useIsPresent } from "@yamada-ui/motion";
import { Portal } from "@yamada-ui/portal";
import { useTimeout } from "@yamada-ui/use-timeout";
import { cx, runIfFunc, useUpdateEffect } from "@yamada-ui/utils";
import { memo, useEffect, useState, useSyncExternalStore } from "react";
import { jsx } from "react/jsx-runtime";
var NoticeProvider = ({
  variants,
  gap = "fallback(4, 1rem)",
  appendToParentPortal,
  containerRef
}) => {
  const state = useSyncExternalStore(
    noticeStore.subscribe,
    noticeStore.getSnapshot,
    noticeStore.getSnapshot
  );
  const components = Object.entries(state).map(([placement, notices]) => {
    const top = placement.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
    const bottom = placement.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
    const right = !placement.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
    const left = !placement.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
    const css = {
      position: "fixed",
      zIndex: "fallback(zarbon, 160)",
      pointerEvents: "none",
      display: "flex",
      flexDirection: "column",
      margin: gap,
      gap,
      top,
      bottom,
      right,
      left
    };
    return /* @__PURE__ */ jsx(
      ui.ul,
      {
        className: cx("ui-notice__list", `ui-notice__list--${placement}`),
        __css: css,
        children: /* @__PURE__ */ jsx(AnimatePresence, { initial: false, children: notices.map((notice) => /* @__PURE__ */ jsx(NoticeComponent, { variants, ...notice }, notice.id)) })
      },
      placement
    );
  });
  return /* @__PURE__ */ jsx(
    Portal,
    {
      appendToParentPortal,
      containerRef,
      children: components
    }
  );
};
var defaultVariants = {
  initial: ({ placement }) => ({
    opacity: 0,
    [["top", "bottom"].includes(placement) ? "y" : "x"]: (placement === "bottom" ? 1 : placement.includes("right") ? 1 : -1) * 24
  }),
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var NoticeComponent = memo(
  ({
    variants = defaultVariants,
    placement,
    duration = 5e3,
    message,
    onCloseComplete,
    isDelete = false,
    onDelete,
    style
  }) => {
    const [delay, setDelay] = useState(duration);
    const isPresent = useIsPresent();
    useUpdateEffect(() => {
      if (!isPresent)
        onCloseComplete == null ? void 0 : onCloseComplete();
    }, [isPresent]);
    useUpdateEffect(() => {
      setDelay(duration);
    }, [duration]);
    const onMouseEnter = () => setDelay(null);
    const onMouseLeave = () => setDelay(duration);
    const onClose = () => {
      if (isPresent)
        onDelete();
    };
    useEffect(() => {
      if (isPresent && isDelete)
        onDelete();
    }, [isPresent, isDelete, onDelete]);
    useTimeout(onClose, delay);
    const css = {
      pointerEvents: "auto",
      maxW: "36rem",
      minW: "20rem",
      ...style
    };
    return /* @__PURE__ */ jsx(
      motion.li,
      {
        layout: true,
        className: "ui-notice__list__item",
        variants,
        initial: "initial",
        animate: "animate",
        exit: "exit",
        onHoverStart: onMouseEnter,
        onHoverEnd: onMouseLeave,
        custom: { placement },
        style: {
          display: "flex",
          justifyContent: placement.includes("left") ? "flex-start" : placement.includes("right") ? "flex-end" : "center"
        },
        children: /* @__PURE__ */ jsx(ui.div, { className: "ui-notice__list__item__inner", __css: css, children: runIfFunc(message, { onClose }) })
      }
    );
  }
);
NoticeComponent.displayName = "NoticeComponent";

export {
  NoticeProvider
};
//# sourceMappingURL=chunk-BRYEVEUJ.mjs.map