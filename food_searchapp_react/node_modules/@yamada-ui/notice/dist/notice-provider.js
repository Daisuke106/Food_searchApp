"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/notice-provider.tsx
var notice_provider_exports = {};
__export(notice_provider_exports, {
  NoticeProvider: () => NoticeProvider
});
module.exports = __toCommonJS(notice_provider_exports);
var import_core2 = require("@yamada-ui/core");
var import_motion = require("@yamada-ui/motion");
var import_portal = require("@yamada-ui/portal");
var import_use_timeout = require("@yamada-ui/use-timeout");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/notice.tsx
var import_alert = require("@yamada-ui/alert");
var import_close_button = require("@yamada-ui/close-button");
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var findId = (options, id) => options.find((notice) => notice.id === id);
var findNotice = (state, id) => {
  const placement = getNoticePlacement(state, id);
  const index = placement ? state[placement].findIndex((notice) => notice.id === id) : -1;
  return { placement, index };
};
var getNoticePlacement = (state, id) => {
  for (const [placement, values] of Object.entries(state)) {
    if (findId(values, id))
      return placement;
  }
};
var counter = 0;
var createNotice = (message, {
  id,
  placement = "top",
  duration,
  onCloseComplete,
  status,
  style
}) => {
  counter += 1;
  id != null ? id : id = counter;
  return {
    id,
    placement,
    status,
    duration,
    message,
    onDelete: () => noticeStore.remove(String(id), placement),
    isDelete: false,
    onCloseComplete,
    style
  };
};
var createRender = (options) => {
  const { component } = options;
  const Render = (props) => {
    if (typeof component === "function") {
      return component({ ...props, ...options });
    } else {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Notice, { ...props, ...options });
    }
  };
  return Render;
};
var initialState = {
  top: [],
  "top-left": [],
  "top-right": [],
  bottom: [],
  "bottom-left": [],
  "bottom-right": []
};
var createNoticeStore = (initialState2) => {
  let state = initialState2;
  const storeChangeCache = /* @__PURE__ */ new Set();
  const setState = (setStateFunc) => {
    state = setStateFunc(state);
    storeChangeCache.forEach((onStoreChange) => onStoreChange());
  };
  return {
    getSnapshot: () => state,
    subscribe: (onStoreChange) => {
      storeChangeCache.add(onStoreChange);
      return () => {
        setState(() => initialState2);
        storeChangeCache.delete(onStoreChange);
      };
    },
    remove: (id, placement) => {
      setState((prevState) => ({
        ...prevState,
        [placement]: prevState[placement].filter((notice) => notice.id != id)
      }));
    },
    create: (message, options) => {
      const limit = options.limit;
      const notice = createNotice(message, options);
      const { placement, id } = notice;
      setState((prev) => {
        var _a;
        let prevNotices = (_a = prev[placement]) != null ? _a : [];
        if (limit !== void 0 && limit > 0 && prevNotices.length > limit - 1) {
          const n = prevNotices.length - (limit - 1);
          const notices2 = placement.includes("top") ? prevNotices.slice(n * -1) : prevNotices.slice(0, n);
          const ids = notices2.map(({ id: id2 }) => id2);
          prevNotices = prevNotices.map(
            (notice2) => ids.includes(notice2.id) ? { ...notice2, isDelete: true } : notice2
          );
        }
        const notices = placement.includes("top") ? [notice, ...prevNotices] : [...prevNotices, notice];
        return { ...prev, [placement]: notices };
      });
      return id;
    },
    update: (id, options) => {
      setState((prev) => {
        const next = { ...prev };
        const { placement, index } = findNotice(next, id);
        if (placement && index !== -1) {
          next[placement][index] = {
            ...next[placement][index],
            ...options,
            message: createRender(options)
          };
        }
        return next;
      });
    },
    closeAll: ({ placement } = {}) => {
      setState((prev) => {
        let placements = [
          "bottom",
          "bottom-right",
          "bottom-left",
          "top",
          "top-left",
          "top-right"
        ];
        if (placement)
          placements = placement;
        return placements.reduce(
          (acc, placement2) => {
            acc[placement2] = prev[placement2].map((notice) => ({
              ...notice,
              isDelete: true
            }));
            return acc;
          },
          { ...prev }
        );
      });
    },
    close: (id) => {
      setState((prev) => {
        const placement = getNoticePlacement(prev, id);
        if (!placement)
          return prev;
        return {
          ...prev,
          [placement]: prev[placement].map(
            (notice) => notice.id == id ? { ...notice, isDelete: true } : notice
          )
        };
      });
    },
    isActive: (id) => Boolean(findNotice(noticeStore.getSnapshot(), id).placement)
  };
};
var noticeStore = createNoticeStore(initialState);
var Notice = ({
  variant = "basic",
  colorScheme,
  status,
  icon,
  title,
  description,
  isClosable,
  className,
  onClose
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_alert.Alert,
    {
      status,
      variant,
      colorScheme,
      alignItems: "start",
      boxShadow: "fallback(lg, 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05))",
      className: (0, import_utils.cx)("ui-notice", className),
      pe: isClosable ? 8 : void 0,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_alert.AlertIcon,
          {
            variant: icon == null ? void 0 : icon.variant,
            className: "ui-notice__icon",
            ...(icon == null ? void 0 : icon.color) ? { color: icon.color } : {},
            children: icon == null ? void 0 : icon.children
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_core.ui.div, { flex: "1", children: [
          title ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_alert.AlertTitle, { className: "ui-notice__title", lineClamp: 1, children: title }) : null,
          description ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_alert.AlertDescription, { className: "ui-notice__desc", lineClamp: 3, children: description }) : null
        ] }),
        isClosable ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_close_button.CloseButton,
          {
            className: "ui-notice__close-button",
            size: "sm",
            onClick: onClose,
            position: "absolute",
            top: 2,
            right: 2
          }
        ) : null
      ]
    }
  );
};

// src/notice-provider.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var NoticeProvider = ({
  variants,
  gap = "fallback(4, 1rem)",
  appendToParentPortal,
  containerRef
}) => {
  const state = (0, import_react2.useSyncExternalStore)(
    noticeStore.subscribe,
    noticeStore.getSnapshot,
    noticeStore.getSnapshot
  );
  const components = Object.entries(state).map(([placement, notices]) => {
    const top = placement.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
    const bottom = placement.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
    const right = !placement.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
    const left = !placement.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
    const css = {
      position: "fixed",
      zIndex: "fallback(zarbon, 160)",
      pointerEvents: "none",
      display: "flex",
      flexDirection: "column",
      margin: gap,
      gap,
      top,
      bottom,
      right,
      left
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.ul,
      {
        className: (0, import_utils2.cx)("ui-notice__list", `ui-notice__list--${placement}`),
        __css: css,
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_motion.AnimatePresence, { initial: false, children: notices.map((notice) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(NoticeComponent, { variants, ...notice }, notice.id)) })
      },
      placement
    );
  });
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_portal.Portal,
    {
      appendToParentPortal,
      containerRef,
      children: components
    }
  );
};
var defaultVariants = {
  initial: ({ placement }) => ({
    opacity: 0,
    [["top", "bottom"].includes(placement) ? "y" : "x"]: (placement === "bottom" ? 1 : placement.includes("right") ? 1 : -1) * 24
  }),
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var NoticeComponent = (0, import_react2.memo)(
  ({
    variants = defaultVariants,
    placement,
    duration = 5e3,
    message,
    onCloseComplete,
    isDelete = false,
    onDelete,
    style
  }) => {
    const [delay, setDelay] = (0, import_react2.useState)(duration);
    const isPresent = (0, import_motion.useIsPresent)();
    (0, import_utils2.useUpdateEffect)(() => {
      if (!isPresent)
        onCloseComplete == null ? void 0 : onCloseComplete();
    }, [isPresent]);
    (0, import_utils2.useUpdateEffect)(() => {
      setDelay(duration);
    }, [duration]);
    const onMouseEnter = () => setDelay(null);
    const onMouseLeave = () => setDelay(duration);
    const onClose = () => {
      if (isPresent)
        onDelete();
    };
    (0, import_react2.useEffect)(() => {
      if (isPresent && isDelete)
        onDelete();
    }, [isPresent, isDelete, onDelete]);
    (0, import_use_timeout.useTimeout)(onClose, delay);
    const css = {
      pointerEvents: "auto",
      maxW: "36rem",
      minW: "20rem",
      ...style
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_motion.motion.li,
      {
        layout: true,
        className: "ui-notice__list__item",
        variants,
        initial: "initial",
        animate: "animate",
        exit: "exit",
        onHoverStart: onMouseEnter,
        onHoverEnd: onMouseLeave,
        custom: { placement },
        style: {
          display: "flex",
          justifyContent: placement.includes("left") ? "flex-start" : placement.includes("right") ? "flex-end" : "center"
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core2.ui.div, { className: "ui-notice__list__item__inner", __css: css, children: (0, import_utils2.runIfFunc)(message, { onClose }) })
      }
    );
  }
);
NoticeComponent.displayName = "NoticeComponent";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NoticeProvider
});
//# sourceMappingURL=notice-provider.js.map