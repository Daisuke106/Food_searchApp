{"version":3,"sources":["../src/notice.tsx"],"sourcesContent":["import type { AlertProps } from \"@yamada-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@yamada-ui/alert\"\nimport { CloseButton } from \"@yamada-ui/close-button\"\nimport type {\n  CSSUIObject,\n  NoticePlacement,\n  NoticeComponentProps,\n  NoticeConfigOptions,\n  StyledTheme,\n} from \"@yamada-ui/core\"\nimport { ui, useTheme } from \"@yamada-ui/core\"\nimport { cx, merge } from \"@yamada-ui/utils\"\nimport type { FC, ReactNode } from \"react\"\nimport { useMemo } from \"react\"\n\nexport type UseNoticeOptions = NoticeConfigOptions\n\nexport type NoticeOptions = {\n  id: string | number\n  placement: NoticePlacement\n  duration: UseNoticeOptions[\"duration\"]\n  status: UseNoticeOptions[\"status\"]\n  message: (props: NoticeComponentProps) => ReactNode\n  isDelete?: boolean\n  onDelete: () => void\n  onCloseComplete?: () => void\n  style?: CSSUIObject\n}\n\nconst findId = (\n  options: NoticeOptions[],\n  id: string | number,\n): NoticeOptions | undefined => options.find((notice) => notice.id === id)\n\nconst findNotice = (\n  state: State,\n  id: string | number,\n): {\n  placement: NoticePlacement | undefined\n  index: number\n} => {\n  const placement = getNoticePlacement(state, id)\n\n  const index = placement\n    ? state[placement].findIndex((notice) => notice.id === id)\n    : -1\n\n  return { placement, index }\n}\n\nconst getNoticePlacement = (\n  state: State,\n  id: string | number,\n): NoticePlacement | undefined => {\n  for (const [placement, values] of Object.entries(state)) {\n    if (findId(values, id)) return placement as NoticePlacement\n  }\n}\n\ntype CreateNoticeOptions = Partial<\n  Pick<\n    NoticeOptions,\n    \"id\" | \"placement\" | \"status\" | \"duration\" | \"onCloseComplete\" | \"style\"\n  >\n>\n\nlet counter = 0\n\nconst createNotice = (\n  message: (props: NoticeComponentProps) => ReactNode,\n  {\n    id,\n    placement = \"top\",\n    duration,\n    onCloseComplete,\n    status,\n    style,\n  }: CreateNoticeOptions,\n) => {\n  counter += 1\n\n  id ??= counter\n\n  return {\n    id,\n    placement,\n    status,\n    duration,\n    message,\n    onDelete: () => noticeStore.remove(String(id), placement),\n    isDelete: false,\n    onCloseComplete,\n    style,\n  }\n}\n\nconst createRender = (options: UseNoticeOptions): FC<NoticeComponentProps> => {\n  const { component } = options\n\n  const Render: FC<NoticeComponentProps> = (props) => {\n    if (typeof component === \"function\") {\n      return component({ ...props, ...options }) as JSX.Element\n    } else {\n      return <Notice {...props} {...options} />\n    }\n  }\n\n  return Render\n}\n\nconst createNoticeFunc = (\n  defaultOptions: UseNoticeOptions,\n  theme: StyledTheme,\n) => {\n  const themeOptions = theme.__config.notice?.options ?? {}\n\n  const computedOptions = (options: UseNoticeOptions) =>\n    merge(themeOptions, merge(defaultOptions, options))\n\n  const notice = (options: UseNoticeOptions = {}) => {\n    options = computedOptions(options)\n\n    const message = createRender(options)\n\n    return noticeStore.create(message, options)\n  }\n\n  notice.update = (\n    id: string | number,\n    options: Omit<UseNoticeOptions, \"id\">,\n  ) => {\n    options = computedOptions(options)\n\n    noticeStore.update(id, options)\n  }\n\n  notice.closeAll = noticeStore.closeAll\n  notice.close = noticeStore.close\n  notice.isActive = noticeStore.isActive\n\n  return notice\n}\n\ntype CreateNoticeReturn = ReturnType<typeof createNoticeFunc>\n\n/**\n * `useNotice` is a custom hook that controls the notifications of the application.\n *\n * @see Docs https://yamada-ui.com/hooks/use-notice\n */\nexport const useNotice = (\n  defaultOptions?: UseNoticeOptions,\n): CreateNoticeReturn => {\n  const { theme } = useTheme()\n\n  return useMemo(\n    () => createNoticeFunc(defaultOptions ?? {}, theme),\n    [defaultOptions, theme],\n  )\n}\n\ntype State = {\n  [K in NoticePlacement]: NoticeOptions[]\n}\n\ntype Store = {\n  subscribe: (onStoreChange: () => void) => () => void\n  getSnapshot: () => State\n  create: (\n    message: (props: NoticeComponentProps) => ReactNode,\n    options: UseNoticeOptions,\n  ) => string | number\n  close: (id: string | number) => void\n  closeAll: (options?: { placement?: NoticePlacement[] }) => void\n  update: (id: string | number, options: Omit<UseNoticeOptions, \"id\">) => void\n  remove: (id: string | number, placement: NoticePlacement) => void\n  isActive: (id: string | number) => boolean\n}\n\nconst initialState = {\n  top: [],\n  \"top-left\": [],\n  \"top-right\": [],\n  bottom: [],\n  \"bottom-left\": [],\n  \"bottom-right\": [],\n}\n\nconst createNoticeStore = (initialState: State): Store => {\n  let state = initialState\n  const storeChangeCache = new Set<() => void>()\n\n  const setState = (setStateFunc: (values: State) => State) => {\n    state = setStateFunc(state)\n    storeChangeCache.forEach((onStoreChange) => onStoreChange())\n  }\n\n  return {\n    getSnapshot: () => state,\n\n    subscribe: (onStoreChange) => {\n      storeChangeCache.add(onStoreChange)\n\n      return () => {\n        setState(() => initialState)\n        storeChangeCache.delete(onStoreChange)\n      }\n    },\n\n    remove: (id, placement) => {\n      setState((prevState) => ({\n        ...prevState,\n        [placement]: prevState[placement].filter((notice) => notice.id != id),\n      }))\n    },\n\n    create: (message, options) => {\n      const limit = options.limit\n\n      const notice = createNotice(message, options)\n      const { placement, id } = notice\n\n      setState((prev) => {\n        let prevNotices = prev[placement] ?? []\n\n        if (\n          limit !== undefined &&\n          limit > 0 &&\n          prevNotices.length > limit - 1\n        ) {\n          const n = prevNotices.length - (limit - 1)\n          const notices = placement.includes(\"top\")\n            ? prevNotices.slice(n * -1)\n            : prevNotices.slice(0, n)\n\n          const ids = notices.map(({ id }) => id)\n\n          prevNotices = prevNotices.map((notice) =>\n            ids.includes(notice.id) ? { ...notice, isDelete: true } : notice,\n          )\n        }\n\n        const notices = placement.includes(\"top\")\n          ? [notice, ...prevNotices]\n          : [...prevNotices, notice]\n\n        return { ...prev, [placement]: notices }\n      })\n\n      return id\n    },\n\n    update: (id, options) => {\n      setState((prev) => {\n        const next = { ...prev }\n        const { placement, index } = findNotice(next, id)\n\n        if (placement && index !== -1) {\n          next[placement][index] = {\n            ...next[placement][index],\n            ...options,\n            message: createRender(options),\n          }\n        }\n\n        return next\n      })\n    },\n\n    closeAll: ({ placement } = {}) => {\n      setState((prev) => {\n        let placements: NoticePlacement[] = [\n          \"bottom\",\n          \"bottom-right\",\n          \"bottom-left\",\n          \"top\",\n          \"top-left\",\n          \"top-right\",\n        ]\n\n        if (placement) placements = placement\n\n        return placements.reduce(\n          (acc, placement) => {\n            acc[placement] = prev[placement].map((notice) => ({\n              ...notice,\n              isDelete: true,\n            }))\n\n            return acc\n          },\n          { ...prev },\n        )\n      })\n    },\n\n    close: (id) => {\n      setState((prev) => {\n        const placement = getNoticePlacement(prev, id)\n\n        if (!placement) return prev\n\n        return {\n          ...prev,\n          [placement]: prev[placement].map((notice) =>\n            notice.id == id ? { ...notice, isDelete: true } : notice,\n          ),\n        }\n      })\n    },\n\n    isActive: (id) =>\n      Boolean(findNotice(noticeStore.getSnapshot(), id).placement),\n  }\n}\n\nexport const noticeStore = createNoticeStore(initialState)\n\nexport type NoticeProps = Omit<AlertProps, keyof UseNoticeOptions> &\n  UseNoticeOptions & {\n    onClose?: () => void\n  }\n\nconst Notice: FC<NoticeProps> = ({\n  variant = \"basic\",\n  colorScheme,\n  status,\n  icon,\n  title,\n  description,\n  isClosable,\n  className,\n  onClose,\n}) => {\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      colorScheme={colorScheme}\n      alignItems=\"start\"\n      boxShadow=\"fallback(lg, 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05))\"\n      className={cx(\"ui-notice\", className)}\n      pe={isClosable ? 8 : undefined}\n    >\n      <AlertIcon\n        variant={icon?.variant}\n        className=\"ui-notice__icon\"\n        {...(icon?.color ? { color: icon.color } : {})}\n      >\n        {icon?.children}\n      </AlertIcon>\n\n      <ui.div flex=\"1\">\n        {title ? (\n          <AlertTitle className=\"ui-notice__title\" lineClamp={1}>\n            {title}\n          </AlertTitle>\n        ) : null}\n        {description ? (\n          <AlertDescription className=\"ui-notice__desc\" lineClamp={3}>\n            {description}\n          </AlertDescription>\n        ) : null}\n      </ui.div>\n\n      {isClosable ? (\n        <CloseButton\n          className=\"ui-notice__close-button\"\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          top={2}\n          right={2}\n        />\n      ) : null}\n    </Alert>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAKO;AACP,0BAA4B;AAQ5B,kBAA6B;AAC7B,mBAA0B;AAE1B,mBAAwB;AA0FX;AA1Eb,IAAM,SAAS,CACb,SACA,OAC8B,QAAQ,KAAK,CAAC,WAAW,OAAO,OAAO,EAAE;AAEzE,IAAM,aAAa,CACjB,OACA,OAIG;AACH,QAAM,YAAY,mBAAmB,OAAO,EAAE;AAE9C,QAAM,QAAQ,YACV,MAAM,SAAS,EAAE,UAAU,CAAC,WAAW,OAAO,OAAO,EAAE,IACvD;AAEJ,SAAO,EAAE,WAAW,MAAM;AAC5B;AAEA,IAAM,qBAAqB,CACzB,OACA,OACgC;AAChC,aAAW,CAAC,WAAW,MAAM,KAAK,OAAO,QAAQ,KAAK,GAAG;AACvD,QAAI,OAAO,QAAQ,EAAE;AAAG,aAAO;AAAA,EACjC;AACF;AASA,IAAI,UAAU;AAEd,IAAM,eAAe,CACnB,SACA;AAAA,EACE;AAAA,EACA,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MACG;AACH,aAAW;AAEX,yBAAO;AAEP,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,MAAM,YAAY,OAAO,OAAO,EAAE,GAAG,SAAS;AAAA,IACxD,UAAU;AAAA,IACV;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAM,eAAe,CAAC,YAAwD;AAC5E,QAAM,EAAE,UAAU,IAAI;AAEtB,QAAM,SAAmC,CAAC,UAAU;AAClD,QAAI,OAAO,cAAc,YAAY;AACnC,aAAO,UAAU,EAAE,GAAG,OAAO,GAAG,QAAQ,CAAC;AAAA,IAC3C,OAAO;AACL,aAAO,4CAAC,UAAQ,GAAG,OAAQ,GAAG,SAAS;AAAA,IACzC;AAAA,EACF;AAEA,SAAO;AACT;AAEA,IAAM,mBAAmB,CACvB,gBACA,UACG;AAtHL;AAuHE,QAAM,gBAAe,iBAAM,SAAS,WAAf,mBAAuB,YAAvB,YAAkC,CAAC;AAExD,QAAM,kBAAkB,CAAC,gBACvB,oBAAM,kBAAc,oBAAM,gBAAgB,OAAO,CAAC;AAEpD,QAAM,SAAS,CAAC,UAA4B,CAAC,MAAM;AACjD,cAAU,gBAAgB,OAAO;AAEjC,UAAM,UAAU,aAAa,OAAO;AAEpC,WAAO,YAAY,OAAO,SAAS,OAAO;AAAA,EAC5C;AAEA,SAAO,SAAS,CACd,IACA,YACG;AACH,cAAU,gBAAgB,OAAO;AAEjC,gBAAY,OAAO,IAAI,OAAO;AAAA,EAChC;AAEA,SAAO,WAAW,YAAY;AAC9B,SAAO,QAAQ,YAAY;AAC3B,SAAO,WAAW,YAAY;AAE9B,SAAO;AACT;AASO,IAAM,YAAY,CACvB,mBACuB;AACvB,QAAM,EAAE,MAAM,QAAI,sBAAS;AAE3B,aAAO;AAAA,IACL,MAAM,iBAAiB,0CAAkB,CAAC,GAAG,KAAK;AAAA,IAClD,CAAC,gBAAgB,KAAK;AAAA,EACxB;AACF;AAoBA,IAAM,eAAe;AAAA,EACnB,KAAK,CAAC;AAAA,EACN,YAAY,CAAC;AAAA,EACb,aAAa,CAAC;AAAA,EACd,QAAQ,CAAC;AAAA,EACT,eAAe,CAAC;AAAA,EAChB,gBAAgB,CAAC;AACnB;AAEA,IAAM,oBAAoB,CAACA,kBAA+B;AACxD,MAAI,QAAQA;AACZ,QAAM,mBAAmB,oBAAI,IAAgB;AAE7C,QAAM,WAAW,CAAC,iBAA2C;AAC3D,YAAQ,aAAa,KAAK;AAC1B,qBAAiB,QAAQ,CAAC,kBAAkB,cAAc,CAAC;AAAA,EAC7D;AAEA,SAAO;AAAA,IACL,aAAa,MAAM;AAAA,IAEnB,WAAW,CAAC,kBAAkB;AAC5B,uBAAiB,IAAI,aAAa;AAElC,aAAO,MAAM;AACX,iBAAS,MAAMA,aAAY;AAC3B,yBAAiB,OAAO,aAAa;AAAA,MACvC;AAAA,IACF;AAAA,IAEA,QAAQ,CAAC,IAAI,cAAc;AACzB,eAAS,CAAC,eAAe;AAAA,QACvB,GAAG;AAAA,QACH,CAAC,SAAS,GAAG,UAAU,SAAS,EAAE,OAAO,CAAC,WAAW,OAAO,MAAM,EAAE;AAAA,MACtE,EAAE;AAAA,IACJ;AAAA,IAEA,QAAQ,CAAC,SAAS,YAAY;AAC5B,YAAM,QAAQ,QAAQ;AAEtB,YAAM,SAAS,aAAa,SAAS,OAAO;AAC5C,YAAM,EAAE,WAAW,GAAG,IAAI;AAE1B,eAAS,CAAC,SAAS;AAnOzB;AAoOQ,YAAI,eAAc,UAAK,SAAS,MAAd,YAAmB,CAAC;AAEtC,YACE,UAAU,UACV,QAAQ,KACR,YAAY,SAAS,QAAQ,GAC7B;AACA,gBAAM,IAAI,YAAY,UAAU,QAAQ;AACxC,gBAAMC,WAAU,UAAU,SAAS,KAAK,IACpC,YAAY,MAAM,IAAI,EAAE,IACxB,YAAY,MAAM,GAAG,CAAC;AAE1B,gBAAM,MAAMA,SAAQ,IAAI,CAAC,EAAE,IAAAC,IAAG,MAAMA,GAAE;AAEtC,wBAAc,YAAY;AAAA,YAAI,CAACC,YAC7B,IAAI,SAASA,QAAO,EAAE,IAAI,EAAE,GAAGA,SAAQ,UAAU,KAAK,IAAIA;AAAA,UAC5D;AAAA,QACF;AAEA,cAAM,UAAU,UAAU,SAAS,KAAK,IACpC,CAAC,QAAQ,GAAG,WAAW,IACvB,CAAC,GAAG,aAAa,MAAM;AAE3B,eAAO,EAAE,GAAG,MAAM,CAAC,SAAS,GAAG,QAAQ;AAAA,MACzC,CAAC;AAED,aAAO;AAAA,IACT;AAAA,IAEA,QAAQ,CAAC,IAAI,YAAY;AACvB,eAAS,CAAC,SAAS;AACjB,cAAM,OAAO,EAAE,GAAG,KAAK;AACvB,cAAM,EAAE,WAAW,MAAM,IAAI,WAAW,MAAM,EAAE;AAEhD,YAAI,aAAa,UAAU,IAAI;AAC7B,eAAK,SAAS,EAAE,KAAK,IAAI;AAAA,YACvB,GAAG,KAAK,SAAS,EAAE,KAAK;AAAA,YACxB,GAAG;AAAA,YACH,SAAS,aAAa,OAAO;AAAA,UAC/B;AAAA,QACF;AAEA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,IAEA,UAAU,CAAC,EAAE,UAAU,IAAI,CAAC,MAAM;AAChC,eAAS,CAAC,SAAS;AACjB,YAAI,aAAgC;AAAA,UAClC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,YAAI;AAAW,uBAAa;AAE5B,eAAO,WAAW;AAAA,UAChB,CAAC,KAAKC,eAAc;AAClB,gBAAIA,UAAS,IAAI,KAAKA,UAAS,EAAE,IAAI,CAAC,YAAY;AAAA,cAChD,GAAG;AAAA,cACH,UAAU;AAAA,YACZ,EAAE;AAEF,mBAAO;AAAA,UACT;AAAA,UACA,EAAE,GAAG,KAAK;AAAA,QACZ;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,OAAO,CAAC,OAAO;AACb,eAAS,CAAC,SAAS;AACjB,cAAM,YAAY,mBAAmB,MAAM,EAAE;AAE7C,YAAI,CAAC;AAAW,iBAAO;AAEvB,eAAO;AAAA,UACL,GAAG;AAAA,UACH,CAAC,SAAS,GAAG,KAAK,SAAS,EAAE;AAAA,YAAI,CAAC,WAChC,OAAO,MAAM,KAAK,EAAE,GAAG,QAAQ,UAAU,KAAK,IAAI;AAAA,UACpD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,UAAU,CAAC,OACT,QAAQ,WAAW,YAAY,YAAY,GAAG,EAAE,EAAE,SAAS;AAAA,EAC/D;AACF;AAEO,IAAM,cAAc,kBAAkB,YAAY;AAOzD,IAAM,SAA0B,CAAC;AAAA,EAC/B,UAAU;AAAA,EACV;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAW;AAAA,MACX,WAAU;AAAA,MACV,eAAW,iBAAG,aAAa,SAAS;AAAA,MACpC,IAAI,aAAa,IAAI;AAAA,MAErB;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,6BAAM;AAAA,YACf,WAAU;AAAA,YACT,IAAI,6BAAM,SAAQ,EAAE,OAAO,KAAK,MAAM,IAAI,CAAC;AAAA,YAE3C,uCAAM;AAAA;AAAA,QACT;AAAA,QAEA,6CAAC,eAAG,KAAH,EAAO,MAAK,KACV;AAAA,kBACC,4CAAC,2BAAW,WAAU,oBAAmB,WAAW,GACjD,iBACH,IACE;AAAA,UACH,cACC,4CAAC,iCAAiB,WAAU,mBAAkB,WAAW,GACtD,uBACH,IACE;AAAA,WACN;AAAA,QAEC,aACC;AAAA,UAAC;AAAA;AAAA,YACC,WAAU;AAAA,YACV,MAAK;AAAA,YACL,SAAS;AAAA,YACT,UAAS;AAAA,YACT,KAAK;AAAA,YACL,OAAO;AAAA;AAAA,QACT,IACE;AAAA;AAAA;AAAA,EACN;AAEJ;","names":["initialState","notices","id","notice","placement"]}