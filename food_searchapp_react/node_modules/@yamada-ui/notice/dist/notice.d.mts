import { AlertProps } from '@yamada-ui/alert';
import { NoticeConfigOptions, NoticePlacement, NoticeComponentProps, CSSUIObject, StyledTheme } from '@yamada-ui/core';
import { ReactNode } from 'react';

type UseNoticeOptions = NoticeConfigOptions;
type NoticeOptions = {
    id: string | number;
    placement: NoticePlacement;
    duration: UseNoticeOptions["duration"];
    status: UseNoticeOptions["status"];
    message: (props: NoticeComponentProps) => ReactNode;
    isDelete?: boolean;
    onDelete: () => void;
    onCloseComplete?: () => void;
    style?: CSSUIObject;
};
declare const createNoticeFunc: (defaultOptions: UseNoticeOptions, theme: StyledTheme) => {
    (options?: UseNoticeOptions): string | number;
    update(id: string | number, options: Omit<UseNoticeOptions, "id">): void;
    closeAll: (options?: {
        placement?: NoticePlacement[];
    }) => void;
    close: (id: string | number) => void;
    isActive: (id: string | number) => boolean;
};
type CreateNoticeReturn = ReturnType<typeof createNoticeFunc>;
/**
 * `useNotice` is a custom hook that controls the notifications of the application.
 *
 * @see Docs https://yamada-ui.com/hooks/use-notice
 */
declare const useNotice: (defaultOptions?: UseNoticeOptions) => CreateNoticeReturn;
type State = {
    [K in NoticePlacement]: NoticeOptions[];
};
type Store = {
    subscribe: (onStoreChange: () => void) => () => void;
    getSnapshot: () => State;
    create: (message: (props: NoticeComponentProps) => ReactNode, options: UseNoticeOptions) => string | number;
    close: (id: string | number) => void;
    closeAll: (options?: {
        placement?: NoticePlacement[];
    }) => void;
    update: (id: string | number, options: Omit<UseNoticeOptions, "id">) => void;
    remove: (id: string | number, placement: NoticePlacement) => void;
    isActive: (id: string | number) => boolean;
};
declare const noticeStore: Store;
type NoticeProps = Omit<AlertProps, keyof UseNoticeOptions> & UseNoticeOptions & {
    onClose?: () => void;
};

export { type NoticeOptions, type NoticeProps, type UseNoticeOptions, noticeStore, useNotice };
