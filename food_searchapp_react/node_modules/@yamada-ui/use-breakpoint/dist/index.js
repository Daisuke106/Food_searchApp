"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getBreakpointValue: () => getBreakpointValue,
  useBreakpoint: () => useBreakpoint,
  useBreakpointValue: () => useBreakpointValue
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var useBreakpoint = () => {
  const { theme } = (0, import_core.useTheme)();
  if (!theme)
    throw Error(
      "useBreakpoint: `theme` is undefined. Seems you forgot to wrap your app in `<UIProvider />`"
    );
  const breakpoints = theme.__breakpoints;
  if (!breakpoints)
    throw Error(
      "useBreakpoint: `breakpoints` is undefined. Seems you forgot to put theme in `breakpoints`"
    );
  const queries = (0, import_react.useMemo)(
    () => breakpoints.queries.map(({ breakpoint: breakpoint2, minMaxQuery }) => {
      var _a;
      return {
        breakpoint: breakpoint2,
        query: (_a = minMaxQuery == null ? void 0 : minMaxQuery.replace("@media screen and ", "")) != null ? _a : ""
      };
    }),
    [breakpoints]
  );
  const [breakpoint, setBreakpoint] = (0, import_react.useState)(() => {
    const isBrowser = (0, import_utils.createdDom)();
    if (!isBrowser)
      return "base";
    for (const { breakpoint: breakpoint2, query } of queries) {
      const mql = window.matchMedia(query);
      if (mql.matches)
        return breakpoint2;
    }
  });
  (0, import_react.useEffect)(() => {
    const observer = queries.map(({ breakpoint: breakpoint2, query }) => {
      const mql = window.matchMedia(query);
      const onChange = (e) => {
        if (e.matches)
          setBreakpoint(breakpoint2);
      };
      if (typeof mql.addEventListener === "function")
        mql.addEventListener("change", onChange);
      return () => {
        if (typeof mql.removeEventListener === "function")
          mql.removeEventListener("change", onChange);
      };
    });
    return () => {
      observer.forEach((unobserve) => unobserve());
    };
  }, [queries]);
  return breakpoint;
};
var useBreakpointValue = (values) => {
  const { theme } = (0, import_core.useTheme)();
  const breakpoint = useBreakpoint();
  return getBreakpointValue(values)(theme, breakpoint);
};
var getBreakpointValue = (values) => (theme, breakpoint) => {
  var _a;
  if (!theme)
    throw Error(
      "useBreakpoint: `theme` is undefined. Seems you forgot to wrap your app in `<UIProvider />`"
    );
  const breakpoints = (_a = theme.__breakpoints) == null ? void 0 : _a.keys;
  if (!breakpoints)
    throw Error(
      "useBreakpoint: `breakpoints` is undefined. Seems you forgot to put theme in `breakpoints`"
    );
  const currentIndex = breakpoints.indexOf(breakpoint);
  for (let i = currentIndex; 0 < i; i--) {
    const nextBreakpoint = breakpoints[i];
    if (values.hasOwnProperty(nextBreakpoint)) {
      return values[nextBreakpoint];
    }
  }
  return values.base;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getBreakpointValue,
  useBreakpoint,
  useBreakpointValue
});
//# sourceMappingURL=index.js.map