"use client"

// src/index.ts
import { useTheme } from "@yamada-ui/core";
import { createdDom } from "@yamada-ui/utils";
import { useState, useMemo, useEffect } from "react";
var useBreakpoint = () => {
  const { theme } = useTheme();
  if (!theme)
    throw Error(
      "useBreakpoint: `theme` is undefined. Seems you forgot to wrap your app in `<UIProvider />`"
    );
  const breakpoints = theme.__breakpoints;
  if (!breakpoints)
    throw Error(
      "useBreakpoint: `breakpoints` is undefined. Seems you forgot to put theme in `breakpoints`"
    );
  const queries = useMemo(
    () => breakpoints.queries.map(({ breakpoint: breakpoint2, minMaxQuery }) => {
      var _a;
      return {
        breakpoint: breakpoint2,
        query: (_a = minMaxQuery == null ? void 0 : minMaxQuery.replace("@media screen and ", "")) != null ? _a : ""
      };
    }),
    [breakpoints]
  );
  const [breakpoint, setBreakpoint] = useState(() => {
    const isBrowser = createdDom();
    if (!isBrowser)
      return "base";
    for (const { breakpoint: breakpoint2, query } of queries) {
      const mql = window.matchMedia(query);
      if (mql.matches)
        return breakpoint2;
    }
  });
  useEffect(() => {
    const observer = queries.map(({ breakpoint: breakpoint2, query }) => {
      const mql = window.matchMedia(query);
      const onChange = (e) => {
        if (e.matches)
          setBreakpoint(breakpoint2);
      };
      if (typeof mql.addEventListener === "function")
        mql.addEventListener("change", onChange);
      return () => {
        if (typeof mql.removeEventListener === "function")
          mql.removeEventListener("change", onChange);
      };
    });
    return () => {
      observer.forEach((unobserve) => unobserve());
    };
  }, [queries]);
  return breakpoint;
};
var useBreakpointValue = (values) => {
  const { theme } = useTheme();
  const breakpoint = useBreakpoint();
  return getBreakpointValue(values)(theme, breakpoint);
};
var getBreakpointValue = (values) => (theme, breakpoint) => {
  var _a;
  if (!theme)
    throw Error(
      "useBreakpoint: `theme` is undefined. Seems you forgot to wrap your app in `<UIProvider />`"
    );
  const breakpoints = (_a = theme.__breakpoints) == null ? void 0 : _a.keys;
  if (!breakpoints)
    throw Error(
      "useBreakpoint: `breakpoints` is undefined. Seems you forgot to put theme in `breakpoints`"
    );
  const currentIndex = breakpoints.indexOf(breakpoint);
  for (let i = currentIndex; 0 < i; i--) {
    const nextBreakpoint = breakpoints[i];
    if (values.hasOwnProperty(nextBreakpoint)) {
      return values[nextBreakpoint];
    }
  }
  return values.base;
};
export {
  getBreakpointValue,
  useBreakpoint,
  useBreakpointValue
};
//# sourceMappingURL=index.mjs.map