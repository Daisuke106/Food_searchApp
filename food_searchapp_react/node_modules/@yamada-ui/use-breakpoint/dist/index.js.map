{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { Theme, ResponsiveObject, StyledTheme } from \"@yamada-ui/core\"\nimport { useTheme } from \"@yamada-ui/core\"\nimport { createdDom } from \"@yamada-ui/utils\"\nimport { useState, useMemo, useEffect } from \"react\"\n\n/**\n * `useBreakpoint` is a custom hook that returns the current breakpoint.\n * This hook monitors changes in the window size and returns the appropriate value.\n *\n * @see Docs https://yamada-ui.com/hooks/use-breakpoint\n */\nexport const useBreakpoint = () => {\n  const { theme } = useTheme()\n\n  if (!theme)\n    throw Error(\n      \"useBreakpoint: `theme` is undefined. Seems you forgot to wrap your app in `<UIProvider />`\",\n    )\n\n  const breakpoints = theme.__breakpoints\n\n  if (!breakpoints)\n    throw Error(\n      \"useBreakpoint: `breakpoints` is undefined. Seems you forgot to put theme in `breakpoints`\",\n    )\n\n  const queries = useMemo(\n    () =>\n      breakpoints.queries.map(({ breakpoint, minMaxQuery }) => ({\n        breakpoint,\n        query: minMaxQuery?.replace(\"@media screen and \", \"\") ?? \"\",\n      })),\n    [breakpoints],\n  )\n\n  const [breakpoint, setBreakpoint] = useState(() => {\n    const isBrowser = createdDom()\n\n    if (!isBrowser) return \"base\"\n\n    for (const { breakpoint, query } of queries) {\n      const mql = window.matchMedia(query)\n\n      if (mql.matches) return breakpoint\n    }\n  })\n\n  useEffect(() => {\n    const observer = queries.map(({ breakpoint, query }): (() => void) => {\n      const mql = window.matchMedia(query)\n\n      const onChange = (e: MediaQueryListEvent) => {\n        if (e.matches) setBreakpoint(breakpoint)\n      }\n\n      if (typeof mql.addEventListener === \"function\")\n        mql.addEventListener(\"change\", onChange)\n\n      return () => {\n        if (typeof mql.removeEventListener === \"function\")\n          mql.removeEventListener(\"change\", onChange)\n      }\n    })\n\n    return () => {\n      observer.forEach((unobserve) => unobserve())\n    }\n  }, [queries])\n\n  return breakpoint as Theme[\"breakpoints\"]\n}\n\n/**\n * `useBreakpointValue` is a custom hook that returns the value of the current breakpoint from the provided object.\n * This hook monitors changes in the window size and returns the appropriate value.\n *\n * @see Docs https://yamada-ui.com/hooks/use-breakpoint-value\n */\nexport const useBreakpointValue = <T extends any>(\n  values: ResponsiveObject<T>,\n): T => {\n  const { theme } = useTheme()\n  const breakpoint = useBreakpoint()\n\n  return getBreakpointValue<T>(values)(theme, breakpoint)\n}\n\nexport const getBreakpointValue =\n  <T extends any>(values: ResponsiveObject<T>) =>\n  (theme: StyledTheme, breakpoint: Theme[\"breakpoints\"]): T => {\n    if (!theme)\n      throw Error(\n        \"useBreakpoint: `theme` is undefined. Seems you forgot to wrap your app in `<UIProvider />`\",\n      )\n\n    const breakpoints = theme.__breakpoints?.keys\n\n    if (!breakpoints)\n      throw Error(\n        \"useBreakpoint: `breakpoints` is undefined. Seems you forgot to put theme in `breakpoints`\",\n      )\n\n    const currentIndex = breakpoints.indexOf(breakpoint)\n\n    for (let i = currentIndex; 0 < i; i--) {\n      const nextBreakpoint = breakpoints[i]\n\n      if (values.hasOwnProperty(nextBreakpoint)) {\n        return values[nextBreakpoint] as T\n      }\n    }\n\n    return values.base as T\n  }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAyB;AACzB,mBAA2B;AAC3B,mBAA6C;AAQtC,IAAM,gBAAgB,MAAM;AACjC,QAAM,EAAE,MAAM,QAAI,sBAAS;AAE3B,MAAI,CAAC;AACH,UAAM;AAAA,MACJ;AAAA,IACF;AAEF,QAAM,cAAc,MAAM;AAE1B,MAAI,CAAC;AACH,UAAM;AAAA,MACJ;AAAA,IACF;AAEF,QAAM,cAAU;AAAA,IACd,MACE,YAAY,QAAQ,IAAI,CAAC,EAAE,YAAAA,aAAY,YAAY,MAAG;AA5B5D;AA4BgE;AAAA,QACxD,YAAAA;AAAA,QACA,QAAO,gDAAa,QAAQ,sBAAsB,QAA3C,YAAkD;AAAA,MAC3D;AAAA,KAAE;AAAA,IACJ,CAAC,WAAW;AAAA,EACd;AAEA,QAAM,CAAC,YAAY,aAAa,QAAI,uBAAS,MAAM;AACjD,UAAM,gBAAY,yBAAW;AAE7B,QAAI,CAAC;AAAW,aAAO;AAEvB,eAAW,EAAE,YAAAA,aAAY,MAAM,KAAK,SAAS;AAC3C,YAAM,MAAM,OAAO,WAAW,KAAK;AAEnC,UAAI,IAAI;AAAS,eAAOA;AAAA,IAC1B;AAAA,EACF,CAAC;AAED,8BAAU,MAAM;AACd,UAAM,WAAW,QAAQ,IAAI,CAAC,EAAE,YAAAA,aAAY,MAAM,MAAoB;AACpE,YAAM,MAAM,OAAO,WAAW,KAAK;AAEnC,YAAM,WAAW,CAAC,MAA2B;AAC3C,YAAI,EAAE;AAAS,wBAAcA,WAAU;AAAA,MACzC;AAEA,UAAI,OAAO,IAAI,qBAAqB;AAClC,YAAI,iBAAiB,UAAU,QAAQ;AAEzC,aAAO,MAAM;AACX,YAAI,OAAO,IAAI,wBAAwB;AACrC,cAAI,oBAAoB,UAAU,QAAQ;AAAA,MAC9C;AAAA,IACF,CAAC;AAED,WAAO,MAAM;AACX,eAAS,QAAQ,CAAC,cAAc,UAAU,CAAC;AAAA,IAC7C;AAAA,EACF,GAAG,CAAC,OAAO,CAAC;AAEZ,SAAO;AACT;AAQO,IAAM,qBAAqB,CAChC,WACM;AACN,QAAM,EAAE,MAAM,QAAI,sBAAS;AAC3B,QAAM,aAAa,cAAc;AAEjC,SAAO,mBAAsB,MAAM,EAAE,OAAO,UAAU;AACxD;AAEO,IAAM,qBACX,CAAgB,WAChB,CAAC,OAAoB,eAAwC;AAzF/D;AA0FI,MAAI,CAAC;AACH,UAAM;AAAA,MACJ;AAAA,IACF;AAEF,QAAM,eAAc,WAAM,kBAAN,mBAAqB;AAEzC,MAAI,CAAC;AACH,UAAM;AAAA,MACJ;AAAA,IACF;AAEF,QAAM,eAAe,YAAY,QAAQ,UAAU;AAEnD,WAAS,IAAI,cAAc,IAAI,GAAG,KAAK;AACrC,UAAM,iBAAiB,YAAY,CAAC;AAEpC,QAAI,OAAO,eAAe,cAAc,GAAG;AACzC,aAAO,OAAO,cAAc;AAAA,IAC9B;AAAA,EACF;AAEA,SAAO,OAAO;AAChB;","names":["breakpoint"]}