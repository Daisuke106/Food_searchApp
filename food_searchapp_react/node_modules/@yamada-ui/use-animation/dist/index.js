"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useAnimation: () => useAnimation,
  useAnimationObserver: () => useAnimationObserver,
  useDynamicAnimation: () => useDynamicAnimation
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@yamada-ui/core");
var import_use_boolean = require("@yamada-ui/use-boolean");
var import_use_event_listener = require("@yamada-ui/use-event-listener");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var useAnimation = (styles) => {
  const { theme } = (0, import_core.useTheme)();
  if ((0, import_utils.isArray)(styles)) {
    return styles.map((style) => (0, import_core.generateAnimation)(style, theme, import_core.css)).join(", ");
  } else {
    return (0, import_core.generateAnimation)(styles, theme, import_core.css);
  }
};
var useDynamicAnimation = (arrayOrObj, init) => {
  const { theme } = (0, import_core.useTheme)();
  const keys = (0, import_react.useRef)(
    !(0, import_utils.isUndefined)(init) ? (0, import_utils.isArray)(init) ? init.map(String) : String(init) : void 0
  );
  const cache = (0, import_react.useRef)(/* @__PURE__ */ new Map());
  const [animations, setAnimations] = (0, import_react.useState)(() => {
    var _a;
    for (const [key, styles] of Object.entries(arrayOrObj)) {
      if (cache.current.has(key))
        return;
      if ((0, import_utils.isArray)(styles)) {
        cache.current.set(
          key,
          styles.map((style) => (0, import_core.generateAnimation)(style, theme, import_core.css)).join(", ")
        );
      } else {
        cache.current.set(key, (0, import_core.generateAnimation)(styles, theme, import_core.css));
      }
    }
    if ((0, import_utils.isArray)(keys.current)) {
      return keys.current.map((key) => cache.current.get(key)).join(", ");
    } else {
      return cache.current.get((_a = keys.current) != null ? _a : "");
    }
  });
  const setAnimation = (0, import_react.useCallback)(
    (keysOrFunc) => {
      var _a;
      const args = (() => {
        if (!(0, import_utils.isUndefined)(keys.current) && (0, import_utils.isArray)(arrayOrObj)) {
          return (0, import_utils.isArray)(keys.current) ? keys.current.map(Number) : Number(keys.current);
        } else {
          return keys.current;
        }
      })();
      const keyOrArray = (0, import_utils.runIfFunc)(keysOrFunc, args);
      keys.current = (0, import_utils.isArray)(keyOrArray) ? keyOrArray.map(String) : String(keyOrArray);
      if ((0, import_utils.isArray)(keys.current)) {
        setAnimations(
          keys.current.map((key) => cache.current.get(key)).join(", ")
        );
      } else {
        setAnimations(cache.current.get((_a = keys.current) != null ? _a : ""));
      }
    },
    [arrayOrObj]
  );
  return [animations, setAnimation];
};
var useAnimationObserver = ({
  isOpen,
  ref
}) => {
  const [mounted, setMounted] = (0, import_react.useState)(isOpen);
  const [flg, { on }] = (0, import_use_boolean.useBoolean)();
  (0, import_react.useEffect)(() => {
    if (flg)
      return;
    setMounted(isOpen);
    on();
  }, [isOpen, flg, on]);
  (0, import_use_event_listener.useEventListener)(
    () => ref.current,
    "animationend",
    () => setMounted(isOpen)
  );
  const hidden = isOpen ? false : !mounted;
  return {
    present: !hidden,
    onAnimationComplete() {
      var _a;
      const ownerWindow = (0, import_utils.getOwnerWindow)(ref.current);
      const ev = new ownerWindow.CustomEvent("animationend", {
        bubbles: true
      });
      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(ev);
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useAnimation,
  useAnimationObserver,
  useDynamicAnimation
});
//# sourceMappingURL=index.js.map