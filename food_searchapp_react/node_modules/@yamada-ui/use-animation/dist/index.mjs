"use client"

// src/index.ts
import { useTheme, generateAnimation, css } from "@yamada-ui/core";
import { useBoolean } from "@yamada-ui/use-boolean";
import { useEventListener } from "@yamada-ui/use-event-listener";
import {
  isArray,
  isUndefined,
  runIfFunc,
  getOwnerWindow
} from "@yamada-ui/utils";
import { useCallback, useEffect, useRef, useState } from "react";
var useAnimation = (styles) => {
  const { theme } = useTheme();
  if (isArray(styles)) {
    return styles.map((style) => generateAnimation(style, theme, css)).join(", ");
  } else {
    return generateAnimation(styles, theme, css);
  }
};
var useDynamicAnimation = (arrayOrObj, init) => {
  const { theme } = useTheme();
  const keys = useRef(
    !isUndefined(init) ? isArray(init) ? init.map(String) : String(init) : void 0
  );
  const cache = useRef(/* @__PURE__ */ new Map());
  const [animations, setAnimations] = useState(() => {
    var _a;
    for (const [key, styles] of Object.entries(arrayOrObj)) {
      if (cache.current.has(key))
        return;
      if (isArray(styles)) {
        cache.current.set(
          key,
          styles.map((style) => generateAnimation(style, theme, css)).join(", ")
        );
      } else {
        cache.current.set(key, generateAnimation(styles, theme, css));
      }
    }
    if (isArray(keys.current)) {
      return keys.current.map((key) => cache.current.get(key)).join(", ");
    } else {
      return cache.current.get((_a = keys.current) != null ? _a : "");
    }
  });
  const setAnimation = useCallback(
    (keysOrFunc) => {
      var _a;
      const args = (() => {
        if (!isUndefined(keys.current) && isArray(arrayOrObj)) {
          return isArray(keys.current) ? keys.current.map(Number) : Number(keys.current);
        } else {
          return keys.current;
        }
      })();
      const keyOrArray = runIfFunc(keysOrFunc, args);
      keys.current = isArray(keyOrArray) ? keyOrArray.map(String) : String(keyOrArray);
      if (isArray(keys.current)) {
        setAnimations(
          keys.current.map((key) => cache.current.get(key)).join(", ")
        );
      } else {
        setAnimations(cache.current.get((_a = keys.current) != null ? _a : ""));
      }
    },
    [arrayOrObj]
  );
  return [animations, setAnimation];
};
var useAnimationObserver = ({
  isOpen,
  ref
}) => {
  const [mounted, setMounted] = useState(isOpen);
  const [flg, { on }] = useBoolean();
  useEffect(() => {
    if (flg)
      return;
    setMounted(isOpen);
    on();
  }, [isOpen, flg, on]);
  useEventListener(
    () => ref.current,
    "animationend",
    () => setMounted(isOpen)
  );
  const hidden = isOpen ? false : !mounted;
  return {
    present: !hidden,
    onAnimationComplete() {
      var _a;
      const ownerWindow = getOwnerWindow(ref.current);
      const ev = new ownerWindow.CustomEvent("animationend", {
        bubbles: true
      });
      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(ev);
    }
  };
};
export {
  useAnimation,
  useAnimationObserver,
  useDynamicAnimation
};
//# sourceMappingURL=index.mjs.map