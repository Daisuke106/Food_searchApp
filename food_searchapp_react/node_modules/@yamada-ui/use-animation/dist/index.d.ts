import { AnimationStyle, Theme } from '@yamada-ui/core';

type Styles = AnimationStyle | Theme["animations"] | (AnimationStyle | Theme["animations"])[];
/**
 * `useAnimation` is a custom hook that implements animations similar to CSS `keyframes`.
 *
 * @see Docs https://yamada-ui.com/hooks/use-animation
 */
declare const useAnimation: (styles: Styles) => string;
/**
 * `useDynamicAnimation` is a custom hook used to switch animations.
 *
 * @see Docs https://yamada-ui.com/hooks/use-dynamic-animation
 */
declare const useDynamicAnimation: <T extends Record<string, Styles> | (AnimationStyle | (string & {}))[]>(arrayOrObj: T, init?: keyof T | (keyof T)[]) => [
    string | undefined,
    (key: keyof T | (keyof T)[] | ((key: keyof T | (keyof T)[] | undefined) => keyof T | (keyof T)[])) => void
];
type UseAnimationObserverProps = {
    isOpen: boolean;
    ref: React.RefObject<HTMLElement>;
};
declare const useAnimationObserver: ({ isOpen, ref, }: UseAnimationObserverProps) => {
    present: boolean;
    onAnimationComplete(): void;
};
type ReturnUseAnimationObserver = ReturnType<typeof useAnimationObserver>;

export { type ReturnUseAnimationObserver, type UseAnimationObserverProps, useAnimation, useAnimationObserver, useDynamicAnimation };
