{"version":3,"sources":["../src/container.tsx"],"sourcesContent":["import type { HTMLUIProps, ThemeProps, CSSUIObject } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useMemo } from \"react\"\n\ntype ContainerOptions = {\n  /**\n   * If `true`, container will center its children regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport type ContainerProps = HTMLUIProps<\"section\"> &\n  ThemeProps<\"Container\"> &\n  ContainerOptions\n\n/**\n * `Container` is a component used as a general division element. By default, it renders the `section` element.\n *\n * @see Docs https://yamada-ui.com/components/layouts/container\n */\nexport const Container = forwardRef<ContainerProps, \"section\">((props, ref) => {\n  const [styles, mergedProps] = useComponentStyle(\"Container\", props)\n  const { className, centerContent, ...rest } = omitThemeProps(mergedProps)\n\n  const css: CSSUIObject = useMemo(\n    () => ({\n      alignItems: centerContent ? \"center\" : undefined,\n      ...styles,\n    }),\n    [centerContent, styles],\n  )\n\n  return (\n    <ui.section\n      ref={ref}\n      className={cx(\"ui-container\", className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAKO;AACP,mBAAmB;AACnB,mBAAwB;AAiCpB;AAbG,IAAM,gBAAY,wBAAsC,CAAC,OAAO,QAAQ;AAC7E,QAAM,CAAC,QAAQ,WAAW,QAAI,+BAAkB,aAAa,KAAK;AAClE,QAAM,EAAE,WAAW,eAAe,GAAG,KAAK,QAAI,4BAAe,WAAW;AAExE,QAAM,UAAmB;AAAA,IACvB,OAAO;AAAA,MACL,YAAY,gBAAgB,WAAW;AAAA,MACvC,GAAG;AAAA,IACL;AAAA,IACA,CAAC,eAAe,MAAM;AAAA,EACxB;AAEA,SACE;AAAA,IAAC,eAAG;AAAA,IAAH;AAAA,MACC;AAAA,MACA,eAAW,iBAAG,gBAAgB,SAAS;AAAA,MACvC,OAAO;AAAA,MACN,GAAG;AAAA;AAAA,EACN;AAEJ,CAAC;","names":[]}