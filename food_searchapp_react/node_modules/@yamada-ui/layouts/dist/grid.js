"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/grid.tsx
var grid_exports = {};
__export(grid_exports, {
  Grid: () => Grid,
  GridItem: () => GridItem,
  SimpleGrid: () => SimpleGrid
});
module.exports = __toCommonJS(grid_exports);
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_jsx_runtime = require("react/jsx-runtime");
var Grid = (0, import_core.forwardRef)(
  ({
    templateColumns: gridTemplateColumns,
    templateRows: gridTemplateRows,
    templateAreas: gridTemplateAreas,
    column: gridColumn,
    row: gridRow,
    area: gridArea,
    gap,
    rowGap,
    columnGap,
    autoFlow: gridAutoFlow,
    autoColumns: gridAutoColumns,
    autoRows: gridAutoRows,
    ...rest
  }, ref) => {
    const css = {
      display: "grid",
      gridTemplateColumns,
      gridTemplateRows,
      gridTemplateAreas,
      gridColumn,
      gridRow,
      gridArea,
      gap,
      rowGap,
      columnGap,
      gridAutoFlow,
      gridAutoColumns,
      gridAutoRows
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.ui.div, { ref, __css: css, ...rest });
  }
);
var transformColumns = (columns, minWidth) => (theme) => {
  if (minWidth) {
    return (0, import_utils.replaceObject)(minWidth, (value) => {
      value = (0, import_utils.getMemoizedObject)(theme, `sizes.${value}`, import_core.transforms.px(value));
      return value != null ? `repeat(auto-fit, minmax(${value}, 1fr))` : void 0;
    });
  } else {
    return (0, import_utils.replaceObject)(
      columns,
      (value) => value != null ? `repeat(${value}, minmax(0, 1fr))` : void 0
    );
  }
};
var SimpleGrid = (0, import_core.forwardRef)(
  ({ minChildWidth, columns, ...rest }, ref) => {
    const { theme } = (0, import_core.useTheme)();
    let templateColumns = transformColumns(columns, minChildWidth)(theme);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Grid, { ref, templateColumns, ...rest });
  }
);
var GridItem = (0, import_core.forwardRef)(
  ({
    area: gridArea,
    colSpan,
    rowSpan,
    colStart: gridColumnStart,
    colEnd: gridColumnEnd,
    rowStart: gridRowStart,
    rowEnd: gridRowEnd,
    ...rest
  }, ref) => {
    const css = {
      gridColumn: (0, import_utils.replaceObject)(
        colSpan,
        (value) => value != null ? `span ${value}/span ${value}` : void 0
      ),
      gridRow: (0, import_utils.replaceObject)(
        rowSpan,
        (value) => value != null ? `span ${value}/span ${value}` : void 0
      ),
      gridColumnStart,
      gridColumnEnd,
      gridRowStart,
      gridRowEnd,
      gridArea
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.ui.div, { ref, __css: css, ...rest });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Grid,
  GridItem,
  SimpleGrid
});
//# sourceMappingURL=grid.js.map