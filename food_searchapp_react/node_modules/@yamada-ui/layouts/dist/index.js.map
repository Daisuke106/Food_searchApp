{"version":3,"sources":["../src/index.ts","../src/box.tsx","../src/flex.tsx","../src/center.tsx","../src/grid.tsx","../src/container.tsx","../src/stack.tsx","../src/spacer.tsx","../src/divider.tsx","../src/aspect-ratio.tsx"],"sourcesContent":["export { Box } from \"./box\"\nexport type { BoxProps } from \"./box\"\nexport { Flex, Wrap } from \"./flex\"\nexport type { FlexProps } from \"./flex\"\nexport { Center } from \"./center\"\nexport type { CenterProps } from \"./center\"\nexport { Grid, SimpleGrid, GridItem } from \"./grid\"\nexport type { GridProps, SimpleGridProps, GridItemProps } from \"./grid\"\nexport { Container } from \"./container\"\nexport type { ContainerProps } from \"./container\"\nexport { Stack, VStack, HStack, ZStack } from \"./stack\"\nexport type { StackProps, ZStackProps } from \"./stack\"\nexport { Spacer } from \"./spacer\"\nexport type { SpacerProps } from \"./spacer\"\nexport { Divider } from \"./divider\"\nexport type { DividerProps } from \"./divider\"\nexport { AspectRatio } from \"./aspect-ratio\"\nexport type { AspectRatioProps } from \"./aspect-ratio\"\n","import type { HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui } from \"@yamada-ui/core\"\n\nexport type BoxProps = HTMLUIProps<\"div\">\n\n/**\n * `Box` is the most abstract component on which all other components are built. By default, it renders a `div` element.\n *\n * @see Docs https://yamada-ui.com/components/layouts/box\n */\nexport const Box = ui(\"div\")\n","import type { HTMLUIProps, CSSUIObject } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\n\ntype FlexOptions = {\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIObject[\"flexDirection\"]\n  /**\n   * The CSS `justify-content` property.\n   */\n  justify?: CSSUIObject[\"justifyContent\"]\n  /**\n   * The CSS `align-items` property.\n   */\n  align?: CSSUIObject[\"alignItems\"]\n  /**\n   * The CSS `flex-wrap` property.\n   */\n  wrap?: CSSUIObject[\"flexWrap\"]\n  /**\n   * The CSS `flex-basis` property.\n   */\n  basis?: CSSUIObject[\"flexBasis\"]\n  /**\n   * The CSS `flex-grow` property.\n   */\n  grow?: CSSUIObject[\"flexGrow\"]\n  /**\n   * The CSS `flex-shrink` property.\n   */\n  shrink?: CSSUIObject[\"flexShrink\"]\n}\n\nexport type FlexProps = Omit<HTMLUIProps<\"div\">, \"direction\"> & FlexOptions\n\n/**\n * `Flex` is a component that sets `flex` to `Box`. Also, convenient style shorthand is available.\n *\n * @see Docs https://yamada-ui.com/components/layouts/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(\n  (\n    {\n      direction: flexDirection,\n      justify: justifyContent,\n      align: alignItems,\n      wrap: flexWrap,\n      basis: flexBasis,\n      grow: flexGrow,\n      shrink: flexShrink,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      display: \"flex\",\n      flexDirection,\n      justifyContent,\n      alignItems,\n      flexWrap,\n      flexBasis,\n      flexGrow,\n      flexShrink,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n\n/**\n * `Wrap` is a component that has `wrap` set on `Flex`. It inherits convenient style shorthand from `Flex`.\n *\n * @see Docs https://yamada-ui.com/components/layouts/wrap\n */\nexport const Wrap = forwardRef<FlexProps, \"div\">((props, ref) => (\n  <Flex ref={ref} wrap=\"wrap\" {...props} />\n))\n","import type { HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui } from \"@yamada-ui/core\"\n\nexport type CenterProps = HTMLUIProps<\"div\">\n\n/**\n * `Center` is a component that aligns the child elements in the center within the component.\n *\n * @see Docs https://yamada-ui.com/components/layouts/center\n */\nexport const Center = ui(\"div\", {\n  baseStyle: {\n    justifyContent: \"center\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n})\n","import type {\n  HTMLUIProps,\n  CSSUIObject,\n  Token,\n  StyledTheme,\n} from \"@yamada-ui/core\"\nimport { ui, forwardRef, useTheme, transforms } from \"@yamada-ui/core\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport { replaceObject, getMemoizedObject as get } from \"@yamada-ui/utils\"\ntype GridOptions = {\n  /**\n   * The CSS `grid-template-columns` property.\n   */\n  templateColumns?: CSSUIObject[\"gridTemplateColumns\"]\n  /**\n   * The CSS `grid-template-rows` property.\n   */\n  templateRows?: CSSUIObject[\"gridTemplateRows\"]\n  /**\n   * The CSS `grid-template-areas` property.\n   */\n  templateAreas?: CSSUIObject[\"gridTemplateAreas\"]\n  /**\n   * The CSS `grid-column` property.\n   */\n  column?: CSSUIObject[\"gridColumn\"]\n  /**\n   * The CSS `grid-row` property.\n   */\n  row?: CSSUIObject[\"gridRow\"]\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject[\"gridArea\"]\n  /**\n   * The CSS `grid-auto-flow` property.\n   */\n  autoFlow?: CSSUIObject[\"gridAutoFlow\"]\n  /**\n   * The CSS `grid-auto-columns` property.\n   */\n  autoColumns?: CSSUIObject[\"gridAutoColumns\"]\n  /**\n   * The CSS `grid-auto-rows` property.\n   */\n  autoRows?: CSSUIObject[\"gridAutoRows\"]\n}\n\nexport type GridProps = HTMLUIProps<\"div\"> & GridOptions\n\n/**\n * `Grid` is a component for managing grid layouts. It also comes with handy style shorthand.\n *\n * @see Docs https://yamada-ui.com/components/layouts/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(\n  (\n    {\n      templateColumns: gridTemplateColumns,\n      templateRows: gridTemplateRows,\n      templateAreas: gridTemplateAreas,\n      column: gridColumn,\n      row: gridRow,\n      area: gridArea,\n      gap,\n      rowGap,\n      columnGap,\n      autoFlow: gridAutoFlow,\n      autoColumns: gridAutoColumns,\n      autoRows: gridAutoRows,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      display: \"grid\",\n      gridTemplateColumns,\n      gridTemplateRows,\n      gridTemplateAreas,\n      gridColumn,\n      gridRow,\n      gridArea,\n      gap,\n      rowGap,\n      columnGap,\n      gridAutoFlow,\n      gridAutoColumns,\n      gridAutoRows,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n\nconst transformColumns =\n  (columns: Token<number> | undefined, minWidth?: GridProps[\"minWidth\"]) =>\n  (theme: StyledTheme<Dict>) => {\n    if (minWidth) {\n      return replaceObject(minWidth, (value) => {\n        value = get(theme, `sizes.${value}`, transforms.px(value))\n\n        return value != null\n          ? `repeat(auto-fit, minmax(${value}, 1fr))`\n          : undefined\n      }) as CSSUIObject[\"gridTemplateColumns\"]\n    } else {\n      return replaceObject(columns, (value) =>\n        value != null ? `repeat(${value}, minmax(0, 1fr))` : undefined,\n      ) as CSSUIObject[\"gridTemplateColumns\"]\n    }\n  }\n\ntype SimpleGridOptions = {\n  /**\n   * The width at which child elements will break into columns.\n   * Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns.\n   */\n  columns?: Token<number>\n}\n\nexport type SimpleGridProps = GridProps & SimpleGridOptions\n\n/**\n * `SimpleGrid` is a component that makes `Grid` simpler and more user-friendly.\n *\n * @see Docs https://yamada-ui.com/components/layouts/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  ({ minChildWidth, columns, ...rest }, ref) => {\n    const { theme } = useTheme()\n    let templateColumns = transformColumns(columns, minChildWidth)(theme)\n\n    return <Grid ref={ref} templateColumns={templateColumns} {...rest} />\n  },\n)\n\ntype GridItemOptions = {\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject[\"gridArea\"]\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  colSpan?: Token<number>\n  /**\n   * The number of rows the grid item should `span`.\n   */\n  rowSpan?: Token<number>\n  /**\n   * The CSS `grid-column-start` property.\n   */\n  colStart?: CSSUIObject[\"gridColumnStart\"]\n  /**\n   * The CSS `grid-column-end` property.\n   */\n  colEnd?: CSSUIObject[\"gridColumnEnd\"]\n  /**\n   * The CSS `grid-row-start` property.\n   */\n  rowStart?: CSSUIObject[\"gridRowStart\"]\n  /**\n   * The CSS `grid-row-end` property.\n   */\n  rowEnd?: CSSUIObject[\"gridRowEnd\"]\n}\n\nexport type GridItemProps = HTMLUIProps<\"div\"> & GridItemOptions\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">(\n  (\n    {\n      area: gridArea,\n      colSpan,\n      rowSpan,\n      colStart: gridColumnStart,\n      colEnd: gridColumnEnd,\n      rowStart: gridRowStart,\n      rowEnd: gridRowEnd,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      gridColumn: replaceObject(colSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridRow: replaceObject(rowSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridColumnStart,\n      gridColumnEnd,\n      gridRowStart,\n      gridRowEnd,\n      gridArea,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n","import type { HTMLUIProps, ThemeProps, CSSUIObject } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useMemo } from \"react\"\n\ntype ContainerOptions = {\n  /**\n   * If `true`, container will center its children regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport type ContainerProps = HTMLUIProps<\"section\"> &\n  ThemeProps<\"Container\"> &\n  ContainerOptions\n\n/**\n * `Container` is a component used as a general division element. By default, it renders the `section` element.\n *\n * @see Docs https://yamada-ui.com/components/layouts/container\n */\nexport const Container = forwardRef<ContainerProps, \"section\">((props, ref) => {\n  const [styles, mergedProps] = useComponentStyle(\"Container\", props)\n  const { className, centerContent, ...rest } = omitThemeProps(mergedProps)\n\n  const css: CSSUIObject = useMemo(\n    () => ({\n      alignItems: centerContent ? \"center\" : undefined,\n      ...styles,\n    }),\n    [centerContent, styles],\n  )\n\n  return (\n    <ui.section\n      ref={ref}\n      className={cx(\"ui-container\", className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n","import type { HTMLUIProps, CSSUIObject } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport {\n  getValidChildren,\n  cx,\n  replaceObject,\n  mergeRefs,\n} from \"@yamada-ui/utils\"\nimport type { ReactElement, RefObject } from \"react\"\nimport {\n  cloneElement,\n  createRef,\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\n\ntype StackOptions = {\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIObject[\"flexDirection\"]\n  /**\n   * The CSS `justify-content` property.\n   */\n  justify?: CSSUIObject[\"justifyContent\"]\n  /**\n   * The CSS `align-items` property.\n   */\n  align?: CSSUIObject[\"alignItems\"]\n  /**\n   * The CSS `flex-wrap` property.\n   */\n  wrap?: CSSUIObject[\"flexWrap\"]\n  /**\n   * If `true`, each stack item will show a divider.\n   */\n  divider?: ReactElement\n}\n\nexport type StackProps = Omit<HTMLUIProps<\"div\">, \"direction\"> & StackOptions\n\n/**\n * `Stack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const Stack = forwardRef<StackProps, \"div\">(\n  (\n    {\n      direction: flexDirection = \"column\",\n      justify: justifyContent,\n      align: alignItems,\n      wrap: flexWrap,\n      gap = \"fallback(md, 1rem)\",\n      divider,\n      className,\n      children,\n      ...rest\n    },\n    ref,\n  ) => {\n    const isColumn = (value: any) =>\n      value === \"column\" || value === \"column-reverse\"\n\n    const dividerCSS = useMemo(\n      () => ({\n        w: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? \"100%\" : \"fix-content\",\n        ),\n        h: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? \"fix-content\" : \"100%\",\n        ),\n        borderLeftWidth: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? 0 : \"1px\",\n        ),\n        borderBottomWidth: replaceObject(flexDirection, (value) =>\n          isColumn(value) ? \"1px\" : 0,\n        ),\n      }),\n      [flexDirection],\n    )\n\n    const validChildren = getValidChildren(children)\n\n    const cloneChildren = divider\n      ? validChildren.map((child, index) => {\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n\n          const cloneDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerCSS,\n            },\n          )\n\n          return (\n            <Fragment key={key}>\n              {!!index ? cloneDivider : null}\n              {child}\n            </Fragment>\n          )\n        })\n      : validChildren\n\n    const css: CSSUIObject = useMemo(\n      () => ({\n        display: \"flex\",\n        flexDirection,\n        justifyContent,\n        alignItems,\n        flexWrap,\n        gap,\n      }),\n      [alignItems, flexDirection, flexWrap, gap, justifyContent],\n    )\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-stack\", className)}\n        __css={css}\n        {...rest}\n      >\n        {cloneChildren}\n      </ui.div>\n    )\n  },\n)\n\n/**\n * `HStack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const HStack = forwardRef<StackProps, \"div\">(\n  ({ className, ...rest }, ref) => (\n    <Stack\n      ref={ref}\n      className={cx(\"ui-stack--horizontal\", className)}\n      direction=\"row\"\n      align=\"center\"\n      {...rest}\n    />\n  ),\n)\n\n/**\n * `VStack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">(\n  ({ className, ...rest }, ref) => (\n    <Stack\n      ref={ref}\n      className={cx(\"ui-stack--vertical\", className)}\n      direction=\"column\"\n      align=\"stretch\"\n      w=\"100%\"\n      {...rest}\n    />\n  ),\n)\n\ntype ZStackOptions = {\n  /**\n   * If set the stack will start from the given index.\n   *\n   * @default 0\n   */\n  startIndex?: number\n  /**\n   * Stack in the specified direction.\n   *\n   * @default \"bottom\"\n   */\n  direction?:\n    | \"top\"\n    | \"right\"\n    | \"bottom\"\n    | \"left\"\n    | \"top-left\"\n    | \"top-right\"\n    | \"bottom-left\"\n    | \"bottom-right\"\n  /**\n   * If `true`, reverse direction.\n   *\n   * @default false\n   */\n  reverse?: boolean\n  /**\n   * If `true`, calculate the `width` and `height` of the element and assign container.\n   *\n   * @default true\n   */\n  fit?: boolean\n}\n\nexport type ZStackProps = Omit<HTMLUIProps<\"div\">, \"direction\"> & ZStackOptions\n\n/**\n * `ZStack` is a component that groups elements and provides space between child elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/stack\n */\nexport const ZStack = forwardRef<ZStackProps, \"div\">(\n  (\n    {\n      className,\n      direction = \"bottom\",\n      startIndex = 0,\n      gap = \"fallback(md, 1rem)\",\n      reverse = false,\n      fit = true,\n      children,\n      ...rest\n    },\n    ref,\n  ) => {\n    const refMap = useRef<Map<number, RefObject<HTMLDivElement>>>(new Map())\n    const [rect, setRect] = useState<{ width: number; height: number }>({\n      width: 0,\n      height: 0,\n    })\n\n    const boxSize: CSSUIObject = {\n      minWidth: `${rect.width}px`,\n      minHeight: `${rect.height}px`,\n    }\n\n    const css: CSSUIObject = {\n      position: \"relative\",\n      overflow: \"hidden\",\n      var: [{ __prefix: \"ui\", name: \"space\", token: \"spaces\", value: gap }],\n      ...(fit ? boxSize : {}),\n    }\n\n    const vertical = useCallback(\n      (space: string) => {\n        if (direction.includes(\"top\")) {\n          return { [!reverse ? \"bottom\" : \"top\"]: space }\n        } else if (direction.includes(\"bottom\")) {\n          return { [!reverse ? \"top\" : \"bottom\"]: space }\n        } else {\n          return { [!reverse ? \"top\" : \"bottom\"]: 0 }\n        }\n      },\n      [direction, reverse],\n    )\n\n    const horizontal = useCallback(\n      (space: string) => {\n        if (direction.includes(\"left\")) {\n          return { [!reverse ? \"right\" : \"left\"]: space }\n        } else if (direction.includes(\"right\")) {\n          return { [!reverse ? \"left\" : \"right\"]: space }\n        } else {\n          return { [!reverse ? \"left\" : \"right\"]: 0 }\n        }\n      },\n      [direction, reverse],\n    )\n\n    const cloneChildren = useMemo(() => {\n      const validChildren = getValidChildren(children) as (ReactElement & {\n        ref: RefObject<any>\n      })[]\n\n      const clonedChildren = validChildren.map((child, index) => {\n        const ref = createRef<HTMLDivElement>()\n\n        refMap.current.set(index, ref)\n\n        const key = child.key ?? index\n\n        const zIndex = startIndex + index\n        const space = `calc(var(--ui-space) * ${index})`\n\n        let css: CSSUIObject = {}\n\n        css = {\n          ...css,\n          position: \"absolute\",\n          zIndex,\n        }\n\n        css = { ...css, ...vertical(space) }\n        css = { ...css, ...horizontal(space) }\n\n        const props = {\n          ...child.props,\n          ref: mergeRefs(child.ref, ref),\n          __css: css,\n        }\n\n        const clonedChild = cloneElement(child, props)\n\n        return <Fragment key={key}>{clonedChild}</Fragment>\n      })\n\n      return clonedChildren\n    }, [children, startIndex, vertical, horizontal])\n\n    useEffect(() => {\n      if (!fit) return\n\n      let isNegativeLeft = direction.includes(\"left\")\n      let isNegativeTop = direction.includes(\"top\")\n      let width = 0\n      let height = 0\n\n      if (reverse) {\n        isNegativeLeft = !isNegativeLeft\n        isNegativeTop = !isNegativeTop\n      }\n\n      for (const ref of refMap.current.values()) {\n        if (!ref.current) continue\n\n        let { offsetParent, offsetWidth, offsetHeight, offsetTop, offsetLeft } =\n          ref.current\n\n        if (!offsetParent) continue\n\n        if (isNegativeLeft) {\n          offsetLeft =\n            (offsetParent as HTMLDivElement).offsetWidth -\n            offsetLeft -\n            offsetWidth\n        }\n\n        if (isNegativeTop) {\n          offsetTop =\n            (offsetParent as HTMLDivElement).offsetHeight -\n            offsetTop -\n            offsetHeight\n        }\n\n        offsetWidth += offsetLeft\n        offsetHeight += offsetTop\n\n        if (offsetWidth > width) width = offsetWidth\n        if (offsetHeight > height) height = offsetHeight\n      }\n\n      setRect({ width, height })\n    }, [cloneChildren, direction, reverse, fit])\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-stack--depth\", className)}\n        __css={css}\n        {...rest}\n      >\n        {cloneChildren}\n      </ui.div>\n    )\n  },\n)\n","import type { HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui } from \"@yamada-ui/core\"\n\nexport type SpacerProps = HTMLUIProps<\"div\">\n\nexport const Spacer = ui(\"div\", {\n  baseStyle: {\n    flex: 1,\n    justifySelf: \"stretch\",\n    alignSelf: \"stretch\",\n  },\n})\n","import type { HTMLUIProps, ThemeProps, CSSUIObject } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\nimport { useMemo } from \"react\"\n\ntype DividerOptions = {\n  /**\n   * The orientation of the divider.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n}\n\nexport type DividerProps = HTMLUIProps<\"hr\"> &\n  ThemeProps<\"Divider\"> &\n  DividerOptions\n\n/**\n * `Divider` is a component that represents a division between elements.\n *\n * @see Docs https://yamada-ui.com/components/layouts/divider\n */\nexport const Divider = forwardRef<DividerProps, \"hr\">((props, ref) => {\n  const [\n    {\n      borderRightWidth,\n      borderLeftWidth,\n      borderTopWidth,\n      borderBottomWidth,\n      borderWidth,\n      borderStyle,\n      borderColor,\n      ...styles\n    },\n    mergedProps,\n  ] = useComponentStyle(\"Divider\", props)\n  const {\n    className,\n    orientation = \"horizontal\",\n    __css,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const customStyles = useMemo(\n    () => ({\n      vertical: {\n        border: \"0\",\n        borderStyle,\n        borderColor,\n        borderLeftWidth:\n          borderLeftWidth || borderRightWidth || borderWidth || \"1px\",\n        height: \"100%\",\n      },\n      horizontal: {\n        border: \"0\",\n        borderStyle,\n        borderColor,\n        borderBottomWidth:\n          borderBottomWidth || borderTopWidth || borderWidth || \"1px\",\n        width: \"100%\",\n      },\n    }),\n    [\n      borderBottomWidth,\n      borderColor,\n      borderLeftWidth,\n      borderRightWidth,\n      borderStyle,\n      borderTopWidth,\n      borderWidth,\n    ],\n  )\n\n  const dividerStyles = useMemo(\n    () => customStyles[orientation],\n    [customStyles, orientation],\n  ) as CSSUIObject\n\n  const css = {\n    ...styles,\n    ...dividerStyles,\n    ...__css,\n  }\n\n  return (\n    <ui.hr\n      ref={ref}\n      className={cx(\"ui-divider\", className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n","import type { HTMLUIProps, CSSUIObject, Token } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { cx, replaceObject } from \"@yamada-ui/utils\"\nimport { Children } from \"react\"\n\ntype AspectRatioOptions = {\n  /**\n   * The aspect ratio of the Box.\n   *\n   * @default '4 / 3'\n   */\n  ratio?: Token<number>\n}\n\nexport type AspectRatioProps = HTMLUIProps<\"div\"> & AspectRatioOptions\n\n/**\n * `AspectRatio` is a component for embedding things like videos and maps while maintaining the aspect ratio.\n *\n * @see Docs https://yamada-ui.com/components/layouts/aspect-ratio\n */\nexport const AspectRatio = forwardRef<AspectRatioProps, \"div\">(\n  ({ className, ratio = 4 / 3, children, ...rest }, ref) => {\n    const child = Children.only(children)\n\n    const css: CSSUIObject = {\n      position: \"relative\",\n      _before: {\n        content: `\"\"`,\n        display: \"block\",\n        h: 0,\n        pb: replaceObject(ratio, (r) => `${(1 / r) * 100}%`),\n      },\n      \"& > *:not(style)\": {\n        overflow: \"hidden\",\n        position: \"absolute\",\n        top: \"0\",\n        right: \"0\",\n        bottom: \"0\",\n        left: \"0\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        w: \"100%\",\n        h: \"100%\",\n      },\n      \"& > img, & > video\": {\n        objectFit: \"cover\",\n      },\n    }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-aspect-ratio\", className)}\n        __css={css}\n        {...rest}\n      >\n        {child}\n      </ui.div>\n    )\n  },\n)\n"],"mappings":"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","names":["import_core","import_core","import_core","import_jsx_runtime","get","import_core","import_utils","import_jsx_runtime","import_core","import_utils","import_react","import_jsx_runtime","ref","css","import_core","import_core","import_utils","import_react","import_jsx_runtime","import_core","import_utils","import_react","import_jsx_runtime"]}