{"version":3,"sources":["../src/grid.tsx"],"sourcesContent":["import type {\n  HTMLUIProps,\n  CSSUIObject,\n  Token,\n  StyledTheme,\n} from \"@yamada-ui/core\"\nimport { ui, forwardRef, useTheme, transforms } from \"@yamada-ui/core\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport { replaceObject, getMemoizedObject as get } from \"@yamada-ui/utils\"\ntype GridOptions = {\n  /**\n   * The CSS `grid-template-columns` property.\n   */\n  templateColumns?: CSSUIObject[\"gridTemplateColumns\"]\n  /**\n   * The CSS `grid-template-rows` property.\n   */\n  templateRows?: CSSUIObject[\"gridTemplateRows\"]\n  /**\n   * The CSS `grid-template-areas` property.\n   */\n  templateAreas?: CSSUIObject[\"gridTemplateAreas\"]\n  /**\n   * The CSS `grid-column` property.\n   */\n  column?: CSSUIObject[\"gridColumn\"]\n  /**\n   * The CSS `grid-row` property.\n   */\n  row?: CSSUIObject[\"gridRow\"]\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject[\"gridArea\"]\n  /**\n   * The CSS `grid-auto-flow` property.\n   */\n  autoFlow?: CSSUIObject[\"gridAutoFlow\"]\n  /**\n   * The CSS `grid-auto-columns` property.\n   */\n  autoColumns?: CSSUIObject[\"gridAutoColumns\"]\n  /**\n   * The CSS `grid-auto-rows` property.\n   */\n  autoRows?: CSSUIObject[\"gridAutoRows\"]\n}\n\nexport type GridProps = HTMLUIProps<\"div\"> & GridOptions\n\n/**\n * `Grid` is a component for managing grid layouts. It also comes with handy style shorthand.\n *\n * @see Docs https://yamada-ui.com/components/layouts/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(\n  (\n    {\n      templateColumns: gridTemplateColumns,\n      templateRows: gridTemplateRows,\n      templateAreas: gridTemplateAreas,\n      column: gridColumn,\n      row: gridRow,\n      area: gridArea,\n      gap,\n      rowGap,\n      columnGap,\n      autoFlow: gridAutoFlow,\n      autoColumns: gridAutoColumns,\n      autoRows: gridAutoRows,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      display: \"grid\",\n      gridTemplateColumns,\n      gridTemplateRows,\n      gridTemplateAreas,\n      gridColumn,\n      gridRow,\n      gridArea,\n      gap,\n      rowGap,\n      columnGap,\n      gridAutoFlow,\n      gridAutoColumns,\n      gridAutoRows,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n\nconst transformColumns =\n  (columns: Token<number> | undefined, minWidth?: GridProps[\"minWidth\"]) =>\n  (theme: StyledTheme<Dict>) => {\n    if (minWidth) {\n      return replaceObject(minWidth, (value) => {\n        value = get(theme, `sizes.${value}`, transforms.px(value))\n\n        return value != null\n          ? `repeat(auto-fit, minmax(${value}, 1fr))`\n          : undefined\n      }) as CSSUIObject[\"gridTemplateColumns\"]\n    } else {\n      return replaceObject(columns, (value) =>\n        value != null ? `repeat(${value}, minmax(0, 1fr))` : undefined,\n      ) as CSSUIObject[\"gridTemplateColumns\"]\n    }\n  }\n\ntype SimpleGridOptions = {\n  /**\n   * The width at which child elements will break into columns.\n   * Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns.\n   */\n  columns?: Token<number>\n}\n\nexport type SimpleGridProps = GridProps & SimpleGridOptions\n\n/**\n * `SimpleGrid` is a component that makes `Grid` simpler and more user-friendly.\n *\n * @see Docs https://yamada-ui.com/components/layouts/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  ({ minChildWidth, columns, ...rest }, ref) => {\n    const { theme } = useTheme()\n    let templateColumns = transformColumns(columns, minChildWidth)(theme)\n\n    return <Grid ref={ref} templateColumns={templateColumns} {...rest} />\n  },\n)\n\ntype GridItemOptions = {\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject[\"gridArea\"]\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  colSpan?: Token<number>\n  /**\n   * The number of rows the grid item should `span`.\n   */\n  rowSpan?: Token<number>\n  /**\n   * The CSS `grid-column-start` property.\n   */\n  colStart?: CSSUIObject[\"gridColumnStart\"]\n  /**\n   * The CSS `grid-column-end` property.\n   */\n  colEnd?: CSSUIObject[\"gridColumnEnd\"]\n  /**\n   * The CSS `grid-row-start` property.\n   */\n  rowStart?: CSSUIObject[\"gridRowStart\"]\n  /**\n   * The CSS `grid-row-end` property.\n   */\n  rowEnd?: CSSUIObject[\"gridRowEnd\"]\n}\n\nexport type GridItemProps = HTMLUIProps<\"div\"> & GridItemOptions\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">(\n  (\n    {\n      area: gridArea,\n      colSpan,\n      rowSpan,\n      colStart: gridColumnStart,\n      colEnd: gridColumnEnd,\n      rowStart: gridRowStart,\n      rowEnd: gridRowEnd,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      gridColumn: replaceObject(colSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridRow: replaceObject(rowSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridColumnStart,\n      gridColumnEnd,\n      gridRowStart,\n      gridRowEnd,\n      gridArea,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,kBAAqD;AAErD,mBAAwD;AAkF7C;AAnCJ,IAAM,WAAO;AAAA,EAClB,CACE;AAAA,IACE,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd,eAAe;AAAA,IACf,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,aAAa;AAAA,IACb,UAAU;AAAA,IACV,GAAG;AAAA,EACL,GACA,QACG;AACH,UAAM,MAAmB;AAAA,MACvB,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,WAAO,4CAAC,eAAG,KAAH,EAAO,KAAU,OAAO,KAAM,GAAG,MAAM;AAAA,EACjD;AACF;AAEA,IAAM,mBACJ,CAAC,SAAoC,aACrC,CAAC,UAA6B;AAC5B,MAAI,UAAU;AACZ,eAAO,4BAAc,UAAU,CAAC,UAAU;AACxC,kBAAQ,aAAAA,mBAAI,OAAO,SAAS,KAAK,IAAI,uBAAW,GAAG,KAAK,CAAC;AAEzD,aAAO,SAAS,OACZ,2BAA2B,KAAK,YAChC;AAAA,IACN,CAAC;AAAA,EACH,OAAO;AACL,eAAO;AAAA,MAAc;AAAA,MAAS,CAAC,UAC7B,SAAS,OAAO,UAAU,KAAK,sBAAsB;AAAA,IACvD;AAAA,EACF;AACF;AAqBK,IAAM,iBAAa;AAAA,EACxB,CAAC,EAAE,eAAe,SAAS,GAAG,KAAK,GAAG,QAAQ;AAC5C,UAAM,EAAE,MAAM,QAAI,sBAAS;AAC3B,QAAI,kBAAkB,iBAAiB,SAAS,aAAa,EAAE,KAAK;AAEpE,WAAO,4CAAC,QAAK,KAAU,iBAAmC,GAAG,MAAM;AAAA,EACrE;AACF;AAmCO,IAAM,eAAW;AAAA,EACtB,CACE;AAAA,IACE,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,GAAG;AAAA,EACL,GACA,QACG;AACH,UAAM,MAAmB;AAAA,MACvB,gBAAY;AAAA,QAAc;AAAA,QAAS,CAAC,UAClC,SAAS,OAAO,QAAQ,KAAK,SAAS,KAAK,KAAK;AAAA,MAClD;AAAA,MACA,aAAS;AAAA,QAAc;AAAA,QAAS,CAAC,UAC/B,SAAS,OAAO,QAAQ,KAAK,SAAS,KAAK,KAAK;AAAA,MAClD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,WAAO,4CAAC,eAAG,KAAH,EAAO,KAAU,OAAO,KAAM,GAAG,MAAM;AAAA,EACjD;AACF;","names":["get"]}