"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AspectRatio: () => AspectRatio,
  Box: () => Box,
  Center: () => Center,
  Container: () => Container,
  Divider: () => Divider,
  Flex: () => Flex,
  Grid: () => Grid,
  GridItem: () => GridItem,
  HStack: () => HStack,
  SimpleGrid: () => SimpleGrid,
  Spacer: () => Spacer,
  Stack: () => Stack,
  VStack: () => VStack,
  Wrap: () => Wrap,
  ZStack: () => ZStack
});
module.exports = __toCommonJS(src_exports);

// src/box.tsx
var import_core = require("@yamada-ui/core");
var Box = (0, import_core.ui)("div");

// src/flex.tsx
var import_core2 = require("@yamada-ui/core");
var import_jsx_runtime = require("react/jsx-runtime");
var Flex = (0, import_core2.forwardRef)(
  ({
    direction: flexDirection,
    justify: justifyContent,
    align: alignItems,
    wrap: flexWrap,
    basis: flexBasis,
    grow: flexGrow,
    shrink: flexShrink,
    ...rest
  }, ref) => {
    const css = {
      display: "flex",
      flexDirection,
      justifyContent,
      alignItems,
      flexWrap,
      flexBasis,
      flexGrow,
      flexShrink
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core2.ui.div, { ref, __css: css, ...rest });
  }
);
var Wrap = (0, import_core2.forwardRef)((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Flex, { ref, wrap: "wrap", ...props }));

// src/center.tsx
var import_core3 = require("@yamada-ui/core");
var Center = (0, import_core3.ui)("div", {
  baseStyle: {
    justifyContent: "center",
    display: "flex",
    alignItems: "center"
  }
});

// src/grid.tsx
var import_core4 = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_jsx_runtime2 = require("react/jsx-runtime");
var Grid = (0, import_core4.forwardRef)(
  ({
    templateColumns: gridTemplateColumns,
    templateRows: gridTemplateRows,
    templateAreas: gridTemplateAreas,
    column: gridColumn,
    row: gridRow,
    area: gridArea,
    gap,
    rowGap,
    columnGap,
    autoFlow: gridAutoFlow,
    autoColumns: gridAutoColumns,
    autoRows: gridAutoRows,
    ...rest
  }, ref) => {
    const css = {
      display: "grid",
      gridTemplateColumns,
      gridTemplateRows,
      gridTemplateAreas,
      gridColumn,
      gridRow,
      gridArea,
      gap,
      rowGap,
      columnGap,
      gridAutoFlow,
      gridAutoColumns,
      gridAutoRows
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core4.ui.div, { ref, __css: css, ...rest });
  }
);
var transformColumns = (columns, minWidth) => (theme) => {
  if (minWidth) {
    return (0, import_utils.replaceObject)(minWidth, (value) => {
      value = (0, import_utils.getMemoizedObject)(theme, `sizes.${value}`, import_core4.transforms.px(value));
      return value != null ? `repeat(auto-fit, minmax(${value}, 1fr))` : void 0;
    });
  } else {
    return (0, import_utils.replaceObject)(
      columns,
      (value) => value != null ? `repeat(${value}, minmax(0, 1fr))` : void 0
    );
  }
};
var SimpleGrid = (0, import_core4.forwardRef)(
  ({ minChildWidth, columns, ...rest }, ref) => {
    const { theme } = (0, import_core4.useTheme)();
    let templateColumns = transformColumns(columns, minChildWidth)(theme);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Grid, { ref, templateColumns, ...rest });
  }
);
var GridItem = (0, import_core4.forwardRef)(
  ({
    area: gridArea,
    colSpan,
    rowSpan,
    colStart: gridColumnStart,
    colEnd: gridColumnEnd,
    rowStart: gridRowStart,
    rowEnd: gridRowEnd,
    ...rest
  }, ref) => {
    const css = {
      gridColumn: (0, import_utils.replaceObject)(
        colSpan,
        (value) => value != null ? `span ${value}/span ${value}` : void 0
      ),
      gridRow: (0, import_utils.replaceObject)(
        rowSpan,
        (value) => value != null ? `span ${value}/span ${value}` : void 0
      ),
      gridColumnStart,
      gridColumnEnd,
      gridRowStart,
      gridRowEnd,
      gridArea
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core4.ui.div, { ref, __css: css, ...rest });
  }
);

// src/container.tsx
var import_core5 = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime3 = require("react/jsx-runtime");
var Container = (0, import_core5.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core5.useComponentStyle)("Container", props);
  const { className, centerContent, ...rest } = (0, import_core5.omitThemeProps)(mergedProps);
  const css = (0, import_react.useMemo)(
    () => ({
      alignItems: centerContent ? "center" : void 0,
      ...styles
    }),
    [centerContent, styles]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    import_core5.ui.section,
    {
      ref,
      className: (0, import_utils2.cx)("ui-container", className),
      __css: css,
      ...rest
    }
  );
});

// src/stack.tsx
var import_core6 = require("@yamada-ui/core");
var import_utils3 = require("@yamada-ui/utils");
var import_react2 = require("react");
var import_jsx_runtime4 = require("react/jsx-runtime");
var Stack = (0, import_core6.forwardRef)(
  ({
    direction: flexDirection = "column",
    justify: justifyContent,
    align: alignItems,
    wrap: flexWrap,
    gap = "fallback(md, 1rem)",
    divider,
    className,
    children,
    ...rest
  }, ref) => {
    const isColumn = (value) => value === "column" || value === "column-reverse";
    const dividerCSS = (0, import_react2.useMemo)(
      () => ({
        w: (0, import_utils3.replaceObject)(
          flexDirection,
          (value) => isColumn(value) ? "100%" : "fix-content"
        ),
        h: (0, import_utils3.replaceObject)(
          flexDirection,
          (value) => isColumn(value) ? "fix-content" : "100%"
        ),
        borderLeftWidth: (0, import_utils3.replaceObject)(
          flexDirection,
          (value) => isColumn(value) ? 0 : "1px"
        ),
        borderBottomWidth: (0, import_utils3.replaceObject)(
          flexDirection,
          (value) => isColumn(value) ? "1px" : 0
        )
      }),
      [flexDirection]
    );
    const validChildren = (0, import_utils3.getValidChildren)(children);
    const cloneChildren = divider ? validChildren.map((child, index) => {
      const key = typeof child.key !== "undefined" ? child.key : index;
      const cloneDivider = (0, import_react2.cloneElement)(
        divider,
        {
          __css: dividerCSS
        }
      );
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_react2.Fragment, { children: [
        !!index ? cloneDivider : null,
        child
      ] }, key);
    }) : validChildren;
    const css = (0, import_react2.useMemo)(
      () => ({
        display: "flex",
        flexDirection,
        justifyContent,
        alignItems,
        flexWrap,
        gap
      }),
      [alignItems, flexDirection, flexWrap, gap, justifyContent]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      import_core6.ui.div,
      {
        ref,
        className: (0, import_utils3.cx)("ui-stack", className),
        __css: css,
        ...rest,
        children: cloneChildren
      }
    );
  }
);
var HStack = (0, import_core6.forwardRef)(
  ({ className, ...rest }, ref) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    Stack,
    {
      ref,
      className: (0, import_utils3.cx)("ui-stack--horizontal", className),
      direction: "row",
      align: "center",
      ...rest
    }
  )
);
var VStack = (0, import_core6.forwardRef)(
  ({ className, ...rest }, ref) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    Stack,
    {
      ref,
      className: (0, import_utils3.cx)("ui-stack--vertical", className),
      direction: "column",
      align: "stretch",
      w: "100%",
      ...rest
    }
  )
);
var ZStack = (0, import_core6.forwardRef)(
  ({
    className,
    direction = "bottom",
    startIndex = 0,
    gap = "fallback(md, 1rem)",
    reverse = false,
    fit = true,
    children,
    ...rest
  }, ref) => {
    const refMap = (0, import_react2.useRef)(/* @__PURE__ */ new Map());
    const [rect, setRect] = (0, import_react2.useState)({
      width: 0,
      height: 0
    });
    const boxSize = {
      minWidth: `${rect.width}px`,
      minHeight: `${rect.height}px`
    };
    const css = {
      position: "relative",
      overflow: "hidden",
      var: [{ __prefix: "ui", name: "space", token: "spaces", value: gap }],
      ...fit ? boxSize : {}
    };
    const vertical = (0, import_react2.useCallback)(
      (space) => {
        if (direction.includes("top")) {
          return { [!reverse ? "bottom" : "top"]: space };
        } else if (direction.includes("bottom")) {
          return { [!reverse ? "top" : "bottom"]: space };
        } else {
          return { [!reverse ? "top" : "bottom"]: 0 };
        }
      },
      [direction, reverse]
    );
    const horizontal = (0, import_react2.useCallback)(
      (space) => {
        if (direction.includes("left")) {
          return { [!reverse ? "right" : "left"]: space };
        } else if (direction.includes("right")) {
          return { [!reverse ? "left" : "right"]: space };
        } else {
          return { [!reverse ? "left" : "right"]: 0 };
        }
      },
      [direction, reverse]
    );
    const cloneChildren = (0, import_react2.useMemo)(() => {
      const validChildren = (0, import_utils3.getValidChildren)(children);
      const clonedChildren = validChildren.map((child, index) => {
        var _a;
        const ref2 = (0, import_react2.createRef)();
        refMap.current.set(index, ref2);
        const key = (_a = child.key) != null ? _a : index;
        const zIndex = startIndex + index;
        const space = `calc(var(--ui-space) * ${index})`;
        let css2 = {};
        css2 = {
          ...css2,
          position: "absolute",
          zIndex
        };
        css2 = { ...css2, ...vertical(space) };
        css2 = { ...css2, ...horizontal(space) };
        const props = {
          ...child.props,
          ref: (0, import_utils3.mergeRefs)(child.ref, ref2),
          __css: css2
        };
        const clonedChild = (0, import_react2.cloneElement)(child, props);
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_react2.Fragment, { children: clonedChild }, key);
      });
      return clonedChildren;
    }, [children, startIndex, vertical, horizontal]);
    (0, import_react2.useEffect)(() => {
      if (!fit)
        return;
      let isNegativeLeft = direction.includes("left");
      let isNegativeTop = direction.includes("top");
      let width = 0;
      let height = 0;
      if (reverse) {
        isNegativeLeft = !isNegativeLeft;
        isNegativeTop = !isNegativeTop;
      }
      for (const ref2 of refMap.current.values()) {
        if (!ref2.current)
          continue;
        let { offsetParent, offsetWidth, offsetHeight, offsetTop, offsetLeft } = ref2.current;
        if (!offsetParent)
          continue;
        if (isNegativeLeft) {
          offsetLeft = offsetParent.offsetWidth - offsetLeft - offsetWidth;
        }
        if (isNegativeTop) {
          offsetTop = offsetParent.offsetHeight - offsetTop - offsetHeight;
        }
        offsetWidth += offsetLeft;
        offsetHeight += offsetTop;
        if (offsetWidth > width)
          width = offsetWidth;
        if (offsetHeight > height)
          height = offsetHeight;
      }
      setRect({ width, height });
    }, [cloneChildren, direction, reverse, fit]);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      import_core6.ui.div,
      {
        ref,
        className: (0, import_utils3.cx)("ui-stack--depth", className),
        __css: css,
        ...rest,
        children: cloneChildren
      }
    );
  }
);

// src/spacer.tsx
var import_core7 = require("@yamada-ui/core");
var Spacer = (0, import_core7.ui)("div", {
  baseStyle: {
    flex: 1,
    justifySelf: "stretch",
    alignSelf: "stretch"
  }
});

// src/divider.tsx
var import_core8 = require("@yamada-ui/core");
var import_utils4 = require("@yamada-ui/utils");
var import_react3 = require("react");
var import_jsx_runtime5 = require("react/jsx-runtime");
var Divider = (0, import_core8.forwardRef)((props, ref) => {
  const [
    {
      borderRightWidth,
      borderLeftWidth,
      borderTopWidth,
      borderBottomWidth,
      borderWidth,
      borderStyle,
      borderColor,
      ...styles
    },
    mergedProps
  ] = (0, import_core8.useComponentStyle)("Divider", props);
  const {
    className,
    orientation = "horizontal",
    __css,
    ...rest
  } = (0, import_core8.omitThemeProps)(mergedProps);
  const customStyles = (0, import_react3.useMemo)(
    () => ({
      vertical: {
        border: "0",
        borderStyle,
        borderColor,
        borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
        height: "100%"
      },
      horizontal: {
        border: "0",
        borderStyle,
        borderColor,
        borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
        width: "100%"
      }
    }),
    [
      borderBottomWidth,
      borderColor,
      borderLeftWidth,
      borderRightWidth,
      borderStyle,
      borderTopWidth,
      borderWidth
    ]
  );
  const dividerStyles = (0, import_react3.useMemo)(
    () => customStyles[orientation],
    [customStyles, orientation]
  );
  const css = {
    ...styles,
    ...dividerStyles,
    ...__css
  };
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    import_core8.ui.hr,
    {
      ref,
      className: (0, import_utils4.cx)("ui-divider", className),
      __css: css,
      ...rest
    }
  );
});

// src/aspect-ratio.tsx
var import_core9 = require("@yamada-ui/core");
var import_utils5 = require("@yamada-ui/utils");
var import_react4 = require("react");
var import_jsx_runtime6 = require("react/jsx-runtime");
var AspectRatio = (0, import_core9.forwardRef)(
  ({ className, ratio = 4 / 3, children, ...rest }, ref) => {
    const child = import_react4.Children.only(children);
    const css = {
      position: "relative",
      _before: {
        content: `""`,
        display: "block",
        h: 0,
        pb: (0, import_utils5.replaceObject)(ratio, (r) => `${1 / r * 100}%`)
      },
      "& > *:not(style)": {
        overflow: "hidden",
        position: "absolute",
        top: "0",
        right: "0",
        bottom: "0",
        left: "0",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        w: "100%",
        h: "100%"
      },
      "& > img, & > video": {
        objectFit: "cover"
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      import_core9.ui.div,
      {
        ref,
        className: (0, import_utils5.cx)("ui-aspect-ratio", className),
        __css: css,
        ...rest,
        children: child
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AspectRatio,
  Box,
  Center,
  Container,
  Divider,
  Flex,
  Grid,
  GridItem,
  HStack,
  SimpleGrid,
  Spacer,
  Stack,
  VStack,
  Wrap,
  ZStack
});
//# sourceMappingURL=index.js.map