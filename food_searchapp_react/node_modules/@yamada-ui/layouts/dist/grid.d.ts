import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, CSSUIObject, Token } from '@yamada-ui/core';

type GridOptions = {
    /**
     * The CSS `grid-template-columns` property.
     */
    templateColumns?: CSSUIObject["gridTemplateColumns"];
    /**
     * The CSS `grid-template-rows` property.
     */
    templateRows?: CSSUIObject["gridTemplateRows"];
    /**
     * The CSS `grid-template-areas` property.
     */
    templateAreas?: CSSUIObject["gridTemplateAreas"];
    /**
     * The CSS `grid-column` property.
     */
    column?: CSSUIObject["gridColumn"];
    /**
     * The CSS `grid-row` property.
     */
    row?: CSSUIObject["gridRow"];
    /**
     * The CSS `grid-area` property.
     */
    area?: CSSUIObject["gridArea"];
    /**
     * The CSS `grid-auto-flow` property.
     */
    autoFlow?: CSSUIObject["gridAutoFlow"];
    /**
     * The CSS `grid-auto-columns` property.
     */
    autoColumns?: CSSUIObject["gridAutoColumns"];
    /**
     * The CSS `grid-auto-rows` property.
     */
    autoRows?: CSSUIObject["gridAutoRows"];
};
type GridProps = HTMLUIProps<"div"> & GridOptions;
/**
 * `Grid` is a component for managing grid layouts. It also comes with handy style shorthand.
 *
 * @see Docs https://yamada-ui.com/components/layouts/grid
 */
declare const Grid: _yamada_ui_core.Component<"div", GridProps>;
type SimpleGridOptions = {
    /**
     * The width at which child elements will break into columns.
     * Pass a number for pixel values or a string for any other valid CSS length.
     */
    minChildWidth?: GridProps["minWidth"];
    /**
     * The number of columns.
     */
    columns?: Token<number>;
};
type SimpleGridProps = GridProps & SimpleGridOptions;
/**
 * `SimpleGrid` is a component that makes `Grid` simpler and more user-friendly.
 *
 * @see Docs https://yamada-ui.com/components/layouts/simple-grid
 */
declare const SimpleGrid: _yamada_ui_core.Component<"div", SimpleGridProps>;
type GridItemOptions = {
    /**
     * The CSS `grid-area` property.
     */
    area?: CSSUIObject["gridArea"];
    /**
     * The number of columns the grid item should `span`.
     */
    colSpan?: Token<number>;
    /**
     * The number of rows the grid item should `span`.
     */
    rowSpan?: Token<number>;
    /**
     * The CSS `grid-column-start` property.
     */
    colStart?: CSSUIObject["gridColumnStart"];
    /**
     * The CSS `grid-column-end` property.
     */
    colEnd?: CSSUIObject["gridColumnEnd"];
    /**
     * The CSS `grid-row-start` property.
     */
    rowStart?: CSSUIObject["gridRowStart"];
    /**
     * The CSS `grid-row-end` property.
     */
    rowEnd?: CSSUIObject["gridRowEnd"];
};
type GridItemProps = HTMLUIProps<"div"> & GridItemOptions;
declare const GridItem: _yamada_ui_core.Component<"div", GridItemProps>;

export { Grid, GridItem, type GridItemProps, type GridProps, SimpleGrid, type SimpleGridProps };
