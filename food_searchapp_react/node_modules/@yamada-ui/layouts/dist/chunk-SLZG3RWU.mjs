"use client"

// src/stack.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import {
  getValidChildren,
  cx,
  replaceObject,
  mergeRefs
} from "@yamada-ui/utils";
import {
  cloneElement,
  createRef,
  Fragment,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState
} from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var Stack = forwardRef(
  ({
    direction: flexDirection = "column",
    justify: justifyContent,
    align: alignItems,
    wrap: flexWrap,
    gap = "fallback(md, 1rem)",
    divider,
    className,
    children,
    ...rest
  }, ref) => {
    const isColumn = (value) => value === "column" || value === "column-reverse";
    const dividerCSS = useMemo(
      () => ({
        w: replaceObject(
          flexDirection,
          (value) => isColumn(value) ? "100%" : "fix-content"
        ),
        h: replaceObject(
          flexDirection,
          (value) => isColumn(value) ? "fix-content" : "100%"
        ),
        borderLeftWidth: replaceObject(
          flexDirection,
          (value) => isColumn(value) ? 0 : "1px"
        ),
        borderBottomWidth: replaceObject(
          flexDirection,
          (value) => isColumn(value) ? "1px" : 0
        )
      }),
      [flexDirection]
    );
    const validChildren = getValidChildren(children);
    const cloneChildren = divider ? validChildren.map((child, index) => {
      const key = typeof child.key !== "undefined" ? child.key : index;
      const cloneDivider = cloneElement(
        divider,
        {
          __css: dividerCSS
        }
      );
      return /* @__PURE__ */ jsxs(Fragment, { children: [
        !!index ? cloneDivider : null,
        child
      ] }, key);
    }) : validChildren;
    const css = useMemo(
      () => ({
        display: "flex",
        flexDirection,
        justifyContent,
        alignItems,
        flexWrap,
        gap
      }),
      [alignItems, flexDirection, flexWrap, gap, justifyContent]
    );
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-stack", className),
        __css: css,
        ...rest,
        children: cloneChildren
      }
    );
  }
);
var HStack = forwardRef(
  ({ className, ...rest }, ref) => /* @__PURE__ */ jsx(
    Stack,
    {
      ref,
      className: cx("ui-stack--horizontal", className),
      direction: "row",
      align: "center",
      ...rest
    }
  )
);
var VStack = forwardRef(
  ({ className, ...rest }, ref) => /* @__PURE__ */ jsx(
    Stack,
    {
      ref,
      className: cx("ui-stack--vertical", className),
      direction: "column",
      align: "stretch",
      w: "100%",
      ...rest
    }
  )
);
var ZStack = forwardRef(
  ({
    className,
    direction = "bottom",
    startIndex = 0,
    gap = "fallback(md, 1rem)",
    reverse = false,
    fit = true,
    children,
    ...rest
  }, ref) => {
    const refMap = useRef(/* @__PURE__ */ new Map());
    const [rect, setRect] = useState({
      width: 0,
      height: 0
    });
    const boxSize = {
      minWidth: `${rect.width}px`,
      minHeight: `${rect.height}px`
    };
    const css = {
      position: "relative",
      overflow: "hidden",
      var: [{ __prefix: "ui", name: "space", token: "spaces", value: gap }],
      ...fit ? boxSize : {}
    };
    const vertical = useCallback(
      (space) => {
        if (direction.includes("top")) {
          return { [!reverse ? "bottom" : "top"]: space };
        } else if (direction.includes("bottom")) {
          return { [!reverse ? "top" : "bottom"]: space };
        } else {
          return { [!reverse ? "top" : "bottom"]: 0 };
        }
      },
      [direction, reverse]
    );
    const horizontal = useCallback(
      (space) => {
        if (direction.includes("left")) {
          return { [!reverse ? "right" : "left"]: space };
        } else if (direction.includes("right")) {
          return { [!reverse ? "left" : "right"]: space };
        } else {
          return { [!reverse ? "left" : "right"]: 0 };
        }
      },
      [direction, reverse]
    );
    const cloneChildren = useMemo(() => {
      const validChildren = getValidChildren(children);
      const clonedChildren = validChildren.map((child, index) => {
        var _a;
        const ref2 = createRef();
        refMap.current.set(index, ref2);
        const key = (_a = child.key) != null ? _a : index;
        const zIndex = startIndex + index;
        const space = `calc(var(--ui-space) * ${index})`;
        let css2 = {};
        css2 = {
          ...css2,
          position: "absolute",
          zIndex
        };
        css2 = { ...css2, ...vertical(space) };
        css2 = { ...css2, ...horizontal(space) };
        const props = {
          ...child.props,
          ref: mergeRefs(child.ref, ref2),
          __css: css2
        };
        const clonedChild = cloneElement(child, props);
        return /* @__PURE__ */ jsx(Fragment, { children: clonedChild }, key);
      });
      return clonedChildren;
    }, [children, startIndex, vertical, horizontal]);
    useEffect(() => {
      if (!fit)
        return;
      let isNegativeLeft = direction.includes("left");
      let isNegativeTop = direction.includes("top");
      let width = 0;
      let height = 0;
      if (reverse) {
        isNegativeLeft = !isNegativeLeft;
        isNegativeTop = !isNegativeTop;
      }
      for (const ref2 of refMap.current.values()) {
        if (!ref2.current)
          continue;
        let { offsetParent, offsetWidth, offsetHeight, offsetTop, offsetLeft } = ref2.current;
        if (!offsetParent)
          continue;
        if (isNegativeLeft) {
          offsetLeft = offsetParent.offsetWidth - offsetLeft - offsetWidth;
        }
        if (isNegativeTop) {
          offsetTop = offsetParent.offsetHeight - offsetTop - offsetHeight;
        }
        offsetWidth += offsetLeft;
        offsetHeight += offsetTop;
        if (offsetWidth > width)
          width = offsetWidth;
        if (offsetHeight > height)
          height = offsetHeight;
      }
      setRect({ width, height });
    }, [cloneChildren, direction, reverse, fit]);
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-stack--depth", className),
        __css: css,
        ...rest,
        children: cloneChildren
      }
    );
  }
);

export {
  Stack,
  HStack,
  VStack,
  ZStack
};
//# sourceMappingURL=chunk-SLZG3RWU.mjs.map