"use client"

// src/grid.tsx
import { ui, forwardRef, useTheme, transforms } from "@yamada-ui/core";
import { replaceObject, getMemoizedObject as get } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var Grid = forwardRef(
  ({
    templateColumns: gridTemplateColumns,
    templateRows: gridTemplateRows,
    templateAreas: gridTemplateAreas,
    column: gridColumn,
    row: gridRow,
    area: gridArea,
    gap,
    rowGap,
    columnGap,
    autoFlow: gridAutoFlow,
    autoColumns: gridAutoColumns,
    autoRows: gridAutoRows,
    ...rest
  }, ref) => {
    const css = {
      display: "grid",
      gridTemplateColumns,
      gridTemplateRows,
      gridTemplateAreas,
      gridColumn,
      gridRow,
      gridArea,
      gap,
      rowGap,
      columnGap,
      gridAutoFlow,
      gridAutoColumns,
      gridAutoRows
    };
    return /* @__PURE__ */ jsx(ui.div, { ref, __css: css, ...rest });
  }
);
var transformColumns = (columns, minWidth) => (theme) => {
  if (minWidth) {
    return replaceObject(minWidth, (value) => {
      value = get(theme, `sizes.${value}`, transforms.px(value));
      return value != null ? `repeat(auto-fit, minmax(${value}, 1fr))` : void 0;
    });
  } else {
    return replaceObject(
      columns,
      (value) => value != null ? `repeat(${value}, minmax(0, 1fr))` : void 0
    );
  }
};
var SimpleGrid = forwardRef(
  ({ minChildWidth, columns, ...rest }, ref) => {
    const { theme } = useTheme();
    let templateColumns = transformColumns(columns, minChildWidth)(theme);
    return /* @__PURE__ */ jsx(Grid, { ref, templateColumns, ...rest });
  }
);
var GridItem = forwardRef(
  ({
    area: gridArea,
    colSpan,
    rowSpan,
    colStart: gridColumnStart,
    colEnd: gridColumnEnd,
    rowStart: gridRowStart,
    rowEnd: gridRowEnd,
    ...rest
  }, ref) => {
    const css = {
      gridColumn: replaceObject(
        colSpan,
        (value) => value != null ? `span ${value}/span ${value}` : void 0
      ),
      gridRow: replaceObject(
        rowSpan,
        (value) => value != null ? `span ${value}/span ${value}` : void 0
      ),
      gridColumnStart,
      gridColumnEnd,
      gridRowStart,
      gridRowEnd,
      gridArea
    };
    return /* @__PURE__ */ jsx(ui.div, { ref, __css: css, ...rest });
  }
);

export {
  Grid,
  SimpleGrid,
  GridItem
};
//# sourceMappingURL=chunk-7PWLSKOB.mjs.map