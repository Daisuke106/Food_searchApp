{"version":3,"sources":["../src/text.tsx"],"sourcesContent":["import type { HTMLUIProps, ThemeProps, CSSUIProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport { cx, filterUndefined } from \"@yamada-ui/utils\"\n\ntype TextOptions = {\n  /**\n   * The CSS `text-align` property.\n   */\n  align?: CSSUIProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property.\n   */\n  decoration?: CSSUIProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property.\n   */\n  casing?: CSSUIProps[\"textTransform\"]\n}\n\nexport type TextProps = HTMLUIProps<\"p\"> & ThemeProps<\"Text\"> & TextOptions\n\n/**\n * `Text` is a component that represents a paragraph of text. By default, it renders a `p` element.\n *\n * @see Docs https://yamada-ui.com/components/typography/text\n */\nexport const Text = forwardRef<TextProps, \"p\">((props, ref) => {\n  const [css, mergedProps] = useComponentStyle(\"Text\", props)\n  const {\n    className,\n    align: textAlign,\n    decoration: textDecoration,\n    casing: textTransform,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const textProps = filterUndefined({\n    textAlign,\n    textDecoration,\n    textTransform,\n  })\n\n  return (\n    <ui.p\n      ref={ref}\n      className={cx(\"ui-text\", className)}\n      __css={css}\n      {...textProps}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAKO;AACP,mBAAoC;AAyChC;AAjBG,IAAM,WAAO,wBAA2B,CAAC,OAAO,QAAQ;AAC7D,QAAM,CAAC,KAAK,WAAW,QAAI,+BAAkB,QAAQ,KAAK;AAC1D,QAAM;AAAA,IACJ;AAAA,IACA,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,GAAG;AAAA,EACL,QAAI,4BAAe,WAAW;AAE9B,QAAM,gBAAY,8BAAgB;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,SACE;AAAA,IAAC,eAAG;AAAA,IAAH;AAAA,MACC;AAAA,MACA,eAAW,iBAAG,WAAW,SAAS;AAAA,MAClC,OAAO;AAAA,MACN,GAAG;AAAA,MACH,GAAG;AAAA;AAAA,EACN;AAEJ,CAAC;","names":[]}