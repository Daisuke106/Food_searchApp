{"version":3,"sources":["../src/index.ts","../src/heading.tsx","../src/text.tsx"],"sourcesContent":["export { Heading } from \"./heading\"\nexport type { HeadingProps } from \"./heading\"\nexport { Text } from \"./text\"\nexport type { TextProps } from \"./text\"\n","import type { HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport { cx } from \"@yamada-ui/utils\"\n\nexport type HeadingProps = HTMLUIProps<\"h1\"> & ThemeProps<\"Heading\">\n\n/**\n * `Heading` is a component that represents section headings. By default, it renders an `h1` element.\n *\n * @see Docs https://yamada-ui.com/components/typography/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h1\">((props, ref) => {\n  const [css, mergedProps] = useComponentStyle(\"Heading\", props)\n  const { className, ...rest } = omitThemeProps(mergedProps)\n\n  return (\n    <ui.h1\n      ref={ref}\n      className={cx(\"ui-heading\", className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n","import type { HTMLUIProps, ThemeProps, CSSUIProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport { cx, filterUndefined } from \"@yamada-ui/utils\"\n\ntype TextOptions = {\n  /**\n   * The CSS `text-align` property.\n   */\n  align?: CSSUIProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property.\n   */\n  decoration?: CSSUIProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property.\n   */\n  casing?: CSSUIProps[\"textTransform\"]\n}\n\nexport type TextProps = HTMLUIProps<\"p\"> & ThemeProps<\"Text\"> & TextOptions\n\n/**\n * `Text` is a component that represents a paragraph of text. By default, it renders a `p` element.\n *\n * @see Docs https://yamada-ui.com/components/typography/text\n */\nexport const Text = forwardRef<TextProps, \"p\">((props, ref) => {\n  const [css, mergedProps] = useComponentStyle(\"Text\", props)\n  const {\n    className,\n    align: textAlign,\n    decoration: textDecoration,\n    casing: textTransform,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const textProps = filterUndefined({\n    textAlign,\n    textDecoration,\n    textTransform,\n  })\n\n  return (\n    <ui.p\n      ref={ref}\n      className={cx(\"ui-text\", className)}\n      __css={css}\n      {...textProps}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,kBAKO;AACP,mBAAmB;AAcf;AALG,IAAM,cAAU,wBAA+B,CAAC,OAAO,QAAQ;AACpE,QAAM,CAAC,KAAK,WAAW,QAAI,+BAAkB,WAAW,KAAK;AAC7D,QAAM,EAAE,WAAW,GAAG,KAAK,QAAI,4BAAe,WAAW;AAEzD,SACE;AAAA,IAAC,eAAG;AAAA,IAAH;AAAA,MACC;AAAA,MACA,eAAW,iBAAG,cAAc,SAAS;AAAA,MACrC,OAAO;AAAA,MACN,GAAG;AAAA;AAAA,EACN;AAEJ,CAAC;;;AC3BD,IAAAA,eAKO;AACP,IAAAC,gBAAoC;AAyChC,IAAAC,sBAAA;AAjBG,IAAM,WAAO,yBAA2B,CAAC,OAAO,QAAQ;AAC7D,QAAM,CAAC,KAAK,WAAW,QAAI,gCAAkB,QAAQ,KAAK;AAC1D,QAAM;AAAA,IACJ;AAAA,IACA,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,GAAG;AAAA,EACL,QAAI,6BAAe,WAAW;AAE9B,QAAM,gBAAY,+BAAgB;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,SACE;AAAA,IAAC,gBAAG;AAAA,IAAH;AAAA,MACC;AAAA,MACA,eAAW,kBAAG,WAAW,SAAS;AAAA,MAClC,OAAO;AAAA,MACN,GAAG;AAAA,MACH,GAAG;AAAA;AAAA,EACN;AAEJ,CAAC;","names":["import_core","import_utils","import_jsx_runtime"]}