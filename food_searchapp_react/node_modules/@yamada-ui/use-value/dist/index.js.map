{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type {\n  ResponsiveObject,\n  ColorModeArray,\n  StyledTheme,\n  ColorMode,\n  Theme,\n} from \"@yamada-ui/core\"\nimport { getColorModeValue, useColorModeValue } from \"@yamada-ui/core\"\nimport {\n  getBreakpointValue,\n  useBreakpointValue,\n} from \"@yamada-ui/use-breakpoint\"\nimport { isObject, isArray } from \"@yamada-ui/utils\"\n\n/**\n * `useValue` is a custom hook that combines `useBreakpointValue` and `useColorModeValue`.\n *\n * @see Docs https://yamada-ui.com/hooks/use-value\n */\nexport const useValue = <T extends any>(\n  value: T | ResponsiveObject<T> | ColorModeArray<T>,\n) => {\n  if (isObject<ResponsiveObject<T>>(value)) {\n    return useBreakpointValue(value)\n  } else if (isArray<ColorModeArray<T>>(value)) {\n    return useColorModeValue(...value)\n  } else {\n    return value\n  }\n}\n\nexport const getValue =\n  <T extends any>(value: T | ResponsiveObject<T> | ColorModeArray<T>) =>\n  (\n    theme: StyledTheme,\n    colorMode: ColorMode,\n    breakpoint: Theme[\"breakpoints\"],\n  ) => {\n    if (isObject<ResponsiveObject<T>>(value)) {\n      return getBreakpointValue(value)(theme, breakpoint)\n    } else if (isArray<ColorModeArray<T>>(value)) {\n      return getColorModeValue(...value)(colorMode)\n    } else {\n      return value\n    }\n  }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,kBAAqD;AACrD,4BAGO;AACP,mBAAkC;AAO3B,IAAM,WAAW,CACtB,UACG;AACH,UAAI,uBAA8B,KAAK,GAAG;AACxC,eAAO,0CAAmB,KAAK;AAAA,EACjC,eAAW,sBAA2B,KAAK,GAAG;AAC5C,eAAO,+BAAkB,GAAG,KAAK;AAAA,EACnC,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEO,IAAM,WACX,CAAgB,UAChB,CACE,OACA,WACA,eACG;AACH,UAAI,uBAA8B,KAAK,GAAG;AACxC,eAAO,0CAAmB,KAAK,EAAE,OAAO,UAAU;AAAA,EACpD,eAAW,sBAA2B,KAAK,GAAG;AAC5C,eAAO,+BAAkB,GAAG,KAAK,EAAE,SAAS;AAAA,EAC9C,OAAO;AACL,WAAO;AAAA,EACT;AACF;","names":[]}