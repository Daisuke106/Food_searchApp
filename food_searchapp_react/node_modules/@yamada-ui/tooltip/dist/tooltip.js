"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tooltip.tsx
var tooltip_exports = {};
__export(tooltip_exports, {
  Tooltip: () => Tooltip
});
module.exports = __toCommonJS(tooltip_exports);
var import_core = require("@yamada-ui/core");
var import_motion = require("@yamada-ui/motion");
var import_portal = require("@yamada-ui/portal");
var import_transitions = require("@yamada-ui/transitions");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_use_event_listener = require("@yamada-ui/use-event-listener");
var import_use_outside_click = require("@yamada-ui/use-outside-click");
var import_use_popper = require("@yamada-ui/use-popper");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var getTooltipProps = (animation = "scale", duration) => {
  const custom = {
    reverse: true,
    duration,
    enter: { visibility: "visible" },
    transitionEnd: { exit: { visibility: "hidden" } }
  };
  switch (animation) {
    case "scale":
      return {
        ...import_transitions.scaleFadeProps,
        custom: { ...custom, scale: 0.95 }
      };
    case "top":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetY: -16 }
      };
    case "right":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetX: 16 }
      };
    case "left":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetX: -16 }
      };
    case "bottom":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetY: 16 }
      };
  }
};
var Tooltip = (0, import_core.forwardRef)(
  ({
    closeOnPointerDown,
    z: zProp,
    zIndex: zIndexProp,
    portalProps,
    withPortal = true,
    ...props
  }, ref) => {
    var _a, _b;
    let [{ z, zIndex, ...styles }, mergedProps] = (0, import_core.useComponentStyle)(
      "Tooltip",
      props
    );
    const {
      className,
      children,
      label,
      placement,
      modifiers,
      gutter,
      offset,
      openDelay = 0,
      closeDelay = 0,
      isDisabled,
      closeOnClick,
      closeOnScroll,
      closeOnMouseDown,
      closeOnEsc = true,
      animation,
      duration,
      isOpen: isOpenProp,
      defaultIsOpen: defaultIsOpenProp,
      onOpen: onOpenProp,
      onClose: onCloseProp,
      ...rest
    } = (0, import_core.omitThemeProps)(mergedProps);
    closeOnPointerDown = closeOnMouseDown;
    const { isOpen, onOpen, onClose } = (0, import_use_disclosure.useDisclosure)({
      isOpen: isOpenProp,
      defaultIsOpen: defaultIsOpenProp,
      onOpen: onOpenProp,
      onClose: onCloseProp
    });
    const triggerRef = (0, import_react.useRef)(null);
    const openTimeout = (0, import_react.useRef)();
    const closeTimeout = (0, import_react.useRef)();
    const { referenceRef, getPopperProps, transformOrigin } = (0, import_use_popper.usePopper)({
      enabled: isOpen,
      placement,
      modifiers,
      gutter,
      offset
    });
    const closeNow = (0, import_react.useCallback)(() => {
      if (closeTimeout.current) {
        clearTimeout(closeTimeout.current);
        closeTimeout.current = void 0;
      }
      onClose();
    }, [onClose]);
    const openWithDelay = (0, import_react.useCallback)(() => {
      if (!isDisabled && !openTimeout.current) {
        if (isOpen)
          closeNow();
        const win = (0, import_utils.getOwnerWindow)(triggerRef.current);
        openTimeout.current = win.setTimeout(onOpen, openDelay);
      }
    }, [isDisabled, isOpen, openDelay, closeNow, onOpen]);
    const closeWithDelay = (0, import_react.useCallback)(() => {
      if (openTimeout.current) {
        clearTimeout(openTimeout.current);
        openTimeout.current = void 0;
      }
      const win = (0, import_utils.getOwnerWindow)(triggerRef.current);
      closeTimeout.current = win.setTimeout(closeNow, closeDelay);
    }, [closeDelay, closeNow]);
    const onClick = (0, import_react.useCallback)(
      () => isOpen && closeOnClick ? closeWithDelay() : void 0,
      [isOpen, closeOnClick, closeWithDelay]
    );
    const onPointerDown = (0, import_react.useCallback)(
      () => isOpen && closeOnPointerDown ? closeWithDelay() : void 0,
      [isOpen, closeOnPointerDown, closeWithDelay]
    );
    const onKeyDown = (0, import_react.useCallback)(
      (ev) => isOpen && ev.key === "Escape" ? closeWithDelay() : void 0,
      [isOpen, closeWithDelay]
    );
    (0, import_use_event_listener.useEventListener)(
      () => (0, import_utils.getOwnerDocument)(triggerRef.current),
      "keydown",
      (ev) => closeOnEsc ? onKeyDown(ev) : void 0
    );
    (0, import_use_event_listener.useEventListener)(
      () => (0, import_utils.getOwnerDocument)(triggerRef.current),
      "scroll",
      () => isOpen && closeOnScroll ? closeNow() : void 0
    );
    (0, import_use_event_listener.useEventListener)(
      () => triggerRef.current,
      "pointerleave",
      (e) => {
        if (e.pointerType !== "touch")
          closeWithDelay();
      }
    );
    (0, import_use_event_listener.useEventListener)(
      () => triggerRef.current,
      "touchstart",
      () => {
        if (isOpen)
          closeWithDelay();
        else
          openWithDelay();
      },
      { passive: true }
    );
    (0, import_use_outside_click.useOutsideClick)({
      ref: triggerRef,
      handler: () => {
        closeWithDelay();
      }
    });
    (0, import_react.useEffect)(
      () => () => {
        clearTimeout(openTimeout.current);
        clearTimeout(closeTimeout.current);
      },
      []
    );
    const getTriggerProps = (0, import_react.useCallback)(
      (props2 = {}, ref2 = null) => ({
        ...props2,
        ref: (0, import_utils.mergeRefs)(triggerRef, ref2, referenceRef),
        onPointerEnter: (0, import_utils.handlerAll)(props2.onPointerEnter, openWithDelay),
        onClick: (0, import_utils.handlerAll)(props2.onClick, onClick),
        onPointerDown: (0, import_utils.handlerAll)(props2.onPointerDown, onPointerDown),
        onFocus: (0, import_utils.handlerAll)(props2.onFocus, openWithDelay),
        onBlur: (0, import_utils.handlerAll)(props2.onBlur, closeWithDelay)
      }),
      [referenceRef, onClick, onPointerDown, openWithDelay, closeWithDelay]
    );
    const child = import_react.Children.only(children);
    const trigger = (0, import_react.cloneElement)(child, getTriggerProps(child.props, child.ref));
    const css = {
      position: "relative",
      ...styles
    };
    if (!label)
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
    const resolvedZIndex = (_b = (_a = zIndexProp != null ? zIndexProp : zProp) != null ? _a : zIndex) != null ? _b : z;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      trigger,
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_motion.AnimatePresence, { children: isOpen ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_portal.Portal, { isDisabled: !withPortal, ...portalProps, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_core.ui.div,
        {
          ...getPopperProps(),
          zIndex: resolvedZIndex,
          pointerEvents: "none",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_core.ui.div,
            {
              as: import_motion.motion.div,
              ref,
              className: (0, import_utils.cx)("ui-tooltip", className),
              style: { transformOrigin },
              ...animation !== "none" ? getTooltipProps(animation, duration) : {},
              initial: "exit",
              animate: isOpen ? "enter" : "exit",
              exit: "exit",
              __css: css,
              ...rest,
              children: label
            }
          )
        }
      ) }) : null })
    ] });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Tooltip
});
//# sourceMappingURL=tooltip.js.map