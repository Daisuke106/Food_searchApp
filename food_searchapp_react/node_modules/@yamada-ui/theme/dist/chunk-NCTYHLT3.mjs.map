{"version":3,"sources":["../src/components/input.ts"],"sourcesContent":["import type { ComponentMultiStyle } from \"@yamada-ui/core\"\nimport { mode } from \"@yamada-ui/core\"\nimport { getColor, isArray } from \"@yamada-ui/utils\"\n\nexport const Input: ComponentMultiStyle = {\n  baseStyle: {\n    container: {},\n    field: {\n      width: \"100%\",\n      minWidth: 0,\n      outline: 0,\n      position: \"relative\",\n      appearance: \"none\",\n      transitionProperty: \"common\",\n      transitionDuration: \"normal\",\n      _disabled: {\n        opacity: 0.4,\n        cursor: \"not-allowed\",\n      },\n    },\n    element: {\n      color: [\"blackAlpha.600\", \"whiteAlpha.700\"],\n    },\n  },\n\n  variants: {\n    outline: ({\n      theme: t,\n      colorMode: m,\n      focusBorderColor: fc = \"focus\",\n      errorBorderColor: ec = [\"danger.500\", \"danger.400\"],\n    }) => {\n      const focusBorderColor = isArray(fc)\n        ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m)\n        : getColor(fc, fc)(t, m)\n      const errorBorderColor = isArray(ec)\n        ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m)\n        : getColor(ec, ec)(t, m)\n\n      return {\n        field: {\n          border: \"1px solid\",\n          borderColor: \"inherit\",\n          bg: \"inherit\",\n          _hover: {\n            borderColor: [\"blackAlpha.500\", \"whiteAlpha.400\"],\n          },\n          _readOnly: {\n            boxShadow: \"none !important\",\n            userSelect: \"all\",\n          },\n          _invalid: {\n            borderColor: [errorBorderColor, errorBorderColor],\n            boxShadow: `0 0 0 1px ${errorBorderColor}`,\n          },\n          _active: {\n            borderColor: [focusBorderColor, focusBorderColor],\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n          _focusVisible: {\n            zIndex: \"yamcha\",\n            borderColor: [focusBorderColor, focusBorderColor],\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n        },\n        addon: {\n          border: \"1px solid\",\n          borderColor: [\"inherit\", \"whiteAlpha.50\"],\n          bg: [\"blackAlpha.300\", \"whiteAlpha.300\"],\n        },\n      }\n    },\n    filled: ({\n      theme: t,\n      colorMode: m,\n      focusBorderColor: fc = \"focus\",\n      errorBorderColor: ec = [\"danger.500\", \"danger.400\"],\n    }) => {\n      const focusBorderColor = isArray(fc)\n        ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m)\n        : getColor(fc, fc)(t, m)\n      const errorBorderColor = isArray(ec)\n        ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m)\n        : getColor(ec, ec)(t, m)\n\n      return {\n        field: {\n          border: \"2px solid\",\n          borderColor: \"transparent\",\n          bg: [\"blackAlpha.50\", \"whiteAlpha.50\"],\n          _hover: {\n            bg: [\"blackAlpha.100\", \"whiteAlpha.100\"],\n          },\n          _readOnly: {\n            boxShadow: \"none !important\",\n            userSelect: \"all\",\n          },\n          _invalid: {\n            borderColor: errorBorderColor,\n            boxShadow: `0 0 0 1px ${errorBorderColor}`,\n          },\n          _active: {\n            bg: \"transparent\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n          _focusVisible: {\n            bg: \"transparent\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n        },\n        addon: {\n          border: \"2px solid transparent\",\n          bg: [\"blackAlpha.300\", \"whiteAlpha.300\"],\n        },\n      }\n    },\n    flushed: ({\n      theme: t,\n      colorMode: m,\n      focusBorderColor: fc = \"focus\",\n      errorBorderColor: ec = [\"danger.500\", \"danger.400\"],\n    }) => {\n      const focusBorderColor = isArray(fc)\n        ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m)\n        : getColor(fc, fc)(t, m)\n      const errorBorderColor = isArray(ec)\n        ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m)\n        : getColor(ec, ec)(t, m)\n\n      return {\n        field: {\n          borderBottom: \"1px solid\",\n          borderColor: \"inherit\",\n          rounded: \"0\",\n          px: \"0\",\n          bg: \"transparent\",\n          _hover: {\n            borderColor: [\"blackAlpha.500\", \"whiteAlpha.400\"],\n          },\n          _readOnly: {\n            boxShadow: \"none !important\",\n            userSelect: \"all\",\n          },\n          _invalid: {\n            borderColor: [errorBorderColor, errorBorderColor],\n            boxShadow: `0px 1px 0px 0px ${errorBorderColor}`,\n          },\n          _active: {\n            borderColor: [focusBorderColor, focusBorderColor],\n            boxShadow: `0px 1px 0px 0px ${focusBorderColor}`,\n          },\n          _focusVisible: {\n            borderColor: [focusBorderColor, focusBorderColor],\n            boxShadow: `0px 1px 0px 0px ${focusBorderColor}`,\n          },\n        },\n        addon: {\n          borderBottom: \"1px solid\",\n          borderColor: \"inherit\",\n          bg: \"transparent\",\n          rounded: \"0\",\n        },\n      }\n    },\n    unstyled: {\n      field: {\n        bg: \"transparent\",\n        minH: \"auto\",\n        px: \"0\",\n      },\n      addon: {\n        bg: \"transparent\",\n        minH: \"auto\",\n        px: \"0\",\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      field: {\n        fontSize: \"xs\",\n        px: \"2\",\n        minH: \"6\",\n        rounded: \"sm\",\n      },\n      addon: {\n        fontSize: \"xs\",\n        px: \"2\",\n        minH: \"6\",\n        rounded: \"sm\",\n      },\n    },\n    sm: {\n      field: {\n        fontSize: \"sm\",\n        px: \"2\",\n        minH: \"8\",\n        rounded: \"md\",\n      },\n      addon: {\n        fontSize: \"sm\",\n        px: \"2\",\n        minH: \"8\",\n        rounded: \"md\",\n      },\n    },\n    md: {\n      field: {\n        fontSize: \"md\",\n        px: \"3\",\n        minH: \"10\",\n        rounded: \"md\",\n      },\n      addon: {\n        fontSize: \"md\",\n        px: \"3\",\n        minH: \"10\",\n        rounded: \"md\",\n      },\n    },\n    lg: {\n      field: {\n        fontSize: \"lg\",\n        px: \"4\",\n        minH: \"12\",\n        rounded: \"md\",\n      },\n      addon: {\n        fontSize: \"lg\",\n        px: \"4\",\n        minH: \"12\",\n        rounded: \"md\",\n      },\n    },\n  },\n\n  defaultProps: {\n    size: \"md\",\n    variant: \"outline\",\n  },\n}\n"],"mappings":"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","names":[]}