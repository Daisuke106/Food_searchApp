"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  baseTheme: () => baseTheme,
  default: () => src_default,
  defaultConfig: () => defaultConfig,
  defaultTheme: () => defaultTheme
});
module.exports = __toCommonJS(src_exports);

// src/components/accordion.ts
var Accordion = {
  baseStyle: {
    container: {},
    item: {},
    button: {
      transitionProperty: "common",
      transitionDuration: "normal",
      _focusVisible: {
        boxShadow: "outline"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      py: "3",
      px: "4"
    },
    panel: {
      px: "4",
      pb: "3"
    },
    icon: {
      ml: "auto",
      fontSize: "1.25em",
      color: ["blackAlpha.600", "whiteAlpha.700"]
    }
  },
  variants: {
    basic: {
      item: {
        borderTopWidth: "1px",
        borderColor: "inherit",
        _last: {
          borderBottomWidth: "1px"
        }
      },
      button: {
        _hover: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _disabled: {
            bg: "none"
          }
        }
      }
    },
    card: {
      item: {
        borderWidth: "1px",
        rounded: "md",
        bg: ["blackAlpha.50", "whiteAlpha.50"],
        _expanded: {
          bg: ["white", "black"]
        },
        _notFirst: {
          mt: "md"
        }
      },
      button: {
        _hover: {
          bg: ["blackAlpha.100", "whiteAlpha.100"],
          _expanded: {
            bg: "none"
          },
          _disabled: {
            bg: "none"
          }
        }
      }
    },
    unstyled: {}
  },
  defaultProps: {
    variant: "basic"
  }
};

// src/components/alert.ts
var import_utils = require("@yamada-ui/utils");
var Alert = {
  baseStyle: {
    container: {
      px: 4,
      py: 3,
      rounded: "md"
    },
    icon: {
      flexShrink: 0,
      marginEnd: 3,
      boxSize: 5
    },
    loading: {
      flexShrink: 0,
      marginEnd: 3,
      fontSize: "xl"
    },
    title: {
      marginEnd: 2,
      fontWeight: "bold",
      lineHeight: 5
    },
    description: {
      lineHeight: 5
    }
  },
  variants: {
    basic: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      container: { bg: ["white", "black"], borderWidth: "1px" },
      icon: { color: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`] }
    }),
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      container: { bg: [`${c}.100`, (0, import_utils.shadeColor)(`${c}.300`, 58)(t, m)] },
      icon: { color: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`] }
    }),
    solid: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      container: {
        bg: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), (0, import_utils.shadeColor)(`${c}.600`, 16)(t, m)],
        color: "white"
      }
    }),
    "island-accent": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary"
    }) => ({
      container: {
        bg: ["white", "black"],
        borderWidth: "1px",
        pl: 7,
        _before: {
          content: '""',
          position: "absolute",
          top: "50%",
          left: 3,
          transform: "translateY(-50%)",
          w: 1,
          h: "calc(100% - 1.5rem)",
          bg: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`],
          rounded: "full"
        }
      },
      icon: { color: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`] }
    }),
    "left-accent": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary"
    }) => ({
      container: {
        bg: [`${c}.100`, (0, import_utils.shadeColor)(`${c}.300`, 58)(t, m)],
        pl: 3,
        borderLeft: "0.25rem solid",
        borderLeftColor: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`],
        rounded: 4
      },
      icon: { color: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`] }
    }),
    "top-accent": ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      container: {
        bg: [`${c}.100`, (0, import_utils.shadeColor)(`${c}.300`, 58)(t, m)],
        pt: 3,
        borderTop: "0.25rem solid",
        borderTopColor: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`],
        rounded: 4
      },
      icon: { color: [(0, import_utils.tintColor)(`${c}.600`, 16)(t, m), `${c}.400`] }
    })
  },
  defaultProps: {
    variant: "basic",
    colorScheme: "primary"
  }
};

// src/components/alpha-slider.ts
var import_core = require("@yamada-ui/core");

// src/components/hue-slider.ts
var HueSlider = {
  baseStyle: {
    container: {
      w: "100%",
      rounded: "full",
      cursor: "pointer",
      _readOnly: { cursor: "auto" },
      _disabled: {
        opacity: 0.6,
        cursor: "not-allowed"
      }
    },
    overlay: {
      rounded: "full"
    },
    track: {},
    thumb: {
      rounded: "full",
      outline: 0,
      borderWidth: "3px",
      borderColor: "whiteAlpha.950",
      boxShadow: ["md", "dark-md"],
      transitionProperty: "transform",
      transitionDuration: "normal",
      _active: {
        transform: `scale(1.15)`
      },
      _focusVisible: {
        boxShadow: ["outline", "outline"]
      }
    }
  },
  sizes: {
    sm: {
      container: { h: "3" },
      thumb: { boxSize: "3" }
    },
    md: {
      container: { h: "4" },
      thumb: { boxSize: "4" }
    },
    lg: {
      container: { h: "5" },
      thumb: { boxSize: "5" }
    }
  },
  defaultProps: {
    size: "md"
  }
};

// src/components/alpha-slider.ts
var AlphaSlider = (0, import_core.mergeMultiStyle)(HueSlider)();

// src/components/area-chart.ts
var import_core2 = require("@yamada-ui/core");

// src/components/line-chart.ts
var import_utils2 = require("@yamada-ui/utils");
var LineChart = {
  baseStyle: {
    container: {},
    chart: {},
    referenceLine: {
      fillOpacity: 1,
      fontSize: "xs"
    },
    grid: {
      stroke: ["blackAlpha.400", "whiteAlpha.400"],
      strokeWidth: 1
    },
    cursor: {
      fill: ["blackAlpha.50", "whiteAlpha.50"],
      stroke: ["blackAlpha.400", "whiteAlpha.400"],
      strokeWidth: 1
    },
    xAxis: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontSize: "xs"
    },
    yAxis: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontSize: "xs"
    },
    line: {},
    dot: {
      strokeWidth: 2
    },
    activeDot: {
      strokeWidth: 2,
      fill: ["white", "black"]
    },
    legend: {
      display: "flex",
      flexWrap: "wrap",
      justifyContent: "flex-end"
    },
    legendItem: {
      display: "flex",
      alignItems: "center",
      rounded: "md",
      gap: "sm",
      transitionProperty: "common",
      transitionDuration: "slower",
      color: ["blackAlpha.800", "whiteAlpha.700"],
      _hover: {
        bg: ["blackAlpha.50", "whiteAlpha.100"]
      }
    },
    legendSwatch: {
      boxSize: "3",
      rounded: "full"
    },
    tooltip: {
      display: "flex",
      flexDirection: "column",
      minW: "48",
      gap: "sm",
      rounded: "md",
      bg: ["white", "black"],
      border: "1px solid",
      borderColor: ["blackAlpha.200", "whiteAlpha.100"],
      p: "3",
      fontWeight: "medium",
      fontSize: "sm",
      color: "inherit",
      boxShadow: ["md", "dark-md"],
      maxW: "xs",
      zIndex: "dodoria"
    },
    tooltipTitle: {
      fontSize: "md"
    },
    tooltipList: {
      display: "flex",
      flexDirection: "column",
      gap: "xs"
    },
    tooltipItem: {
      display: "flex",
      alignItems: "center",
      gap: "sm",
      fontSize: "sm"
    },
    tooltipSwatch: {
      boxSize: "3",
      rounded: "full"
    },
    tooltipLabel: {
      color: ["blackAlpha.800", "whiteAlpha.700"]
    },
    tooltipValue: {
      flex: 1,
      textAlign: "end"
    }
  },
  variants: {},
  sizes: {
    sm: ({ theme: t }) => ({
      container: {
        w: "xl",
        h: "xs"
      },
      legend: {
        gap: "xs",
        mb: "md"
      },
      legendItem: {
        minH: "6",
        minW: "6",
        fontSize: "xs",
        px: "2",
        lineHeight: (0, import_utils2.getMemoizedObject)(t, "sizes.6")
      }
    }),
    md: ({ theme: t }) => ({
      container: {
        w: "3xl",
        h: "sm"
      },
      legend: {
        gap: "xs",
        mb: "md"
      },
      legendItem: {
        minH: "7",
        minW: "7",
        fontSize: "sm",
        px: "3",
        lineHeight: (0, import_utils2.getMemoizedObject)(t, "sizes.7")
      }
    }),
    lg: ({ theme: t }) => ({
      container: {
        w: "5xl",
        h: "md"
      },
      legend: {
        gap: "sm",
        mb: "md"
      },
      legendItem: {
        minH: "8",
        minW: "8",
        fontSize: "md",
        px: "3",
        lineHeight: (0, import_utils2.getMemoizedObject)(t, "sizes.8")
      }
    }),
    full: ({ theme: t }) => ({
      container: {
        w: "full",
        h: "md"
      },
      legend: {
        gap: "sm",
        mb: "md"
      },
      legendItem: {
        minH: "8",
        minW: "8",
        fontSize: "md",
        px: "3",
        lineHeight: (0, import_utils2.getMemoizedObject)(t, "sizes.8")
      }
    })
  },
  defaultProps: {
    size: "full"
  }
};

// src/components/area-chart.ts
var AreaChart = (0, import_core2.mergeMultiStyle)(LineChart, {
  baseStyle: {
    area: {}
  }
})({ omit: ["line"] });

// src/components/autocomplete.ts
var import_core6 = require("@yamada-ui/core");

// src/components/select.ts
var import_core5 = require("@yamada-ui/core");

// src/components/menu.ts
var Menu = {
  baseStyle: {
    button: {
      transitionProperty: "common",
      transitionDuration: "normal"
    },
    list: {
      rounded: "md",
      minW: "xs",
      py: "2",
      bg: ["white", "black"],
      border: "1px solid",
      borderColor: ["blackAlpha.200", "whiteAlpha.100"],
      color: "inherit",
      boxShadow: ["lg", "dark-lg"],
      zIndex: "guldo"
    },
    item: {
      cursor: "pointer",
      py: "1.5",
      px: "3",
      transitionProperty: "background",
      transitionDuration: "ultra-fast",
      transitionTimingFunction: "ease-in",
      _focus: {
        bg: ["blackAlpha.50", "whiteAlpha.50"]
      },
      _active: {
        bg: ["blackAlpha.50", "whiteAlpha.50"],
        _disabled: {
          bg: ["white", "black"]
        }
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    },
    icon: {
      color: ["blackAlpha.600", "whiteAlpha.700"]
    },
    command: {
      opacity: 0.6
    },
    divider: {
      my: "2",
      borderBottomWidth: "1px",
      borderColor: "inherit"
    },
    group: {},
    groupLabel: {
      py: "1.5",
      px: "3",
      fontSize: "sm",
      fontWeight: "semibold",
      color: ["blackAlpha.700", "whiteAlpha.600"]
    }
  }
};

// src/components/native-select.ts
var import_core4 = require("@yamada-ui/core");

// src/components/input.ts
var import_core3 = require("@yamada-ui/core");
var import_utils3 = require("@yamada-ui/utils");
var Input = {
  baseStyle: {
    container: {},
    field: {
      width: "100%",
      minWidth: 0,
      outline: 0,
      position: "relative",
      appearance: "none",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    },
    element: {
      color: ["blackAlpha.600", "whiteAlpha.700"]
    }
  },
  variants: {
    outline: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils3.isArray)(fc) ? (0, import_core3.mode)((0, import_utils3.getColor)(fc[0], fc[0])(t, m), (0, import_utils3.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils3.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils3.isArray)(ec) ? (0, import_core3.mode)((0, import_utils3.getColor)(ec[0], ec[0])(t, m), (0, import_utils3.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils3.getColor)(ec, ec)(t, m);
      return {
        field: {
          border: "1px solid",
          borderColor: "inherit",
          bg: "inherit",
          _hover: {
            borderColor: ["blackAlpha.500", "whiteAlpha.400"]
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: [errorBorderColor, errorBorderColor],
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _active: {
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            zIndex: "yamcha",
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        },
        addon: {
          border: "1px solid",
          borderColor: ["inherit", "whiteAlpha.50"],
          bg: ["blackAlpha.300", "whiteAlpha.300"]
        }
      };
    },
    filled: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils3.isArray)(fc) ? (0, import_core3.mode)((0, import_utils3.getColor)(fc[0], fc[0])(t, m), (0, import_utils3.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils3.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils3.isArray)(ec) ? (0, import_core3.mode)((0, import_utils3.getColor)(ec[0], ec[0])(t, m), (0, import_utils3.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils3.getColor)(ec, ec)(t, m);
      return {
        field: {
          border: "2px solid",
          borderColor: "transparent",
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _hover: {
            bg: ["blackAlpha.100", "whiteAlpha.100"]
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: errorBorderColor,
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _active: {
            bg: "transparent",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            bg: "transparent",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        },
        addon: {
          border: "2px solid transparent",
          bg: ["blackAlpha.300", "whiteAlpha.300"]
        }
      };
    },
    flushed: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils3.isArray)(fc) ? (0, import_core3.mode)((0, import_utils3.getColor)(fc[0], fc[0])(t, m), (0, import_utils3.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils3.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils3.isArray)(ec) ? (0, import_core3.mode)((0, import_utils3.getColor)(ec[0], ec[0])(t, m), (0, import_utils3.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils3.getColor)(ec, ec)(t, m);
      return {
        field: {
          borderBottom: "1px solid",
          borderColor: "inherit",
          rounded: "0",
          px: "0",
          bg: "transparent",
          _hover: {
            borderColor: ["blackAlpha.500", "whiteAlpha.400"]
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: [errorBorderColor, errorBorderColor],
            boxShadow: `0px 1px 0px 0px ${errorBorderColor}`
          },
          _active: {
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0px 1px 0px 0px ${focusBorderColor}`
          },
          _focusVisible: {
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0px 1px 0px 0px ${focusBorderColor}`
          }
        },
        addon: {
          borderBottom: "1px solid",
          borderColor: "inherit",
          bg: "transparent",
          rounded: "0"
        }
      };
    },
    unstyled: {
      field: {
        bg: "transparent",
        minH: "auto",
        px: "0"
      },
      addon: {
        bg: "transparent",
        minH: "auto",
        px: "0"
      }
    }
  },
  sizes: {
    xs: {
      field: {
        fontSize: "xs",
        px: "2",
        minH: "6",
        rounded: "sm"
      },
      addon: {
        fontSize: "xs",
        px: "2",
        minH: "6",
        rounded: "sm"
      }
    },
    sm: {
      field: {
        fontSize: "sm",
        px: "2",
        minH: "8",
        rounded: "md"
      },
      addon: {
        fontSize: "sm",
        px: "2",
        minH: "8",
        rounded: "md"
      }
    },
    md: {
      field: {
        fontSize: "md",
        px: "3",
        minH: "10",
        rounded: "md"
      },
      addon: {
        fontSize: "md",
        px: "3",
        minH: "10",
        rounded: "md"
      }
    },
    lg: {
      field: {
        fontSize: "lg",
        px: "4",
        minH: "12",
        rounded: "md"
      },
      addon: {
        fontSize: "lg",
        px: "4",
        minH: "12",
        rounded: "md"
      }
    }
  },
  defaultProps: {
    size: "md",
    variant: "outline"
  }
};

// src/components/native-select.ts
var NativeSelect = (0, import_core4.mergeMultiStyle)(Input, {
  baseStyle: {
    container: {},
    field: {
      cursor: "pointer",
      pr: "8",
      pb: "px",
      _focus: {
        zIndex: "unset"
      },
      _readOnly: {
        pointerEvents: "none"
      }
    },
    icon: {
      w: "6",
      py: "2",
      color: ["blackAlpha.600", "whiteAlpha.700"],
      fontSize: "xl",
      outline: 0,
      rounded: "md",
      _disabled: {
        opacity: 0.4
      }
    }
  },
  sizes: {
    xs: {
      icon: {
        pt: "3",
        fontSize: "lg",
        insetEnd: "1"
      }
    },
    sm: {
      icon: {
        insetEnd: "2"
      }
    },
    md: {
      icon: {
        insetEnd: "2"
      }
    },
    lg: {
      icon: {
        insetEnd: "2"
      }
    }
  }
})({ omit: ["addon", "element"] });

// src/components/select.ts
var Select = (0, import_core5.mergeMultiStyle)(NativeSelect, Menu, {
  baseStyle: {
    inner: {},
    list: {
      w: "100%",
      maxH: "xs",
      overflowY: "auto"
    },
    item: {
      _hover: {
        bg: ["blackAlpha.100", "whiteAlpha.100"],
        _disabled: {
          bg: ["white", "black"]
        }
      },
      _active: {
        bg: ["blackAlpha.200", "whiteAlpha.200"]
      }
    },
    itemIcon: {}
  }
})({ omit: ["button", "command"] });

// src/components/autocomplete.ts
var Autocomplete = (0, import_core6.mergeMultiStyle)(Select)();

// src/components/avatar.ts
var import_core7 = require("@yamada-ui/core");
var import_utils4 = require("@yamada-ui/utils");
var Avatar = {
  baseStyle: {
    group: {},
    container: ({ theme: t, colorMode: m, name: string }) => {
      const bg = string ? (0, import_utils4.randomColor)({ string }) : (0, import_core7.mode)("gray.200", "gray.500")(m);
      return {
        bg,
        color: (0, import_utils4.isDark)(bg)(t, m) ? "white" : "black",
        borderColor: ["white", "black"],
        verticalAlign: "top",
        _loaded: { bg: "inherit" }
      };
    },
    name: {},
    excess: {
      borderColor: ["white", "black"],
      bg: ["blackAlpha.200", "whiteAlpha.200"]
    },
    badge: {
      rounded: "full",
      borderWidth: "0.2em",
      borderColor: ["white", "black"]
    }
  },
  sizes: {
    "2xs": ({ theme: t }) => ({
      container: {
        w: "4",
        h: "4",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.4")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.4")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      },
      excess: {
        w: "4",
        h: "4",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.4")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      }
    }),
    xs: ({ theme: t }) => ({
      container: {
        w: "6",
        h: "6",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.6")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.6")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "6", h: "6" }
    }),
    sm: ({ theme: t }) => ({
      container: {
        w: "8",
        h: "8",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.8")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.8")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "8", h: "8" }
    }),
    md: ({ theme: t }) => ({
      container: {
        w: "12",
        h: "12",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.12")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.12")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "12", h: "12" }
    }),
    lg: ({ theme: t }) => ({
      container: {
        w: "16",
        h: "16",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.16")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.16")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "16", h: "16" }
    }),
    xl: ({ theme: t }) => ({
      container: {
        w: "24",
        h: "24",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.24")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.24")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "24", h: "24" }
    }),
    "2xl": ({ theme: t }) => ({
      container: {
        w: "32",
        h: "32",
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.32")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils4.getMemoizedObject)(t, "sizes.32")} / 2.5)`,
        lineHeight: (0, import_utils4.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "32", h: "32" }
    })
  },
  defaultProps: {
    size: "md"
  }
};

// src/components/badge.ts
var import_core8 = require("@yamada-ui/core");
var import_utils5 = require("@yamada-ui/utils");
var Badge = {
  baseStyle: {
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    rounded: "sm",
    fontWeight: "bold"
  },
  variants: {
    solid: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      bg: [(0, import_utils5.tintColor)(`${c}.600`, 24)(t, m), (0, import_utils5.shadeColor)(`${c}.600`, 16)(t, m)],
      color: `white`
    }),
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      bg: [
        (0, import_utils5.isGray)(c) ? `${c}.50` : `${c}.100`,
        (0, import_utils5.shadeColor)(`${c}.300`, 58)(t, m)
      ],
      color: [`${c}.800`, (0, import_utils5.isGray)(c) ? `${c}.50` : `${c}.200`]
    }),
    outline: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => {
      const color = (0, import_core8.mode)(
        (0, import_utils5.getColor)(`${c}.500`)(t, m),
        (0, import_utils5.getColor)(
          (0, import_utils5.isGray)(c) ? `${c}.100` : (0, import_utils5.transparentizeColor)(`${c}.400`, 0.92)(t, m)
        )(t, m)
      )(m);
      return {
        color,
        boxShadow: `inset 0 0 0px 1px ${color}`
      };
    }
  },
  defaultProps: {
    variant: "subtle",
    colorScheme: "primary"
  }
};

// src/components/bar-chart.ts
var import_core9 = require("@yamada-ui/core");
var BarChart = (0, import_core9.mergeMultiStyle)(LineChart, {
  baseStyle: {
    bar: {},
    activeBar: {},
    background: { fill: "transparent" },
    cursor: { strokeDasharray: "5 5" }
  }
})({ omit: ["dot", "activeDot"] });

// src/components/breadcrumb.ts
var Breadcrumb = {
  baseStyle: {
    container: {},
    item: {},
    link: {
      transitionProperty: "common",
      transitionDuration: "fast",
      transitionTimingFunction: "ease-out",
      textDecoration: "none",
      outline: "none",
      color: "inherit",
      "&:not([aria-current=page])": {
        cursor: "pointer",
        _hover: {
          textDecoration: "underline"
        },
        _focusVisible: {
          boxShadow: "outline"
        }
      }
    },
    separator: {},
    ellipsis: {}
  }
};

// src/components/button.ts
var import_core10 = require("@yamada-ui/core");
var import_utils6 = require("@yamada-ui/utils");
var Button = {
  baseStyle: {
    cursor: "pointer",
    rounded: "md",
    fontWeight: "semibold",
    transitionProperty: "common",
    transitionDuration: "slower",
    _focus: {
      outline: "none"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _readOnly: {
      cursor: "default",
      _ripple: {
        display: "none"
      }
    },
    _hover: {
      _disabled: {
        bg: ["initial", "initial"]
      }
    }
  },
  variants: {
    solid: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const errorBorderColor = (0, import_utils6.isArray)(ec) ? (0, import_core10.mode)((0, import_utils6.getColor)(ec[0], ec[0])(t, m), (0, import_utils6.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils6.getColor)(ec, ec)(t, m);
      return {
        bg: (0, import_utils6.isGray)(c) ? [`${c}.50`, `${c}.700`] : [(0, import_utils6.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
        color: [(0, import_utils6.isGray)(c) || (0, import_utils6.isAccessible)(c) ? `black` : `white`, `white`],
        _hover: {
          bg: (0, import_utils6.isGray)(c) ? [`${c}.100`, `${c}.800`] : [(0, import_utils6.isAccessible)(c) ? `${c}.500` : `${c}.600`, `${c}.700`],
          _disabled: {
            bg: (0, import_utils6.isGray)(c) ? [`${c}.50`, `${c}.700`] : [(0, import_utils6.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`]
          }
        },
        _invalid: {
          border: "1px solid",
          borderColor: errorBorderColor,
          boxShadow: `0 0 0 1px ${errorBorderColor}`
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    outline: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const errorBorderColor = (0, import_utils6.isArray)(ec) ? (0, import_core10.mode)((0, import_utils6.getColor)(ec[0], ec[0])(t, m), (0, import_utils6.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils6.getColor)(ec, ec)(t, m);
      return {
        border: "1px solid",
        borderColor: [`${c}.600`, `${c}.500`],
        color: (0, import_utils6.isGray)(c) ? ["blackAlpha.800", "whiteAlpha.700"] : [`${c}.600`, `${c}.500`],
        bg: "transparent",
        _hover: {
          bg: [`${c}.50`, (0, import_utils6.transparentizeColor)(`${c}.600`, 0.12)(t, m)]
        },
        _invalid: {
          borderColor: [errorBorderColor, errorBorderColor],
          boxShadow: `0 0 0 1px ${errorBorderColor}`
        },
        _focusVisible: {
          boxShadow: "outline",
          _invalid: {
            borderColor: "transparent"
          }
        }
      };
    },
    link: ({ colorScheme: c = "gray" }) => ({
      padding: 0,
      height: "auto",
      lineHeight: "normal",
      verticalAlign: "baseline",
      color: [`${c}.600`, `${c}.500`],
      _hover: {
        textDecoration: "underline",
        _disabled: {
          textDecoration: "none"
        }
      },
      _active: {
        color: [`${c}.700`, `${c}.600`],
        _disabled: {
          color: [`${c}.600`, `${c}.500`]
        }
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _ripple: {
        display: "none"
      }
    }),
    ghost: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const errorBorderColor = (0, import_utils6.isArray)(ec) ? (0, import_core10.mode)((0, import_utils6.getColor)(ec[0], ec[0])(t, m), (0, import_utils6.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils6.getColor)(ec, ec)(t, m);
      return {
        color: (0, import_utils6.isGray)(c) ? ["blackAlpha.800", "whiteAlpha.700"] : [`${c}.600`, `${c}.500`],
        bg: "transparent",
        _hover: {
          bg: [`${c}.50`, (0, import_utils6.transparentizeColor)(`${c}.600`, 0.12)(t, m)]
        },
        _invalid: {
          border: "1px solid",
          borderColor: errorBorderColor,
          boxShadow: `0 0 0 1px ${errorBorderColor}`
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    unstyled: {
      bg: "none",
      color: "inherit",
      display: "inline",
      lineHeight: "inherit",
      m: 0,
      p: 0,
      _ripple: {
        display: "none"
      }
    }
  },
  sizes: {
    xs: ({ theme: t }) => ({
      h: 6,
      minW: 6,
      fontSize: "xs",
      lineHeight: (0, import_utils6.getMemoizedObject)(t, "sizes.6"),
      px: 2
    }),
    sm: ({ theme: t }) => ({
      h: 8,
      minW: 8,
      fontSize: "sm",
      lineHeight: (0, import_utils6.getMemoizedObject)(t, "sizes.8"),
      px: 3
    }),
    md: ({ theme: t }) => ({
      h: 10,
      minW: 10,
      fontSize: "md",
      lineHeight: (0, import_utils6.getMemoizedObject)(t, "sizes.10"),
      px: 4
    }),
    lg: ({ theme: t }) => ({
      h: 12,
      minW: 12,
      fontSize: "lg",
      lineHeight: (0, import_utils6.getMemoizedObject)(t, "sizes.12"),
      px: 6
    })
  },
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
};

// src/components/calendar.ts
var import_utils7 = require("@yamada-ui/utils");
var Calendar = {
  baseStyle: {
    container: {
      gap: "md"
    },
    header: {},
    label: {
      color: ["blackAlpha.700", "whiteAlpha.600"]
    },
    labelIcon: {
      color: ["blackAlpha.500", "whiteAlpha.500"]
    },
    control: {
      color: ["blackAlpha.500", "whiteAlpha.500"],
      fontSize: "1.25em",
      _hidden: {
        opacity: 0,
        pointerEvents: "none"
      }
    },
    prev: {},
    next: {},
    content: {},
    year: {
      gridTemplateColumns: "repeat(4, 1fr)"
    },
    month: {
      gridTemplateColumns: "repeat(3, 1fr)"
    },
    button: {
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none",
        _focusVisible: {
          boxShadow: "0 0 0 3px rgba(125, 125, 125, 0.6)"
        }
      }
    },
    date: {},
    row: {},
    cell: {
      transitionProperty: "common",
      transitionDuration: "slower"
    },
    weekday: {
      userSelect: "none",
      color: ["blackAlpha.700", "whiteAlpha.600"],
      justifyContent: "center",
      alignItems: "center"
    },
    day: {
      _weekend: {
        color: ["red.600", "red.400"]
      },
      _outside: {
        color: ["blackAlpha.500", "whiteAlpha.500"]
      },
      _holiday: {
        color: ["red.600", "red.400"]
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        _ripple: {
          display: "none"
        }
      }
    }
  },
  variants: {
    solid: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      button: {
        _hover: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _disabled: {
            bg: ["initial", "initial"]
          }
        },
        _selected: {
          bg: (0, import_utils7.isGray)(c) ? [`${c}.50`, `${c}.700`] : [(0, import_utils7.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
          color: [(0, import_utils7.isGray)(c) || (0, import_utils7.isAccessible)(c) ? `black` : `white`, `white`]
        }
      },
      cell: {
        _between: {
          bg: [
            (0, import_utils7.isGray)(c) ? (0, import_utils7.transparentizeColor)(`${c}.50`, 0.48)(t, m) : `${c}.50`,
            (0, import_utils7.shadeColor)(`${c}.300`, 72)(t, m)
          ],
          _start: {
            roundedLeft: "md"
          },
          _end: {
            roundedRight: "md"
          }
        }
      },
      day: {
        _hover: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _between: {
            bg: ["initial", "initial"]
          },
          _selected: {
            bg: (0, import_utils7.isGray)(c) ? [`${c}.100`, `${c}.700`] : [(0, import_utils7.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`]
          },
          _disabled: {
            bg: ["initial", "initial"]
          }
        },
        _today: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _between: {
            bg: ["initial", "initial"]
          }
        },
        _start: {
          roundedRight: "0"
        },
        _end: {
          roundedLeft: "0"
        },
        _selected: {
          bg: (0, import_utils7.isGray)(c) ? [`${c}.100`, `${c}.700`] : [(0, import_utils7.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
          color: [(0, import_utils7.isGray)(c) || (0, import_utils7.isAccessible)(c) ? `black` : `white`, `white`],
          borderColor: ["transparent", "transparent"]
        }
      }
    }),
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      button: {
        _hover: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _disabled: {
            bg: ["initial", "initial"]
          }
        },
        _selected: {
          bg: [
            (0, import_utils7.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils7.shadeColor)(`${c}.300`, 58)(t, m)
          ],
          color: [`${c}.800`, (0, import_utils7.isGray)(c) ? `${c}.50` : `${c}.200`]
        }
      },
      cell: {
        _between: {
          bg: [
            (0, import_utils7.isGray)(c) ? (0, import_utils7.transparentizeColor)(`${c}.50`, 0.48)(t, m) : `${c}.50`,
            (0, import_utils7.shadeColor)(`${c}.300`, 72)(t, m)
          ],
          _start: {
            roundedLeft: "md"
          },
          _end: {
            roundedRight: "md"
          }
        }
      },
      day: {
        _hover: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _between: {
            bg: ["initial", "initial"]
          },
          _selected: {
            bg: [
              (0, import_utils7.isGray)(c) ? `${c}.50` : `${c}.100`,
              (0, import_utils7.shadeColor)(`${c}.300`, 58)(t, m)
            ]
          },
          _disabled: {
            bg: ["initial", "initial"]
          }
        },
        _today: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _between: {
            bg: ["initial", "initial"]
          }
        },
        _start: {
          roundedRight: "0"
        },
        _end: {
          roundedLeft: "0"
        },
        _selected: {
          bg: [
            (0, import_utils7.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils7.shadeColor)(`${c}.300`, 58)(t, m)
          ],
          color: [`${c}.800`, (0, import_utils7.isGray)(c) ? `${c}.50` : `${c}.200`],
          borderColor: ["transparent", "transparent"]
        }
      }
    }),
    unstyled: {
      container: {
        gap: "inherit",
        fontSize: "inherit"
      },
      content: {
        w: "auto"
      },
      label: {
        h: "auto",
        pointerEvents: "inherit",
        _hover: {
          bg: "inherit"
        },
        _active: {
          bg: "inherit",
          pointerEvents: "inherit"
        }
      },
      labelIcon: {
        color: "inherit"
      },
      control: {
        fontSize: "inherit",
        w: "auto",
        h: "auto",
        _hover: {
          bg: "inherit"
        },
        _active: {
          bg: "inherit"
        },
        _hidden: {
          opacity: "inherit",
          pointerEvents: "inherit"
        }
      },
      button: {
        h: "auto",
        _hover: {
          bg: "inherit"
        },
        _active: {
          bg: "inherit"
        },
        _disabled: {
          opacity: "inherit",
          cursor: "inherit",
          boxShadow: "inherit",
          _focusVisible: {
            boxShadow: "inherit"
          }
        }
      },
      weekday: {
        userSelect: "auto",
        color: "inherit",
        w: "auto",
        h: "auto"
      },
      day: {
        w: "auto",
        h: "auto",
        _hover: {
          bg: "inherit"
        },
        _active: {
          bg: "inherit"
        },
        _weekend: {
          color: "inherit"
        },
        _outside: {
          color: "inherit"
        },
        _holiday: {
          color: "inherit"
        },
        _disabled: {
          opacity: "inherit",
          cursor: "inherit",
          boxShadow: "inherit",
          _focusVisible: {
            boxShadow: "inherit"
          }
        }
      }
    }
  },
  sizes: {
    sm: {
      container: {
        fontSize: "xs"
      },
      content: {
        w: 56
      },
      label: {
        h: 8
      },
      control: {
        w: 8,
        h: 8
      },
      button: {
        h: 8
      },
      weekday: {
        w: 8,
        h: 8
      },
      day: {
        w: 8,
        h: 8
      }
    },
    md: {
      container: {
        fontSize: "sm"
      },
      content: {
        w: "17.5rem"
      },
      label: {
        h: 10
      },
      control: {
        w: 10,
        h: 10
      },
      button: {
        h: 10
      },
      weekday: {
        w: 10,
        h: 10
      },
      day: {
        w: 10,
        h: 10
      }
    },
    lg: {
      container: {
        fontSize: "md"
      },
      content: {
        w: "21rem"
      },
      label: {
        h: 12
      },
      control: {
        fontSize: "1.5em",
        w: 12,
        h: 12
      },
      button: {
        h: 12
      },
      weekday: {
        w: 12,
        h: 12
      },
      day: {
        w: 12,
        h: 12
      }
    },
    full: {
      container: {
        w: "full",
        fontSize: "md"
      },
      content: {
        w: "full"
      },
      label: {
        h: 12
      },
      control: {
        fontSize: "1.5em",
        w: 12,
        h: 12
      },
      button: {
        h: 12
      },
      weekday: {
        w: "full",
        h: 12
      },
      day: {
        w: "full",
        h: 12
      }
    }
  },
  defaultProps: {
    size: "md",
    variant: "solid",
    colorScheme: "primary"
  }
};

// src/components/card.ts
var import_utils8 = require("@yamada-ui/utils");
var Card = {
  baseStyle: {
    container: {},
    header: {},
    body: {
      flex: "1"
    },
    footer: {}
  },
  variants: {
    elevated: {
      container: {
        boxShadow: ["md", "dark-md"]
      }
    },
    outline: {
      container: {
        borderWidth: "1px"
      }
    },
    solid: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      container: {
        bg: [(0, import_utils8.tintColor)(`${c}.600`, 16)(t, m), (0, import_utils8.shadeColor)(`${c}.600`, 16)(t, m)],
        color: "white"
      }
    }),
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      container: {
        bg: [`${c}.100`, (0, import_utils8.shadeColor)(`${c}.300`, 58)(t, m)]
      }
    }),
    unstyled: {
      container: { rounded: 0 },
      header: { p: 0 },
      body: { p: 0 },
      footer: { p: 0 }
    }
  },
  sizes: {
    sm: {
      container: { rounded: "base" },
      header: { pt: "sm", px: "sm", gap: "sm" },
      body: { py: "sm", px: "sm", gap: "sm" },
      footer: { pb: "sm", px: "sm", gap: "sm" }
    },
    md: {
      container: { rounded: "md" },
      header: { pt: "md", px: "md", gap: "md" },
      body: { py: "md", px: "md", gap: "md" },
      footer: { pb: "md", px: "md", gap: "md" }
    },
    normal: {
      container: { rounded: "lg" },
      header: { pt: "normal", px: "normal", gap: "normal" },
      body: { py: "normal", px: "normal", gap: "normal" },
      footer: { pb: "normal", px: "normal", gap: "normal" }
    },
    lg: {
      container: { rounded: "xl" },
      header: { pt: "lg", px: "lg", gap: "lg" },
      body: { py: "lg", px: "lg", gap: "lg" },
      footer: { pb: "lg", px: "lg", gap: "lg" }
    }
  },
  defaultProps: {
    variant: "elevated",
    colorScheme: "primary",
    size: "md"
  }
};

// src/components/carousel.ts
var Carousel = {
  baseStyle: {
    container: {
      w: "100%"
    },
    inner: {},
    slide: {},
    control: {},
    prev: ({ orientation: o }) => ({
      ...o === "vertical" ? { left: "50%", top: "4", transform: "translateX(-50%)" } : { top: "50%", left: "4", transform: "translateY(-50%)" }
    }),
    next: ({ orientation: o }) => ({
      ...o === "vertical" ? { left: "50%", bottom: "4", transform: "translateX(-50%)" } : { top: "50%", right: "4", transform: "translateY(-50%)" }
    }),
    indicators: ({ orientation: o }) => ({
      gap: "md",
      ...o === "vertical" ? {
        py: "4",
        h: "100%",
        top: "50%",
        right: "4",
        transform: "translateY(-50%)"
      } : {
        px: "4",
        w: "100%",
        h: "2",
        left: "50%",
        bottom: "4",
        transform: "translateX(-50%)"
      }
    }),
    indicator: ({ orientation: o }) => ({
      rounded: "full",
      bg: ["whiteAlpha.400", "blackAlpha.400"],
      _hover: {
        bg: ["whiteAlpha.500", "blackAlpha.500"]
      },
      _active: {
        bg: [`whiteAlpha.600`, `blackAlpha.600`]
      },
      _selected: {
        bg: [`whiteAlpha.700`, `blackAlpha.700`]
      },
      transitionProperty: "common",
      transitionDuration: "slower",
      ...o === "vertical" ? { h: "8", right: "4" } : { w: "8", bottom: "4" }
    })
  },
  sizes: {
    sm: {
      inner: {
        h: "sm"
      },
      indicators: ({ orientation: o }) => ({
        ...o === "vertical" ? { w: "1.5" } : { h: "1.5" }
      })
    },
    md: {
      inner: {
        h: "md"
      },
      indicators: ({ orientation: o }) => ({
        ...o === "vertical" ? { w: "1.5" } : { h: "1.5" }
      })
    },
    lg: {
      inner: {
        h: "lg"
      },
      indicators: ({ orientation: o }) => ({
        ...o === "vertical" ? { w: "2" } : { h: "2" }
      })
    },
    xl: {
      inner: {
        h: "xl"
      },
      indicators: ({ orientation: o }) => ({
        ...o === "vertical" ? { w: "2" } : { h: "2" }
      })
    }
  },
  defaultProps: {
    size: "md"
  }
};

// src/components/checkbox.ts
var Checkbox = {
  baseStyle: {
    container: {
      _readOnly: { cursor: "auto" },
      _disabled: { cursor: "not-allowed" }
    },
    icon: ({ colorScheme: c = "primary" }) => ({
      transitionProperty: "box-shadow",
      transitionDuration: "normal",
      border: "2px solid",
      borderColor: "inherit",
      color: ["white", "black"],
      _checked: {
        bg: `${c}.500`,
        borderColor: `${c}.500`,
        color: ["white", "black"],
        _hover: {
          bg: `${c}.600`,
          borderColor: `${c}.600`
        },
        _disabled: {
          bg: ["blackAlpha.400", "whiteAlpha.300"]
        }
      },
      _indeterminate: {
        bg: `${c}.500`,
        borderColor: `${c}.500`,
        color: ["white", "black"]
      },
      _disabled: {
        bg: ["blackAlpha.200", "whiteAlpha.100"],
        borderColor: ["transparent", "transparent"]
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _invalid: {
        borderColor: ["danger.500", "danger.400"],
        _focusVisible: {
          borderColor: "inherit",
          _checked: {
            borderColor: `${c}.500`
          }
        }
      }
    }),
    label: {
      userSelect: "none",
      _disabled: { opacity: 0.4 }
    }
  },
  sizes: {
    sm: {
      icon: { boxSize: "3.5", rounded: "base", fontSize: "2xs" },
      label: { fontSize: "sm" }
    },
    md: {
      icon: { boxSize: "4", rounded: "base", fontSize: "2xs" },
      label: { fontSize: "md" }
    },
    lg: {
      icon: { boxSize: "5", rounded: "base", fontSize: "sm" },
      label: { fontSize: "lg" }
    }
  },
  defaultProps: {
    size: "md",
    colorScheme: "primary"
  }
};

// src/components/close-button.ts
var import_core11 = require("@yamada-ui/core");
var CloseButton = (0, import_core11.mergeStyle)(Button, {
  baseStyle: {
    _hover: {
      bg: ["blackAlpha.100", "whiteAlpha.100"]
    },
    _active: {
      bg: ["blackAlpha.200", "whiteAlpha.200"]
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  },
  sizes: {
    sm: {
      boxSize: 6,
      fontSize: "2xs"
    },
    md: {
      boxSize: 8,
      fontSize: "xs"
    },
    lg: {
      boxSize: 10,
      fontSize: "md"
    }
  },
  defaultProps: {
    size: "md"
  }
})({ omit: ["variants", "sizes", "defaultProps"] });

// src/components/color-picker.ts
var import_core12 = require("@yamada-ui/core");
var ColorPicker = (0, import_core12.mergeMultiStyle)(Input, Menu, {
  baseStyle: {
    container: {},
    inner: {},
    field: {
      pr: "8",
      pb: "px",
      _focus: {
        zIndex: "unset"
      },
      _readOnly: {
        pointerEvents: "none"
      }
    },
    swatch: {},
    eyeDropper: {
      w: "6",
      py: "1",
      fontSize: "lg",
      outline: 0,
      rounded: "md",
      transitionProperty: "common",
      transitionDuration: "normal",
      pointerEvents: "auto",
      color: ["blackAlpha.600", "whiteAlpha.700"],
      _hover: {
        color: ["blackAlpha.500", "whiteAlpha.600"]
      },
      _disabled: {
        pointerEvents: "none",
        opacity: 0.4
      },
      _focusVisible: {
        boxShadow: "outline"
      }
    },
    list: {
      w: "auto",
      minW: "auto",
      maxH: "inherit",
      overflowY: "inherit",
      p: "2"
    }
  },
  sizes: {
    xs: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "6" : "2"
      },
      swatch: {
        insetStart: "1",
        boxSize: "4"
      },
      eyeDropper: {
        insetEnd: "1",
        fontSize: "sm"
      }
    }),
    sm: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "9" : "2"
      },
      swatch: {
        insetStart: "2",
        boxSize: "5"
      },
      eyeDropper: {
        insetEnd: "2"
      }
    }),
    md: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "10" : "3"
      },
      swatch: {
        insetStart: "2",
        boxSize: "6"
      },
      eyeDropper: {
        insetEnd: "2"
      }
    }),
    lg: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "12" : "4"
      },
      swatch: {
        insetStart: "2"
      },
      eyeDropper: {
        insetEnd: "2"
      }
    })
  }
})({
  omit: [
    "addon",
    "element",
    "button",
    "item",
    "command",
    "icon",
    "divider",
    "group",
    "groupLabel"
  ]
});

// src/components/color-selector.ts
var ColorSelector = {
  baseStyle: {
    container: { w: "full" },
    saturationSlider: { maxW: "full" },
    body: {},
    sliders: { flex: "1" },
    hueSlider: {},
    alphaSlider: {},
    eyeDropper: {
      borderColor: "border",
      color: ["blackAlpha.600", "whiteAlpha.700"],
      _hover: {
        borderColor: ["blackAlpha.500", "whiteAlpha.400"],
        _disabled: {
          borderColor: "inherit"
        }
      }
    },
    result: {},
    channels: {},
    channelLabel: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontWeight: "medium"
    },
    channel: {},
    swatchesLabel: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontWeight: "medium"
    },
    swatches: {},
    swatch: {
      _readOnly: { cursor: "auto" },
      _disabled: {
        opacity: 0.6,
        cursor: "not-allowed"
      }
    }
  },
  sizes: {
    sm: {
      container: { w: "xs", gap: "sm" },
      body: { gap: "xs" },
      sliders: { gap: "xs" },
      channels: { gap: "xs" },
      eyeDropper: { boxSize: "7", fontSize: "xs" },
      result: { boxSize: "7" },
      channelLabel: { fontSize: "xs" },
      swatchesLabel: { fontSize: "xs" },
      swatches: { gap: "xs" }
    },
    md: {
      container: { w: "sm", gap: "sm" },
      body: { gap: "sm" },
      sliders: { gap: "sm" },
      channels: { gap: "sm" },
      eyeDropper: { boxSize: "10" },
      result: { boxSize: "10" },
      channelLabel: { fontSize: "sm", mb: "xs" },
      swatchesLabel: { fontSize: "sm", mb: "xs" },
      swatches: { gap: "sm" }
    },
    lg: {
      container: { w: "md", gap: "md" },
      body: { gap: "sm" },
      sliders: { gap: "sm" },
      channels: { gap: "sm" },
      eyeDropper: { boxSize: "12", fontSize: "xl" },
      result: { boxSize: "12" },
      channelLabel: { fontSize: "md", mb: "xs" },
      swatchesLabel: { fontSize: "md", mb: "xs" },
      swatches: { gap: "sm" }
    },
    full: {
      container: { w: "full", gap: "md" },
      body: { gap: "sm" },
      sliders: { gap: "sm" },
      channels: { gap: "sm" },
      eyeDropper: { boxSize: "12", fontSize: "xl" },
      result: { boxSize: "12" },
      channelLabel: { fontSize: "md", mb: "xs" },
      swatchesLabel: { fontSize: "md", mb: "xs" },
      swatches: { gap: "sm" }
    }
  },
  defaultProps: {
    size: "md"
  }
};

// src/components/color-swatch.ts
var ColorSwatch = {
  baseStyle: {
    container: {},
    overlay: { boxSize: "full" }
  },
  variants: {
    basic: {
      container: { rounded: "md" },
      overlay: { rounded: "md" }
    },
    rounded: {
      container: { rounded: "full" },
      overlay: { rounded: "full" }
    }
  },
  sizes: {
    sm: {
      container: { boxSize: "6" }
    },
    md: {
      container: { boxSize: "8" }
    },
    lg: {
      container: { boxSize: "10" }
    }
  },
  defaultProps: {
    variant: "basic",
    size: "md"
  }
};

// src/components/container.ts
var Container = {
  baseStyle: {
    w: "100%",
    display: "flex",
    flexDirection: "column",
    gap: { base: "lg", sm: "md" },
    p: { base: "lg", sm: "md" }
  }
};

// src/components/date-picker.ts
var import_core14 = require("@yamada-ui/core");

// src/components/multi-select.ts
var import_core13 = require("@yamada-ui/core");
var MultiSelect = (0, import_core13.mergeMultiStyle)(Select, {
  baseStyle: {
    clearIcon: {
      transitionProperty: "common",
      transitionDuration: "normal",
      pointerEvents: "auto",
      _hover: {
        opacity: 0.8
      },
      _readOnly: {
        pointerEvents: "none"
      },
      _disabled: {
        pointerEvents: "none",
        opacity: 0.4
      },
      _focusVisible: {
        boxShadow: "outline"
      }
    }
  }
})();

// src/components/date-picker.ts
var DatePicker = (0, import_core14.mergeMultiStyle)(
  Input,
  MultiSelect,
  {
    baseStyle: {
      container: {},
      field: {
        cursor: "text",
        pb: "px",
        _focus: {
          zIndex: "unset"
        },
        _readOnly: {
          pointerEvents: "none"
        }
      },
      list: {
        w: "auto",
        minW: "auto",
        maxH: "inherit",
        overflowY: "inherit",
        p: "2"
      }
    },
    sizes: {
      xs: {
        icon: {
          pt: "2",
          fontSize: "md"
        }
      }
    }
  }
)({ omit: ["addon", "element", "group", "groupLabel", "item", "itemIcon"] });

// src/components/dialog.ts
var import_core15 = require("@yamada-ui/core");

// src/components/modal.ts
var Modal = {
  baseStyle: {
    container: {
      w: "100%",
      rounded: "md",
      bg: ["white", "black"],
      color: "inherit",
      boxShadow: ["lg", "dark-lg"],
      zIndex: "recoome"
    },
    closeButton: {
      top: "3",
      right: "3"
    },
    overlay: {
      bg: "blackAlpha.600",
      zIndex: "burter"
    },
    header: {
      pt: "md",
      px: "md",
      gap: "md",
      fontSize: "xl",
      fontWeight: "semibold"
    },
    body: {
      my: "md",
      px: "md",
      gap: "md",
      flex: "1"
    },
    footer: {
      px: "md",
      pb: "md",
      gap: "md"
    }
  },
  sizes: {
    xs: { container: { maxW: "xs" } },
    sm: { container: { maxW: "sm" } },
    md: { container: { maxW: "md" } },
    lg: { container: { maxW: "lg" } },
    xl: { container: { maxW: "xl" } },
    "2xl": { container: { maxW: "2xl" } },
    "3xl": { container: { maxW: "3xl" } },
    "4xl": { container: { maxW: "4xl" } },
    "5xl": { container: { maxW: "5xl" } },
    "6xl": { container: { maxW: "6xl" } },
    full: {
      container: { minW: "100vw", minH: "100dvh", rounded: 0 }
    }
  },
  defaultProps: {
    size: "md"
  }
};

// src/components/dialog.ts
var Dialog = (0, import_core15.mergeMultiStyle)(Modal)();

// src/components/divider.ts
var Divider = {
  baseStyle: {
    borderColor: "border"
  },
  variants: {
    solid: {
      borderStyle: "solid"
    },
    dashed: {
      borderStyle: "dashed"
    },
    dotted: {
      borderStyle: "dotted"
    }
  },
  defaultProps: { variant: "solid" }
};

// src/components/donut-chart.ts
var import_core17 = require("@yamada-ui/core");

// src/components/pie-chart.ts
var import_core16 = require("@yamada-ui/core");
var import_utils9 = require("@yamada-ui/utils");
var PieChart = (0, import_core16.mergeMultiStyle)(LineChart, {
  baseStyle: {
    pie: {},
    activeShape: {},
    inactiveShape: {},
    label: {},
    labelLine: {},
    cell: {}
  },
  sizes: {
    sm: ({ theme: t, withLegend, withLabels }) => ({
      container: {
        w: withLegend ? "full" : import_utils9.calc.add(
          (0, import_utils9.getMemoizedObject)(t, "sizes.3xs"),
          withLabels ? (0, import_utils9.getMemoizedObject)(t, "sizes.16") : "0px"
        ),
        h: import_utils9.calc.add((0, import_utils9.getMemoizedObject)(t, "sizes.3xs"), (0, import_utils9.getMemoizedObject)(t, "sizes.1"))
      },
      label: {
        fontSize: "xs"
      }
    }),
    md: ({ theme: t, withLegend, withLabels }) => ({
      container: {
        w: withLegend ? "full" : import_utils9.calc.add(
          (0, import_utils9.getMemoizedObject)(t, "sizes.2xs"),
          withLabels ? (0, import_utils9.getMemoizedObject)(t, "sizes.16") : "0px"
        ),
        h: "2xs"
      },
      label: {
        fontSize: "sm"
      }
    }),
    lg: ({ theme: t, withLegend, withLabels }) => ({
      container: {
        w: withLegend ? "full" : import_utils9.calc.add(
          (0, import_utils9.getMemoizedObject)(t, "sizes.xs"),
          withLabels ? (0, import_utils9.getMemoizedObject)(t, "sizes.16") : "0px"
        ),
        h: "xs"
      },
      label: {
        fontSize: "md"
      }
    })
  },
  defaultProps: {
    size: "md"
  }
})({ omit: ["line", "grid", "sizes.full"] });

// src/components/donut-chart.ts
var DonutChart = (0, import_core17.mergeMultiStyle)(PieChart)();

// src/components/drawer.ts
var import_core18 = require("@yamada-ui/core");
var import_utils10 = require("@yamada-ui/utils");
var Drawer = (0, import_core18.mergeMultiStyle)(Modal, {
  baseStyle: {
    container: ({ isFullHeight, placement }) => ({
      ...isFullHeight ? { height: "100dvh", rounded: 0 } : {},
      [`rounded${(0, import_utils10.toCamelCase)(placement)}`]: 0
    }),
    inner: {},
    body: {
      overflow: "auto"
    },
    dragBar: ({ placement }) => ({
      [`margin${(0, import_utils10.toCamelCase)((0, import_utils10.antonym)(placement))}`]: "md",
      ...placement === "top" || placement === "bottom" ? { mx: "auto", w: "3xs", minH: "2" } : { my: "auto", minW: "2", h: "3xs" },
      bg: ["blackAlpha.100", "whiteAlpha.100"],
      rounded: "full"
    })
  },
  sizes: {
    xs: { container: { maxW: "xs" } },
    sm: { container: { maxW: "md" } },
    md: { container: { maxW: "lg" } },
    lg: { container: { maxW: "2xl" } },
    xl: { container: { maxW: "4xl" } },
    full: {
      container: { minW: "100vw", minH: "100dvh", rounded: 0 }
    }
  },
  defaultProps: {
    size: "md"
  }
})({ omit: ["sizes"] });

// src/components/dropzone.ts
var import_core19 = require("@yamada-ui/core");
var import_utils11 = require("@yamada-ui/utils");
var Dropzone = {
  baseStyle: ({ theme: t, colorMode: m }) => ({
    container: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      rounded: "md",
      w: "100%",
      bg: ["blackAlpha.50", "whiteAlpha.50"],
      outline: 0,
      overflow: "hidden",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _hover: {
        cursor: "pointer",
        bg: ["blackAlpha.100", "whiteAlpha.100"]
      },
      _loading: {
        cursor: "not-allowed",
        bg: ["blackAlpha.100", "whiteAlpha.100"]
      },
      _accept: {
        bg: ["success.50", (0, import_utils11.transparentizeColor)("success.400", 0.12)(t, m)],
        borderColor: ["success.500", "success.400"]
      },
      _reject: {
        bg: ["danger.50", (0, import_utils11.transparentizeColor)("danger.400", 0.12)(t, m)],
        borderColor: ["danger.500", "danger.400"]
      }
    },
    overlay: {
      bg: ["whiteAlpha.600", "blackAlpha.600"],
      zIndex: "kurillin"
    }
  }),
  variants: {
    solid: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils11.isArray)(fc) ? (0, import_core19.mode)((0, import_utils11.getColor)(fc[0], fc[0])(t, m), (0, import_utils11.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils11.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils11.isArray)(ec) ? (0, import_core19.mode)((0, import_utils11.getColor)(ec[0], ec[0])(t, m), (0, import_utils11.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils11.getColor)(ec, ec)(t, m);
      return {
        container: {
          borderWidth: "1px",
          borderStyle: "solid",
          _invalid: {
            borderColor: errorBorderColor,
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _focus: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        }
      };
    },
    dashed: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils11.isArray)(fc) ? (0, import_core19.mode)((0, import_utils11.getColor)(fc[0], fc[0])(t, m), (0, import_utils11.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils11.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils11.isArray)(ec) ? (0, import_core19.mode)((0, import_utils11.getColor)(ec[0], ec[0])(t, m), (0, import_utils11.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils11.getColor)(ec, ec)(t, m);
      return {
        container: {
          borderWidth: "1px",
          borderStyle: "dashed",
          _invalid: {
            borderColor: errorBorderColor,
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _focus: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        }
      };
    },
    unstyled: {
      container: {
        color: "inherit",
        rounded: "inherit",
        bg: "transparent",
        h: "auto",
        _hover: {
          cursor: "inherit",
          bg: "transparent"
        },
        _loading: {
          cursor: "auto",
          bg: "transparent"
        },
        _accept: {
          bg: "transparent",
          borderColor: "inherit"
        },
        _reject: {
          bg: "transparent",
          borderColor: "inherit"
        }
      },
      overlay: {
        bg: "transparent"
      }
    }
  },
  sizes: {
    xs: {
      container: { h: "xs" }
    },
    sm: {
      container: { h: "sm" }
    },
    md: {
      container: { h: "md" }
    },
    lg: {
      container: { h: "lg" }
    },
    full: {
      container: { h: "full" }
    }
  },
  defaultProps: {
    size: "sm",
    variant: "dashed"
  }
};

// src/components/editable.ts
var import_core20 = require("@yamada-ui/core");
var import_utils12 = require("@yamada-ui/utils");
var Editable = {
  baseStyle: {
    container: {
      w: "full"
    },
    preview: {
      rounded: "md",
      p: "1",
      whiteSpace: "pre-line",
      transitionProperty: "common",
      transitionDuration: "normal"
    },
    input: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils12.isArray)(fc) ? (0, import_core20.mode)((0, import_utils12.getColor)(fc[0], fc[0])(t, m), (0, import_utils12.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils12.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils12.isArray)(ec) ? (0, import_core20.mode)((0, import_utils12.getColor)(ec[0], ec[0])(t, m), (0, import_utils12.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils12.getColor)(ec, ec)(t, m);
      return {
        rounded: "md",
        p: "1",
        w: "full",
        transitionProperty: "common",
        transitionDuration: "normal",
        _placeholder: { opacity: 0.6 },
        _invalid: {
          boxShadow: `0px 0px 0px 1px ${errorBorderColor}`
        },
        _focus: {
          zIndex: "yamcha",
          boxShadow: `0px 0px 0px 1px ${focusBorderColor}`
        },
        _focusVisible: {
          zIndex: "yamcha",
          boxShadow: `0px 0px 0px 1px ${focusBorderColor}`
        }
      };
    },
    textarea: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils12.isArray)(fc) ? (0, import_core20.mode)((0, import_utils12.getColor)(fc[0], fc[0])(t, m), (0, import_utils12.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils12.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils12.isArray)(ec) ? (0, import_core20.mode)((0, import_utils12.getColor)(ec[0], ec[0])(t, m), (0, import_utils12.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils12.getColor)(ec, ec)(t, m);
      return {
        boxSizing: "content-box",
        rounded: "md",
        p: "1",
        w: "full",
        h: "1lh",
        transitionProperty: "common",
        transitionDuration: "normal",
        _placeholder: { opacity: 0.6 },
        _invalid: {
          boxShadow: `0px 0px 0px 1px ${errorBorderColor}`
        },
        _focus: {
          zIndex: "yamcha",
          boxShadow: `0px 0px 0px 1px ${focusBorderColor}`
        },
        _focusVisible: {
          zIndex: "yamcha",
          boxShadow: `0px 0px 0px 1px ${focusBorderColor}`
        }
      };
    }
  }
};

// src/components/file-input.ts
var import_core21 = require("@yamada-ui/core");
var FileInput = (0, import_core21.mergeMultiStyle)(Input)();

// src/components/form-control.ts
var FormControl = {
  baseStyle: {
    container: {
      w: "100%",
      position: "relative"
    },
    label: {
      fontSize: "md",
      me: "3",
      mb: "2",
      fontWeight: "medium",
      transitionProperty: "common",
      transitionDuration: "normal",
      opacity: 1,
      _disabled: {
        opacity: 0.4
      }
    },
    requiredIndicator: {
      ms: "1",
      color: ["danger.500", "danger.400"]
    },
    helperMessage: {
      mt: "2",
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontSize: "sm"
    },
    errorMessage: {
      mt: "2",
      color: ["danger.500", "danger.400"],
      fontSize: "sm"
    }
  }
};

// src/components/heading.ts
var Heading = {
  baseStyle: {
    fontFamily: "heading",
    fontWeight: "bold"
  },
  sizes: {
    "4xl": {
      fontSize: { base: "7xl", sm: "6xl" }
    },
    "3xl": {
      fontSize: { base: "6xl", sm: "5xl" }
    },
    "2xl": {
      fontSize: { base: "5xl", sm: "4xl" }
    },
    xl: {
      fontSize: { base: "4xl", sm: "3xl" }
    },
    lg: {
      fontSize: { base: "3xl", sm: "2xl" }
    },
    md: { fontSize: "xl" },
    sm: { fontSize: "md" },
    xs: { fontSize: "sm" }
  },
  defaultProps: { size: "xl" }
};

// src/components/indicator.ts
var import_utils13 = require("@yamada-ui/utils");
var Indicator = {
  baseStyle: ({ withBorder }) => ({
    zIndex: "kurillin",
    rounded: "full",
    w: "fit-content",
    h: "fit-content",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    outline: 0,
    whiteSpace: "nowrap",
    ...withBorder ? { borderWidth: "0.2em", borderColor: ["white", "black"] } : {}
  }),
  sizes: {
    sm: { minH: 2, minW: 2, fontSize: "xs", px: 1, lineHeight: 1.6 },
    md: { minH: 3, minW: 3, fontSize: "sm", px: 1.5, lineHeight: 1.5 },
    lg: { minH: 4, minW: 4, fontSize: "md", px: 2, lineHeight: 1.4 }
  },
  variants: {
    solid: ({ colorScheme: c = "primary" }) => ({
      bg: [`${c}.500`, `${c}.600`],
      color: `white`,
      var: [
        {
          __prefix: "ui",
          name: "ping",
          token: "colors",
          value: [`${c}.300`, `${c}.400`]
        }
      ]
    }),
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      bg: [
        (0, import_utils13.isGray)(c) ? `${c}.50` : `${c}.100`,
        (0, import_utils13.shadeColor)(`${c}.300`, 58)(t, m)
      ],
      color: [`${c}.800`, (0, import_utils13.isGray)(c) ? `${c}.50` : `${c}.200`],
      var: [
        {
          __prefix: "ui",
          name: "ping",
          token: "colors",
          value: ["blackAlpha.400", "whiteAlpha.500"]
        }
      ]
    })
  },
  defaultProps: {
    size: "md",
    variant: "solid",
    colorScheme: "primary"
  }
};

// src/components/kbd.ts
var Kbd = {
  baseStyle: {
    fontFamily: "mono",
    bg: ["blackAlpha.50", "whiteAlpha.50"],
    rounded: "md",
    borderWidth: "1px",
    fontSize: "0.8em",
    fontWeight: "bold",
    lineHeight: "shorter",
    py: "0.2em",
    px: "0.4em",
    whiteSpace: "nowrap"
  }
};

// src/components/link.ts
var Link = {
  baseStyle: {
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "link",
    _hover: {
      textDecoration: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  }
};

// src/components/list.ts
var List = {
  baseStyle: {
    container: {},
    item: {},
    icon: {
      me: "2",
      display: "inline-block",
      verticalAlign: "middle"
    }
  }
};

// src/components/loading.ts
var Loading = {
  baseStyle: {},
  defaultProps: {
    variant: "oval",
    colorScheme: "primary",
    size: "1em"
  }
};

// src/components/mark.ts
var import_core22 = require("@yamada-ui/core");
var import_utils14 = require("@yamada-ui/utils");
var Mark = {
  baseStyle: {
    px: "1",
    py: "1"
  },
  variants: {
    solid: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => ({
      bg: [(0, import_utils14.tintColor)(`${c}.600`, 24)(t, m), (0, import_utils14.shadeColor)(`${c}.600`, 16)(t, m)],
      color: `white`
    }),
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => ({
      bg: [
        (0, import_utils14.isGray)(c) ? `${c}.50` : `${c}.100`,
        (0, import_utils14.shadeColor)(`${c}.300`, 58)(t, m)
      ],
      color: [`${c}.800`, (0, import_utils14.isGray)(c) ? `${c}.50` : `${c}.200`]
    }),
    outline: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => {
      const color = (0, import_core22.mode)(
        (0, import_utils14.getColor)(`${c}.500`)(t, m),
        (0, import_utils14.getColor)((0, import_utils14.isGray)(c) ? `${c}.100` : `${c}.400`)(t, m)
      )(m);
      return {
        color,
        boxShadow: `inset 0 0 0px 1px ${color}`
      };
    },
    "text-accent": ({ colorScheme: c = "gray" }) => ({
      color: [`${c}.500`, (0, import_utils14.isGray)(c) ? `${c}.100` : `${c}.400`],
      p: 0
    }),
    unstyled: {
      p: 0
    }
  },
  defaultProps: {
    variant: "subtle",
    colorScheme: "secondary"
  }
};

// src/components/markdown.ts
var Markdown = {
  baseStyle: {
    w: "full",
    "*:first-of-type": {
      mt: "0 !important"
    },
    "h1, h2, h3, h4, h5, h6": {
      mt: "24px",
      mb: "16px",
      fontWeight: "semibold",
      lineHeight: "1.25"
    },
    h1: {
      pb: ".3em",
      fontSize: "2em",
      borderBottom: "1px solid",
      borderBottomColor: "border"
    },
    h2: {
      pb: ".3em",
      fontSize: "1.5em",
      borderBottom: "1px solid",
      borderBottomColor: "border"
    },
    h3: {
      fontSize: "1.25em"
    },
    h4: {
      fontSize: "1em"
    },
    h5: {
      fontSize: "0.875em"
    },
    h6: {
      fontSize: "0.85em"
    },
    "p, blockquote, ul, ol, dl, table, pre, details": {
      mt: "0px",
      mb: "16px"
    },
    strong: { fontWeight: "semibold" },
    a: { color: "link", textDecoration: "none" },
    img: { maxW: "100%", boxSizing: "content-box" },
    blockquote: {
      px: "1em",
      color: ["blackAlpha.700", "whiteAlpha.600"],
      borderLeft: "0.25em solid",
      borderLeftColor: "border"
    },
    "blockquote>:last-child": { mb: 0 },
    ul: {
      pl: "2em",
      listStyleType: "disc"
    },
    "li + li": { mt: "0.25em" },
    "code:not(pre > *)": {
      py: "0.2em",
      px: "0.4em",
      m: 0,
      fontFamily: "mono",
      fontSize: "85%",
      bg: ["blackAlpha.200", "whiteAlpha.300"],
      rounded: "6px"
    },
    pre: { mt: "16px", fontSize: "92.5%", lineHeight: 1.45, rounded: "6px" },
    hr: { h: "0.25em", p: 0, my: "24px", bg: "border", border: 0 },
    table: {
      display: "block",
      w: "max-content",
      maxW: "100%",
      overflow: "auto"
    },
    tr: { borderTop: "1px solid", borderTopColor: "border" },
    th: {
      fontWeight: "semibold"
    },
    "th, td": {
      py: "6px",
      px: "13px",
      border: "1px solid",
      borderColor: "border"
    }
  }
};

// src/components/month-picker.ts
var import_core23 = require("@yamada-ui/core");
var MonthPicker = (0, import_core23.mergeMultiStyle)(DatePicker)();

// src/components/multi-autocomplete.ts
var import_core24 = require("@yamada-ui/core");
var MultiAutocomplete = (0, import_core24.mergeMultiStyle)(MultiSelect)();

// src/components/multi-date-picker.ts
var import_core25 = require("@yamada-ui/core");
var MultiDatePicker = (0, import_core25.mergeMultiStyle)(DatePicker)();

// src/components/native-table.ts
var import_utils15 = require("@yamada-ui/utils");
var NativeTable = {
  baseStyle: {
    container: {
      w: "100%"
    },
    table: {
      h: "100%",
      w: "100%",
      fontVariantNumeric: "lining-nums tabular-nums",
      borderCollapse: "collapse"
    },
    tr: {
      _disabled: {
        cursor: "not-allowed",
        opacity: 0.4,
        _hover: {
          bg: ["initial", "initial"]
        }
      }
    },
    th: {
      fontFamily: "heading",
      fontWeight: "semibold",
      textAlign: "start",
      color: ["blackAlpha.700", "whiteAlpha.600"],
      textTransform: "uppercase",
      letterSpacing: "wider"
    },
    td: {
      textAlign: "start"
    },
    caption: {
      fontFamily: "heading",
      fontWeight: "medium",
      textAlign: "center",
      color: ["blackAlpha.700", "whiteAlpha.600"]
    }
  },
  variants: {
    simple: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      withBorder,
      withColumnBorders,
      highlightOnSelected,
      highlightOnHover
    }) => ({
      table: {
        ...withBorder ? { borderWidth: "1px" } : {}
      },
      th: {
        borderBottomWidth: "1px",
        "&[data-is-numeric=true]": {
          textAlign: "end"
        },
        ...withColumnBorders ? { _notLast: { borderRightWidth: "1px" } } : {}
      },
      td: {
        borderBottomWidth: "1px",
        "&[data-is-numeric=true]": {
          textAlign: "end"
        },
        ...withColumnBorders ? { _notLast: { borderRightWidth: "1px" } } : {}
      },
      tbody: {
        tr: {
          ...highlightOnSelected ? {
            _selected: {
              bg: [
                (0, import_utils15.isGray)(c) ? (0, import_utils15.tintColor)(`${c}.50`, 72)(t, m) : (0, import_utils15.tintColor)(`${c}.50`, 64)(t, m),
                (0, import_utils15.transparentizeColor)(`${c}.300`, 0.04)(t, m)
              ]
            }
          } : {},
          ...highlightOnHover ? {
            cursor: "pointer",
            transitionProperty: "common",
            transitionDuration: "slow",
            _hover: {
              bg: [
                (0, import_utils15.transparentizeColor)(`${c}.400`, 0.08)(t, m),
                (0, import_utils15.transparentizeColor)(`${c}.300`, 0.12)(t, m)
              ]
            }
          } : {}
        }
      },
      tfoot: {
        tr: {
          _last: {
            th: { borderBottomWidth: 0 }
          }
        }
      }
    }),
    striped: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      withBorder,
      withColumnBorders,
      highlightOnHover
    }) => ({
      table: {
        ...withBorder ? { borderWidth: "1px" } : {}
      },
      th: {
        borderBottomWidth: "1px",
        "&[data-is-numeric=true]": {
          textAlign: "end"
        },
        ...withColumnBorders ? { _notLast: { borderRightWidth: "1px" } } : {}
      },
      td: {
        borderBottomWidth: "1px",
        "&[data-is-numeric=true]": {
          textAlign: "end"
        },
        ...withColumnBorders ? { _notLast: { borderRightWidth: "1px" } } : {}
      },
      tbody: {
        tr: {
          _odd: {
            bg: [
              (0, import_utils15.isGray)(c) ? (0, import_utils15.tintColor)(`${c}.50`, 72)(t, m) : (0, import_utils15.tintColor)(`${c}.50`, 64)(t, m),
              (0, import_utils15.transparentizeColor)(`${c}.300`, 0.04)(t, m)
            ]
          },
          ...highlightOnHover ? {
            cursor: "pointer",
            transitionProperty: "common",
            transitionDuration: "slow",
            _hover: {
              bg: [
                (0, import_utils15.transparentizeColor)(`${c}.400`, 0.08)(t, m),
                (0, import_utils15.transparentizeColor)(`${c}.300`, 0.12)(t, m)
              ]
            }
          } : {}
        }
      },
      tfoot: {
        tr: {
          _last: {
            th: { borderBottomWidth: 0 }
          }
        }
      }
    }),
    unstyled: {}
  },
  sizes: {
    sm: {
      container: {
        gap: 2
      },
      th: {
        px: 2,
        py: 1,
        fontSize: "xs",
        lineHeight: 5
      },
      td: {
        px: 2,
        py: 1,
        fontSize: "xs",
        lineHeight: 5
      },
      caption: {
        mt: 1,
        px: 2,
        py: 1,
        fontSize: "xs"
      }
    },
    md: {
      container: {
        gap: 4
      },
      th: {
        px: 3,
        py: 2,
        fontSize: "sm",
        lineHeight: 5
      },
      td: {
        px: 3,
        py: 2,
        fontSize: "sm",
        lineHeight: 5
      },
      caption: {
        mt: 2,
        px: 3,
        py: 2,
        fontSize: "sm"
      }
    },
    lg: {
      container: {
        gap: 6
      },
      th: {
        px: 4,
        py: 3,
        lineHeight: 6
      },
      td: {
        px: 4,
        py: 3,
        lineHeight: 6
      },
      caption: {
        mt: 3,
        px: 4,
        py: 3
      }
    },
    xl: {
      container: {
        gap: 8
      },
      th: {
        px: 6,
        py: 4,
        fontSize: "lg",
        lineHeight: 6
      },
      td: {
        px: 6,
        py: 4,
        fontSize: "lg",
        lineHeight: 6
      },
      caption: {
        mt: 4,
        px: 6,
        py: 4,
        fontSize: "lg"
      }
    }
  },
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
};

// src/components/number-input.ts
var import_core26 = require("@yamada-ui/core");
var NumberInput = (0, import_core26.mergeMultiStyle)(Input, {
  baseStyle: {
    stepper: {
      borderStart: "1px solid",
      borderColor: "inherit",
      color: ["blackAlpha.600", "whiteAlpha.700"],
      _hover: {
        bg: ["blackAlpha.100", "whiteAlpha.100"]
      },
      _active: {
        bg: ["blackAlpha.200", "whiteAlpha.200"]
      },
      _readOnly: { cursor: "auto" },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    }
  },
  variants: {
    flushed: {
      stepper: {
        bg: "transparent",
        border: "none",
        _hover: {
          bg: "transparent",
          opacity: 0.8
        },
        _active: {
          bg: "transparent",
          opacity: 0.7
        },
        _last: {
          border: "none"
        }
      }
    },
    unstyled: {
      stepper: {
        bg: "transparent",
        border: "none",
        _hover: {
          bg: "transparent"
        },
        _active: {
          bg: "transparent"
        },
        _last: {
          border: "none"
        }
      }
    }
  },
  sizes: {
    xs: {
      stepper: {
        fontSize: "xs",
        _first: {
          borderTopEndRadius: "sm"
        },
        _last: {
          borderBottomEndRadius: "sm",
          mt: "-1px",
          borderTop: "1px solid",
          borderColor: "inherit"
        }
      }
    },
    sm: {
      stepper: {
        fontSize: "sm",
        _first: {
          borderTopEndRadius: "md"
        },
        _last: {
          borderBottomEndRadius: "md",
          mt: "-1px",
          borderTop: "1px solid",
          borderColor: "inherit"
        }
      }
    },
    md: {
      stepper: {
        fontSize: "md",
        _first: {
          borderTopEndRadius: "md"
        },
        _last: {
          borderBottomEndRadius: "md",
          mt: "-1px",
          borderTop: "1px solid",
          borderColor: "inherit"
        }
      }
    },
    lg: {
      stepper: {
        fontSize: "lg",
        _first: {
          borderTopEndRadius: "md"
        },
        _last: {
          borderBottomEndRadius: "md",
          mt: "-1px",
          borderTop: "1px solid",
          borderColor: "inherit"
        }
      }
    }
  }
})({ omit: ["addon"] });

// src/components/pagination.ts
var import_utils16 = require("@yamada-ui/utils");
var Pagination = {
  baseStyle: {
    container: {
      _disabled: {
        cursor: "not-allowed"
      }
    },
    inner: {
      flex: 1
    },
    item: {
      px: 1,
      color: ["blackAlpha.600", "whiteAlpha.700"],
      rounded: "md",
      transitionProperty: "common",
      transitionDuration: "slower",
      _selected: { cursor: "default", pointerEvents: "none" },
      _focus: {
        outline: "none"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none"
      },
      _hover: {
        _disabled: {
          bg: ["initial", "initial"]
        }
      },
      _focusVisible: {
        boxShadow: "outline"
      }
    },
    first: {},
    last: {},
    prev: {},
    next: {},
    dots: { pointerEvents: "none" }
  },
  variants: {
    solid: ({ colorScheme: c = "primary" }) => ({
      item: {
        border: "1px solid",
        borderColor: "border",
        _selected: {
          bg: (0, import_utils16.isGray)(c) ? [`${c}.50`, `${c}.700`] : [(0, import_utils16.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
          borderColor: (0, import_utils16.isGray)(c) ? [`${c}.50`, `${c}.700`] : [(0, import_utils16.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
          color: [(0, import_utils16.isGray)(c) || (0, import_utils16.isAccessible)(c) ? `black` : `white`, `white`],
          _hover: {
            bg: (0, import_utils16.isGray)(c) ? [`${c}.100`, `${c}.800`] : [(0, import_utils16.isAccessible)(c) ? `${c}.500` : `${c}.600`, `${c}.700`]
          }
        },
        _hover: {
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _disabled: {
            bg: ["initial", "initial"]
          }
        },
        _active: {
          bg: ["blackAlpha.100", "whiteAlpha.100"]
        }
      },
      dots: {
        border: "0"
      }
    }),
    outline: ({ colorScheme: c = "primary" }) => {
      return {
        item: {
          border: "1px solid",
          borderColor: "border",
          _selected: {
            bg: "transparent",
            borderColor: [`${c}.600`, `${c}.500`],
            color: (0, import_utils16.isGray)(c) ? ["blackAlpha.800", "whiteAlpha.700"] : [`${c}.600`, `${c}.500`],
            _hover: {
              bg: ["transparent", "transparent"]
            }
          },
          _hover: {
            bg: ["blackAlpha.50", "whiteAlpha.50"],
            _disabled: {
              bg: ["initial", "initial"]
            }
          },
          _active: {
            bg: ["blackAlpha.100", "whiteAlpha.100"]
          }
        },
        dots: {
          border: "0"
        }
      };
    },
    ghost: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => {
      return {
        item: {
          _selected: {
            bg: (0, import_utils16.isGray)(c) ? void 0 : "transparent",
            fontWeight: "semibold",
            color: (0, import_utils16.isGray)(c) ? ["blackAlpha.800", "whiteAlpha.700"] : [`${c}.600`, `${c}.500`]
          },
          _hover: {
            bg: [`${c}.50`, (0, import_utils16.transparentizeColor)(`${c}.600`, 0.12)(t, m)]
          },
          _active: {
            bg: (0, import_utils16.isGray)(c) ? [`${c}.300`, `whiteAlpha.300`] : [`${c}.200`, (0, import_utils16.transparentizeColor)(`${c}.200`, 0.24)(t, m)]
          }
        }
      };
    },
    unstyled: {
      container: { gap: 0 },
      inner: { gap: 0 },
      item: { bg: "none", color: "inherit", minW: "auto", minH: "auto" },
      _ripple: { display: "none" }
    }
  },
  sizes: {
    xs: {
      container: {
        gap: "xs"
      },
      inner: {
        gap: "xs"
      },
      item: {
        minW: 6,
        minH: 6,
        fontSize: "xs"
      }
    },
    sm: {
      container: {
        gap: "xs"
      },
      inner: {
        gap: "xs"
      },
      item: {
        minW: 7,
        minH: 7,
        fontSize: "sm"
      }
    },
    md: {
      container: {
        gap: "sm"
      },
      inner: {
        gap: "sm"
      },
      item: {
        minW: 8,
        minH: 8,
        fontSize: "md"
      }
    },
    lg: {
      container: {
        gap: "sm"
      },
      inner: {
        gap: "sm"
      },
      item: {
        minW: 10,
        minH: 10,
        fontSize: "lg"
      }
    },
    xl: {
      container: {
        gap: "md"
      },
      inner: {
        gap: "md"
      },
      item: {
        minW: 12,
        minH: 12,
        fontSize: "xl"
      }
    }
  },
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "primary"
  }
};

// src/components/paging-table.ts
var import_core28 = require("@yamada-ui/core");

// src/components/table.ts
var import_core27 = require("@yamada-ui/core");
var Table = (0, import_core27.mergeMultiStyle)(NativeTable, {
  baseStyle: {
    sortIcon: {}
  },
  sizes: {
    sm: {
      sortIcon: {
        right: 2
      }
    },
    md: {
      sortIcon: {
        right: 3
      }
    },
    lg: {
      sortIcon: {
        right: 4
      }
    },
    xl: {
      sortIcon: {
        right: 6
      }
    }
  }
})();

// src/components/paging-table.ts
var PagingTable = (0, import_core28.mergeMultiStyle)(Table, {
  baseStyle: {
    pagingControl: {
      gridTemplateColumns: "1fr 5fr 1fr"
    }
  },
  sizes: {
    sm: {
      pagingControl: {
        gap: 2
      }
    },
    md: {
      pagingControl: {
        gap: 4
      }
    },
    lg: {
      pagingControl: {
        gap: 6
      }
    },
    xl: {
      pagingControl: {
        gap: 8
      }
    }
  }
})();

// src/components/pin-input.ts
var import_core29 = require("@yamada-ui/core");
var PinInput = (0, import_core29.mergeMultiStyle)(Input, {
  baseStyle: {
    container: {
      gap: "sm"
    },
    field: {
      textAlign: "center"
    }
  },
  variants: {
    unstyled: {
      field: {
        h: "auto"
      }
    }
  },
  sizes: {
    xs: {
      field: {
        fontSize: "xs",
        boxSize: "6",
        rounded: "sm"
      }
    },
    sm: {
      field: {
        fontSize: "sm",
        boxSize: "8",
        rounded: "md"
      }
    },
    md: {
      field: {
        fontSize: "md",
        boxSize: "10",
        rounded: "md"
      }
    },
    lg: {
      field: {
        fontSize: "lg",
        boxSize: "12",
        rounded: "md"
      }
    }
  }
})({ omit: ["addon", "sizes"] });

// src/components/popover.ts
var Popover = {
  baseStyle: {
    container: {
      rounded: "md",
      bg: ["white", "black"],
      border: "1px solid",
      borderColor: ["blackAlpha.200", "whiteAlpha.100"],
      color: "inherit",
      boxShadow: ["lg", "dark-lg"],
      zIndex: "guldo",
      _focusVisible: {
        outline: 0,
        boxShadow: "outline"
      }
    },
    closeButton: {
      top: "2",
      right: "2"
    },
    header: {
      p: "sm",
      gap: "sm",
      fontWeight: "semibold",
      borderBottom: "1px solid",
      borderColor: "inherit"
    },
    body: {
      my: "sm",
      px: "sm",
      gap: "sm"
    },
    footer: {
      p: "sm",
      gap: "sm",
      borderTop: "1px solid",
      borderColor: "inherit"
    }
  }
};

// src/components/progress.ts
var import_core30 = require("@yamada-ui/core");
var import_utils17 = require("@yamada-ui/utils");
var Progress = {
  baseStyle: {
    track: {
      bg: "border"
    },
    filledTrack: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary",
      hasStripe,
      isAnimation,
      filledTrackColor: f
    }) => {
      hasStripe = !isAnimation && hasStripe;
      const color = (0, import_core30.mode)("rgba(255, 255, 255, 0.15)", "rgba(0,0,0,0.1)")(m);
      const bgColor = f ? (0, import_utils17.isArray)(f) ? (0, import_core30.mode)((0, import_utils17.getColor)(f[0], f[0])(t, m), (0, import_utils17.getColor)(f[1], f[1])(t, m))(m) : (0, import_utils17.getColor)(f, f)(t, m) : (0, import_utils17.getColor)(`${c}.500`)(t, m);
      const bgImage = hasStripe ? `linear-gradient(
            45deg,
            ${color} 25%,
            transparent 25%,
            transparent 50%,
            ${color} 50%,
            ${color} 75%,
            transparent 75%,
            transparent
          )` : isAnimation ? `linear-gradient(
            to right,
            transparent 0%,
            ${bgColor} 50%,
            transparent 100%
          )` : void 0;
      return {
        transitionProperty: "common",
        transitionDuration: "slow",
        bgImage,
        ...hasStripe ? { bgSize: "1rem 1rem" } : {},
        ...!isAnimation ? { bgColor } : {}
      };
    }
  },
  sizes: {
    xs: {
      track: {
        h: "1"
      }
    },
    sm: {
      track: {
        h: "2"
      }
    },
    md: {
      track: {
        h: "3"
      }
    },
    lg: {
      track: {
        h: "4"
      }
    }
  },
  defaultProps: {
    size: "md",
    colorScheme: "primary"
  }
};

// src/components/radar-chart.ts
var import_core31 = require("@yamada-ui/core");
var RadarChart = (0, import_core31.mergeMultiStyle)(LineChart, {
  baseStyle: {
    radar: {},
    polarGrid: {
      stroke: ["blackAlpha.400", "whiteAlpha.400"],
      strokeWidth: 1
    },
    polarAngleAxis: {},
    polarAngleAxisTick: {
      "& > text": {
        fill: ["blackAlpha.700", "whiteAlpha.600"],
        fontSize: "xs"
      }
    },
    polarRadiusAxis: {
      "& > line": {
        stroke: ["blackAlpha.400", "whiteAlpha.400"]
      }
    },
    polarRadiusAxisTick: {
      "& > text": {
        fill: ["blackAlpha.700", "whiteAlpha.600"],
        fontSize: "xs"
      }
    }
  },
  sizes: {
    sm: {
      container: {
        w: "full"
      }
    },
    md: {
      container: {
        w: "full"
      }
    },
    lg: {
      container: {
        w: "full"
      }
    },
    full: {
      container: {
        w: "full"
      }
    }
  }
})({ omit: ["line", "grid"] });

// src/components/radio.ts
var Radio = {
  baseStyle: {
    container: {
      _readOnly: { cursor: "auto" },
      _disabled: { cursor: "not-allowed" }
    },
    icon: ({ colorScheme: c = "primary" }) => ({
      transitionProperty: "box-shadow",
      transitionDuration: "normal",
      border: "2px solid",
      borderColor: "inherit",
      rounded: "full",
      color: "white",
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      _checked: {
        _before: {
          content: `""`,
          display: "inline-block",
          rounded: "full",
          bg: [`${c}.500`, `${c}.600`]
        },
        _hover: {
          _before: {
            bg: [`${c}.600`, `${c}.700`]
          }
        },
        _disabled: {
          _before: {
            bg: ["blackAlpha.400", "whiteAlpha.300"]
          },
          _dark: {
            _before: {
              bg: "whiteAlpha.300"
            }
          }
        }
      },
      _disabled: {
        bg: ["blackAlpha.200", "whiteAlpha.100"]
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _invalid: {
        borderColor: ["danger.500", "danger.400"],
        _focusVisible: {
          borderColor: ["inherit", "inherit"]
        }
      }
    }),
    label: {
      userSelect: "none",
      _disabled: { opacity: 0.4 }
    }
  },
  sizes: {
    sm: {
      icon: {
        boxSize: "3.5",
        _before: {
          boxSize: "1.5"
        }
      },
      label: { fontSize: "sm" }
    },
    md: {
      icon: {
        boxSize: "4",
        _before: {
          boxSize: "2"
        }
      },
      label: { fontSize: "md" }
    },
    lg: {
      icon: {
        boxSize: "5",
        _before: {
          boxSize: "3"
        }
      },
      label: { fontSize: "lg" }
    }
  },
  defaultProps: {
    size: "md",
    colorScheme: "primary"
  }
};

// src/components/range-date-picker.ts
var import_core32 = require("@yamada-ui/core");
var RangeDatePicker = (0, import_core32.mergeMultiStyle)(DatePicker)();

// src/components/range-slider.ts
var import_core33 = require("@yamada-ui/core");

// src/components/slider.ts
var import_utils18 = require("@yamada-ui/utils");
var Slider = {
  baseStyle: {
    container: ({ orientation: o }) => ({
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      _readOnly: { cursor: "auto" },
      _disabled: {
        opacity: 0.6,
        cursor: "not-allowed"
      },
      ...o === "vertical" ? { h: "100%" } : { w: "100%" }
    }),
    track: {
      overflow: "hidden",
      rounded: "sm",
      bg: "border",
      _disabled: {
        bg: ["blackAlpha.200", "whiteAlpha.400"]
      }
    },
    filledTrack: ({ colorScheme: c = "primary" }) => ({
      w: "inherit",
      h: "inherit",
      bg: [`${c}.500`, `${c}.400`]
    }),
    mark: {
      fontSize: "sm"
    },
    thumb: ({ theme: t, colorMode: m, orientation: o }) => ({
      position: "absolute",
      zIndex: "yamcha",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      outline: 0,
      rounded: "full",
      bg: "white",
      boxShadow: "base",
      border: "1px solid",
      borderColor: "transparent",
      transitionProperty: "transform",
      transitionDuration: "normal",
      _focusVisible: {
        boxShadow: "outline"
      },
      _disabled: {
        bg: [(0, import_utils18.tintColor)("black", 72)(t, m), (0, import_utils18.shadeColor)("white", 64)]
      },
      ...o === "vertical" ? {
        left: "50%",
        transform: `translateX(-50%)`,
        _active: {
          transform: `translateX(-50%) scale(1.15)`
        }
      } : {
        top: "50%",
        transform: `translateY(-50%)`,
        _active: {
          transform: `translateY(-50%) scale(1.15)`
        }
      }
    })
  },
  sizes: {
    sm: ({ orientation: o }) => ({
      track: o === "vertical" ? { w: "0.5" } : { h: "0.5" },
      thumb: { boxSize: "2.5" },
      mark: o === "vertical" ? { ml: "2" } : { mt: "2" }
    }),
    md: ({ orientation: o }) => ({
      track: o === "vertical" ? { w: "1" } : { h: "1" },
      thumb: { boxSize: "3.5" },
      mark: o === "vertical" ? { ml: "3" } : { mt: "3" }
    }),
    lg: ({ orientation: o }) => ({
      track: o === "vertical" ? { w: "1.5" } : { h: "1.5" },
      thumb: { boxSize: "5" },
      mark: o === "vertical" ? { ml: "4" } : { mt: "4" }
    })
  },
  defaultProps: {
    size: "md",
    colorScheme: "primary"
  }
};

// src/components/range-slider.ts
var RangeSlider = (0, import_core33.mergeMultiStyle)(Slider)();

// src/components/rating.ts
var Rating = {
  baseStyle: ({ colorScheme: c = "yellow" }) => ({
    container: {
      w: "max-content"
    },
    group: {
      position: "relative"
    },
    item: {
      cursor: "pointer",
      rounded: "sm",
      color: ["blackAlpha.300", "whiteAlpha.300"],
      outline: "none",
      _notLast: {
        position: "absolute",
        top: 0,
        left: 0
      },
      _readOnly: {
        cursor: "default"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _filled: {
        color: [`${c}.500`, `${c}.600`]
      }
    },
    icon: {
      fill: "currentColor"
    }
  }),
  sizes: {
    xs: {
      icon: {
        fontSize: "md"
      }
    },
    sm: {
      icon: {
        fontSize: "lg"
      }
    },
    md: {
      icon: {
        fontSize: "xl"
      }
    },
    lg: {
      icon: {
        fontSize: "2xl"
      }
    },
    xl: {
      icon: {
        fontSize: "3xl"
      }
    }
  },
  defaultProps: {
    size: "md",
    colorScheme: "yellow"
  }
};

// src/components/reorder.ts
var Reorder = {
  baseStyle: {
    container: {
      w: "100%"
    },
    item: {
      w: "100%",
      h: "100%",
      _selected: {
        boxShadow: ["md", "dark-md"]
      }
    },
    trigger: {
      color: ["blackAlpha.300", "whiteAlpha.300"]
    }
  },
  variants: {
    elevated: {
      item: {
        bg: ["white", "black"],
        boxShadow: ["base", "dark-md"]
      }
    },
    outline: {
      item: {
        bg: ["white", "black"],
        borderWidth: "1px"
      }
    },
    unstyled: {
      item: { rounded: 0, p: 0, _selected: { boxShadow: "unset" } }
    }
  },
  sizes: {
    sm: {
      item: { rounded: "base", p: "sm" }
    },
    md: {
      item: { rounded: "md", p: "md" }
    },
    normal: {
      item: { rounded: "lg", p: "normal" }
    },
    lg: {
      item: { rounded: "xl", p: "lg" }
    }
  },
  defaultProps: {
    variant: "outline",
    size: "md"
  }
};

// src/components/resizable.ts
var import_utils19 = require("@yamada-ui/utils");
var Resizable = {
  baseStyle: ({ direction: d }) => ({
    container: {},
    item: {},
    trigger: {},
    icon: {
      color: ["blackAlpha.600", "whiteAlpha.700"],
      rotate: d === "vertical" ? "90deg" : "0deg"
    }
  }),
  variants: {
    border: ({ direction: d }) => ({
      trigger: {
        bg: "border",
        ...d === "vertical" ? { h: "px" } : { w: "px" },
        _focus: {
          outline: "none"
        },
        _focusVisible: {
          outline: "none",
          bg: "focus"
        },
        _after: {
          content: "''",
          position: "absolute",
          ...d === "vertical" ? { left: "0", right: "0", transform: "translateY(-50%)" } : { top: "0", bottom: "0", transform: "translateX(-50%)" },
          ...d === "vertical" ? { h: "2" } : { w: "2" }
        }
      },
      icon: {
        p: "1",
        bg: "border",
        rounded: "full"
      }
    }),
    spacer: ({
      direction: d,
      theme: t,
      colorMode: m,
      colorScheme: c = "gray"
    }) => ({
      trigger: {
        ...d === "vertical" ? { p: "1" } : { p: "1" },
        _after: {
          transitionProperty: "common",
          transitionDuration: "slower",
          bg: "transparent",
          content: "''",
          display: "block",
          rounded: "full",
          ...d === "vertical" ? { w: "full", h: "2" } : { w: "2", h: "full" }
        },
        _dark: {
          _after: {
            bg: "transparent"
          }
        },
        _focus: {
          outline: "none"
        },
        _active: {
          _after: {
            bg: (0, import_utils19.isGray)(c) ? "border" : `${c}.50`
          },
          _dark: {
            _after: {
              bg: (0, import_utils19.isGray)(c) ? "border" : (0, import_utils19.transparentizeColor)(`${c}.600`, 0.12)(t, m)
            }
          }
        },
        _focusVisible: {
          outline: "none",
          _after: {
            bg: (0, import_utils19.isGray)(c) ? "border" : `${c}.100`
          },
          _dark: {
            _after: {
              bg: (0, import_utils19.isGray)(c) ? "border" : (0, import_utils19.transparentizeColor)(`${c}.600`, 0.24)(t, m)
            }
          }
        }
      },
      icon: {
        transitionProperty: "common",
        transitionDuration: "slower",
        _active: {
          color: ["transparent", "transparent"]
        }
      }
    }),
    unstyled: ({ direction: d }) => ({
      trigger: {
        _after: {
          content: "''",
          position: "absolute",
          ...d === "vertical" ? { left: "0", right: "0", transform: "translateY(-50%)" } : { top: "0", bottom: "0", transform: "translateX(-50%)" },
          ...d === "vertical" ? { h: "2" } : { w: "2" }
        }
      }
    })
  },
  defaultProps: {
    variant: "border",
    colorScheme: "gray"
  }
};

// src/components/saturation-slider.ts
var SaturationSlider = {
  baseStyle: {
    container: {
      w: "full",
      rounded: "md",
      cursor: "pointer",
      _readOnly: { cursor: "auto" },
      _disabled: {
        opacity: 0.6,
        cursor: "not-allowed"
      }
    },
    inner: {
      rounded: "md"
    },
    overlay: {
      rounded: "md"
    },
    track: {},
    thumb: {
      rounded: "full",
      outline: 0,
      borderWidth: "3px",
      borderColor: "whiteAlpha.950",
      boxShadow: ["md", "dark-md"],
      transitionProperty: "transform",
      transitionDuration: "normal",
      _active: {
        transform: `scale(1.15)`
      },
      _focusVisible: {
        boxShadow: ["outline", "outline"]
      }
    }
  },
  sizes: {
    sm: {
      container: { maxW: "xs" },
      thumb: { boxSize: "3" }
    },
    md: {
      container: { maxW: "sm" },
      thumb: { boxSize: "4" }
    },
    lg: {
      container: { maxW: "md" },
      thumb: { boxSize: "5" }
    },
    full: {
      container: { maxW: "full" },
      thumb: { boxSize: "5" }
    }
  },
  defaultProps: {
    size: "md"
  }
};

// src/components/scroll-area.ts
var ScrollArea = {
  baseStyle: {
    outline: 0,
    _focusVisible: {
      boxShadow: "inline"
    },
    _scrollbar: {
      w: "3",
      h: "3"
    },
    _scrollbarTrack: {
      bg: "transparent"
    },
    _scrollbarThumb: {
      bg: "blackAlpha.600",
      bgClip: "padding-box",
      border: "3px solid transparent",
      rounded: "full",
      _nativeHover: {
        bg: "blackAlpha.800",
        bgClip: "padding-box"
      }
    },
    _dark: {
      _scrollbarThumb: {
        bg: "whiteAlpha.600",
        bgClip: "padding-box",
        _nativeHover: {
          bg: "whiteAlpha.800",
          bgClip: "padding-box"
        }
      }
    },
    _scrollbarButton: {},
    _scrollbarCorner: {
      bg: "transparent"
    },
    "@-moz-document url-prefix()": {
      scrollbarColor: "whiteAlpha.600 transparent",
      _light: {
        scrollbarColor: "whiteAlpha.600 transparent"
      },
      _dark: {
        scrollbarColor: "whiteAlpha.600 transparent"
      }
    }
  }
};

// src/components/segmented-control.ts
var import_utils20 = require("@yamada-ui/utils");
var SegmentedControl = {
  baseStyle: {
    container: {
      p: "1",
      bg: ["blackAlpha.100", "whiteAlpha.50"],
      _readOnly: { cursor: "default" },
      _disabled: { cursor: "not-allowed" }
    },
    cursor: {
      boxShadow: ["md", "dark-md"]
    },
    button: {
      transitionProperty: "common",
      transitionDuration: "ultra-slow",
      fontWeight: "medium",
      whiteSpace: "nowrap",
      color: ["blackAlpha.800", "whiteAlpha.800"],
      _hover: {
        opacity: 0.7,
        _checked: {
          opacity: 1
        }
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _readOnly: { cursor: "default" },
      _disabled: { opacity: 0.4, cursor: "not-allowed" }
    }
  },
  variants: {
    basic: ({ colorScheme: c = "gray" }) => ({
      container: {
        rounded: "lg"
      },
      cursor: {
        bg: (0, import_utils20.isGray)(c) ? [`whiteAlpha.800`, `${c}.700`] : [(0, import_utils20.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
        color: [(0, import_utils20.isGray)(c) || (0, import_utils20.isAccessible)(c) ? `black` : `white`, `white`],
        rounded: "md"
      },
      button: {
        rounded: "md",
        _checked: {
          color: [(0, import_utils20.isGray)(c) || (0, import_utils20.isAccessible)(c) ? `black` : `white`, `white`]
        }
      }
    }),
    rounded: ({ colorScheme: c = "gray" }) => ({
      container: {
        rounded: "full"
      },
      cursor: {
        bg: (0, import_utils20.isGray)(c) ? [`whiteAlpha.800`, `${c}.700`] : [(0, import_utils20.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
        color: [(0, import_utils20.isGray)(c) || (0, import_utils20.isAccessible)(c) ? `black` : `white`, `white`],
        rounded: "full"
      },
      button: {
        rounded: "full",
        _checked: {
          color: [(0, import_utils20.isGray)(c) || (0, import_utils20.isAccessible)(c) ? `black` : `white`, `white`]
        }
      }
    })
  },
  sizes: {
    sm: {
      container: { minW: "xs" },
      button: { py: "1", px: "2", fontSize: "sm" }
    },
    md: {
      container: { minW: "sm" },
      button: { py: "1.5", px: "3", fontSize: "md" }
    },
    lg: {
      container: { minW: "md" },
      button: { py: "2", px: "4" }
    }
  },
  defaultProps: {
    variant: "basic",
    size: "md"
  }
};

// src/components/skeleton.ts
var Skeleton = {
  baseStyle: {
    background: ["blackAlpha.300", "whiteAlpha.300"],
    borderColor: ["blackAlpha.400", "whiteAlpha.400"],
    opacity: 0.7,
    borderRadius: "sm"
  },
  defaultProps: {
    startColor: ["blackAlpha.300", "whiteAlpha.300"],
    endColor: ["blackAlpha.400", "whiteAlpha.400"]
  }
};

// src/components/stat.ts
var Stat = {
  baseStyle: {
    container: {},
    label: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontWeight: "medium"
    },
    number: ({ colorScheme: c }) => ({
      fontFeatureSettings: '"pnum"',
      fontVariantNumeric: "proportional-nums",
      verticalAlign: "baseline",
      fontSize: "5xl",
      color: c ? [`${c}.500`, `${c}.600`] : ["blackAlpha.800", "whiteAlpha.700"],
      fontWeight: "extrabold"
    }),
    helperMessage: {
      fontSize: "sm",
      color: ["blackAlpha.700", "whiteAlpha.600"]
    },
    icon: {
      marginEnd: "1",
      w: "3.5",
      h: "3.5",
      verticalAlign: "middle",
      var: [
        {
          __prefix: "ui",
          name: "increase",
          token: "colors",
          value: "success.400"
        },
        {
          __prefix: "ui",
          name: "decrease",
          token: "colors",
          value: "danger.400"
        }
      ]
    }
  },
  defaultProps: {}
};

// src/components/stepper.ts
var import_utils21 = require("@yamada-ui/utils");
var Stepper = {
  baseStyle: ({ colorScheme: c = "primary" }) => ({
    stepper: {
      w: "100%",
      display: "flex",
      justifyContent: "space-between",
      _vertical: {
        flexDirection: "column",
        alignItems: "flex-start",
        gap: 0
      },
      _horizontal: {
        flexDirection: "row",
        alignItems: "center",
        gap: 4
      }
    },
    step: {
      position: "relative",
      display: "flex",
      gap: 2,
      flex: 1,
      flexShrink: 0,
      _horizontal: {
        alignItems: "center"
      },
      "&:last-of-type:not([data-stretch])": {
        flex: "initial"
      }
    },
    status: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      flexShrink: 0,
      rounded: "full",
      transitionProperty: "common",
      transitionDuration: "slow",
      "&[data-status=active]": {
        borderWidth: "2px",
        borderColor: [`${c}.500`, `${c}.400`]
      },
      "&[data-status=complete]": {
        bg: [`${c}.500`, `${c}.400`],
        color: ["white", "black"]
      },
      "&[data-status=incomplete]": {
        borderWidth: "2px"
      }
    },
    icon: {
      flexShrink: 0
    },
    number: {},
    title: {
      fontWeight: "medium"
    },
    description: {
      color: ["blackAlpha.700", "whiteAlpha.600"]
    },
    separator: {
      bg: "border",
      flex: 1,
      transitionProperty: "common",
      transitionDuration: "slow",
      "&[data-status=complete]": {
        bg: [`${c}.500`, `${c}.400`]
      },
      _vertical: {
        position: "absolute",
        w: 0.5,
        h: "100%"
      },
      _horizontal: {
        w: "100%",
        h: 0.5,
        ms: 2
      }
    }
  }),
  sizes: {
    sm: ({ theme: t }) => ({
      title: {
        fontSize: "sm"
      },
      description: {
        fontSize: "xs"
      },
      status: {
        w: 6,
        h: 6
      },
      icon: {
        w: 4,
        h: 4
      },
      number: {
        fontSize: "sm"
      },
      separator: {
        maxHeight: `calc(100% - ${(0, import_utils21.getMemoizedObject)(t, "sizes.6")} - 8px)`,
        top: `calc(${(0, import_utils21.getMemoizedObject)(t, "sizes.6")} + 4px)`,
        insetStart: `calc(${(0, import_utils21.getMemoizedObject)(t, "sizes.6")} / 2 - 1px)`
      }
    }),
    md: ({ theme: t }) => ({
      title: {
        fontSize: "md"
      },
      description: {
        fontSize: "sn"
      },
      status: {
        w: 8,
        h: 8
      },
      icon: {
        w: 5,
        h: 5
      },
      number: {
        fontSize: "md"
      },
      separator: {
        maxHeight: `calc(100% - ${(0, import_utils21.getMemoizedObject)(t, "sizes.8")} - 8px)`,
        top: `calc(${(0, import_utils21.getMemoizedObject)(t, "sizes.8")} + 4px)`,
        insetStart: `calc(${(0, import_utils21.getMemoizedObject)(t, "sizes.8")} / 2 - 1px)`
      }
    }),
    lg: ({ theme: t }) => ({
      title: {
        fontSize: "lg"
      },
      description: {
        fontSize: "md"
      },
      status: {
        w: 10,
        h: 10
      },
      icon: {
        w: 6,
        h: 6
      },
      number: {
        fontSize: "lg"
      },
      separator: {
        maxHeight: `calc(100% - ${(0, import_utils21.getMemoizedObject)(t, "sizes.10")} - 8px)`,
        top: `calc(${(0, import_utils21.getMemoizedObject)(t, "sizes.10")} + 4px)`,
        insetStart: `calc(${(0, import_utils21.getMemoizedObject)(t, "sizes.10")} / 2 - 1px)`
      }
    })
  },
  defaultProps: {
    size: "md",
    colorScheme: "primary"
  }
};

// src/components/switch.ts
var import_utils22 = require("@yamada-ui/utils");
var Switch = {
  baseStyle: {
    container: {
      _readOnly: { cursor: "auto" },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    },
    track: {
      rounded: "full",
      bg: ["blackAlpha.400", "whiteAlpha.300"],
      transitionProperty: "common",
      transitionDuration: "fast",
      _checked: {
        justifyContent: "flex-end"
      },
      _focusVisible: {
        boxShadow: "outline"
      }
    },
    thumb: {
      rounded: "inherit",
      bg: "white"
    },
    label: {
      userSelect: "none"
    }
  },
  variants: {
    thick: ({ colorScheme: c = "primary" }) => ({
      track: {
        p: "1",
        _checked: {
          bg: [`${c}.500`, `${c}.600`]
        }
      }
    }),
    thin: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
      track: {
        _checked: {
          bg: [
            (0, import_utils22.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils22.shadeColor)(`${c}.300`, 58)(t, m)
          ]
        }
      },
      thumb: {
        boxShadow: "dark-md",
        _checked: {
          bg: [`${c}.500`, `${c}.600`]
        }
      }
    })
  },
  sizes: {
    sm: ({ variant: v }) => ({
      track: {
        w: "6",
        h: v === "thin" ? "2" : void 0
      },
      thumb: {
        w: "3",
        h: "3"
      },
      label: { fontSize: "sm" }
    }),
    md: ({ variant: v }) => ({
      track: {
        w: "8",
        h: v === "thin" ? "3" : void 0
      },
      thumb: {
        w: "4",
        h: "4"
      },
      label: { fontSize: "md" }
    }),
    lg: ({ variant: v }) => ({
      track: {
        w: "10",
        h: v === "thin" ? "4" : void 0
      },
      thumb: {
        w: "5",
        h: "5"
      },
      label: { fontSize: "lg" }
    })
  },
  defaultProps: {
    size: "md",
    variant: "thick",
    colorScheme: "primary"
  }
};

// src/components/tabs.ts
var import_core34 = require("@yamada-ui/core");
var import_utils23 = require("@yamada-ui/utils");
var Tabs = {
  baseStyle: {
    container: ({ orientation }) => ({
      display: "flex",
      flexDirection: orientation === "vertical" ? "row" : "column"
    }),
    tabList: ({ align, orientation }) => ({
      flexDirection: orientation === "vertical" ? "column" : "row",
      justifyContent: align === "center" ? align : `flex-${align}`
    }),
    tab: ({ isFitted }) => ({
      flex: isFitted ? 1 : void 0,
      whiteSpace: "nowrap",
      transitionProperty: "common",
      transitionDuration: "normal",
      _hover: { opacity: 0.7 },
      _focusVisible: {
        zIndex: "yamcha",
        boxShadow: "outline"
      },
      _selected: { _hover: { opacity: 1 } },
      _disabled: {
        cursor: "not-allowed",
        opacity: 0.4
      }
    }),
    tabPanels: {},
    tabPanel: {
      p: "md"
    }
  },
  variants: {
    line: ({ colorScheme: c = "primary", orientation }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "transparent",
          _selected: {
            color: [`${c}.500`, (0, import_utils23.isGray)(c) ? `${c}.100` : `${c}.400`],
            borderColor: "currentColor"
          },
          ...isVertical ? {
            borderEndWidth: "1px",
            borderEndStyle: "solid",
            me: "-1px"
          } : {
            borderBottomWidth: "1px",
            borderBottomStyle: "solid",
            mb: "-1px"
          },
          _ripple: { display: "none" }
        }
      };
    },
    sticky: ({ colorScheme: c = "primary", orientation }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "transparent",
          _selected: {
            color: [`${c}.500`, (0, import_utils23.isGray)(c) ? `${c}.100` : `${c}.400`],
            borderColor: "inherit",
            ...isVertical ? { borderEndColor: ["white", "black"] } : { borderBottomColor: ["white", "black"] }
          },
          ...isVertical ? {
            roundedLeft: "md",
            borderWidth: "1px",
            borderStyle: "solid",
            me: "-2px"
          } : {
            roundedTop: "md",
            borderWidth: "1px",
            borderStyle: "solid",
            mb: "-2px"
          },
          _ripple: { display: "none" }
        }
      };
    },
    "sticky-subtle": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary",
      orientation
    }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "inherit",
          _notLast: {
            ...isVertical ? { borderBottom: "none" } : { borderEnd: "none" }
          },
          _selected: {
            bg: [
              (0, import_utils23.isGray)(c) ? `${c}.50` : `${c}.100`,
              (0, import_utils23.shadeColor)(`${c}.300`, 58)(t, m)
            ],
            color: [`${c}.800`, (0, import_utils23.isGray)(c) ? `${c}.50` : `${c}.200`]
          },
          ...isVertical ? {
            borderWidth: "1px",
            borderStyle: "solid",
            me: "-1px"
          } : {
            borderWidth: "1px",
            borderStyle: "solid",
            mb: "-1px"
          }
        }
      };
    },
    "sticky-solid": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary",
      orientation
    }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "inherit",
          _notLast: {
            ...isVertical ? { borderBottom: "none" } : { borderEnd: "none" }
          },
          _selected: {
            bg: [
              (0, import_utils23.tintColor)(`${c}.600`, 24)(t, m),
              (0, import_utils23.shadeColor)(`${c}.600`, 16)(t, m)
            ],
            color: `white`
          },
          ...isVertical ? {
            borderWidth: "1px",
            borderStyle: "solid",
            me: "-1px"
          } : {
            borderWidth: "1px",
            borderStyle: "solid",
            mb: "-1px"
          }
        }
      };
    },
    rounded: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => {
      const color = (0, import_core34.mode)(
        (0, import_utils23.getColor)(`${c}.500`)(t, m),
        (0, import_utils23.getColor)((0, import_utils23.isGray)(c) ? `${c}.100` : `${c}.400`)(t, m)
      )(m);
      return {
        tabList: { gap: "sm" },
        tab: {
          borderRadius: "full",
          _selected: {
            color,
            boxShadow: `inset 0 0 0px 1px ${color}`
          }
        }
      };
    },
    "rounded-subtle": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary"
    }) => ({
      tabList: { gap: "sm" },
      tab: {
        borderRadius: "full",
        _selected: {
          bg: [
            (0, import_utils23.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils23.shadeColor)(`${c}.300`, 58)(t, m)
          ],
          color: [`${c}.800`, (0, import_utils23.isGray)(c) ? `${c}.50` : `${c}.200`]
        }
      }
    }),
    "rounded-solid": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary"
    }) => ({
      tabList: { gap: "sm" },
      tab: {
        borderRadius: "full",
        _selected: {
          bg: [
            (0, import_utils23.tintColor)(`${c}.600`, 24)(t, m),
            (0, import_utils23.shadeColor)(`${c}.600`, 16)(t, m)
          ],
          color: `white`
        }
      }
    }),
    unstyled: {
      tab: {
        _hover: { opacity: "inherit" },
        _ripple: { display: "none" }
      }
    }
  },
  sizes: {
    sm: {
      tab: {
        py: 1,
        px: 3,
        fontSize: "sm"
      }
    },
    md: {
      tab: {
        fontSize: "md",
        py: 2,
        px: 4
      }
    },
    lg: {
      tab: {
        fontSize: "lg",
        py: 3,
        px: 5
      }
    }
  },
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "primary"
  }
};

// src/components/tag.ts
var import_core35 = require("@yamada-ui/core");
var import_utils24 = require("@yamada-ui/utils");
var Tag = {
  baseStyle: {
    container: {
      outline: 0,
      fontWeight: "medium",
      rounded: "md",
      _focusVisible: {
        boxShadow: "outline"
      }
    },
    label: {
      overflow: "visible"
    },
    closeButton: {
      transitionProperty: "common",
      transitionDuration: "normal",
      rounded: "full",
      opacity: 0.5,
      _disabled: {
        opacity: 0.4
      },
      _hover: {
        opacity: 0.8,
        _disabled: {
          opacity: 0.4,
          cursor: "not-allowed"
        }
      },
      _active: {
        opacity: 1
      },
      _focusVisible: {
        boxShadow: "outline",
        bg: "rgba(0, 0, 0, 0.14)"
      }
    }
  },
  variants: {
    solid: {
      container: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
        bg: [(0, import_utils24.tintColor)(`${c}.600`, 24)(t, m), (0, import_utils24.shadeColor)(`${c}.600`, 16)(t, m)],
        color: `white`
      })
    },
    subtle: {
      container: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => ({
        bg: [
          (0, import_utils24.isGray)(c) ? `${c}.50` : `${c}.100`,
          (0, import_utils24.shadeColor)(`${c}.300`, 58)(t, m)
        ],
        color: [`${c}.800`, (0, import_utils24.isGray)(c) ? `${c}.50` : `${c}.200`]
      })
    },
    outline: {
      container: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => {
        const color = (0, import_core35.mode)(
          (0, import_utils24.getColor)(`${c}.500`)(t, m),
          (0, import_utils24.getColor)((0, import_utils24.isGray)(c) ? `${c}.100` : `${c}.400`)(t, m)
        )(m);
        return {
          color,
          boxShadow: `inset 0 0 0px 1px ${color}`
        };
      }
    }
  },
  sizes: {
    sm: ({ theme: t }) => ({
      container: {
        minH: "6",
        minW: "6",
        fontSize: "xs",
        px: "2",
        lineHeight: (0, import_utils24.getMemoizedObject)(t, "sizes.6")
      }
    }),
    md: ({ theme: t }) => ({
      container: {
        minH: "7",
        minW: "7",
        fontSize: "sm",
        px: "2",
        lineHeight: (0, import_utils24.getMemoizedObject)(t, "sizes.7")
      }
    }),
    lg: ({ theme: t }) => ({
      container: {
        minH: "8",
        minW: "8",
        fontSize: "md",
        px: "3",
        lineHeight: (0, import_utils24.getMemoizedObject)(t, "sizes.8")
      }
    })
  },
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "primary"
  }
};

// src/components/textarea.ts
var import_core36 = require("@yamada-ui/core");
var Textarea = (0, import_core36.mergeStyle)((0, import_core36.pickStyle)(Input, "field"), {
  baseStyle: {
    py: "2",
    lineHeight: "short",
    verticalAlign: "top"
  },
  variants: {
    unstyled: {
      h: "auto",
      py: "0",
      px: "0"
    }
  },
  sizes: {
    xs: {
      py: "2",
      minH: "20"
    },
    sm: {
      py: "2",
      minH: "20"
    },
    md: {
      py: "2",
      minH: "20"
    },
    lg: {
      py: "3",
      minH: "20"
    }
  }
})();

// src/components/toggle.ts
var import_utils25 = require("@yamada-ui/utils");
var Toggle = {
  baseStyle: {
    cursor: "pointer",
    rounded: "md",
    transitionProperty: "common",
    transitionDuration: "slower",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _readOnly: {
      cursor: "default",
      _ripple: {
        display: "none"
      }
    }
  },
  variants: {
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => {
      return {
        _hover: {
          bg: [
            (0, import_utils25.isGray)(c) ? `blackAlpha.200` : `${c}.50`,
            (0, import_utils25.transparentizeColor)(`${c}.500`, 0.12)(t, m)
          ]
        },
        _selected: {
          bg: [
            (0, import_utils25.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils25.shadeColor)(`${c}.300`, 72)(t, m)
          ]
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    solid: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => {
      return {
        _hover: {
          bg: [
            (0, import_utils25.isGray)(c) ? `blackAlpha.200` : `${c}.100`,
            (0, import_utils25.shadeColor)(`${c}.300`, 72)(t, m)
          ]
        },
        _selected: {
          bg: (0, import_utils25.isGray)(c) ? [`${c}.100`, `${c}.700`] : [(0, import_utils25.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
          color: [(0, import_utils25.isGray)(c) || (0, import_utils25.isAccessible)(c) ? `black` : `white`, `white`]
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    outline: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => {
      return {
        border: "1px solid",
        borderColor: "border",
        _hover: {
          bg: [
            (0, import_utils25.isGray)(c) ? `blackAlpha.200` : `${c}.50`,
            (0, import_utils25.transparentizeColor)(`${c}.500`, 0.12)(t, m)
          ]
        },
        _selected: {
          bg: [
            (0, import_utils25.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils25.shadeColor)(`${c}.300`, 72)(t, m)
          ],
          borderColor: [
            (0, import_utils25.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils25.shadeColor)(`${c}.300`, 72)(t, m)
          ]
        },
        _focusVisible: {
          boxShadow: "outline",
          _invalid: {
            borderColor: "transparent"
          }
        }
      };
    },
    unstyled: {
      bg: "none",
      color: "inherit",
      display: "inline",
      lineHeight: "inherit",
      m: 0,
      p: 0,
      _ripple: {
        display: "none"
      }
    }
  },
  sizes: {
    xs: ({ theme: t }) => ({
      minBoxSize: 6,
      fontSize: "xs",
      lineHeight: (0, import_utils25.getMemoizedObject)(t, "sizes.6")
    }),
    sm: ({ theme: t }) => ({
      minBoxSize: 8,
      fontSize: "sm",
      lineHeight: (0, import_utils25.getMemoizedObject)(t, "sizes.8")
    }),
    md: ({ theme: t }) => ({
      minBoxSize: 10,
      fontSize: "md",
      lineHeight: (0, import_utils25.getMemoizedObject)(t, "sizes.10")
    }),
    lg: ({ theme: t }) => ({
      minBoxSize: 12,
      fontSize: "lg",
      lineHeight: (0, import_utils25.getMemoizedObject)(t, "sizes.12")
    })
  },
  defaultProps: {
    variant: "subtle",
    size: "md",
    colorScheme: "gray"
  }
};

// src/components/tooltip.ts
var Tooltip = {
  baseStyle: {
    rounded: "md",
    bg: ["white", "black"],
    border: "1px solid",
    borderColor: ["blackAlpha.200", "whiteAlpha.100"],
    px: "sm",
    py: "0.5",
    fontWeight: "medium",
    fontSize: "sm",
    color: "inherit",
    boxShadow: ["md", "dark-md"],
    maxW: "xs",
    zIndex: "dodoria"
  }
};

// src/components/year-picker.ts
var import_core37 = require("@yamada-ui/core");
var YearPicker = (0, import_core37.mergeMultiStyle)(DatePicker)();

// src/components/index.ts
var components_default = {
  Toggle,
  Accordion,
  Alert,
  AlphaSlider,
  AreaChart,
  Autocomplete,
  Avatar,
  Badge,
  BarChart,
  Breadcrumb,
  Button,
  Calendar,
  Card,
  Carousel,
  Checkbox,
  CloseButton,
  ColorPicker,
  ColorSelector,
  ColorSwatch,
  Container,
  DatePicker,
  Dialog,
  Divider,
  DonutChart,
  Drawer,
  Dropzone,
  Editable,
  FileInput,
  FormControl,
  Heading,
  HueSlider,
  Indicator,
  Input,
  Kbd,
  LineChart,
  Link,
  List,
  Loading,
  Mark,
  Markdown,
  Menu,
  Modal,
  MonthPicker,
  MultiAutocomplete,
  MultiDatePicker,
  MultiSelect,
  NativeSelect,
  NumberInput,
  Pagination,
  PagingTable,
  PieChart,
  PinInput,
  Popover,
  Progress,
  RadarChart,
  Radio,
  RangeDatePicker,
  RangeSlider,
  Rating,
  Reorder,
  Resizable,
  SaturationSlider,
  ScrollArea,
  SegmentedControl,
  Select,
  NativeTable,
  Skeleton,
  Slider,
  Stat,
  Stepper,
  Switch,
  Table,
  Tabs,
  Tag,
  Textarea,
  Tooltip,
  YearPicker
};

// src/config.ts
var config = {
  initialThemeScheme: "base",
  initialColorMode: "light",
  var: { prefix: "ui" },
  breakpoint: "down"
};

// src/semantics.ts
var semantics = {
  colors: {
    primary: "blue.500",
    secondary: "violet.500",
    info: "blue.500",
    success: "green.500",
    warning: "orange.500",
    danger: "red.500",
    link: "blue.500"
  },
  colorSchemes: {
    primary: "blue",
    secondary: "violet",
    info: "blue",
    success: "green",
    warning: "orange",
    danger: "red",
    link: "blue"
  }
};

// src/styles/global-style.ts
var globalStyle = {
  body: {
    fontFamily: "body",
    bg: ["white", "black"],
    color: ["black", "white"],
    transitionProperty: "background-color",
    transitionDuration: "normal",
    lineHeight: "base",
    overflowX: "hidden"
  },
  "*::placeholder, *[data-placeholder]": {
    color: "blackAlpha.600"
  },
  _dark: {
    "*::placeholder, *[data-placeholder]": {
      color: "whiteAlpha.400"
    }
  },
  "*, *::before, *::after": {
    borderWidth: "0",
    borderStyle: "solid",
    borderColor: "border",
    wordWrap: "break-word"
  }
};

// src/styles/reset-style.ts
var resetStyle = {
  "*": {
    boxSizing: "border-box"
  },
  "::before, ::after": {
    boxSizing: "inherit"
  },
  html: {
    lineHeight: 1.15,
    WebkitTextSizeAdjust: "100%",
    WebkitTapHighlightColor: "transparent"
  },
  body: {
    margin: 0
  },
  main: {
    display: "block"
  },
  "p, table, blockquote, address, pre, iframe, form, figure, dl": {
    margin: 0
  },
  "h1, h2, h3, h4, h5, h6": {
    fontSize: "inherit",
    lineHeight: "inherit",
    fontWeight: "inherit",
    margin: 0
  },
  "ul, ol": {
    margin: 0,
    padding: 0,
    listStyle: "none"
  },
  dt: {
    fontWeight: "bold"
  },
  dd: {
    marginLeft: 0
  },
  hr: {
    boxSizing: "content-box",
    height: 0,
    overflow: "visible",
    border: 0,
    borderTop: "1px solid",
    margin: 0,
    clear: "both",
    color: "inherit"
  },
  pre: {
    fontFamily: "monospace, monospace",
    fontSize: "inherit"
  },
  address: {
    fontStyle: "inherit"
  },
  a: {
    backgroundColor: "transparent",
    textDecoration: "none",
    color: "inherit"
  },
  "abbr[title]": {
    borderBottom: "none",
    textDecoration: "underline dotted"
  },
  "b, strong": {
    fontWeight: "bolder"
  },
  "code, kbd, samp": {
    fontFamily: "monospace, monospace",
    fontSize: "inherit"
  },
  small: {
    fontSize: "80%"
  },
  "sub, sup": {
    fontSize: "75%",
    lineHeight: 0,
    position: "relative",
    verticalAlign: "baseline"
  },
  sub: {
    bottom: "-0.25em"
  },
  sup: {
    top: "-0.5em"
  },
  img: {
    borderStyle: "none",
    verticalAlign: "bottom"
  },
  "embed, object, iframe": {
    border: 0,
    verticalAlign: "bottom"
  },
  "button, input, optgroup, select, textarea": {
    WebkitAppearance: "none",
    appearance: "none",
    verticalAlign: "middle",
    color: "inherit",
    font: "inherit",
    border: 0,
    background: "transparent",
    padding: 0,
    margin: 0,
    outline: 0,
    borderRadius: 0,
    textAlign: "inherit"
  },
  "[type='checkbox']": {
    WebkitAppearance: "checkbox",
    appearance: "checkbox"
  },
  "[type='radio']": {
    WebkitAppearance: "radio",
    appearance: "radio"
  },
  "button, input": {
    overflow: "visible"
  },
  "button, select": {
    textTransform: "none"
  },
  "button, [type='button'], [type='reset'], [type='submit']": {
    cursor: "pointer",
    WebkitAppearance: "none",
    appearance: "none"
  },
  "button[disabled], [type='button'][disabled], [type='reset'][disabled], [type='submit'][disabled]": {
    cursor: "default"
  },
  "button::-moz-focus-inner, [type='button']::-moz-focus-inner, [type='reset']::-moz-focus-inner, [type='submit']::-moz-focus-inner": {
    borderStyle: "none",
    padding: 0
  },
  "button:-moz-focusring, [type='button']:-moz-focusring, [type='reset']:-moz-focusring, [type='submit']:-moz-focusring": {
    outline: "1px dotted ButtonText"
  },
  "select::-ms-expand": {
    display: "none"
  },
  option: {
    padding: 0
  },
  fieldset: {
    margin: 0,
    padding: 0,
    border: 0,
    minWidth: 0
  },
  legend: {
    color: "inherit",
    display: "table",
    maxWidth: "100%",
    padding: 0,
    whiteSpace: "normal"
  },
  progress: {
    verticalAlign: "baseline"
  },
  textarea: {
    overflow: "auto"
  },
  "[type='number']::-webkit-inner-spin-button, [type='number']::-webkit-outer-spin-button": {
    display: "none"
  },
  "[type='search']": {
    outlineOffset: "-2px"
  },
  "[type='search']::-webkit-search-decoration": {
    WebkitAppearance: "none"
  },
  "[type='time']::-webkit-calendar-picker-indicator": {
    display: "none"
  },
  "::-webkit-file-upload-button": {
    WebkitAppearance: "button",
    font: "inherit"
  },
  "::-webkit-search-cancel-button": {
    WebkitAppearance: "none"
  },
  "label[for]": {
    cursor: "pointer"
  },
  details: {
    display: "block"
  },
  summary: {
    display: "list-item"
  },
  "[contenteditable]": {
    outline: "none"
  },
  table: {
    borderCollapse: "collapse",
    borderSpacing: 0
  },
  caption: {
    textAlign: "left"
  },
  "td, th": {
    verticalAlign: "top",
    padding: 0
  },
  th: {
    textAlign: "left",
    fontWeight: "bold"
  },
  template: {
    display: "none"
  },
  "[hidden]": {
    display: "none !important"
  }
};

// src/styles/layer-styles.ts
var layerStyles = {};

// src/styles/text-styles.ts
var textStyles = {};

// src/tokens/animations.ts
var animations = {};

// src/tokens/blurs.ts
var blurs = {
  sm: "4px",
  md: "8px",
  lg: "12px",
  xl: "16px",
  "2xl": "24px"
};

// src/tokens/borders.ts
var borders = {};

// src/tokens/breakpoints.ts
var breakpoints = {
  sm: "30em",
  md: "48em",
  lg: "61em",
  xl: "80em",
  "2xl": "90em"
};

// src/tokens/colors.ts
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#141414",
  white: "#fbfbfb",
  border: ["#dcdcde", "#434248"],
  focus: "#0070F0",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)",
    950: "rgba(255, 255, 255, 0.96)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)",
    950: "rgba(0, 0, 0, 0.96)"
  },
  gray: {
    50: "#dedfe3",
    100: "#d3d5da",
    200: "#b7bbc3",
    300: "#9ea3ae",
    400: "#828997",
    500: "#6b7280",
    600: "#565c67",
    700: "#434851",
    800: "#2e3138",
    900: "#1c1e21",
    950: "#101113"
  },
  neutral: {
    50: "#dedede",
    100: "#d4d4d4",
    200: "#bababa",
    300: "#a3a3a3",
    400: "#8a8a8a",
    500: "#737373",
    600: "#5c5c5c",
    700: "#474747",
    800: "#303030",
    900: "#1c1c1c",
    950: "#0f0f0f"
  },
  red: {
    50: "#fdeae8",
    100: "#fbd9d5",
    200: "#f6b2ac",
    300: "#f28c82",
    400: "#ee6a5d",
    500: "#ea4334",
    600: "#de2817",
    700: "#b42013",
    800: "#8a190f",
    900: "#66120b",
    950: "#530f09"
  },
  rose: {
    50: "#feecef",
    100: "#fdd8de",
    200: "#fbb2be",
    300: "#f88b9d",
    400: "#f6657d",
    500: "#f43e5c",
    600: "#f2183c",
    700: "#cf0c2d",
    800: "#a40a23",
    900: "#7d071b",
    950: "#650616"
  },
  pink: {
    50: "#fde8ed",
    100: "#fcd9e3",
    200: "#f9b9ca",
    300: "#f693ad",
    400: "#f37295",
    500: "#f0517c",
    600: "#ec275c",
    700: "#d81347",
    800: "#ae0f39",
    900: "#880c2d",
    950: "#710a25"
  },
  flashy: {
    50: "#fdedf5",
    100: "#fbdaeb",
    200: "#f7b5d6",
    300: "#f390c2",
    400: "#ef6bad",
    500: "#ec4699",
    600: "#e82185",
    700: "#c6156e",
    800: "#a21159",
    900: "#780d42",
    950: "#660b38"
  },
  orange: {
    50: "#fef0e6",
    100: "#fee4d2",
    200: "#fdc7a1",
    300: "#fbac74",
    400: "#fa9247",
    500: "#f97415",
    600: "#e06106",
    700: "#b34d05",
    800: "#863a03",
    900: "#5e2902",
    950: "#461e02"
  },
  amber: {
    50: "#fdf0d8",
    100: "#fde8c4",
    200: "#fbd593",
    300: "#f9c367",
    400: "#f7b23b",
    500: "#f59f0a",
    600: "#ce8509",
    700: "#a26907",
    800: "#764c05",
    900: "#4e3303",
    950: "#362302"
  },
  yellow: {
    50: "#fef4d7",
    100: "#feefc3",
    200: "#fde290",
    300: "#fdd663",
    400: "#fcc931",
    500: "#fbbd04",
    600: "#ce9b03",
    700: "#a67d03",
    800: "#795b02",
    900: "#503d01",
    950: "#372a01"
  },
  lime: {
    50: "#e7facc",
    100: "#ddf7b5",
    200: "#c7f287",
    300: "#b2ee59",
    400: "#9de92b",
    500: "#82cb15",
    600: "#6ba611",
    700: "#507d0d",
    800: "#385809",
    900: "#1e2e05",
    950: "#121c03"
  },
  green: {
    50: "#e0f5e6",
    100: "#d0f1d9",
    200: "#a9e5b9",
    300: "#86da9c",
    400: "#5fce7d",
    500: "#3cc360",
    600: "#31a04f",
    700: "#28813f",
    800: "#1d5e2e",
    900: "#133e1f",
    950: "#0d2b15"
  },
  emerald: {
    50: "#d0fbed",
    100: "#b4f8e2",
    200: "#80f4cd",
    300: "#4defb9",
    400: "#19eba5",
    500: "#10b77f",
    600: "#0d9165",
    700: "#096748",
    800: "#06422e",
    900: "#021710",
    950: "#000503"
  },
  teal: {
    50: "#cdf9f4",
    100: "#b1f6ee",
    200: "#7ef1e3",
    300: "#51ecda",
    400: "#1ee6cf",
    500: "#14b8a5",
    600: "#108e80",
    700: "#0c6a5f",
    800: "#07403a",
    900: "#031c19",
    950: "#010504"
  },
  cyan: {
    50: "#cef6fd",
    100: "#b0f1fd",
    200: "#7ee8fb",
    300: "#4de0f9",
    400: "#16d6f8",
    500: "#07b6d5",
    600: "#0590a8",
    700: "#046e81",
    800: "#034854",
    900: "#012228",
    950: "#011114"
  },
  sky: {
    50: "#ddf3fd",
    100: "#c5eafc",
    200: "#95d9f9",
    300: "#65c8f6",
    400: "#35b7f3",
    500: "#0da2e7",
    600: "#0b87c1",
    700: "#096995",
    800: "#064e6f",
    900: "#042f43",
    950: "#032230"
  },
  blue: {
    50: "#e2edfd",
    100: "#cfe0fc",
    200: "#adcbfa",
    300: "#8bb5f8",
    400: "#659cf6",
    500: "#4387f4",
    600: "#186bf2",
    700: "#0c59d4",
    800: "#0a47a9",
    900: "#07357d",
    950: "#062c6a"
  },
  indigo: {
    50: "#e8e8fd",
    100: "#d9dafc",
    200: "#bdbef9",
    300: "#9c9ef6",
    400: "#8082f4",
    500: "#6467f2",
    600: "#3a3dee",
    700: "#1417e6",
    800: "#1114c0",
    900: "#0d0f96",
    950: "#0b0d83"
  },
  violet: {
    50: "#eee7fe",
    100: "#e3d8fd",
    200: "#cbb6fb",
    300: "#b699fa",
    400: "#a17cf8",
    500: "#895af6",
    600: "#6d34f4",
    700: "#500ced",
    800: "#410ac2",
    900: "#34089b",
    950: "#2e0788"
  },
  purple: {
    50: "#f0e2fe",
    100: "#e9d3fd",
    200: "#d7b1fb",
    300: "#c994fa",
    400: "#b772f8",
    500: "#a855f7",
    600: "#9229f5",
    700: "#7e0bea",
    800: "#6609be",
    900: "#510797",
    950: "#44067f"
  },
  fuchsia: {
    50: "#f9e3fd",
    100: "#f5d0fb",
    200: "#eeaff8",
    300: "#e78af5",
    400: "#e069f2",
    500: "#d948ef",
    600: "#d01eeb",
    700: "#b112ca",
    800: "#900ea4",
    900: "#6b0b7a",
    950: "#5b0967"
  }
};

// src/tokens/font-sizes.ts
var fontSizes = {
  "2xs": "0.625rem",
  xs: "0.75rem",
  sm: "0.875rem",
  md: "1rem",
  lg: "1.125rem",
  xl: "1.25rem",
  "2xl": "1.5rem",
  "3xl": "1.875rem",
  "4xl": "2rem",
  "5xl": "2.25rem",
  "6xl": "3rem",
  "7xl": "3.75rem",
  "8xl": "4.5rem",
  "9xl": "6rem"
};

// src/tokens/font-weights.ts
var fontWeights = {
  hairline: 100,
  thin: 200,
  light: 300,
  normal: 400,
  medium: 500,
  semibold: 600,
  bold: 700,
  extrabold: 800,
  black: 900
};

// src/tokens/fonts.ts
var fonts = {
  heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", "\u6E38\u30B4\u30B7\u30C3\u30AF\u4F53", YuGothic, "YuGothic M", "Hiragino Kaku Gothic ProN", Meiryo, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
  body: `-apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", "\u6E38\u30B4\u30B7\u30C3\u30AF\u4F53", YuGothic, "YuGothic M", "Hiragino Kaku Gothic ProN", Meiryo, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
  mono: `SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace`
};

// src/tokens/gradients.ts
var gradients = {};

// src/tokens/letter-spacings.ts
var letterSpacings = {
  tighter: "-0.05em",
  tight: "-0.025em",
  normal: "0",
  wide: "0.025em",
  wider: "0.05em",
  widest: "0.1em"
};

// src/tokens/line-heights.ts
var lineHeights = {
  normal: "normal",
  none: 1,
  shorter: 1.25,
  short: 1.375,
  base: 1.5,
  tall: 1.625,
  taller: "2",
  "3": ".75rem",
  "4": "1rem",
  "5": "1.25rem",
  "6": "1.5rem",
  "7": "1.75rem",
  "8": "2rem",
  "9": "2.25rem",
  "10": "2.5rem"
};

// src/tokens/radii.ts
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};

// src/tokens/shadows.ts
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  "3xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 -25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgb(0, 112, 240)",
  inline: "inset 0 0 0 3px rgb(0, 112, 240)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-sm": "0px 0px 0px 1px\u3000rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.2)",
  "dark-md": "0px 0px 0px 1px rgba(0, 0, 0, 0.1), 0px 5px 10px rgba(0, 0, 0, 0.2)",
  "dark-lg": "0px 0px 0px 1px rgba(0, 0, 0, 0.1), 0px 5px 10px rgba(0, 0, 0, 0.2), 0px 15px 40px rgba(0, 0, 0, 0.4)"
};

// src/tokens/spaces.ts
var spaces = {
  xs: "0.25rem",
  sm: "0.5rem",
  md: "1rem",
  normal: "1.5rem",
  lg: "2rem",
  xl: "3rem",
  "2xl": "4rem",
  "3xl": "6rem",
  "4xl": "8rem",
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// src/tokens/sizes.ts
var sizes = {
  ...spaces,
  max: "max-content",
  min: "min-content",
  full: "100%",
  "9xs": "1rem",
  "8xs": "1.5rem",
  "7xs": "2rem",
  "6xs": "3rem",
  "5xs": "4.5rem",
  "4xs": "6rem",
  "3xs": "7.5rem",
  "2xs": "10rem",
  xs: "15rem",
  sm: "20rem",
  md: "24rem",
  lg: "28rem",
  xl: "32rem",
  "2xl": "36rem",
  "3xl": "42rem",
  "4xl": "48rem",
  "5xl": "56rem",
  "6xl": "64rem",
  "7xl": "72rem",
  "8xl": "80rem",
  "9xl": "90rem"
};

// src/tokens/transitions.ts
var transitions = {
  property: {
    common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
    colors: "background-color, border-color, color, fill, stroke",
    dimensions: "width, height",
    position: "left, right, top, bottom",
    background: "background-color, background-image, background-position"
  },
  easing: {
    "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
    "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
    "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
  },
  duration: {
    "ultra-fast": "50ms",
    faster: "100ms",
    fast: "150ms",
    normal: "200ms",
    slow: "300ms",
    slower: "400ms",
    "ultra-slow": "500ms"
  }
};

// src/tokens/z-indices.ts
var zIndices = {
  yamcha: 1,
  kurillin: 9,
  nappa: 99,
  guldo: 100,
  jeice: 110,
  burter: 120,
  recoome: 130,
  ginyu: 140,
  dodoria: 150,
  zarbon: 160,
  freeza: 9996,
  vegeta: 9997,
  sonGoku: 9998,
  beerus: 9999
};

// src/tokens/index.ts
var tokens_default = {
  animations,
  blurs,
  borders,
  breakpoints,
  colors,
  fontSizes,
  fontWeights,
  fonts,
  gradients,
  letterSpacings,
  lineHeights,
  radii,
  shadows,
  sizes,
  spaces,
  transitions,
  zIndices
};

// src/index.ts
var defaultTheme = {
  styles: { globalStyle, resetStyle, layerStyles, textStyles },
  semantics,
  components: components_default,
  ...tokens_default
};
var baseTheme = {
  styles: { globalStyle, resetStyle, layerStyles, textStyles },
  semantics,
  ...tokens_default
};
var defaultConfig = config;
var src_default = defaultTheme;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  baseTheme,
  defaultConfig,
  defaultTheme
});
//# sourceMappingURL=index.js.map