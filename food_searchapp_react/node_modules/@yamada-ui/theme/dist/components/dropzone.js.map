{"version":3,"sources":["../../src/components/dropzone.ts"],"sourcesContent":["import type { ComponentMultiStyle } from \"@yamada-ui/core\"\nimport { mode } from \"@yamada-ui/core\"\nimport { getColor, isArray, transparentizeColor } from \"@yamada-ui/utils\"\n\nexport const Dropzone: ComponentMultiStyle = {\n  baseStyle: ({ theme: t, colorMode: m }) => ({\n    container: {\n      color: [\"blackAlpha.700\", \"whiteAlpha.600\"],\n      rounded: \"md\",\n      w: \"100%\",\n      bg: [\"blackAlpha.50\", \"whiteAlpha.50\"],\n      outline: 0,\n      overflow: \"hidden\",\n      transitionProperty: \"common\",\n      transitionDuration: \"normal\",\n      _disabled: {\n        opacity: 0.4,\n        cursor: \"not-allowed\",\n      },\n      _hover: {\n        cursor: \"pointer\",\n        bg: [\"blackAlpha.100\", \"whiteAlpha.100\"],\n      },\n      _loading: {\n        cursor: \"not-allowed\",\n        bg: [\"blackAlpha.100\", \"whiteAlpha.100\"],\n      },\n      _accept: {\n        bg: [\"success.50\", transparentizeColor(\"success.400\", 0.12)(t, m)],\n        borderColor: [\"success.500\", \"success.400\"],\n      },\n      _reject: {\n        bg: [\"danger.50\", transparentizeColor(\"danger.400\", 0.12)(t, m)],\n        borderColor: [\"danger.500\", \"danger.400\"],\n      },\n    },\n\n    overlay: {\n      bg: [\"whiteAlpha.600\", \"blackAlpha.600\"],\n      zIndex: \"kurillin\",\n    },\n  }),\n\n  variants: {\n    solid: ({\n      theme: t,\n      colorMode: m,\n      focusBorderColor: fc = \"focus\",\n      errorBorderColor: ec = [\"danger.500\", \"danger.400\"],\n    }) => {\n      const focusBorderColor = isArray(fc)\n        ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m)\n        : getColor(fc, fc)(t, m)\n      const errorBorderColor = isArray(ec)\n        ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m)\n        : getColor(ec, ec)(t, m)\n\n      return {\n        container: {\n          borderWidth: \"1px\",\n          borderStyle: \"solid\",\n          _invalid: {\n            borderColor: errorBorderColor,\n            boxShadow: `0 0 0 1px ${errorBorderColor}`,\n          },\n          _focus: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n          _focusVisible: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n        },\n      }\n    },\n    dashed: ({\n      theme: t,\n      colorMode: m,\n      focusBorderColor: fc = \"focus\",\n      errorBorderColor: ec = [\"danger.500\", \"danger.400\"],\n    }) => {\n      const focusBorderColor = isArray(fc)\n        ? mode(getColor(fc[0], fc[0])(t, m), getColor(fc[1], fc[1])(t, m))(m)\n        : getColor(fc, fc)(t, m)\n      const errorBorderColor = isArray(ec)\n        ? mode(getColor(ec[0], ec[0])(t, m), getColor(ec[1], ec[1])(t, m))(m)\n        : getColor(ec, ec)(t, m)\n\n      return {\n        container: {\n          borderWidth: \"1px\",\n          borderStyle: \"dashed\",\n          _invalid: {\n            borderColor: errorBorderColor,\n            boxShadow: `0 0 0 1px ${errorBorderColor}`,\n          },\n          _focus: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n          _focusVisible: {\n            zIndex: \"yamcha\",\n            borderColor: focusBorderColor,\n            boxShadow: `0 0 0 1px ${focusBorderColor}`,\n          },\n        },\n      }\n    },\n    unstyled: {\n      container: {\n        color: \"inherit\",\n        rounded: \"inherit\",\n        bg: \"transparent\",\n        h: \"auto\",\n        _hover: {\n          cursor: \"inherit\",\n          bg: \"transparent\",\n        },\n        _loading: {\n          cursor: \"auto\",\n          bg: \"transparent\",\n        },\n        _accept: {\n          bg: \"transparent\",\n          borderColor: \"inherit\",\n        },\n        _reject: {\n          bg: \"transparent\",\n          borderColor: \"inherit\",\n        },\n      },\n      overlay: {\n        bg: \"transparent\",\n      },\n    },\n  },\n\n  sizes: {\n    xs: {\n      container: { h: \"xs\" },\n    },\n    sm: {\n      container: { h: \"sm\" },\n    },\n    md: {\n      container: { h: \"md\" },\n    },\n    lg: {\n      container: { h: \"lg\" },\n    },\n    full: {\n      container: { h: \"full\" },\n    },\n  },\n\n  defaultProps: {\n    size: \"sm\",\n    variant: \"dashed\",\n  },\n}\n"],"mappings":"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","names":[]}