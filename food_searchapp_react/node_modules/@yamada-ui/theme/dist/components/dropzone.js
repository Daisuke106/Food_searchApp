"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/dropzone.ts
var dropzone_exports = {};
__export(dropzone_exports, {
  Dropzone: () => Dropzone
});
module.exports = __toCommonJS(dropzone_exports);
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var Dropzone = {
  baseStyle: ({ theme: t, colorMode: m }) => ({
    container: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      rounded: "md",
      w: "100%",
      bg: ["blackAlpha.50", "whiteAlpha.50"],
      outline: 0,
      overflow: "hidden",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _hover: {
        cursor: "pointer",
        bg: ["blackAlpha.100", "whiteAlpha.100"]
      },
      _loading: {
        cursor: "not-allowed",
        bg: ["blackAlpha.100", "whiteAlpha.100"]
      },
      _accept: {
        bg: ["success.50", (0, import_utils.transparentizeColor)("success.400", 0.12)(t, m)],
        borderColor: ["success.500", "success.400"]
      },
      _reject: {
        bg: ["danger.50", (0, import_utils.transparentizeColor)("danger.400", 0.12)(t, m)],
        borderColor: ["danger.500", "danger.400"]
      }
    },
    overlay: {
      bg: ["whiteAlpha.600", "blackAlpha.600"],
      zIndex: "kurillin"
    }
  }),
  variants: {
    solid: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils.isArray)(fc) ? (0, import_core.mode)((0, import_utils.getColor)(fc[0], fc[0])(t, m), (0, import_utils.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        container: {
          borderWidth: "1px",
          borderStyle: "solid",
          _invalid: {
            borderColor: errorBorderColor,
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _focus: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        }
      };
    },
    dashed: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils.isArray)(fc) ? (0, import_core.mode)((0, import_utils.getColor)(fc[0], fc[0])(t, m), (0, import_utils.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        container: {
          borderWidth: "1px",
          borderStyle: "dashed",
          _invalid: {
            borderColor: errorBorderColor,
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _focus: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            zIndex: "yamcha",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        }
      };
    },
    unstyled: {
      container: {
        color: "inherit",
        rounded: "inherit",
        bg: "transparent",
        h: "auto",
        _hover: {
          cursor: "inherit",
          bg: "transparent"
        },
        _loading: {
          cursor: "auto",
          bg: "transparent"
        },
        _accept: {
          bg: "transparent",
          borderColor: "inherit"
        },
        _reject: {
          bg: "transparent",
          borderColor: "inherit"
        }
      },
      overlay: {
        bg: "transparent"
      }
    }
  },
  sizes: {
    xs: {
      container: { h: "xs" }
    },
    sm: {
      container: { h: "sm" }
    },
    md: {
      container: { h: "md" }
    },
    lg: {
      container: { h: "lg" }
    },
    full: {
      container: { h: "full" }
    }
  },
  defaultProps: {
    size: "sm",
    variant: "dashed"
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Dropzone
});
//# sourceMappingURL=dropzone.js.map