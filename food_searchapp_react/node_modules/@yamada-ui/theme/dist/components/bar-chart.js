"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/bar-chart.ts
var bar_chart_exports = {};
__export(bar_chart_exports, {
  BarChart: () => BarChart
});
module.exports = __toCommonJS(bar_chart_exports);
var import_core = require("@yamada-ui/core");

// src/components/line-chart.ts
var import_utils = require("@yamada-ui/utils");
var LineChart = {
  baseStyle: {
    container: {},
    chart: {},
    referenceLine: {
      fillOpacity: 1,
      fontSize: "xs"
    },
    grid: {
      stroke: ["blackAlpha.400", "whiteAlpha.400"],
      strokeWidth: 1
    },
    cursor: {
      fill: ["blackAlpha.50", "whiteAlpha.50"],
      stroke: ["blackAlpha.400", "whiteAlpha.400"],
      strokeWidth: 1
    },
    xAxis: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontSize: "xs"
    },
    yAxis: {
      color: ["blackAlpha.700", "whiteAlpha.600"],
      fontSize: "xs"
    },
    line: {},
    dot: {
      strokeWidth: 2
    },
    activeDot: {
      strokeWidth: 2,
      fill: ["white", "black"]
    },
    legend: {
      display: "flex",
      flexWrap: "wrap",
      justifyContent: "flex-end"
    },
    legendItem: {
      display: "flex",
      alignItems: "center",
      rounded: "md",
      gap: "sm",
      transitionProperty: "common",
      transitionDuration: "slower",
      color: ["blackAlpha.800", "whiteAlpha.700"],
      _hover: {
        bg: ["blackAlpha.50", "whiteAlpha.100"]
      }
    },
    legendSwatch: {
      boxSize: "3",
      rounded: "full"
    },
    tooltip: {
      display: "flex",
      flexDirection: "column",
      minW: "48",
      gap: "sm",
      rounded: "md",
      bg: ["white", "black"],
      border: "1px solid",
      borderColor: ["blackAlpha.200", "whiteAlpha.100"],
      p: "3",
      fontWeight: "medium",
      fontSize: "sm",
      color: "inherit",
      boxShadow: ["md", "dark-md"],
      maxW: "xs",
      zIndex: "dodoria"
    },
    tooltipTitle: {
      fontSize: "md"
    },
    tooltipList: {
      display: "flex",
      flexDirection: "column",
      gap: "xs"
    },
    tooltipItem: {
      display: "flex",
      alignItems: "center",
      gap: "sm",
      fontSize: "sm"
    },
    tooltipSwatch: {
      boxSize: "3",
      rounded: "full"
    },
    tooltipLabel: {
      color: ["blackAlpha.800", "whiteAlpha.700"]
    },
    tooltipValue: {
      flex: 1,
      textAlign: "end"
    }
  },
  variants: {},
  sizes: {
    sm: ({ theme: t }) => ({
      container: {
        w: "xl",
        h: "xs"
      },
      legend: {
        gap: "xs",
        mb: "md"
      },
      legendItem: {
        minH: "6",
        minW: "6",
        fontSize: "xs",
        px: "2",
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.6")
      }
    }),
    md: ({ theme: t }) => ({
      container: {
        w: "3xl",
        h: "sm"
      },
      legend: {
        gap: "xs",
        mb: "md"
      },
      legendItem: {
        minH: "7",
        minW: "7",
        fontSize: "sm",
        px: "3",
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.7")
      }
    }),
    lg: ({ theme: t }) => ({
      container: {
        w: "5xl",
        h: "md"
      },
      legend: {
        gap: "sm",
        mb: "md"
      },
      legendItem: {
        minH: "8",
        minW: "8",
        fontSize: "md",
        px: "3",
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.8")
      }
    }),
    full: ({ theme: t }) => ({
      container: {
        w: "full",
        h: "md"
      },
      legend: {
        gap: "sm",
        mb: "md"
      },
      legendItem: {
        minH: "8",
        minW: "8",
        fontSize: "md",
        px: "3",
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.8")
      }
    })
  },
  defaultProps: {
    size: "full"
  }
};

// src/components/bar-chart.ts
var BarChart = (0, import_core.mergeMultiStyle)(LineChart, {
  baseStyle: {
    bar: {},
    activeBar: {},
    background: { fill: "transparent" },
    cursor: { strokeDasharray: "5 5" }
  }
})({ omit: ["dot", "activeDot"] });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BarChart
});
//# sourceMappingURL=bar-chart.js.map