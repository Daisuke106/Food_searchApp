"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/tabs.ts
var tabs_exports = {};
__export(tabs_exports, {
  Tabs: () => Tabs
});
module.exports = __toCommonJS(tabs_exports);
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var Tabs = {
  baseStyle: {
    container: ({ orientation }) => ({
      display: "flex",
      flexDirection: orientation === "vertical" ? "row" : "column"
    }),
    tabList: ({ align, orientation }) => ({
      flexDirection: orientation === "vertical" ? "column" : "row",
      justifyContent: align === "center" ? align : `flex-${align}`
    }),
    tab: ({ isFitted }) => ({
      flex: isFitted ? 1 : void 0,
      whiteSpace: "nowrap",
      transitionProperty: "common",
      transitionDuration: "normal",
      _hover: { opacity: 0.7 },
      _focusVisible: {
        zIndex: "yamcha",
        boxShadow: "outline"
      },
      _selected: { _hover: { opacity: 1 } },
      _disabled: {
        cursor: "not-allowed",
        opacity: 0.4
      }
    }),
    tabPanels: {},
    tabPanel: {
      p: "md"
    }
  },
  variants: {
    line: ({ colorScheme: c = "primary", orientation }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "transparent",
          _selected: {
            color: [`${c}.500`, (0, import_utils.isGray)(c) ? `${c}.100` : `${c}.400`],
            borderColor: "currentColor"
          },
          ...isVertical ? {
            borderEndWidth: "1px",
            borderEndStyle: "solid",
            me: "-1px"
          } : {
            borderBottomWidth: "1px",
            borderBottomStyle: "solid",
            mb: "-1px"
          },
          _ripple: { display: "none" }
        }
      };
    },
    sticky: ({ colorScheme: c = "primary", orientation }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "transparent",
          _selected: {
            color: [`${c}.500`, (0, import_utils.isGray)(c) ? `${c}.100` : `${c}.400`],
            borderColor: "inherit",
            ...isVertical ? { borderEndColor: ["white", "black"] } : { borderBottomColor: ["white", "black"] }
          },
          ...isVertical ? {
            roundedLeft: "md",
            borderWidth: "1px",
            borderStyle: "solid",
            me: "-2px"
          } : {
            roundedTop: "md",
            borderWidth: "1px",
            borderStyle: "solid",
            mb: "-2px"
          },
          _ripple: { display: "none" }
        }
      };
    },
    "sticky-subtle": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary",
      orientation
    }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "inherit",
          _notLast: {
            ...isVertical ? { borderBottom: "none" } : { borderEnd: "none" }
          },
          _selected: {
            bg: [
              (0, import_utils.isGray)(c) ? `${c}.50` : `${c}.100`,
              (0, import_utils.shadeColor)(`${c}.300`, 58)(t, m)
            ],
            color: [`${c}.800`, (0, import_utils.isGray)(c) ? `${c}.50` : `${c}.200`]
          },
          ...isVertical ? {
            borderWidth: "1px",
            borderStyle: "solid",
            me: "-1px"
          } : {
            borderWidth: "1px",
            borderStyle: "solid",
            mb: "-1px"
          }
        }
      };
    },
    "sticky-solid": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary",
      orientation
    }) => {
      const isVertical = orientation === "vertical";
      return {
        tabList: {
          borderColor: "inherit",
          ...isVertical ? { borderEndWidth: "1px" } : { borderBottomWidth: "1px" }
        },
        tab: {
          borderColor: "inherit",
          _notLast: {
            ...isVertical ? { borderBottom: "none" } : { borderEnd: "none" }
          },
          _selected: {
            bg: [
              (0, import_utils.tintColor)(`${c}.600`, 24)(t, m),
              (0, import_utils.shadeColor)(`${c}.600`, 16)(t, m)
            ],
            color: `white`
          },
          ...isVertical ? {
            borderWidth: "1px",
            borderStyle: "solid",
            me: "-1px"
          } : {
            borderWidth: "1px",
            borderStyle: "solid",
            mb: "-1px"
          }
        }
      };
    },
    rounded: ({ theme: t, colorMode: m, colorScheme: c = "primary" }) => {
      const color = (0, import_core.mode)(
        (0, import_utils.getColor)(`${c}.500`)(t, m),
        (0, import_utils.getColor)((0, import_utils.isGray)(c) ? `${c}.100` : `${c}.400`)(t, m)
      )(m);
      return {
        tabList: { gap: "sm" },
        tab: {
          borderRadius: "full",
          _selected: {
            color,
            boxShadow: `inset 0 0 0px 1px ${color}`
          }
        }
      };
    },
    "rounded-subtle": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary"
    }) => ({
      tabList: { gap: "sm" },
      tab: {
        borderRadius: "full",
        _selected: {
          bg: [
            (0, import_utils.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils.shadeColor)(`${c}.300`, 58)(t, m)
          ],
          color: [`${c}.800`, (0, import_utils.isGray)(c) ? `${c}.50` : `${c}.200`]
        }
      }
    }),
    "rounded-solid": ({
      theme: t,
      colorMode: m,
      colorScheme: c = "primary"
    }) => ({
      tabList: { gap: "sm" },
      tab: {
        borderRadius: "full",
        _selected: {
          bg: [
            (0, import_utils.tintColor)(`${c}.600`, 24)(t, m),
            (0, import_utils.shadeColor)(`${c}.600`, 16)(t, m)
          ],
          color: `white`
        }
      }
    }),
    unstyled: {
      tab: {
        _hover: { opacity: "inherit" },
        _ripple: { display: "none" }
      }
    }
  },
  sizes: {
    sm: {
      tab: {
        py: 1,
        px: 3,
        fontSize: "sm"
      }
    },
    md: {
      tab: {
        fontSize: "md",
        py: 2,
        px: 4
      }
    },
    lg: {
      tab: {
        fontSize: "lg",
        py: 3,
        px: 5
      }
    }
  },
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "primary"
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Tabs
});
//# sourceMappingURL=tabs.js.map