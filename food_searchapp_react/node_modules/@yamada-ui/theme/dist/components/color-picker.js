"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/color-picker.ts
var color_picker_exports = {};
__export(color_picker_exports, {
  ColorPicker: () => ColorPicker
});
module.exports = __toCommonJS(color_picker_exports);
var import_core2 = require("@yamada-ui/core");

// src/components/input.ts
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var Input = {
  baseStyle: {
    container: {},
    field: {
      width: "100%",
      minWidth: 0,
      outline: 0,
      position: "relative",
      appearance: "none",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    },
    element: {
      color: ["blackAlpha.600", "whiteAlpha.700"]
    }
  },
  variants: {
    outline: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils.isArray)(fc) ? (0, import_core.mode)((0, import_utils.getColor)(fc[0], fc[0])(t, m), (0, import_utils.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        field: {
          border: "1px solid",
          borderColor: "inherit",
          bg: "inherit",
          _hover: {
            borderColor: ["blackAlpha.500", "whiteAlpha.400"]
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: [errorBorderColor, errorBorderColor],
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _active: {
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            zIndex: "yamcha",
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        },
        addon: {
          border: "1px solid",
          borderColor: ["inherit", "whiteAlpha.50"],
          bg: ["blackAlpha.300", "whiteAlpha.300"]
        }
      };
    },
    filled: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils.isArray)(fc) ? (0, import_core.mode)((0, import_utils.getColor)(fc[0], fc[0])(t, m), (0, import_utils.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        field: {
          border: "2px solid",
          borderColor: "transparent",
          bg: ["blackAlpha.50", "whiteAlpha.50"],
          _hover: {
            bg: ["blackAlpha.100", "whiteAlpha.100"]
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: errorBorderColor,
            boxShadow: `0 0 0 1px ${errorBorderColor}`
          },
          _active: {
            bg: "transparent",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          },
          _focusVisible: {
            bg: "transparent",
            borderColor: focusBorderColor,
            boxShadow: `0 0 0 1px ${focusBorderColor}`
          }
        },
        addon: {
          border: "2px solid transparent",
          bg: ["blackAlpha.300", "whiteAlpha.300"]
        }
      };
    },
    flushed: ({
      theme: t,
      colorMode: m,
      focusBorderColor: fc = "focus",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const focusBorderColor = (0, import_utils.isArray)(fc) ? (0, import_core.mode)((0, import_utils.getColor)(fc[0], fc[0])(t, m), (0, import_utils.getColor)(fc[1], fc[1])(t, m))(m) : (0, import_utils.getColor)(fc, fc)(t, m);
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        field: {
          borderBottom: "1px solid",
          borderColor: "inherit",
          rounded: "0",
          px: "0",
          bg: "transparent",
          _hover: {
            borderColor: ["blackAlpha.500", "whiteAlpha.400"]
          },
          _readOnly: {
            boxShadow: "none !important",
            userSelect: "all"
          },
          _invalid: {
            borderColor: [errorBorderColor, errorBorderColor],
            boxShadow: `0px 1px 0px 0px ${errorBorderColor}`
          },
          _active: {
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0px 1px 0px 0px ${focusBorderColor}`
          },
          _focusVisible: {
            borderColor: [focusBorderColor, focusBorderColor],
            boxShadow: `0px 1px 0px 0px ${focusBorderColor}`
          }
        },
        addon: {
          borderBottom: "1px solid",
          borderColor: "inherit",
          bg: "transparent",
          rounded: "0"
        }
      };
    },
    unstyled: {
      field: {
        bg: "transparent",
        minH: "auto",
        px: "0"
      },
      addon: {
        bg: "transparent",
        minH: "auto",
        px: "0"
      }
    }
  },
  sizes: {
    xs: {
      field: {
        fontSize: "xs",
        px: "2",
        minH: "6",
        rounded: "sm"
      },
      addon: {
        fontSize: "xs",
        px: "2",
        minH: "6",
        rounded: "sm"
      }
    },
    sm: {
      field: {
        fontSize: "sm",
        px: "2",
        minH: "8",
        rounded: "md"
      },
      addon: {
        fontSize: "sm",
        px: "2",
        minH: "8",
        rounded: "md"
      }
    },
    md: {
      field: {
        fontSize: "md",
        px: "3",
        minH: "10",
        rounded: "md"
      },
      addon: {
        fontSize: "md",
        px: "3",
        minH: "10",
        rounded: "md"
      }
    },
    lg: {
      field: {
        fontSize: "lg",
        px: "4",
        minH: "12",
        rounded: "md"
      },
      addon: {
        fontSize: "lg",
        px: "4",
        minH: "12",
        rounded: "md"
      }
    }
  },
  defaultProps: {
    size: "md",
    variant: "outline"
  }
};

// src/components/menu.ts
var Menu = {
  baseStyle: {
    button: {
      transitionProperty: "common",
      transitionDuration: "normal"
    },
    list: {
      rounded: "md",
      minW: "xs",
      py: "2",
      bg: ["white", "black"],
      border: "1px solid",
      borderColor: ["blackAlpha.200", "whiteAlpha.100"],
      color: "inherit",
      boxShadow: ["lg", "dark-lg"],
      zIndex: "guldo"
    },
    item: {
      cursor: "pointer",
      py: "1.5",
      px: "3",
      transitionProperty: "background",
      transitionDuration: "ultra-fast",
      transitionTimingFunction: "ease-in",
      _focus: {
        bg: ["blackAlpha.50", "whiteAlpha.50"]
      },
      _active: {
        bg: ["blackAlpha.50", "whiteAlpha.50"],
        _disabled: {
          bg: ["white", "black"]
        }
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    },
    icon: {
      color: ["blackAlpha.600", "whiteAlpha.700"]
    },
    command: {
      opacity: 0.6
    },
    divider: {
      my: "2",
      borderBottomWidth: "1px",
      borderColor: "inherit"
    },
    group: {},
    groupLabel: {
      py: "1.5",
      px: "3",
      fontSize: "sm",
      fontWeight: "semibold",
      color: ["blackAlpha.700", "whiteAlpha.600"]
    }
  }
};

// src/components/color-picker.ts
var ColorPicker = (0, import_core2.mergeMultiStyle)(Input, Menu, {
  baseStyle: {
    container: {},
    inner: {},
    field: {
      pr: "8",
      pb: "px",
      _focus: {
        zIndex: "unset"
      },
      _readOnly: {
        pointerEvents: "none"
      }
    },
    swatch: {},
    eyeDropper: {
      w: "6",
      py: "1",
      fontSize: "lg",
      outline: 0,
      rounded: "md",
      transitionProperty: "common",
      transitionDuration: "normal",
      pointerEvents: "auto",
      color: ["blackAlpha.600", "whiteAlpha.700"],
      _hover: {
        color: ["blackAlpha.500", "whiteAlpha.600"]
      },
      _disabled: {
        pointerEvents: "none",
        opacity: 0.4
      },
      _focusVisible: {
        boxShadow: "outline"
      }
    },
    list: {
      w: "auto",
      minW: "auto",
      maxH: "inherit",
      overflowY: "inherit",
      p: "2"
    }
  },
  sizes: {
    xs: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "6" : "2"
      },
      swatch: {
        insetStart: "1",
        boxSize: "4"
      },
      eyeDropper: {
        insetEnd: "1",
        fontSize: "sm"
      }
    }),
    sm: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "9" : "2"
      },
      swatch: {
        insetStart: "2",
        boxSize: "5"
      },
      eyeDropper: {
        insetEnd: "2"
      }
    }),
    md: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "10" : "3"
      },
      swatch: {
        insetStart: "2",
        boxSize: "6"
      },
      eyeDropper: {
        insetEnd: "2"
      }
    }),
    lg: ({ withSwatch }) => ({
      field: {
        pl: withSwatch ? "12" : "4"
      },
      swatch: {
        insetStart: "2"
      },
      eyeDropper: {
        insetEnd: "2"
      }
    })
  }
})({
  omit: [
    "addon",
    "element",
    "button",
    "item",
    "command",
    "icon",
    "divider",
    "group",
    "groupLabel"
  ]
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ColorPicker
});
//# sourceMappingURL=color-picker.js.map