"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/avatar.ts
var avatar_exports = {};
__export(avatar_exports, {
  Avatar: () => Avatar
});
module.exports = __toCommonJS(avatar_exports);
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var Avatar = {
  baseStyle: {
    group: {},
    container: ({ theme: t, colorMode: m, name: string }) => {
      const bg = string ? (0, import_utils.randomColor)({ string }) : (0, import_core.mode)("gray.200", "gray.500")(m);
      return {
        bg,
        color: (0, import_utils.isDark)(bg)(t, m) ? "white" : "black",
        borderColor: ["white", "black"],
        verticalAlign: "top",
        _loaded: { bg: "inherit" }
      };
    },
    name: {},
    excess: {
      borderColor: ["white", "black"],
      bg: ["blackAlpha.200", "whiteAlpha.200"]
    },
    badge: {
      rounded: "full",
      borderWidth: "0.2em",
      borderColor: ["white", "black"]
    }
  },
  sizes: {
    "2xs": ({ theme: t }) => ({
      container: {
        w: "4",
        h: "4",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.4")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.4")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      },
      excess: {
        w: "4",
        h: "4",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.4")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      }
    }),
    xs: ({ theme: t }) => ({
      container: {
        w: "6",
        h: "6",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.6")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.6")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "6", h: "6" }
    }),
    sm: ({ theme: t }) => ({
      container: {
        w: "8",
        h: "8",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.8")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.8")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "8", h: "8" }
    }),
    md: ({ theme: t }) => ({
      container: {
        w: "12",
        h: "12",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.12")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.12")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "12", h: "12" }
    }),
    lg: ({ theme: t }) => ({
      container: {
        w: "16",
        h: "16",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.16")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.16")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "16", h: "16" }
    }),
    xl: ({ theme: t }) => ({
      container: {
        w: "24",
        h: "24",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.24")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.24")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "24", h: "24" }
    }),
    "2xl": ({ theme: t }) => ({
      container: {
        w: "32",
        h: "32",
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.32")} / 2.5)`
      },
      name: {
        fontSize: `calc(${(0, import_utils.getMemoizedObject)(t, "sizes.32")} / 2.5)`,
        lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.16")
      },
      excess: { w: "32", h: "32" }
    })
  },
  defaultProps: {
    size: "md"
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Avatar
});
//# sourceMappingURL=avatar.js.map