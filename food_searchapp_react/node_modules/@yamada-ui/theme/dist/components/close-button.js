"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/close-button.ts
var close_button_exports = {};
__export(close_button_exports, {
  CloseButton: () => CloseButton
});
module.exports = __toCommonJS(close_button_exports);
var import_core2 = require("@yamada-ui/core");

// src/components/button.ts
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var Button = {
  baseStyle: {
    cursor: "pointer",
    rounded: "md",
    fontWeight: "semibold",
    transitionProperty: "common",
    transitionDuration: "slower",
    _focus: {
      outline: "none"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _readOnly: {
      cursor: "default",
      _ripple: {
        display: "none"
      }
    },
    _hover: {
      _disabled: {
        bg: ["initial", "initial"]
      }
    }
  },
  variants: {
    solid: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        bg: (0, import_utils.isGray)(c) ? [`${c}.50`, `${c}.700`] : [(0, import_utils.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
        color: [(0, import_utils.isGray)(c) || (0, import_utils.isAccessible)(c) ? `black` : `white`, `white`],
        _hover: {
          bg: (0, import_utils.isGray)(c) ? [`${c}.100`, `${c}.800`] : [(0, import_utils.isAccessible)(c) ? `${c}.500` : `${c}.600`, `${c}.700`],
          _disabled: {
            bg: (0, import_utils.isGray)(c) ? [`${c}.50`, `${c}.700`] : [(0, import_utils.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`]
          }
        },
        _invalid: {
          border: "1px solid",
          borderColor: errorBorderColor,
          boxShadow: `0 0 0 1px ${errorBorderColor}`
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    outline: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        border: "1px solid",
        borderColor: [`${c}.600`, `${c}.500`],
        color: (0, import_utils.isGray)(c) ? ["blackAlpha.800", "whiteAlpha.700"] : [`${c}.600`, `${c}.500`],
        bg: "transparent",
        _hover: {
          bg: [`${c}.50`, (0, import_utils.transparentizeColor)(`${c}.600`, 0.12)(t, m)]
        },
        _invalid: {
          borderColor: [errorBorderColor, errorBorderColor],
          boxShadow: `0 0 0 1px ${errorBorderColor}`
        },
        _focusVisible: {
          boxShadow: "outline",
          _invalid: {
            borderColor: "transparent"
          }
        }
      };
    },
    link: ({ colorScheme: c = "gray" }) => ({
      padding: 0,
      height: "auto",
      lineHeight: "normal",
      verticalAlign: "baseline",
      color: [`${c}.600`, `${c}.500`],
      _hover: {
        textDecoration: "underline",
        _disabled: {
          textDecoration: "none"
        }
      },
      _active: {
        color: [`${c}.700`, `${c}.600`],
        _disabled: {
          color: [`${c}.600`, `${c}.500`]
        }
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _ripple: {
        display: "none"
      }
    }),
    ghost: ({
      theme: t,
      colorMode: m,
      colorScheme: c = "gray",
      errorBorderColor: ec = ["danger.500", "danger.400"]
    }) => {
      const errorBorderColor = (0, import_utils.isArray)(ec) ? (0, import_core.mode)((0, import_utils.getColor)(ec[0], ec[0])(t, m), (0, import_utils.getColor)(ec[1], ec[1])(t, m))(m) : (0, import_utils.getColor)(ec, ec)(t, m);
      return {
        color: (0, import_utils.isGray)(c) ? ["blackAlpha.800", "whiteAlpha.700"] : [`${c}.600`, `${c}.500`],
        bg: "transparent",
        _hover: {
          bg: [`${c}.50`, (0, import_utils.transparentizeColor)(`${c}.600`, 0.12)(t, m)]
        },
        _invalid: {
          border: "1px solid",
          borderColor: errorBorderColor,
          boxShadow: `0 0 0 1px ${errorBorderColor}`
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    unstyled: {
      bg: "none",
      color: "inherit",
      display: "inline",
      lineHeight: "inherit",
      m: 0,
      p: 0,
      _ripple: {
        display: "none"
      }
    }
  },
  sizes: {
    xs: ({ theme: t }) => ({
      h: 6,
      minW: 6,
      fontSize: "xs",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.6"),
      px: 2
    }),
    sm: ({ theme: t }) => ({
      h: 8,
      minW: 8,
      fontSize: "sm",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.8"),
      px: 3
    }),
    md: ({ theme: t }) => ({
      h: 10,
      minW: 10,
      fontSize: "md",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.10"),
      px: 4
    }),
    lg: ({ theme: t }) => ({
      h: 12,
      minW: 12,
      fontSize: "lg",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.12"),
      px: 6
    })
  },
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
};

// src/components/close-button.ts
var CloseButton = (0, import_core2.mergeStyle)(Button, {
  baseStyle: {
    _hover: {
      bg: ["blackAlpha.100", "whiteAlpha.100"]
    },
    _active: {
      bg: ["blackAlpha.200", "whiteAlpha.200"]
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  },
  sizes: {
    sm: {
      boxSize: 6,
      fontSize: "2xs"
    },
    md: {
      boxSize: 8,
      fontSize: "xs"
    },
    lg: {
      boxSize: 10,
      fontSize: "md"
    }
  },
  defaultProps: {
    size: "md"
  }
})({ omit: ["variants", "sizes", "defaultProps"] });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CloseButton
});
//# sourceMappingURL=close-button.js.map