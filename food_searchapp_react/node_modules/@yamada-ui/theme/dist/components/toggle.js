"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/toggle.ts
var toggle_exports = {};
__export(toggle_exports, {
  Toggle: () => Toggle
});
module.exports = __toCommonJS(toggle_exports);
var import_utils = require("@yamada-ui/utils");
var Toggle = {
  baseStyle: {
    cursor: "pointer",
    rounded: "md",
    transitionProperty: "common",
    transitionDuration: "slower",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _readOnly: {
      cursor: "default",
      _ripple: {
        display: "none"
      }
    }
  },
  variants: {
    subtle: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => {
      return {
        _hover: {
          bg: [
            (0, import_utils.isGray)(c) ? `blackAlpha.200` : `${c}.50`,
            (0, import_utils.transparentizeColor)(`${c}.500`, 0.12)(t, m)
          ]
        },
        _selected: {
          bg: [
            (0, import_utils.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils.shadeColor)(`${c}.300`, 72)(t, m)
          ]
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    solid: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => {
      return {
        _hover: {
          bg: [
            (0, import_utils.isGray)(c) ? `blackAlpha.200` : `${c}.100`,
            (0, import_utils.shadeColor)(`${c}.300`, 72)(t, m)
          ]
        },
        _selected: {
          bg: (0, import_utils.isGray)(c) ? [`${c}.100`, `${c}.700`] : [(0, import_utils.isAccessible)(c) ? `${c}.400` : `${c}.500`, `${c}.600`],
          color: [(0, import_utils.isGray)(c) || (0, import_utils.isAccessible)(c) ? `black` : `white`, `white`]
        },
        _focusVisible: {
          borderColor: "transparent",
          boxShadow: "outline"
        }
      };
    },
    outline: ({ theme: t, colorMode: m, colorScheme: c = "gray" }) => {
      return {
        border: "1px solid",
        borderColor: "border",
        _hover: {
          bg: [
            (0, import_utils.isGray)(c) ? `blackAlpha.200` : `${c}.50`,
            (0, import_utils.transparentizeColor)(`${c}.500`, 0.12)(t, m)
          ]
        },
        _selected: {
          bg: [
            (0, import_utils.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils.shadeColor)(`${c}.300`, 72)(t, m)
          ],
          borderColor: [
            (0, import_utils.isGray)(c) ? `${c}.50` : `${c}.100`,
            (0, import_utils.shadeColor)(`${c}.300`, 72)(t, m)
          ]
        },
        _focusVisible: {
          boxShadow: "outline",
          _invalid: {
            borderColor: "transparent"
          }
        }
      };
    },
    unstyled: {
      bg: "none",
      color: "inherit",
      display: "inline",
      lineHeight: "inherit",
      m: 0,
      p: 0,
      _ripple: {
        display: "none"
      }
    }
  },
  sizes: {
    xs: ({ theme: t }) => ({
      minBoxSize: 6,
      fontSize: "xs",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.6")
    }),
    sm: ({ theme: t }) => ({
      minBoxSize: 8,
      fontSize: "sm",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.8")
    }),
    md: ({ theme: t }) => ({
      minBoxSize: 10,
      fontSize: "md",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.10")
    }),
    lg: ({ theme: t }) => ({
      minBoxSize: 12,
      fontSize: "lg",
      lineHeight: (0, import_utils.getMemoizedObject)(t, "sizes.12")
    })
  },
  defaultProps: {
    variant: "subtle",
    size: "md",
    colorScheme: "gray"
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Toggle
});
//# sourceMappingURL=toggle.js.map