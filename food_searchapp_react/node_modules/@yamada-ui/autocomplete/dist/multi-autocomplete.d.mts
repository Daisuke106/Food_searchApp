import * as _yamada_ui_core from '@yamada-ui/core';
import { ThemeProps, HTMLUIProps } from '@yamada-ui/core';
import { PortalProps } from '@yamada-ui/portal';
import { FC, MouseEventHandler } from 'react';
import { AutocompleteIconProps } from './autocomplete-icon.mjs';
import { AutocompleteListProps } from './autocomplete-list.mjs';
import { c as UseAutocompleteProps } from './use-autocomplete-h3CQff1L.mjs';
import '@yamada-ui/motion';
import 'react/jsx-runtime';
import '@yamada-ui/use-descendant';
import '@yamada-ui/form-control';
import '@yamada-ui/popover';
import '@yamada-ui/utils';

type MultiAutocompleteOptions = {
    /**
     * The visual separator between each value.
     *
     * @default ','
     */
    separator?: string;
    /**
     * The custom display value to use.
     */
    component?: FC<{
        value: string | number;
        label: string;
        index: number;
        onRemove: MouseEventHandler<HTMLElement>;
    }>;
    /**
     * If `true`, keep the placeholder.
     *
     * @default false
     */
    keepPlaceholder?: boolean;
    /**
     * If `true`, display the select clear icon.
     *
     * @default true
     */
    isClearable?: boolean;
    /**
     * The border color when the input is focused.
     */
    focusBorderColor?: string;
    /**
     * The border color when the input is invalid.
     */
    errorBorderColor?: string;
    /**
     * Props for multi autocomplete container element.
     */
    containerProps?: Omit<HTMLUIProps<"div">, "children">;
    /**
     * Props for multi autocomplete list element.
     */
    listProps?: Omit<AutocompleteListProps, "children">;
    /**
     * Props for multi autocomplete input element.
     */
    inputProps?: HTMLUIProps<"input">;
    /**
     * Props for multi autocomplete icon element.
     */
    iconProps?: AutocompleteIconProps;
    /**
     * Props for multi autocomplete clear icon element.
     */
    clearIconProps?: AutocompleteIconProps;
    /**
     * Props to be forwarded to the portal component.
     *
     * @default '{ isDisabled: true }'
     *
     */
    portalProps?: Omit<PortalProps, "children">;
    /**
     * If `true`, the list element will be closed when value is selected.
     *
     * @default false
     */
    closeOnSelect?: boolean;
};
type MultiAutocompleteProps = ThemeProps<"MultiAutocomplete"> & Omit<UseAutocompleteProps<string[]>, "closeOnSelect"> & MultiAutocompleteOptions;
/**
 * `MultiAutocomplete` is a component used to display suggestions based on user text input and to obtain multiple values.
 *
 * @see Docs https://yamada-ui.com/components/forms/multi-autocomplete
 */
declare const MultiAutocomplete: _yamada_ui_core.Component<"input", MultiAutocompleteProps>;

export { MultiAutocomplete, type MultiAutocompleteProps };
