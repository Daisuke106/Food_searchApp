"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/autocomplete-option-group.tsx
var autocomplete_option_group_exports = {};
__export(autocomplete_option_group_exports, {
  AutocompleteOptionGroup: () => AutocompleteOptionGroup
});
module.exports = __toCommonJS(autocomplete_option_group_exports);
var import_core2 = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");

// src/use-autocomplete.tsx
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_popover = require("@yamada-ui/popover");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_use_outside_click = require("@yamada-ui/use-outside-click");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var {
  DescendantsContextProvider: AutocompleteDescendantsContextProvider,
  useDescendantsContext: useAutocompleteDescendantsContext,
  useDescendants: useAutocompleteDescendants,
  useDescendant: useAutocompleteDescendant
} = (0, import_use_descendant.createDescendant)();
var [AutocompleteProvider, useAutocompleteContext] = (0, import_utils.createContext)({
  name: "AutocompleteContext",
  errorMessage: `useAutocompleteContext returned is 'undefined'. Seems you forgot to wrap the components in "<Autocomplete />" or "<MultiAutocomplete />"`
});
var useAutocompleteOptionGroup = ({
  label,
  ...rest
}) => {
  const { value, omitSelectedValues } = useAutocompleteContext();
  const isMulti = (0, import_utils.isArray)(value);
  const descendants = useAutocompleteDescendantsContext();
  const values = descendants.values();
  const selectedValues = isMulti && omitSelectedValues ? descendants.values(
    ({ node }) => {
      var _a;
      return value.includes((_a = node.dataset.value) != null ? _a : "");
    }
  ) : [];
  const selectedIndexes = selectedValues.map(({ index }) => index);
  const childValues = values.filter(
    ({ node, index }) => {
      var _a;
      return ((_a = node.parentElement) == null ? void 0 : _a.dataset.label) === label && !selectedIndexes.includes(index) && "target" in node.dataset;
    }
  );
  const isEmpty = !childValues.length;
  const computedRest = (0, import_utils.splitObject)(rest, import_core.layoutStyleProperties);
  const getContainerProps = (0, import_react.useCallback)(
    (props = {}, ref = null) => {
      const style = {
        border: "0px",
        clip: "rect(0px, 0px, 0px, 0px)",
        height: "1px",
        width: "1px",
        margin: "-1px",
        padding: "0px",
        overflow: "hidden",
        whiteSpace: "nowrap",
        position: "absolute"
      };
      return {
        ref,
        ...props,
        ...computedRest[0],
        style: isEmpty ? style : void 0,
        "data-label": label,
        role: "autocomplete-group-container"
      };
    },
    [computedRest, isEmpty, label]
  );
  const getGroupProps = (0, import_react.useCallback)(
    (props = {}, ref = null) => ({
      ref,
      ...props,
      ...computedRest[1],
      "data-label": label,
      role: "autocomplete-group"
    }),
    [computedRest, label]
  );
  return {
    label,
    getContainerProps,
    getGroupProps
  };
};

// src/autocomplete-option-group.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var AutocompleteOptionGroup = (0, import_core2.forwardRef)(
  ({ className, color, h, height, minH, minHeight, children, ...rest }, ref) => {
    const { styles } = useAutocompleteContext();
    const { label, getContainerProps, getGroupProps } = useAutocompleteOptionGroup(rest);
    h != null ? h : h = height;
    minH != null ? minH : minH = minHeight;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      import_core2.ui.li,
      {
        className: (0, import_utils2.cx)(
          "ui-autocomplete__item",
          "ui-autocomplete__item--group",
          className
        ),
        __css: { w: "100%", h: "fit-content", color },
        ...getContainerProps(),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_core2.ui.span,
            {
              className: "ui-autocomplete__item__group-label",
              __css: styles.groupLabel,
              lineClamp: 1,
              children: label
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_core2.ui.ul,
            {
              ...getGroupProps({}, ref),
              className: "ui-autocomplete__item__group",
              __css: { h, minH, ...styles.group },
              children
            }
          )
        ]
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AutocompleteOptionGroup
});
//# sourceMappingURL=autocomplete-option-group.js.map