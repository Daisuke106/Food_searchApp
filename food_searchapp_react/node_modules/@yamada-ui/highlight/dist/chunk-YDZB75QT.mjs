"use client"

// src/highlight.tsx
import {
  ui,
  forwardRef,
  useComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { Text } from "@yamada-ui/typography";
import { cx, isArray } from "@yamada-ui/utils";
import { Fragment, useMemo } from "react";
import { jsx } from "react/jsx-runtime";
var escapeRegexp = (term) => term.replace(/[|\\{}()[\]^$+*?.-]/g, (char) => `\\${char}`);
var buildRegex = (query) => {
  query = query.filter(Boolean).map((text) => escapeRegexp(text.trim()));
  if (query.length)
    return new RegExp(`(${query.join("|")})`, "ig");
};
var highlightWords = ({ text, query }) => {
  const regex = buildRegex(isArray(query) ? query : [query]);
  if (!regex)
    return [{ text, match: false }];
  return text.split(regex).filter(Boolean).map((text2) => ({ text: text2, match: regex.test(text2) }));
};
var useHighlight = ({ text, query }) => useMemo(() => highlightWords({ text, query }), [text, query]);
var Highlight = ({
  isFragment = false,
  query,
  children: text,
  markProps,
  lineHeight = "tall",
  ...rest
}) => {
  if (typeof text !== "string")
    throw new Error("The children prop of Highlight must be a string");
  const chunks = useHighlight({ query, text });
  const Component = isFragment ? Fragment : Text;
  return /* @__PURE__ */ jsx(Component, { ...!isFragment ? { lineHeight } : {}, ...rest, children: chunks.map(
    ({ text: text2, match }, i) => match ? /* @__PURE__ */ jsx(Mark, { ...markProps, children: text2 }, i) : /* @__PURE__ */ jsx(Fragment, { children: text2 }, i)
  ) });
};
var Mark = forwardRef((props, ref) => {
  const [styles, mergedProps] = useComponentStyle("Mark", props);
  const { className, ...rest } = omitThemeProps(mergedProps);
  const css = {
    bg: "transparent",
    whiteSpace: "nowrap",
    ...styles
  };
  return /* @__PURE__ */ jsx(
    ui.mark,
    {
      ref,
      className: cx("ui-mark", className),
      __css: css,
      ...rest
    }
  );
});

export {
  useHighlight,
  Highlight,
  Mark
};
//# sourceMappingURL=chunk-YDZB75QT.mjs.map