import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, ThemeProps } from '@yamada-ui/core';
import { TextProps } from '@yamada-ui/typography';
import { ReactNode, FC } from 'react';

type Options = {
    text: string;
    query: string | string[];
};
type Chunk = {
    text: string;
    match: boolean;
};
declare const useHighlight: ({ text, query }: Options) => Chunk[];
type HighlightProps = TextProps & {
    /**
     * If `true`, `Fragment` is used for rendering.
     *
     * @default false
     */
    isFragment?: boolean;
    /**
     * Can be a single string or an array of strings. These are the terms that are highlighted in the text.
     */
    query: string | string[];
    /**
     * Accepts a string or a function. If it's a function, it should return a `ReactNode` and accept an array of `Chunk` objects as its argument.
     */
    children: string | ((props: Chunk[]) => ReactNode);
    /**
     * Properties passed to the Mark component which is used to highlight the matched terms.
     */
    markProps?: MarkProps;
};
declare const Highlight: FC<HighlightProps>;
type MarkProps = HTMLUIProps<"mark"> & ThemeProps<"Mark">;
declare const Mark: _yamada_ui_core.Component<"mark", MarkProps>;

export { Highlight, type HighlightProps, Mark, type MarkProps, useHighlight };
