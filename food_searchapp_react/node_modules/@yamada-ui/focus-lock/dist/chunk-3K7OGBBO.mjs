"use client"

// src/focus-lock.tsx
import { getAllFocusable, interopDefault } from "@yamada-ui/utils";
import { useCallback } from "react";
import ReactFocusLock from "react-focus-lock";
import { jsx } from "react/jsx-runtime";
var InternalFocusLock = interopDefault(ReactFocusLock);
var FocusLock = ({
  initialFocusRef,
  finalFocusRef,
  contentRef,
  restoreFocus,
  children,
  isDisabled,
  autoFocus,
  persistentFocus,
  lockFocusAcrossFrames
}) => {
  const onActivation = useCallback(() => {
    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else if (contentRef == null ? void 0 : contentRef.current) {
      const focusables = getAllFocusable(contentRef.current);
      if (focusables.length === 0)
        requestAnimationFrame(() => {
          var _a;
          (_a = contentRef.current) == null ? void 0 : _a.focus();
        });
    }
  }, [initialFocusRef, contentRef]);
  const onDeactivation = useCallback(() => {
    var _a;
    (_a = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a.focus();
  }, [finalFocusRef]);
  const returnFocus = restoreFocus && !finalFocusRef;
  return /* @__PURE__ */ jsx(
    InternalFocusLock,
    {
      crossFrame: lockFocusAcrossFrames,
      persistentFocus,
      autoFocus,
      disabled: isDisabled,
      onActivation,
      onDeactivation,
      returnFocus,
      children
    }
  );
};

export {
  FocusLock
};
//# sourceMappingURL=chunk-3K7OGBBO.mjs.map