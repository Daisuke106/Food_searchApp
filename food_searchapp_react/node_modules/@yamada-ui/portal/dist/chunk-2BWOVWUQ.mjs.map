{"version":3,"sources":["../src/portal.tsx"],"sourcesContent":["import type { ReactNode, RefObject } from \"react\"\nimport { ContainerPortal, DefaultPortal } from \"./\"\n\nexport type PortalProps = {\n  /**\n   * The `ref` to the component where the portal will be attached to.\n   */\n  containerRef?: RefObject<HTMLElement | null>\n  children: ReactNode\n  /**\n   * If `true`, the portal will check if it is within a parent portal\n   * and append itself to the parent's portal node.\n   * This provides nesting for portals.\n   *\n   * If `false`, the portal will always append to `document.body`\n   * regardless of nesting. It is used to opt out of portal nesting.\n   *\n   * @default true\n   */\n  appendToParentPortal?: boolean\n  /**\n   * If `true`, the forwarding will be disabled.\n   */\n  isDisabled?: boolean\n}\n\n/**\n * `Portal` is a component that renders elements outside of the current `DOM` hierarchy.\n *\n * @see Docs https://yamada-ui.com/components/other/portal\n */\nexport const Portal = ({\n  containerRef,\n  appendToParentPortal = true,\n  isDisabled,\n  children,\n}: PortalProps) => {\n  if (isDisabled) return children\n\n  return containerRef ? (\n    <ContainerPortal\n      containerRef={containerRef}\n      {...{ appendToParentPortal, children }}\n    />\n  ) : (\n    <DefaultPortal {...{ appendToParentPortal, children }} />\n  )\n}\n\nPortal.className = \"ui-portal\"\nPortal.selector = \".ui-portal\"\n"],"mappings":";;;;;;;;;AAwCI;AATG,IAAM,SAAS,CAAC;AAAA,EACrB;AAAA,EACA,uBAAuB;AAAA,EACvB;AAAA,EACA;AACF,MAAmB;AACjB,MAAI;AAAY,WAAO;AAEvB,SAAO,eACL;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACC,GAAG,EAAE,sBAAsB,SAAS;AAAA;AAAA,EACvC,IAEA,oBAAC,iBAAe,GAAG,EAAE,sBAAsB,SAAS,GAAG;AAE3D;AAEA,OAAO,YAAY;AACnB,OAAO,WAAW;","names":[]}