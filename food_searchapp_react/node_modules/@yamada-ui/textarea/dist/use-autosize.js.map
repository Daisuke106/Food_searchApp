{"version":3,"sources":["../src/use-autosize.ts"],"sourcesContent":["import { pickObject } from \"@yamada-ui/utils\"\nimport type { RefObject } from \"react\"\nimport { useRef } from \"react\"\n\nconst useAutosize = (\n  ref: RefObject<HTMLTextAreaElement>,\n  maxRows: number,\n  minRows: number,\n) => {\n  const valueRef = useRef<string>()\n\n  const resizeTextarea = () => {\n    const el = ref.current\n    if (!el) return\n\n    let { value, placeholder } = el\n    if (value === valueRef.current) return\n    else valueRef.current = value\n\n    value ??= placeholder ?? \"x\"\n\n    const nodeSizeData = getSizingData(el)\n\n    if (!nodeSizeData) return\n\n    const rows = calcRows(el, nodeSizeData, value, maxRows, minRows)\n\n    el.rows = rows\n  }\n\n  return resizeTextarea\n}\n\nconst SIZING_STYLE = [\n  \"borderBottomWidth\",\n  \"borderLeftWidth\",\n  \"borderRightWidth\",\n  \"borderTopWidth\",\n  \"boxSizing\",\n  \"fontFamily\",\n  \"fontSize\",\n  \"fontStyle\",\n  \"fontWeight\",\n  \"letterSpacing\",\n  \"lineHeight\",\n  \"paddingBottom\",\n  \"paddingLeft\",\n  \"paddingRight\",\n  \"paddingTop\",\n  // non-standard\n  \"tabSize\",\n  \"textIndent\",\n  // non-standard\n  \"textRendering\",\n  \"textTransform\",\n  \"width\",\n  \"wordBreak\",\n] as const\n\ntype SizingProps = Extract<\n  (typeof SIZING_STYLE)[number],\n  keyof CSSStyleDeclaration\n>\n\ntype SizingStyle = Pick<CSSStyleDeclaration, SizingProps>\n\ntype SizingData = {\n  sizingStyle: SizingStyle\n  paddingSize: number\n  borderSize: number\n  singleRowHeight: number\n}\n\nconst getSizingData = (el: HTMLElement): SizingData | null => {\n  const style = window?.getComputedStyle(el)\n\n  if (style == null) return null\n\n  const sizingStyle = pickObject(\n    style,\n    SIZING_STYLE as unknown as SizingProps[],\n  )\n  const { boxSizing } = sizingStyle\n\n  if (boxSizing === \"\") return null\n\n  const paddingSize =\n    parseFloat(sizingStyle.paddingBottom!) + parseFloat(sizingStyle.paddingTop!)\n\n  const borderSize =\n    parseFloat(sizingStyle.borderBottomWidth!) +\n    parseFloat(sizingStyle.borderTopWidth!)\n\n  const singleRowHeight = parseFloat(sizingStyle.lineHeight!)\n\n  return {\n    sizingStyle,\n    paddingSize,\n    borderSize,\n    singleRowHeight,\n  }\n}\n\nconst calcRows = (\n  el: HTMLTextAreaElement,\n  sizingData: SizingData,\n  value: string,\n  maxRows: number,\n  minRows: number,\n) => {\n  const clone = el.cloneNode() as HTMLTextAreaElement\n  Object.assign(clone.style, sizingData.sizingStyle)\n  forceHiddenStyles(clone)\n\n  clone.value = value\n  document.body.appendChild(clone)\n\n  let rows\n  if (clone.scrollHeight) {\n    const rowHeight = sizingData.singleRowHeight\n    rows = Math.min(\n      maxRows,\n      Math.max(minRows, Math.floor(clone.scrollHeight / rowHeight)),\n    )\n  } else {\n    const lineBreaks = (value.match(/\\n/g) || []).length\n    rows = Math.min(maxRows, Math.max(minRows, lineBreaks + 1))\n  }\n\n  document.body.removeChild(clone)\n\n  return rows\n}\n\nconst HIDDEN_TEXTAREA_STYLE = {\n  \"min-height\": \"0\",\n  \"max-height\": \"none\",\n  height: \"0\",\n  visibility: \"hidden\",\n  overflow: \"hidden\",\n  position: \"absolute\",\n  \"z-index\": \"-1000\",\n  top: \"0\",\n  right: \"0\",\n} as const\n\nconst forceHiddenStyles = (el: HTMLElement) => {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach((key) => {\n    el.style.setProperty(\n      key,\n      HIDDEN_TEXTAREA_STYLE[key as keyof typeof HIDDEN_TEXTAREA_STYLE],\n      \"important\",\n    )\n  })\n}\n\nexport default useAutosize\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA2B;AAE3B,mBAAuB;AAEvB,IAAM,cAAc,CAClB,KACA,SACA,YACG;AACH,QAAM,eAAW,qBAAe;AAEhC,QAAM,iBAAiB,MAAM;AAC3B,UAAM,KAAK,IAAI;AACf,QAAI,CAAC;AAAI;AAET,QAAI,EAAE,OAAO,YAAY,IAAI;AAC7B,QAAI,UAAU,SAAS;AAAS;AAAA;AAC3B,eAAS,UAAU;AAExB,oCAAU,oCAAe;AAEzB,UAAM,eAAe,cAAc,EAAE;AAErC,QAAI,CAAC;AAAc;AAEnB,UAAM,OAAO,SAAS,IAAI,cAAc,OAAO,SAAS,OAAO;AAE/D,OAAG,OAAO;AAAA,EACZ;AAEA,SAAO;AACT;AAEA,IAAM,eAAe;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAEA;AAAA,EACA;AAAA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAgBA,IAAM,gBAAgB,CAAC,OAAuC;AAC5D,QAAM,QAAQ,iCAAQ,iBAAiB;AAEvC,MAAI,SAAS;AAAM,WAAO;AAE1B,QAAM,kBAAc;AAAA,IAClB;AAAA,IACA;AAAA,EACF;AACA,QAAM,EAAE,UAAU,IAAI;AAEtB,MAAI,cAAc;AAAI,WAAO;AAE7B,QAAM,cACJ,WAAW,YAAY,aAAc,IAAI,WAAW,YAAY,UAAW;AAE7E,QAAM,aACJ,WAAW,YAAY,iBAAkB,IACzC,WAAW,YAAY,cAAe;AAExC,QAAM,kBAAkB,WAAW,YAAY,UAAW;AAE1D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAM,WAAW,CACf,IACA,YACA,OACA,SACA,YACG;AACH,QAAM,QAAQ,GAAG,UAAU;AAC3B,SAAO,OAAO,MAAM,OAAO,WAAW,WAAW;AACjD,oBAAkB,KAAK;AAEvB,QAAM,QAAQ;AACd,WAAS,KAAK,YAAY,KAAK;AAE/B,MAAI;AACJ,MAAI,MAAM,cAAc;AACtB,UAAM,YAAY,WAAW;AAC7B,WAAO,KAAK;AAAA,MACV;AAAA,MACA,KAAK,IAAI,SAAS,KAAK,MAAM,MAAM,eAAe,SAAS,CAAC;AAAA,IAC9D;AAAA,EACF,OAAO;AACL,UAAM,cAAc,MAAM,MAAM,KAAK,KAAK,CAAC,GAAG;AAC9C,WAAO,KAAK,IAAI,SAAS,KAAK,IAAI,SAAS,aAAa,CAAC,CAAC;AAAA,EAC5D;AAEA,WAAS,KAAK,YAAY,KAAK;AAE/B,SAAO;AACT;AAEA,IAAM,wBAAwB;AAAA,EAC5B,cAAc;AAAA,EACd,cAAc;AAAA,EACd,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,KAAK;AAAA,EACL,OAAO;AACT;AAEA,IAAM,oBAAoB,CAAC,OAAoB;AAC7C,SAAO,KAAK,qBAAqB,EAAE,QAAQ,CAAC,QAAQ;AAClD,OAAG,MAAM;AAAA,MACP;AAAA,MACA,sBAAsB,GAAyC;AAAA,MAC/D;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,IAAO,uBAAQ;","names":[]}