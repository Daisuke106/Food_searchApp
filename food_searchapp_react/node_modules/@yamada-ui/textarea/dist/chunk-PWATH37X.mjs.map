{"version":3,"sources":["../src/textarea.tsx"],"sourcesContent":["import type {\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  ColorModeToken,\n  CSS,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useComponentStyle,\n} from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport { useFormControlProps } from \"@yamada-ui/form-control\"\nimport {\n  addDomEvent,\n  assignRef,\n  createdDom,\n  cx,\n  handlerAll,\n  mergeRefs,\n  noop,\n  useSafeLayoutEffect,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport type { ForwardedRef } from \"react\"\nimport { useRef } from \"react\"\nimport useAutosize from \"./use-autosize\"\n\ntype TextareaOptions = {\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * If `true`, the Textarea height auto-adjusts to text height.\n   */\n  autosize?: boolean\n  /**\n   * Autosize up to maxRows rows.\n   *\n   * @default Infinity\n   */\n  maxRows?: number\n  /**\n   * Autosize up to minRows rows.\n   *\n   * @default 1\n   */\n  minRows?: number\n  /**\n   * Ref to a resize function.\n   */\n  resizeRef?: ForwardedRef<() => void>\n}\n\nexport type TextareaProps = Omit<\n  HTMLUIProps<\"textarea\">,\n  \"disabled\" | \"required\" | \"readOnly\"\n> &\n  ThemeProps<\"Textarea\"> &\n  TextareaOptions &\n  FormControlOptions\n\n/**\n * `Textarea` is a component used to obtain multi-line text input.\n *\n * @see Docs https://yamada-ui.com/components/forms/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const [\n    { h, height, minH, minHeight, maxH, maxHeight, ...styles },\n    mergedProps,\n  ] = useComponentStyle(\"Textarea\", props)\n  let {\n    className,\n    rows,\n    resize = \"none\",\n    autosize,\n    maxRows = Infinity,\n    minRows = 1,\n    resizeRef,\n    onChange,\n    ...rest\n  } = omitThemeProps(mergedProps)\n  rest = useFormControlProps(rest)\n\n  const isBrowser = createdDom()\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  const value = textareaRef.current?.value ?? \"\"\n  const resizeTextarea = useAutosize(textareaRef, maxRows, minRows)\n\n  let css: CSSUIObject\n\n  if (rows || autosize) {\n    css = styles\n  } else {\n    css = { h, height, minH, minHeight, maxH, maxHeight, ...styles }\n  }\n\n  useSafeLayoutEffect(() => {\n    if (!isBrowser || !autosize) return\n\n    resizeTextarea()\n\n    const unsubscribeResize = addDomEvent(window, \"resize\", resizeTextarea)\n    const unsubscribeLoadingdone = addDomEvent(\n      document.fonts,\n      \"loadingdone\",\n      resizeTextarea,\n    )\n\n    return () => {\n      unsubscribeResize()\n      unsubscribeLoadingdone()\n    }\n  }, [])\n\n  useUpdateEffect(() => {\n    if (!autosize) return\n    resizeTextarea()\n  }, [value])\n\n  assignRef(resizeRef, resizeTextarea)\n\n  return (\n    <ui.textarea\n      ref={mergeRefs(ref, textareaRef)}\n      className={cx(\"ui-textarea\", className)}\n      __css={css}\n      resize={resize}\n      rows={rows}\n      onChange={handlerAll(autosize ? resizeTextarea : noop, onChange)}\n      {...rest}\n    />\n  )\n})\n"],"mappings":";;;;;;AAOA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,2BAA2B;AACpC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,cAAc;AAwGnB;AAzDG,IAAM,WAAW,WAAsC,CAAC,OAAO,QAAQ;AA1E9E;AA2EE,QAAM;AAAA,IACJ,EAAE,GAAG,QAAQ,MAAM,WAAW,MAAM,WAAW,GAAG,OAAO;AAAA,IACzD;AAAA,EACF,IAAI,kBAAkB,YAAY,KAAK;AACvC,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,UAAU;AAAA,IACV,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,IAAI,eAAe,WAAW;AAC9B,SAAO,oBAAoB,IAAI;AAE/B,QAAM,YAAY,WAAW;AAC7B,QAAM,cAAc,OAA4B,IAAI;AACpD,QAAM,SAAQ,uBAAY,YAAZ,mBAAqB,UAArB,YAA8B;AAC5C,QAAM,iBAAiB,qBAAY,aAAa,SAAS,OAAO;AAEhE,MAAI;AAEJ,MAAI,QAAQ,UAAU;AACpB,UAAM;AAAA,EACR,OAAO;AACL,UAAM,EAAE,GAAG,QAAQ,MAAM,WAAW,MAAM,WAAW,GAAG,OAAO;AAAA,EACjE;AAEA,sBAAoB,MAAM;AACxB,QAAI,CAAC,aAAa,CAAC;AAAU;AAE7B,mBAAe;AAEf,UAAM,oBAAoB,YAAY,QAAQ,UAAU,cAAc;AACtE,UAAM,yBAAyB;AAAA,MAC7B,SAAS;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAEA,WAAO,MAAM;AACX,wBAAkB;AAClB,6BAAuB;AAAA,IACzB;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,kBAAgB,MAAM;AACpB,QAAI,CAAC;AAAU;AACf,mBAAe;AAAA,EACjB,GAAG,CAAC,KAAK,CAAC;AAEV,YAAU,WAAW,cAAc;AAEnC,SACE;AAAA,IAAC,GAAG;AAAA,IAAH;AAAA,MACC,KAAK,UAAU,KAAK,WAAW;AAAA,MAC/B,WAAW,GAAG,eAAe,SAAS;AAAA,MACtC,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA,UAAU,WAAW,WAAW,iBAAiB,MAAM,QAAQ;AAAA,MAC9D,GAAG;AAAA;AAAA,EACN;AAEJ,CAAC;","names":[]}