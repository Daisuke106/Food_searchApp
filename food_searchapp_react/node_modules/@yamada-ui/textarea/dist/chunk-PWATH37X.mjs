"use client"
import {
  use_autosize_default
} from "./chunk-H3EGLDRH.mjs";

// src/textarea.tsx
import {
  ui,
  forwardRef,
  omitThemeProps,
  useComponentStyle
} from "@yamada-ui/core";
import { useFormControlProps } from "@yamada-ui/form-control";
import {
  addDomEvent,
  assignRef,
  createdDom,
  cx,
  handlerAll,
  mergeRefs,
  noop,
  useSafeLayoutEffect,
  useUpdateEffect
} from "@yamada-ui/utils";
import { useRef } from "react";
import { jsx } from "react/jsx-runtime";
var Textarea = forwardRef((props, ref) => {
  var _a, _b;
  const [
    { h, height, minH, minHeight, maxH, maxHeight, ...styles },
    mergedProps
  ] = useComponentStyle("Textarea", props);
  let {
    className,
    rows,
    resize = "none",
    autosize,
    maxRows = Infinity,
    minRows = 1,
    resizeRef,
    onChange,
    ...rest
  } = omitThemeProps(mergedProps);
  rest = useFormControlProps(rest);
  const isBrowser = createdDom();
  const textareaRef = useRef(null);
  const value = (_b = (_a = textareaRef.current) == null ? void 0 : _a.value) != null ? _b : "";
  const resizeTextarea = use_autosize_default(textareaRef, maxRows, minRows);
  let css;
  if (rows || autosize) {
    css = styles;
  } else {
    css = { h, height, minH, minHeight, maxH, maxHeight, ...styles };
  }
  useSafeLayoutEffect(() => {
    if (!isBrowser || !autosize)
      return;
    resizeTextarea();
    const unsubscribeResize = addDomEvent(window, "resize", resizeTextarea);
    const unsubscribeLoadingdone = addDomEvent(
      document.fonts,
      "loadingdone",
      resizeTextarea
    );
    return () => {
      unsubscribeResize();
      unsubscribeLoadingdone();
    };
  }, []);
  useUpdateEffect(() => {
    if (!autosize)
      return;
    resizeTextarea();
  }, [value]);
  assignRef(resizeRef, resizeTextarea);
  return /* @__PURE__ */ jsx(
    ui.textarea,
    {
      ref: mergeRefs(ref, textareaRef),
      className: cx("ui-textarea", className),
      __css: css,
      resize,
      rows,
      onChange: handlerAll(autosize ? resizeTextarea : noop, onChange),
      ...rest
    }
  );
});

export {
  Textarea
};
//# sourceMappingURL=chunk-PWATH37X.mjs.map