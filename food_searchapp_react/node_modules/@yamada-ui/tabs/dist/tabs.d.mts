import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, ThemeProps, CSSUIObject } from '@yamada-ui/core';
import * as _yamada_ui_use_descendant from '@yamada-ui/use-descendant';
import { LazyMode } from '@yamada-ui/use-disclosure';
import { Dispatch, SetStateAction } from 'react';
import { TabListProps } from './tab-list.mjs';
import { TabPanelsProps } from './tab-panels.mjs';

declare const useTabsDescendantsContext: () => {
    register: (nodeOrOptions: HTMLButtonElement | {
        disabled?: boolean | undefined;
        id?: string | undefined;
        filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined;
    } | null) => void | ((node: HTMLButtonElement | null) => void);
    unregister: (node: HTMLButtonElement) => void;
    destroy: () => void;
    count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => number;
    values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}>[];
    value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    indexOf: (node: HTMLButtonElement | null) => number;
    firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => number;
    enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}>[];
    enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    enabledIndexOf: (node: HTMLButtonElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => number;
    enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
    enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLButtonElement, {}> | undefined;
};
declare const useTabsDescendant: (options?: {
    disabled?: boolean | undefined;
    id?: string | undefined;
    filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined;
} | undefined) => {
    descendants: {
        register: (nodeOrOptions: HTMLElement | _yamada_ui_use_descendant.DescendantOptions<HTMLElement, Record<string, any>> | null) => void | ((node: HTMLElement | null) => void);
        unregister: (node: HTMLElement) => void;
        destroy: () => void;
        count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>>[];
        value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        indexOf: (node: HTMLElement | null) => number;
        firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>>[];
        enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledIndexOf: (node: HTMLElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
    };
    index: number;
    enabledIndex: number;
    register: (node: HTMLButtonElement | null) => void;
};

type TabsContext = Omit<TabsOptions, "index" | "defaultIndex" | "onChange"> & {
    focusedIndex: number;
    setFocusedIndex: Dispatch<SetStateAction<number>>;
    selectedIndex: number;
    setSelectedIndex: Dispatch<SetStateAction<number>>;
    styles: Record<string, CSSUIObject>;
    disableRipple: boolean;
};
declare const useTabsContext: () => TabsContext;

type TabsOptions = {
    /**
     * The index of the selected tab.
     */
    index?: number;
    /**
     * The index of the selected tab.
     */
    defaultIndex?: number;
    /**
     * If `true`, tabs will stretch to width of the tablist.
     *
     * @default false
     */
    isFitted?: boolean;
    /**
     * The alignment of the tabs.
     */
    align?: "start" | "end" | "center";
    /**
     * If `true`, the tabs will be manually activated andã€€display its panel by pressing Space or Enter.
     *
     * If `false`, the tabs will be automatically activated and their panel is displayed when they receive focus.
     *
     * @default false
     */
    isManual?: boolean;
    /**
     * If `true`, rendering of the tab panel's will be deferred until it is selected.
     *
     * @default true
     */
    isLazy?: boolean;
    /**
     * The lazy behavior of tab panels' content when not active. Only works when `isLazy={true}`.
     *
     * - `unmount`: The content of inactive tab panels are always unmounted.
     * - `keepMounted`: The content of inactive tab panels is initially unmounted, but stays mounted when selected.
     *
     * @default 'unmount'
     */
    lazyBehavior?: LazyMode;
    /**
     * The orientation of the tab list.
     *
     * @default 'horizontal'
     */
    orientation?: "vertical" | "horizontal";
    /**
     * The callback invoked when the index changes.
     */
    onChange?: (index: number) => void;
    /**
     * Props for tab list component.
     */
    tabListProps?: TabListProps;
    /**
     * Props for tab panels components.
     */
    tabPanelsProps?: TabPanelsProps;
    /**
     * If `true`, disable ripple effects when pressing the tab.
     *
     * @default false
     */
    disableRipple?: boolean;
};
type TabsProps = Omit<HTMLUIProps<"div">, "onChange"> & ThemeProps<"Tabs"> & TabsOptions;
/**
 * `Tabs` is a component for switching between different display areas.
 *
 * @see Docs https://yamada-ui.com/components/disclosure/tabs
 */
declare const Tabs: _yamada_ui_core.Component<"div", TabsProps>;

export { Tabs, type TabsProps, useTabsContext, useTabsDescendant, useTabsDescendantsContext };
