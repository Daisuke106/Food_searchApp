"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tab-panel.tsx
var tab_panel_exports = {};
__export(tab_panel_exports, {
  TabPanel: () => TabPanel
});
module.exports = __toCommonJS(tab_panel_exports);
var import_core5 = require("@yamada-ui/core");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_utils5 = require("@yamada-ui/utils");
var import_react4 = require("react");

// src/tab-panels.tsx
var import_core4 = require("@yamada-ui/core");
var import_utils4 = require("@yamada-ui/utils");
var import_react3 = require("react");

// src/tabs.tsx
var import_core3 = require("@yamada-ui/core");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_utils3 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/tab-list.tsx
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var TabList = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { focusedIndex, orientation, tabListProps, styles } = useTabsContext();
    const descendants = useTabsDescendantsContext();
    const isVertical = orientation === "vertical";
    const onNext = (0, import_react.useCallback)(() => {
      var _a;
      const next = descendants.enabledNextValue(focusedIndex);
      if (next)
        (_a = next.node) == null ? void 0 : _a.focus();
    }, [descendants, focusedIndex]);
    const onPrev = (0, import_react.useCallback)(() => {
      var _a;
      const prev = descendants.enabledPrevValue(focusedIndex);
      if (prev)
        (_a = prev.node) == null ? void 0 : _a.focus();
    }, [descendants, focusedIndex]);
    const onFirst = (0, import_react.useCallback)(() => {
      var _a;
      const first = descendants.enabledFirstValue();
      if (first)
        (_a = first.node) == null ? void 0 : _a.focus();
    }, [descendants]);
    const onLast = (0, import_react.useCallback)(() => {
      var _a;
      const last = descendants.enabledLastValue();
      if (last)
        (_a = last.node) == null ? void 0 : _a.focus();
    }, [descendants]);
    const onKeyDown = (0, import_react.useCallback)(
      (ev) => {
        const actions = {
          ArrowLeft: () => !isVertical ? onPrev() : {},
          ArrowRight: () => !isVertical ? onNext() : {},
          ArrowDown: () => isVertical ? onNext() : {},
          ArrowUp: () => isVertical ? onPrev() : {},
          Home: onFirst,
          End: onLast
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        action(ev);
      },
      [onFirst, onLast, isVertical, onPrev, onNext]
    );
    const css = { display: "flex", ...styles.tabList };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        className: (0, import_utils.cx)("ui-tabs__list", className),
        role: "tablist",
        __css: css,
        ...tabListProps,
        ...rest,
        onKeyDown: (0, import_utils.handlerAll)(rest.onKeyDown, onKeyDown)
      }
    );
  }
);

// src/tab.tsx
var import_core2 = require("@yamada-ui/core");
var import_ripple = require("@yamada-ui/ripple");
var import_use_clickable = require("@yamada-ui/use-clickable");
var import_utils2 = require("@yamada-ui/utils");
var import_jsx_runtime2 = require("react/jsx-runtime");
var Tab = (0, import_core2.forwardRef)(
  ({
    className,
    isDisabled,
    isFocusable,
    clickOnEnter,
    clickOnSpace,
    children,
    ...props
  }, ref) => {
    const {
      selectedIndex,
      isManual,
      disableRipple,
      setSelectedIndex,
      setFocusedIndex,
      styles
    } = useTabsContext();
    const { index, register } = useTabsDescendant({
      disabled: isDisabled && !isFocusable
    });
    const isSelected = index === selectedIndex;
    const onFocus = () => {
      setFocusedIndex(index);
      if (!isManual && !(isDisabled && isFocusable))
        setSelectedIndex(index);
    };
    const rest = (0, import_use_clickable.useClickable)({
      ref: (0, import_utils2.mergeRefs)(register, ref),
      isDisabled,
      isFocusable,
      clickOnEnter,
      clickOnSpace,
      onClick: (0, import_utils2.handlerAll)(props.onClick, () => setSelectedIndex(index))
    });
    const { onPointerDown, ...rippleProps } = (0, import_ripple.useRipple)({
      ...rest,
      isDisabled: disableRipple || isDisabled
    });
    const css = {
      position: "relative",
      overflow: "hidden",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      outline: "0",
      ...styles.tab
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      import_core2.ui.button,
      {
        className: (0, import_utils2.cx)("ui-tabs__tab", className),
        __css: css,
        role: "tab",
        ...props,
        ...rest,
        type: "button",
        tabIndex: isSelected ? 0 : -1,
        "aria-selected": (0, import_utils2.ariaAttr)(isSelected),
        onPointerDown,
        onFocus: isDisabled ? void 0 : (0, import_utils2.handlerAll)(props.onFocus, onFocus),
        children: [
          children,
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_ripple.Ripple, { isDisabled: disableRipple || isDisabled, ...rippleProps })
        ]
      }
    );
  }
);

// src/tabs.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var {
  DescendantsContextProvider,
  useDescendantsContext: useTabsDescendantsContext,
  useDescendants,
  useDescendant: useTabsDescendant
} = (0, import_use_descendant.createDescendant)();
var [TabsProvider, useTabsContext] = (0, import_utils3.createContext)({
  name: "TabsContext",
  errorMessage: `useTabsContext returned is 'undefined'. Seems you forgot to wrap the components in "<Tabs />"`
});
var Tabs = (0, import_core3.forwardRef)(
  ({ align = "start", ...props }, ref) => {
    const [styles, mergedProps] = (0, import_core3.useMultiComponentStyle)("Tabs", {
      align,
      ...props
    });
    const {
      className,
      index,
      defaultIndex = 0,
      onChange,
      isFitted,
      isManual,
      isLazy = true,
      disableRipple = false,
      lazyBehavior = "keepMounted",
      orientation = "horizontal",
      tabListProps,
      tabPanelsProps,
      children,
      ...rest
    } = (0, import_core3.omitThemeProps)(mergedProps);
    const [focusedIndex, setFocusedIndex] = (0, import_react2.useState)(defaultIndex);
    const [selectedIndex, setSelectedIndex] = (0, import_use_controllable_state.useControllableState)({
      value: index,
      defaultValue: defaultIndex,
      onChange
    });
    const descendants = useDescendants();
    const validChildren = (0, import_utils3.getValidChildren)(children);
    const [customTabList] = (0, import_utils3.findChildren)(validChildren, TabList);
    const [customTabPanels] = (0, import_utils3.findChildren)(validChildren, TabPanels);
    const cloneTabs = (0, import_utils3.pickChildren)(validChildren, Tab);
    const cloneTabPanels = (0, import_utils3.pickChildren)(validChildren, TabPanel);
    (0, import_react2.useEffect)(() => {
      if (index != null)
        setFocusedIndex(index);
    }, [index]);
    const css = { w: "100%", ...styles.container };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      TabsProvider,
      {
        value: {
          focusedIndex,
          setFocusedIndex,
          selectedIndex,
          setSelectedIndex,
          disableRipple,
          isFitted,
          align,
          isManual,
          isLazy,
          lazyBehavior,
          orientation,
          tabListProps,
          tabPanelsProps,
          styles
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
          import_core3.ui.div,
          {
            ref,
            className: (0, import_utils3.cx)("ui-tabs", className),
            __css: css,
            ...rest,
            children: [
              customTabList != null ? customTabList : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(TabList, { children: cloneTabs }),
              customTabPanels != null ? customTabPanels : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(TabPanels, { children: cloneTabPanels })
            ]
          }
        )
      }
    ) });
  }
);

// src/tab-panels.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var [TabPanelProvider, useTabPanelContext] = (0, import_utils4.createContext)({});
var TabPanels = (0, import_core4.forwardRef)(
  ({ className, children, ...rest }, ref) => {
    const { selectedIndex, tabPanelsProps, styles } = useTabsContext();
    const validChildren = (0, import_utils4.getValidChildren)(children);
    const cloneChildren = validChildren.map((child, index) => {
      const isSelected = index === selectedIndex;
      return (0, import_react3.createElement)(
        TabPanelProvider,
        { key: index, value: { isSelected, selectedIndex } },
        child
      );
    });
    const css = {
      w: "100%",
      ...styles.tabPanels
    };
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      import_core4.ui.div,
      {
        ref,
        className: (0, import_utils4.cx)("ui-tabs__panels", className),
        __css: css,
        ...tabPanelsProps,
        ...rest,
        children: cloneChildren
      }
    );
  }
);

// src/tab-panel.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
var TabPanel = (0, import_core5.forwardRef)(
  ({ className, children, ...rest }, ref) => {
    const { isLazy: enabled, lazyBehavior: mode, styles } = useTabsContext();
    const { isSelected } = useTabPanelContext();
    const hasBeenSelected = (0, import_react4.useRef)(false);
    if (isSelected)
      hasBeenSelected.current = true;
    const shouldRenderChildren = (0, import_use_disclosure.useLazyDisclosure)({
      wasSelected: hasBeenSelected.current,
      isSelected,
      enabled,
      mode
    });
    const css = { ...styles.tabPanel };
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      import_core5.ui.div,
      {
        ref,
        className: (0, import_utils5.cx)("ui-tabs__panel", className),
        role: "tabpanel",
        __css: css,
        ...rest,
        hidden: !isSelected,
        children: shouldRenderChildren ? children : null
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TabPanel
});
//# sourceMappingURL=tab-panel.js.map