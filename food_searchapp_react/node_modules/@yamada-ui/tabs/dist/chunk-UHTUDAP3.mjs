"use client"

// src/tabs.tsx
import {
  ui as ui5,
  forwardRef as forwardRef5,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import { createDescendant } from "@yamada-ui/use-descendant";
import {
  createContext as createContext2,
  cx as cx5,
  findChildren,
  pickChildren,
  getValidChildren as getValidChildren2
} from "@yamada-ui/utils";
import { useEffect, useState } from "react";

// src/tab-list.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { cx, handlerAll } from "@yamada-ui/utils";
import { useCallback } from "react";
import { jsx } from "react/jsx-runtime";
var TabList = forwardRef(
  ({ className, ...rest }, ref) => {
    const { focusedIndex, orientation, tabListProps, styles } = useTabsContext();
    const descendants = useTabsDescendantsContext();
    const isVertical = orientation === "vertical";
    const onNext = useCallback(() => {
      var _a;
      const next = descendants.enabledNextValue(focusedIndex);
      if (next)
        (_a = next.node) == null ? void 0 : _a.focus();
    }, [descendants, focusedIndex]);
    const onPrev = useCallback(() => {
      var _a;
      const prev = descendants.enabledPrevValue(focusedIndex);
      if (prev)
        (_a = prev.node) == null ? void 0 : _a.focus();
    }, [descendants, focusedIndex]);
    const onFirst = useCallback(() => {
      var _a;
      const first = descendants.enabledFirstValue();
      if (first)
        (_a = first.node) == null ? void 0 : _a.focus();
    }, [descendants]);
    const onLast = useCallback(() => {
      var _a;
      const last = descendants.enabledLastValue();
      if (last)
        (_a = last.node) == null ? void 0 : _a.focus();
    }, [descendants]);
    const onKeyDown = useCallback(
      (ev) => {
        const actions = {
          ArrowLeft: () => !isVertical ? onPrev() : {},
          ArrowRight: () => !isVertical ? onNext() : {},
          ArrowDown: () => isVertical ? onNext() : {},
          ArrowUp: () => isVertical ? onPrev() : {},
          Home: onFirst,
          End: onLast
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        action(ev);
      },
      [onFirst, onLast, isVertical, onPrev, onNext]
    );
    const css = { display: "flex", ...styles.tabList };
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-tabs__list", className),
        role: "tablist",
        __css: css,
        ...tabListProps,
        ...rest,
        onKeyDown: handlerAll(rest.onKeyDown, onKeyDown)
      }
    );
  }
);

// src/tab.tsx
import { ui as ui2, forwardRef as forwardRef2 } from "@yamada-ui/core";
import { Ripple, useRipple } from "@yamada-ui/ripple";
import { useClickable } from "@yamada-ui/use-clickable";
import { ariaAttr, cx as cx2, handlerAll as handlerAll2, mergeRefs } from "@yamada-ui/utils";
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var Tab = forwardRef2(
  ({
    className,
    isDisabled,
    isFocusable,
    clickOnEnter,
    clickOnSpace,
    children,
    ...props
  }, ref) => {
    const {
      selectedIndex,
      isManual,
      disableRipple,
      setSelectedIndex,
      setFocusedIndex,
      styles
    } = useTabsContext();
    const { index, register } = useTabsDescendant({
      disabled: isDisabled && !isFocusable
    });
    const isSelected = index === selectedIndex;
    const onFocus = () => {
      setFocusedIndex(index);
      if (!isManual && !(isDisabled && isFocusable))
        setSelectedIndex(index);
    };
    const rest = useClickable({
      ref: mergeRefs(register, ref),
      isDisabled,
      isFocusable,
      clickOnEnter,
      clickOnSpace,
      onClick: handlerAll2(props.onClick, () => setSelectedIndex(index))
    });
    const { onPointerDown, ...rippleProps } = useRipple({
      ...rest,
      isDisabled: disableRipple || isDisabled
    });
    const css = {
      position: "relative",
      overflow: "hidden",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      outline: "0",
      ...styles.tab
    };
    return /* @__PURE__ */ jsxs(
      ui2.button,
      {
        className: cx2("ui-tabs__tab", className),
        __css: css,
        role: "tab",
        ...props,
        ...rest,
        type: "button",
        tabIndex: isSelected ? 0 : -1,
        "aria-selected": ariaAttr(isSelected),
        onPointerDown,
        onFocus: isDisabled ? void 0 : handlerAll2(props.onFocus, onFocus),
        children: [
          children,
          /* @__PURE__ */ jsx2(Ripple, { isDisabled: disableRipple || isDisabled, ...rippleProps })
        ]
      }
    );
  }
);

// src/tab-panels.tsx
import { ui as ui3, forwardRef as forwardRef3 } from "@yamada-ui/core";
import { createContext, cx as cx3, getValidChildren } from "@yamada-ui/utils";
import { createElement } from "react";
import { jsx as jsx3 } from "react/jsx-runtime";
var [TabPanelProvider, useTabPanelContext] = createContext({});
var TabPanels = forwardRef3(
  ({ className, children, ...rest }, ref) => {
    const { selectedIndex, tabPanelsProps, styles } = useTabsContext();
    const validChildren = getValidChildren(children);
    const cloneChildren = validChildren.map((child, index) => {
      const isSelected = index === selectedIndex;
      return createElement(
        TabPanelProvider,
        { key: index, value: { isSelected, selectedIndex } },
        child
      );
    });
    const css = {
      w: "100%",
      ...styles.tabPanels
    };
    return /* @__PURE__ */ jsx3(
      ui3.div,
      {
        ref,
        className: cx3("ui-tabs__panels", className),
        __css: css,
        ...tabPanelsProps,
        ...rest,
        children: cloneChildren
      }
    );
  }
);

// src/tab-panel.tsx
import { ui as ui4, forwardRef as forwardRef4 } from "@yamada-ui/core";
import { useLazyDisclosure } from "@yamada-ui/use-disclosure";
import { cx as cx4 } from "@yamada-ui/utils";
import { useRef } from "react";
import { jsx as jsx4 } from "react/jsx-runtime";
var TabPanel = forwardRef4(
  ({ className, children, ...rest }, ref) => {
    const { isLazy: enabled, lazyBehavior: mode, styles } = useTabsContext();
    const { isSelected } = useTabPanelContext();
    const hasBeenSelected = useRef(false);
    if (isSelected)
      hasBeenSelected.current = true;
    const shouldRenderChildren = useLazyDisclosure({
      wasSelected: hasBeenSelected.current,
      isSelected,
      enabled,
      mode
    });
    const css = { ...styles.tabPanel };
    return /* @__PURE__ */ jsx4(
      ui4.div,
      {
        ref,
        className: cx4("ui-tabs__panel", className),
        role: "tabpanel",
        __css: css,
        ...rest,
        hidden: !isSelected,
        children: shouldRenderChildren ? children : null
      }
    );
  }
);

// src/tabs.tsx
import { jsx as jsx5, jsxs as jsxs2 } from "react/jsx-runtime";
var {
  DescendantsContextProvider,
  useDescendantsContext: useTabsDescendantsContext,
  useDescendants,
  useDescendant: useTabsDescendant
} = createDescendant();
var [TabsProvider, useTabsContext] = createContext2({
  name: "TabsContext",
  errorMessage: `useTabsContext returned is 'undefined'. Seems you forgot to wrap the components in "<Tabs />"`
});
var Tabs = forwardRef5(
  ({ align = "start", ...props }, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle("Tabs", {
      align,
      ...props
    });
    const {
      className,
      index,
      defaultIndex = 0,
      onChange,
      isFitted,
      isManual,
      isLazy = true,
      disableRipple = false,
      lazyBehavior = "keepMounted",
      orientation = "horizontal",
      tabListProps,
      tabPanelsProps,
      children,
      ...rest
    } = omitThemeProps(mergedProps);
    const [focusedIndex, setFocusedIndex] = useState(defaultIndex);
    const [selectedIndex, setSelectedIndex] = useControllableState({
      value: index,
      defaultValue: defaultIndex,
      onChange
    });
    const descendants = useDescendants();
    const validChildren = getValidChildren2(children);
    const [customTabList] = findChildren(validChildren, TabList);
    const [customTabPanels] = findChildren(validChildren, TabPanels);
    const cloneTabs = pickChildren(validChildren, Tab);
    const cloneTabPanels = pickChildren(validChildren, TabPanel);
    useEffect(() => {
      if (index != null)
        setFocusedIndex(index);
    }, [index]);
    const css = { w: "100%", ...styles.container };
    return /* @__PURE__ */ jsx5(DescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ jsx5(
      TabsProvider,
      {
        value: {
          focusedIndex,
          setFocusedIndex,
          selectedIndex,
          setSelectedIndex,
          disableRipple,
          isFitted,
          align,
          isManual,
          isLazy,
          lazyBehavior,
          orientation,
          tabListProps,
          tabPanelsProps,
          styles
        },
        children: /* @__PURE__ */ jsxs2(
          ui5.div,
          {
            ref,
            className: cx5("ui-tabs", className),
            __css: css,
            ...rest,
            children: [
              customTabList != null ? customTabList : /* @__PURE__ */ jsx5(TabList, { children: cloneTabs }),
              customTabPanels != null ? customTabPanels : /* @__PURE__ */ jsx5(TabPanels, { children: cloneTabPanels })
            ]
          }
        )
      }
    ) });
  }
);

export {
  useTabsDescendantsContext,
  useTabsDescendant,
  useTabsContext,
  Tabs,
  TabList,
  Tab,
  useTabPanelContext,
  TabPanels,
  TabPanel
};
//# sourceMappingURL=chunk-UHTUDAP3.mjs.map