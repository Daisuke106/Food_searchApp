"use client"

// src/breadcrumb.tsx
import {
  ui,
  forwardRef,
  omitThemeProps,
  useMultiComponentStyle
} from "@yamada-ui/core";
import { Icon } from "@yamada-ui/icon";
import { cx, createContext, getValidChildren } from "@yamada-ui/utils";
import { cloneElement } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var [BreadcrumbProvider, useBreadcrumb] = createContext({
  name: "BreadcrumbContext",
  errorMessage: `useBreadcrumb returned is 'undefined'. Seems you forgot to wrap the components in "<Breadcrumb />" `
});
var Breadcrumb = forwardRef((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle("Breadcrumb", props);
  const {
    className,
    children,
    separator = "/",
    gap = "fallback(2, 0.5rem)",
    listProps,
    ...rest
  } = omitThemeProps(mergedProps);
  const css = {
    display: "flex",
    alignItems: "center",
    ...styles.list
  };
  const validChildren = getValidChildren(children);
  const count = validChildren.length;
  const cloneChildren = validChildren.map(
    (child, index) => cloneElement(child, {
      separator,
      gap,
      isLastChild: count === index + 1
    })
  );
  return /* @__PURE__ */ jsx(BreadcrumbProvider, { value: styles, children: /* @__PURE__ */ jsx(
    ui.nav,
    {
      ref,
      className: cx("ui-breadcrumb", className),
      __css: styles.container,
      ...rest,
      children: /* @__PURE__ */ jsx(ui.ol, { className: "ui-breadcrumb__list", ...listProps, __css: css, children: cloneChildren })
    }
  ) });
});
var BreadcrumbItem = forwardRef(
  ({
    className,
    children,
    separator,
    isCurrentPage,
    isLastChild,
    gap,
    ...rest
  }, ref) => {
    const styles = useBreadcrumb();
    const validChildren = getValidChildren(children);
    const cloneChildren = validChildren.map((child) => {
      if (child.type === BreadcrumbLink) {
        return cloneElement(child, {
          isCurrentPage
        });
      }
      if (child.type === BreadcrumbSeparator) {
        return cloneElement(child, {
          gap,
          children: child.props.children || separator
        });
      }
      return child;
    });
    const css = {
      display: "inline-flex",
      alignItems: "center",
      ...styles.item
    };
    return /* @__PURE__ */ jsxs(
      ui.li,
      {
        ref,
        className: cx("ui-breadcrumb__item", className),
        __css: css,
        ...rest,
        children: [
          cloneChildren,
          !isLastChild ? /* @__PURE__ */ jsx(BreadcrumbSeparator, { gap, children: separator }) : null
        ]
      }
    );
  }
);
var BreadcrumbLink = forwardRef(
  ({ className, children, isCurrentPage, href, ...rest }, ref) => {
    const styles = useBreadcrumb();
    return /* @__PURE__ */ jsx(
      ui.a,
      {
        ref,
        as: !isCurrentPage ? "a" : "span",
        href: !isCurrentPage ? href : void 0,
        "aria-current": isCurrentPage ? "page" : void 0,
        className: cx("ui-breadcrumb__link", className),
        __css: styles.link,
        ...rest,
        children
      }
    );
  }
);
var BreadcrumbSeparator = forwardRef(
  ({ children, gap: mx, ...rest }, ref) => {
    const styles = useBreadcrumb();
    const css = {
      mx,
      ...styles.separator
    };
    return /* @__PURE__ */ jsx(
      ui.span,
      {
        ref,
        className: "ui-breadcrumb__item__separator",
        __css: css,
        ...rest,
        children
      }
    );
  }
);
var BreadcrumbEllipsis = forwardRef(
  ({ children, className, ...rest }, ref) => {
    const styles = useBreadcrumb();
    const css = {
      ...styles.ellipsis
    };
    return children != null ? children : /* @__PURE__ */ jsxs(
      Icon,
      {
        ref,
        title: "ellipsis",
        className: cx("ui-breadcrumb__item__ellipsis", className),
        __css: css,
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 36 24",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...rest,
        children: [
          /* @__PURE__ */ jsx("circle", { cx: "10", cy: "12", r: "2", fill: "currentColor" }),
          /* @__PURE__ */ jsx("circle", { cx: "20", cy: "12", r: "2", fill: "currentColor" }),
          /* @__PURE__ */ jsx("circle", { cx: "30", cy: "12", r: "2", fill: "currentColor" })
        ]
      }
    );
  }
);

export {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbSeparator,
  BreadcrumbEllipsis
};
//# sourceMappingURL=chunk-WW46WLRE.mjs.map