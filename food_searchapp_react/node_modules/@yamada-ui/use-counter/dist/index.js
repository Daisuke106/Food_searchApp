"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useCounter: () => useCounter
});
module.exports = __toCommonJS(src_exports);
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var useCounter = ({
  min = Number.MIN_SAFE_INTEGER,
  max = Number.MAX_SAFE_INTEGER,
  keepWithinRange = true,
  ...props
} = {}) => {
  var _a, _b;
  const onChange = (0, import_utils.useCallbackRef)(props.onChange);
  const [defaultValue, setValue] = (0, import_react.useState)(() => {
    var _a2, _b2;
    if (props.defaultValue == null)
      return "";
    return (_b2 = casting(props.defaultValue, (_a2 = props.step) != null ? _a2 : 1, props.precision)) != null ? _b2 : "";
  });
  const isControlled = typeof props.value !== "undefined";
  const value = isControlled ? props.value : defaultValue;
  const countDecimal2 = getCountDecimal(parse(value), (_a = props.step) != null ? _a : 1);
  const precision = (_b = props.precision) != null ? _b : countDecimal2;
  const update = (0, import_react.useCallback)(
    (next) => {
      if (next === value)
        return;
      if (!isControlled)
        setValue(next.toString());
      onChange(next.toString(), parse(next));
    },
    [onChange, isControlled, value]
  );
  const clamp = (0, import_react.useCallback)(
    (value2) => {
      let nextValue = value2;
      if (keepWithinRange)
        nextValue = (0, import_utils.clampNumber)(nextValue, min, max);
      return (0, import_utils.toPrecision)(nextValue, precision);
    },
    [precision, keepWithinRange, max, min]
  );
  const increment = (0, import_react.useCallback)(
    (step = ((_c) => (_c = props.step) != null ? _c : 1)()) => {
      let next;
      if (value === "") {
        next = parse(step);
      } else {
        next = parse(value) + step;
      }
      next = clamp(next);
      update(next);
    },
    [clamp, props.step, update, value]
  );
  const decrement = (0, import_react.useCallback)(
    (step = ((_d) => (_d = props.step) != null ? _d : 1)()) => {
      let next;
      if (value === "") {
        next = parse(-step);
      } else {
        next = parse(value) - step;
      }
      next = clamp(next);
      update(next);
    },
    [clamp, props.step, update, value]
  );
  const reset = (0, import_react.useCallback)(() => {
    var _a2, _b2;
    let next;
    if (props.defaultValue == null) {
      next = "";
    } else {
      next = (_b2 = casting(props.defaultValue, (_a2 = props.step) != null ? _a2 : 1, props.precision)) != null ? _b2 : min;
    }
    update(next);
  }, [props.defaultValue, props.precision, props.step, update, min]);
  const cast = (0, import_react.useCallback)(
    (value2) => {
      var _a2, _b2;
      const nextValue = (_b2 = casting(value2, (_a2 = props.step) != null ? _a2 : 1, precision)) != null ? _b2 : min;
      update(nextValue);
    },
    [precision, props.step, update, min]
  );
  const valueAsNumber = parse(value);
  const isOut = valueAsNumber < min || max < valueAsNumber;
  const isMax = valueAsNumber === max;
  const isMin = valueAsNumber === min;
  return {
    isOut,
    isMax,
    isMin,
    precision,
    value,
    valueAsNumber,
    update,
    reset,
    increment,
    decrement,
    clamp,
    cast,
    setValue
  };
};
var parse = (value) => parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
var getCountDecimal = (value, step) => Math.max((0, import_utils.countDecimal)(step), (0, import_utils.countDecimal)(value));
var casting = (value, step, precision) => {
  value = parse(value);
  return !Number.isNaN(value) ? (0, import_utils.toPrecision)(value, precision != null ? precision : getCountDecimal(value, step)) : void 0;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useCounter
});
//# sourceMappingURL=index.js.map