"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/rating-group.tsx
var rating_group_exports = {};
__export(rating_group_exports, {
  RatingGroup: () => RatingGroup
});
module.exports = __toCommonJS(rating_group_exports);
var import_core2 = require("@yamada-ui/core");
var import_motion = require("@yamada-ui/motion");
var import_utils3 = require("@yamada-ui/utils");

// src/rating-item.tsx
var import_core = require("@yamada-ui/core");
var import_icon = require("@yamada-ui/icon");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/use-rating.tsx
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_focus_visible = require("@yamada-ui/use-focus-visible");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var getRoundedValue = (value, to) => {
  var _a;
  const rounded = Math.round(value / to) * to;
  const precision = ((_a = `${to}`.split(".")[1]) == null ? void 0 : _a.length) || 0;
  return Number(rounded.toFixed(precision));
};
var [RatingProvider, useRatingContext] = (0, import_utils.createContext)({
  name: "RatingContext",
  errorMessage: `useRatingContext returned is 'undefined'. Seems you forgot to wrap the components in "<Rating />"`
});
var useRatingItem = ({
  groupValue,
  fractionValue,
  value
}) => {
  const {
    id,
    name,
    formControlProps,
    isOutside,
    highlightSelectedOnly,
    roundedValue,
    resolvedValue,
    setValue,
    setHoveredValue
  } = useRatingContext();
  const { readOnly, disabled } = formControlProps;
  const [isFocused, setFocused] = (0, import_react.useState)(false);
  const [isFocusVisible, setIsFocusVisible] = (0, import_react.useState)(false);
  const isActive = value === resolvedValue;
  const isChecked = value === roundedValue;
  const isFilled = highlightSelectedOnly ? value === resolvedValue : value <= resolvedValue;
  const onBlur = (0, import_react.useCallback)(() => {
    setFocused(false);
    if (isOutside)
      setHoveredValue(-1);
  }, [isOutside, setHoveredValue]);
  const onInputChange = (0, import_react.useCallback)(
    (ev) => {
      if (readOnly || disabled)
        return;
      const value2 = parseFloat(ev.target.value);
      setHoveredValue(value2);
    },
    [disabled, readOnly, setHoveredValue]
  );
  const onChange = (0, import_react.useCallback)(
    (value2) => {
      if (readOnly || disabled)
        return;
      setValue(value2);
    },
    [disabled, readOnly, setValue]
  );
  const onMouseDown = (0, import_react.useCallback)(() => {
    if (readOnly || disabled)
      return;
    onChange(value);
  }, [disabled, onChange, readOnly, value]);
  const onTouchStart = (0, import_react.useCallback)(() => {
    if (readOnly || disabled)
      return;
    onChange(value);
  }, [disabled, onChange, readOnly, value]);
  const getItemProps = (0, import_react.useCallback)(
    (props = {}, ref = null) => {
      const zIndex = isActive ? 1 : -1;
      return {
        ref,
        htmlFor: `${id}-${groupValue}-${value}`,
        ...formControlProps,
        ...props,
        zIndex: fractionValue !== 1 ? zIndex : void 0,
        onMouseDown: (0, import_utils.handlerAll)(onMouseDown, props.onMouseDown),
        onTouchStart: (0, import_utils.handlerAll)(onTouchStart, props.onTouchStart),
        "data-active": (0, import_utils.dataAttr)(isActive),
        "data-filled": (0, import_utils.dataAttr)(isFilled),
        "data-focus": (0, import_utils.dataAttr)(isFocused),
        "data-focus-visible": (0, import_utils.dataAttr)(isFocused && isFocusVisible)
      };
    },
    [
      formControlProps,
      fractionValue,
      groupValue,
      id,
      isActive,
      isFilled,
      isFocusVisible,
      isFocused,
      onMouseDown,
      onTouchStart,
      value
    ]
  );
  const getInputProps = (0, import_react.useCallback)(
    (props = {}, ref = null) => {
      return {
        ref,
        "aria-label": `${value}`,
        ...formControlProps,
        ...props,
        style: {
          border: "0px",
          clip: "rect(0px, 0px, 0px, 0px)",
          height: "1px",
          width: "1px",
          margin: "-1px",
          padding: "0px",
          overflow: "hidden",
          whiteSpace: "nowrap",
          position: "absolute"
        },
        type: "radio",
        id: `${id}-${groupValue}-${value}`,
        name,
        value,
        checked: isChecked,
        onChange: (0, import_utils.handlerAll)(onInputChange, props.onChange),
        onFocus: (0, import_utils.handlerAll)(() => setFocused(true), props.onFocus),
        onBlur: (0, import_utils.handlerAll)(onBlur, props.onBlur),
        onKeyDown: (0, import_utils.handlerAll)(
          (ev) => ev.key === " " ? onChange(value) : void 0,
          props.onKeyDown
        ),
        "data-active": (0, import_utils.dataAttr)(isActive),
        "data-checked": (0, import_utils.dataAttr)(isChecked)
      };
    },
    [
      value,
      formControlProps,
      id,
      groupValue,
      name,
      isChecked,
      onInputChange,
      onBlur,
      isActive,
      onChange
    ]
  );
  (0, import_react.useEffect)(() => {
    return (0, import_use_focus_visible.trackFocusVisible)(setIsFocusVisible);
  }, []);
  return {
    isActive,
    isChecked,
    isFilled,
    getItemProps,
    getInputProps
  };
};

// src/rating-item.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var RatingItem = (0, import_core.forwardRef)(
  ({ className, groupValue, value, fractionValue, color, ...rest }, ref) => {
    const {
      styles,
      inputProps,
      emptyIcon = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(StarIcon, {}),
      filledIcon = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(StarIcon, {}),
      itemProps
    } = useRatingContext();
    const { isActive, isFilled, getInputProps, getItemProps } = useRatingItem({
      value,
      groupValue,
      fractionValue
    });
    const computedItemProps = (0, import_utils2.runIfFunc)(itemProps, value);
    const computedInputProps = (0, import_utils2.runIfFunc)(inputProps, value);
    const customColor = color ? {
      _filled: {
        color: (0, import_utils2.isString)(color) ? [color, color] : color
      }
    } : {};
    const css = {
      display: "block",
      lineHeight: "0",
      ...styles.item,
      ...customColor
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core.ui.input, { ...getInputProps(computedInputProps, ref) }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        import_core.ui.label,
        {
          className: (0, import_utils2.cx)("ui-rating__item", className),
          __css: css,
          ...getItemProps({ ...computedItemProps, ...rest }),
          children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            RatingIcon,
            {
              clipPath: fractionValue !== 1 ? `inset(0 ${isActive ? 100 - fractionValue * 100 : 100}% 0 0)` : void 0,
              children: isFilled ? (0, import_utils2.runIfFunc)(filledIcon, groupValue) : (0, import_utils2.runIfFunc)(emptyIcon, groupValue)
            }
          )
        }
      )
    ] });
  }
);
var RatingIcon = ({ className, children, ...rest }) => {
  const { styles } = useRatingContext();
  const validChildren = (0, import_utils2.getValidChildren)(children);
  const cloneChildren = validChildren.map(
    (child) => (0, import_react2.cloneElement)(child, {
      focusable: false,
      "aria-hidden": true,
      style: {
        maxWidth: "1em",
        maxHeight: "1em"
      }
    })
  );
  const css = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    ...styles.icon
  };
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_core.ui.div,
    {
      className: (0, import_utils2.cx)("ui-rating__item__icon", className),
      __css: css,
      ...rest,
      children: cloneChildren
    }
  );
};
var StarIcon = ({ ...rest }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_icon.Icon,
    {
      viewBox: "0 0 24 24",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      ...rest,
      children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z" })
    }
  );
};

// src/rating-group.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var RatingGroup = (0, import_core2.forwardRef)(
  ({ className, value: groupValue, items, color, ...rest }, ref) => {
    const { styles, decimal, groupProps, getGroupProps } = useRatingContext();
    const computedGroupProps = (0, import_utils3.runIfFunc)(groupProps, groupValue);
    const css = { ...styles.group };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_motion.Motion,
      {
        className: (0, import_utils3.cx)("ui-rating__group", className),
        __css: css,
        ...getGroupProps(
          { value: groupValue, ...computedGroupProps, ...rest },
          ref
        ),
        children: Array(items).fill(0).map((_, index) => {
          const fractionValue = decimal * (groupValue === 1 ? index : index + 1);
          const value = getRoundedValue(
            groupValue - 1 + fractionValue,
            decimal
          );
          return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            RatingItem,
            {
              groupValue,
              value,
              fractionValue,
              color
            },
            `${groupValue}-${fractionValue}`
          );
        })
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RatingGroup
});
