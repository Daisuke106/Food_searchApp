"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/use-rating.tsx
var use_rating_exports = {};
__export(use_rating_exports, {
  RatingProvider: () => RatingProvider,
  getRoundedValue: () => getRoundedValue,
  useRating: () => useRating,
  useRatingContext: () => useRatingContext,
  useRatingItem: () => useRatingItem
});
module.exports = __toCommonJS(use_rating_exports);
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_focus_visible = require("@yamada-ui/use-focus-visible");
var import_utils3 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/rating-group.tsx
var import_core2 = require("@yamada-ui/core");
var import_motion = require("@yamada-ui/motion");
var import_utils2 = require("@yamada-ui/utils");

// src/rating-item.tsx
var import_core = require("@yamada-ui/core");
var import_icon = require("@yamada-ui/icon");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var RatingItem = (0, import_core.forwardRef)(
  ({ className, groupValue, value, fractionValue, color, ...rest }, ref) => {
    const {
      styles,
      inputProps,
      emptyIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StarIcon, {}),
      filledIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StarIcon, {}),
      itemProps
    } = useRatingContext();
    const { isActive, isFilled, getInputProps, getItemProps } = useRatingItem({
      value,
      groupValue,
      fractionValue
    });
    const computedItemProps = (0, import_utils.runIfFunc)(itemProps, value);
    const computedInputProps = (0, import_utils.runIfFunc)(inputProps, value);
    const customColor = color ? {
      _filled: {
        color: (0, import_utils.isString)(color) ? [color, color] : color
      }
    } : {};
    const css = {
      display: "block",
      lineHeight: "0",
      ...styles.item,
      ...customColor
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.ui.input, { ...getInputProps(computedInputProps, ref) }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_core.ui.label,
        {
          className: (0, import_utils.cx)("ui-rating__item", className),
          __css: css,
          ...getItemProps({ ...computedItemProps, ...rest }),
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            RatingIcon,
            {
              clipPath: fractionValue !== 1 ? `inset(0 ${isActive ? 100 - fractionValue * 100 : 100}% 0 0)` : void 0,
              children: isFilled ? (0, import_utils.runIfFunc)(filledIcon, groupValue) : (0, import_utils.runIfFunc)(emptyIcon, groupValue)
            }
          )
        }
      )
    ] });
  }
);
var RatingIcon = ({ className, children, ...rest }) => {
  const { styles } = useRatingContext();
  const validChildren = (0, import_utils.getValidChildren)(children);
  const cloneChildren = validChildren.map(
    (child) => (0, import_react.cloneElement)(child, {
      focusable: false,
      "aria-hidden": true,
      style: {
        maxWidth: "1em",
        maxHeight: "1em"
      }
    })
  );
  const css = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    ...styles.icon
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_core.ui.div,
    {
      className: (0, import_utils.cx)("ui-rating__item__icon", className),
      __css: css,
      ...rest,
      children: cloneChildren
    }
  );
};
var StarIcon = ({ ...rest }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_icon.Icon,
    {
      viewBox: "0 0 24 24",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      ...rest,
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z" })
    }
  );
};

// src/rating-group.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var RatingGroup = (0, import_core2.forwardRef)(
  ({ className, value: groupValue, items, color, ...rest }, ref) => {
    const { styles, decimal, groupProps, getGroupProps } = useRatingContext();
    const computedGroupProps = (0, import_utils2.runIfFunc)(groupProps, groupValue);
    const css = { ...styles.group };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_motion.Motion,
      {
        className: (0, import_utils2.cx)("ui-rating__group", className),
        __css: css,
        ...getGroupProps(
          { value: groupValue, ...computedGroupProps, ...rest },
          ref
        ),
        children: Array(items).fill(0).map((_, index) => {
          const fractionValue = decimal * (groupValue === 1 ? index : index + 1);
          const value = getRoundedValue(
            groupValue - 1 + fractionValue,
            decimal
          );
          return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            RatingItem,
            {
              groupValue,
              value,
              fractionValue,
              color
            },
            `${groupValue}-${fractionValue}`
          );
        })
      }
    );
  }
);

// src/use-rating.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var getRoundedValue = (value, to) => {
  var _a;
  const rounded = Math.round(value / to) * to;
  const precision = ((_a = `${to}`.split(".")[1]) == null ? void 0 : _a.length) || 0;
  return Number(rounded.toFixed(precision));
};
var [RatingProvider, useRatingContext] = (0, import_utils3.createContext)({
  name: "RatingContext",
  errorMessage: `useRatingContext returned is 'undefined'. Seems you forgot to wrap the components in "<Rating />"`
});
var useRating = ({
  name,
  color,
  value: valueProp,
  defaultValue = 0,
  onChange: onChangeProp,
  items = 5,
  fractions = 1,
  highlightSelectedOnly = false,
  onHover,
  groupProps,
  itemProps,
  inputProps,
  emptyIcon,
  filledIcon,
  ...props
}) => {
  let { id, "aria-readonly": _isReadOnly, ...rest } = (0, import_form_control.useFormControlProps)(props);
  const { disabled, readOnly } = rest;
  const containerRef = (0, import_react2.useRef)(null);
  const [value, setValue] = (0, import_use_controllable_state.useControllableState)({
    value: valueProp,
    defaultValue,
    onChange: onChangeProp
  });
  const [hoveredValue, setHoveredValue] = (0, import_react2.useState)(-1);
  const [isOutside, setIsOutside] = (0, import_react2.useState)(true);
  id != null ? id : id = (0, import_react2.useId)();
  name != null ? name : name = `rating-${id}`;
  const formControlProps = (0, import_utils3.pickObject)(rest, import_form_control.formControlProperties);
  const resolvedFractions = Math.floor(fractions);
  const resolvedItems = Math.floor(items);
  const decimal = 1 / resolvedFractions;
  const roundedValue = getRoundedValue(value, decimal);
  const resolvedValue = hoveredValue !== -1 ? hoveredValue : roundedValue;
  const getHoveredValue = (0, import_react2.useCallback)(
    (x) => {
      const { left, width } = containerRef.current.getBoundingClientRect();
      const itemWidth = width / resolvedItems;
      const hoveredValue2 = (x - left) / itemWidth;
      const value2 = (0, import_utils3.clampNumber)(
        getRoundedValue(hoveredValue2 + decimal / 2, decimal),
        decimal,
        resolvedItems
      );
      return value2;
    },
    [decimal, resolvedItems]
  );
  const onMouseEnter = (0, import_react2.useCallback)(() => {
    if (!disabled && !readOnly)
      setIsOutside(false);
  }, [disabled, readOnly]);
  const onMouseLeave = (0, import_react2.useCallback)(() => {
    if (disabled || readOnly)
      return;
    setHoveredValue(-1);
    setIsOutside(true);
    if (hoveredValue !== -1)
      onHover == null ? void 0 : onHover(-1);
  }, [disabled, hoveredValue, onHover, readOnly, setHoveredValue]);
  const onTouchStart = (0, import_react2.useCallback)(
    (ev) => {
      ev.preventDefault();
      const el = ev.touches[0];
      if (!el)
        return;
      const value2 = getHoveredValue(el.clientX);
      setValue(value2);
    },
    [getHoveredValue, setValue]
  );
  const onTouchEnd = (0, import_react2.useCallback)((ev) => {
    ev.preventDefault();
  }, []);
  const onMouseMove = (0, import_react2.useCallback)(
    (ev) => {
      if (disabled || readOnly)
        return;
      const roundedValue2 = getHoveredValue(ev.clientX);
      setHoveredValue(roundedValue2);
      if (roundedValue2 !== hoveredValue)
        onHover == null ? void 0 : onHover(roundedValue2);
    },
    [disabled, getHoveredValue, hoveredValue, readOnly, onHover]
  );
  const getContainerProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => ({
      ref: (0, import_utils3.mergeRefs)(ref, containerRef),
      ...rest,
      ...props2,
      id,
      onMouseEnter: (0, import_utils3.handlerAll)(
        onMouseEnter,
        props2.onMouseEnter,
        rest.onMouseEnter
      ),
      onMouseMove: (0, import_utils3.handlerAll)(onMouseMove, props2.onMouseMove, rest.onMouseMove),
      onMouseLeave: (0, import_utils3.handlerAll)(
        onMouseLeave,
        props2.onMouseLeave,
        rest.onMouseLeave
      ),
      onTouchStart: (0, import_utils3.handlerAll)(
        onTouchStart,
        props2.onTouchStart,
        rest.onTouchStart
      ),
      onTouchEnd: (0, import_utils3.handlerAll)(onTouchEnd, props2.onTouchEnd, rest.onTouchEnd)
    }),
    [
      onMouseEnter,
      onMouseLeave,
      onMouseMove,
      onTouchEnd,
      onTouchStart,
      id,
      rest
    ]
  );
  const getGroupProps = (0, import_react2.useCallback)(
    ({ value: value2, ...props2 }, ref = null) => {
      const isActive = !readOnly && Math.ceil(hoveredValue) === value2;
      return {
        ref,
        whileTap: !disabled && !readOnly ? { y: -4 } : void 0,
        ...props2,
        tabIndex: -1,
        "data-active": (0, import_utils3.dataAttr)(isActive)
      };
    },
    [disabled, hoveredValue, readOnly]
  );
  const children = Array(resolvedItems).fill(0).map((_, index) => {
    const value2 = index + 1;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      RatingGroup,
      {
        value: value2,
        color: (0, import_utils3.runIfFunc)(color, value2),
        items: index === 0 ? resolvedFractions + 1 : resolvedFractions
      },
      value2
    );
  });
  return {
    getContainerProps,
    getGroupProps,
    id,
    name,
    value,
    roundedValue,
    hoveredValue,
    resolvedValue,
    isOutside,
    setValue,
    setHoveredValue,
    decimal,
    highlightSelectedOnly,
    formControlProps,
    groupProps,
    itemProps,
    inputProps,
    children,
    emptyIcon,
    filledIcon
  };
};
var useRatingItem = ({
  groupValue,
  fractionValue,
  value
}) => {
  const {
    id,
    name,
    formControlProps,
    isOutside,
    highlightSelectedOnly,
    roundedValue,
    resolvedValue,
    setValue,
    setHoveredValue
  } = useRatingContext();
  const { readOnly, disabled } = formControlProps;
  const [isFocused, setFocused] = (0, import_react2.useState)(false);
  const [isFocusVisible, setIsFocusVisible] = (0, import_react2.useState)(false);
  const isActive = value === resolvedValue;
  const isChecked = value === roundedValue;
  const isFilled = highlightSelectedOnly ? value === resolvedValue : value <= resolvedValue;
  const onBlur = (0, import_react2.useCallback)(() => {
    setFocused(false);
    if (isOutside)
      setHoveredValue(-1);
  }, [isOutside, setHoveredValue]);
  const onInputChange = (0, import_react2.useCallback)(
    (ev) => {
      if (readOnly || disabled)
        return;
      const value2 = parseFloat(ev.target.value);
      setHoveredValue(value2);
    },
    [disabled, readOnly, setHoveredValue]
  );
  const onChange = (0, import_react2.useCallback)(
    (value2) => {
      if (readOnly || disabled)
        return;
      setValue(value2);
    },
    [disabled, readOnly, setValue]
  );
  const onMouseDown = (0, import_react2.useCallback)(() => {
    if (readOnly || disabled)
      return;
    onChange(value);
  }, [disabled, onChange, readOnly, value]);
  const onTouchStart = (0, import_react2.useCallback)(() => {
    if (readOnly || disabled)
      return;
    onChange(value);
  }, [disabled, onChange, readOnly, value]);
  const getItemProps = (0, import_react2.useCallback)(
    (props = {}, ref = null) => {
      const zIndex = isActive ? 1 : -1;
      return {
        ref,
        htmlFor: `${id}-${groupValue}-${value}`,
        ...formControlProps,
        ...props,
        zIndex: fractionValue !== 1 ? zIndex : void 0,
        onMouseDown: (0, import_utils3.handlerAll)(onMouseDown, props.onMouseDown),
        onTouchStart: (0, import_utils3.handlerAll)(onTouchStart, props.onTouchStart),
        "data-active": (0, import_utils3.dataAttr)(isActive),
        "data-filled": (0, import_utils3.dataAttr)(isFilled),
        "data-focus": (0, import_utils3.dataAttr)(isFocused),
        "data-focus-visible": (0, import_utils3.dataAttr)(isFocused && isFocusVisible)
      };
    },
    [
      formControlProps,
      fractionValue,
      groupValue,
      id,
      isActive,
      isFilled,
      isFocusVisible,
      isFocused,
      onMouseDown,
      onTouchStart,
      value
    ]
  );
  const getInputProps = (0, import_react2.useCallback)(
    (props = {}, ref = null) => {
      return {
        ref,
        "aria-label": `${value}`,
        ...formControlProps,
        ...props,
        style: {
          border: "0px",
          clip: "rect(0px, 0px, 0px, 0px)",
          height: "1px",
          width: "1px",
          margin: "-1px",
          padding: "0px",
          overflow: "hidden",
          whiteSpace: "nowrap",
          position: "absolute"
        },
        type: "radio",
        id: `${id}-${groupValue}-${value}`,
        name,
        value,
        checked: isChecked,
        onChange: (0, import_utils3.handlerAll)(onInputChange, props.onChange),
        onFocus: (0, import_utils3.handlerAll)(() => setFocused(true), props.onFocus),
        onBlur: (0, import_utils3.handlerAll)(onBlur, props.onBlur),
        onKeyDown: (0, import_utils3.handlerAll)(
          (ev) => ev.key === " " ? onChange(value) : void 0,
          props.onKeyDown
        ),
        "data-active": (0, import_utils3.dataAttr)(isActive),
        "data-checked": (0, import_utils3.dataAttr)(isChecked)
      };
    },
    [
      value,
      formControlProps,
      id,
      groupValue,
      name,
      isChecked,
      onInputChange,
      onBlur,
      isActive,
      onChange
    ]
  );
  (0, import_react2.useEffect)(() => {
    return (0, import_use_focus_visible.trackFocusVisible)(setIsFocusVisible);
  }, []);
  return {
    isActive,
    isChecked,
    isFilled,
    getItemProps,
    getInputProps
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RatingProvider,
  getRoundedValue,
  useRating,
  useRatingContext,
  useRatingItem
});
