"use client"

// src/switch.tsx
import { useCheckbox } from "@yamada-ui/checkbox";
import {
  ui,
  forwardRef,
  omitThemeProps,
  useMultiComponentStyle
} from "@yamada-ui/core";
import { motion } from "@yamada-ui/motion";
import { cx, dataAttr } from "@yamada-ui/utils";
import { cloneElement } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var Switch = forwardRef((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle("Switch", props);
  const {
    className,
    gap = "0.5rem",
    children,
    icon,
    inputProps,
    labelProps,
    isReverse,
    flexDirection,
    transition = {
      type: "spring",
      stiffness: 700,
      damping: 40
    },
    ...computedProps
  } = omitThemeProps(mergedProps);
  const {
    isChecked,
    isFocused,
    isHovered,
    isActive,
    getContainerProps,
    getIconProps,
    getInputProps,
    getLabelProps,
    props: rest
  } = useCheckbox(computedProps);
  const cloneIcon = icon ? cloneElement(icon, {
    isChecked,
    isFocused,
    isHovered,
    isActive
  }) : null;
  return /* @__PURE__ */ jsxs(
    ui.label,
    {
      ref,
      className: cx("ui-switch", className),
      __css: {
        cursor: "pointer",
        position: "relative",
        display: "inline-flex",
        flexDirection: flexDirection != null ? flexDirection : isReverse ? "row-reverse" : "row",
        alignItems: "center",
        verticalAlign: "top",
        gap,
        ...styles.container
      },
      ...getContainerProps(),
      ...rest,
      children: [
        /* @__PURE__ */ jsx(
          ui.input,
          {
            className: cx("ui-switch__input", className),
            ...getInputProps(inputProps, ref)
          }
        ),
        cloneIcon != null ? cloneIcon : /* @__PURE__ */ jsx(
          ui.span,
          {
            className: cx("ui-switch__track", className),
            __css: {
              boxSizing: "content-box",
              display: "inline-flex",
              justifyContent: "flex-start",
              alignItems: "center",
              flexShrink: 0,
              ...styles.track
            },
            ...getIconProps(),
            children: /* @__PURE__ */ jsx(
              ui.span,
              {
                as: motion.span,
                className: cx("ui-switch__thumb", className),
                "data-checked": dataAttr(isChecked),
                layout: true,
                transition,
                __css: { ...styles.thumb }
              }
            )
          }
        ),
        children ? /* @__PURE__ */ jsx(
          ui.span,
          {
            className: cx("ui-switch__label", className),
            __css: { ...styles.label },
            ...getLabelProps(labelProps),
            children
          }
        ) : null
      ]
    }
  );
});

export {
  Switch
};
//# sourceMappingURL=chunk-I64WACNR.mjs.map