{"version":3,"sources":["../src/switch.tsx"],"sourcesContent":["import type { UseCheckboxProps } from \"@yamada-ui/checkbox\"\nimport { useCheckbox } from \"@yamada-ui/checkbox\"\nimport type { HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  useMultiComponentStyle,\n} from \"@yamada-ui/core\"\nimport type { MotionTransition } from \"@yamada-ui/motion\"\nimport { motion } from \"@yamada-ui/motion\"\nimport type { Merge } from \"@yamada-ui/utils\"\nimport { cx, dataAttr } from \"@yamada-ui/utils\"\nimport type { DOMAttributes, InputHTMLAttributes, ReactElement } from \"react\"\nimport { cloneElement } from \"react\"\n\nexport type SwitchIconProps = {\n  isChecked?: boolean\n  isFocused?: boolean\n  isHovered?: boolean\n  isActive?: boolean\n}\n\ntype SwitchOptions = {\n  /**\n   * The switch icon to use.\n   */\n  icon?: ReactElement<SwitchIconProps>\n  /**\n   * Props for switch input element.\n   */\n  inputProps?: InputHTMLAttributes<HTMLInputElement>\n  /**\n   * Props for switch label element.\n   */\n  labelProps?: HTMLUIProps<\"span\">\n  /**\n   * Change switch label from right to left.\n   *\n   * @default false\n   */\n  isReverse?: boolean\n  /**\n   * Motion transition settings.\n   */\n  transition?: MotionTransition\n}\n\nexport type SwitchProps = Merge<\n  HTMLUIProps<\"label\">,\n  Omit<UseCheckboxProps, \"isIndeterminate\">\n> &\n  ThemeProps<\"Switch\"> &\n  SwitchOptions\n\n/**\n * `Switch` is a component used to toggle between on and off states.\n *\n * @see Docs https://yamada-ui.com/components/forms/switch\n */\nexport const Switch = forwardRef<SwitchProps, \"input\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Switch\", props)\n  const {\n    className,\n    gap = \"0.5rem\",\n    children,\n    icon,\n    inputProps,\n    labelProps,\n    isReverse,\n    flexDirection,\n    transition = {\n      type: \"spring\",\n      stiffness: 700,\n      damping: 40,\n    },\n    ...computedProps\n  } = omitThemeProps(mergedProps)\n\n  const {\n    isChecked,\n    isFocused,\n    isHovered,\n    isActive,\n    getContainerProps,\n    getIconProps,\n    getInputProps,\n    getLabelProps,\n    props: rest,\n  } = useCheckbox(computedProps)\n\n  const cloneIcon = icon\n    ? cloneElement(icon, {\n        isChecked,\n        isFocused,\n        isHovered,\n        isActive,\n      })\n    : null\n\n  return (\n    <ui.label\n      ref={ref}\n      className={cx(\"ui-switch\", className)}\n      __css={{\n        cursor: \"pointer\",\n        position: \"relative\",\n        display: \"inline-flex\",\n        flexDirection: flexDirection ?? (isReverse ? \"row-reverse\" : \"row\"),\n        alignItems: \"center\",\n        verticalAlign: \"top\",\n        gap,\n        ...styles.container,\n      }}\n      {...getContainerProps()}\n      {...rest}\n    >\n      <ui.input\n        className={cx(\"ui-switch__input\", className)}\n        {...getInputProps(inputProps, ref)}\n      />\n\n      {cloneIcon ?? (\n        <ui.span\n          className={cx(\"ui-switch__track\", className)}\n          __css={{\n            boxSizing: \"content-box\",\n            display: \"inline-flex\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n            flexShrink: 0,\n            ...styles.track,\n          }}\n          {...getIconProps()}\n        >\n          <ui.span\n            as={motion.span}\n            className={cx(\"ui-switch__thumb\", className)}\n            data-checked={dataAttr(isChecked)}\n            layout\n            transition={transition}\n            __css={{ ...styles.thumb }}\n          />\n        </ui.span>\n      )}\n\n      {children ? (\n        <ui.span\n          className={cx(\"ui-switch__label\", className)}\n          __css={{ ...styles.label }}\n          {...getLabelProps(labelProps as DOMAttributes<HTMLElement>)}\n        >\n          {children}\n        </ui.span>\n      ) : null}\n    </ui.label>\n  )\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAA4B;AAE5B,kBAKO;AAEP,oBAAuB;AAEvB,mBAA6B;AAE7B,mBAA6B;AAuFzB;AAzCG,IAAM,aAAS,wBAAiC,CAAC,OAAO,QAAQ;AACrE,QAAM,CAAC,QAAQ,WAAW,QAAI,oCAAuB,UAAU,KAAK;AACpE,QAAM;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,IACX;AAAA,IACA,GAAG;AAAA,EACL,QAAI,4BAAe,WAAW;AAE9B,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,EACT,QAAI,6BAAY,aAAa;AAE7B,QAAM,YAAY,WACd,2BAAa,MAAM;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC,IACD;AAEJ,SACE;AAAA,IAAC,eAAG;AAAA,IAAH;AAAA,MACC;AAAA,MACA,eAAW,iBAAG,aAAa,SAAS;AAAA,MACpC,OAAO;AAAA,QACL,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,QACT,eAAe,wCAAkB,YAAY,gBAAgB;AAAA,QAC7D,YAAY;AAAA,QACZ,eAAe;AAAA,QACf;AAAA,QACA,GAAG,OAAO;AAAA,MACZ;AAAA,MACC,GAAG,kBAAkB;AAAA,MACrB,GAAG;AAAA,MAEJ;AAAA;AAAA,UAAC,eAAG;AAAA,UAAH;AAAA,YACC,eAAW,iBAAG,oBAAoB,SAAS;AAAA,YAC1C,GAAG,cAAc,YAAY,GAAG;AAAA;AAAA,QACnC;AAAA,QAEC,gCACC;AAAA,UAAC,eAAG;AAAA,UAAH;AAAA,YACC,eAAW,iBAAG,oBAAoB,SAAS;AAAA,YAC3C,OAAO;AAAA,cACL,WAAW;AAAA,cACX,SAAS;AAAA,cACT,gBAAgB;AAAA,cAChB,YAAY;AAAA,cACZ,YAAY;AAAA,cACZ,GAAG,OAAO;AAAA,YACZ;AAAA,YACC,GAAG,aAAa;AAAA,YAEjB;AAAA,cAAC,eAAG;AAAA,cAAH;AAAA,gBACC,IAAI,qBAAO;AAAA,gBACX,eAAW,iBAAG,oBAAoB,SAAS;AAAA,gBAC3C,oBAAc,uBAAS,SAAS;AAAA,gBAChC,QAAM;AAAA,gBACN;AAAA,gBACA,OAAO,EAAE,GAAG,OAAO,MAAM;AAAA;AAAA,YAC3B;AAAA;AAAA,QACF;AAAA,QAGD,WACC;AAAA,UAAC,eAAG;AAAA,UAAH;AAAA,YACC,eAAW,iBAAG,oBAAoB,SAAS;AAAA,YAC3C,OAAO,EAAE,GAAG,OAAO,MAAM;AAAA,YACxB,GAAG,cAAc,UAAwC;AAAA,YAEzD;AAAA;AAAA,QACH,IACE;AAAA;AAAA;AAAA,EACN;AAEJ,CAAC;","names":[]}