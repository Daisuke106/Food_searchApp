{"version":3,"sources":["../src/index.ts","../src/infinite-scroll-area.tsx"],"sourcesContent":["export { InfiniteScrollArea } from \"./infinite-scroll-area\"\nexport type { InfiniteScrollAreaProps } from \"./infinite-scroll-area\"\n","import type { CSSUIObject, HTMLUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport type { UseInfiniteScrollProps } from \"@yamada-ui/use-infinite-scroll\"\nimport { useInfiniteScroll } from \"@yamada-ui/use-infinite-scroll\"\nimport { cx, mergeRefs } from \"@yamada-ui/utils\"\nimport type { ReactNode } from \"react\"\nimport { useMemo, useRef } from \"react\"\n\ntype InfiniteScrollAreaOptions = {\n  /**\n   * Props for infinite scroll area trigger component.\n   */\n  triggerProps?: HTMLUIProps<\"div\">\n  /**\n   * The infinite scroll area loading to use.\n   */\n  loading?: ReactNode\n  /**\n   * The infinite scroll area finish to use.\n   */\n  finish?: ReactNode\n}\n\nexport type InfiniteScrollAreaProps = Omit<\n  HTMLUIProps<\"div\">,\n  keyof UseInfiniteScrollProps\n> &\n  UseInfiniteScrollProps &\n  InfiniteScrollAreaOptions\n\n/**\n * `InfiniteScrollArea` is for providing infinite scroll functionality.\n * This feature provides a smooth scrolling experience by automatically loading and displaying the next dataset when the user reaches the end of the page.\n *\n * @see Docs https://yamada-ui.com/components/data-display/infinite-scroll-area\n */\nexport const InfiniteScrollArea = forwardRef<InfiniteScrollAreaProps, \"div\">(\n  (\n    {\n      rootRef: rootRefProp,\n      orientation = \"vertical\",\n      rootMargin,\n      threshold,\n      startIndex,\n      onLoad,\n      resetRef,\n      indexRef,\n      className,\n      children,\n      triggerProps,\n      loading,\n      finish,\n      isDisabled,\n      isReverse,\n      initialLoad,\n      ...rest\n    },\n    ref,\n  ) => {\n    const isVertical = orientation === \"vertical\"\n    const rootRef = useRef<HTMLDivElement>(null)\n    const { ref: triggerRef, isFinish } = useInfiniteScroll({\n      orientation,\n      rootRef: rootRefProp ?? rootRef,\n      rootMargin,\n      threshold,\n      startIndex,\n      onLoad,\n      resetRef,\n      indexRef,\n      isDisabled,\n      isReverse,\n      initialLoad,\n    })\n\n    const css: CSSUIObject = useMemo(\n      () => ({\n        w: \"100%\",\n        display: \"flex\",\n        flexDirection: isVertical ? \"column\" : \"row\",\n        gap: \"1rem\",\n      }),\n      [isVertical],\n    )\n\n    const hasFinish = !!finish\n    const showTrigger = !isDisabled && (hasFinish || !isFinish)\n\n    return (\n      <ui.div\n        ref={mergeRefs(rootRef, ref)}\n        tabIndex={0}\n        className={cx(\"ui-infinite-scroll-area\", className)}\n        __css={css}\n        {...rest}\n      >\n        {isReverse && showTrigger ? (\n          <InfiniteScrollTrigger ref={triggerRef} {...triggerProps}>\n            {isFinish ? finish : loading}\n          </InfiniteScrollTrigger>\n        ) : null}\n\n        {children}\n\n        {!isReverse && showTrigger ? (\n          <InfiniteScrollTrigger ref={triggerRef} {...triggerProps}>\n            {isFinish ? finish : loading}\n          </InfiniteScrollTrigger>\n        ) : null}\n      </ui.div>\n    )\n  },\n)\n\ntype InfiniteScrollTrigger = HTMLUIProps<\"div\">\n\nconst InfiniteScrollTrigger = forwardRef<InfiniteScrollTrigger, \"div\">(\n  ({ className, ...rest }, ref) => {\n    const css: CSSUIObject = useMemo(\n      () => ({\n        w: \"100%\",\n        flex: 1,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }),\n      [],\n    )\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-infinite-scroll-area__trigger\", className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,kBAA+B;AAE/B,iCAAkC;AAClC,mBAA8B;AAE9B,mBAAgC;AAmF1B;AArDC,IAAM,yBAAqB;AAAA,EAChC,CACE;AAAA,IACE,SAAS;AAAA,IACT,cAAc;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,GACA,QACG;AACH,UAAM,aAAa,gBAAgB;AACnC,UAAM,cAAU,qBAAuB,IAAI;AAC3C,UAAM,EAAE,KAAK,YAAY,SAAS,QAAI,8CAAkB;AAAA,MACtD;AAAA,MACA,SAAS,oCAAe;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,UAAM,UAAmB;AAAA,MACvB,OAAO;AAAA,QACL,GAAG;AAAA,QACH,SAAS;AAAA,QACT,eAAe,aAAa,WAAW;AAAA,QACvC,KAAK;AAAA,MACP;AAAA,MACA,CAAC,UAAU;AAAA,IACb;AAEA,UAAM,YAAY,CAAC,CAAC;AACpB,UAAM,cAAc,CAAC,eAAe,aAAa,CAAC;AAElD,WACE;AAAA,MAAC,eAAG;AAAA,MAAH;AAAA,QACC,SAAK,wBAAU,SAAS,GAAG;AAAA,QAC3B,UAAU;AAAA,QACV,eAAW,iBAAG,2BAA2B,SAAS;AAAA,QAClD,OAAO;AAAA,QACN,GAAG;AAAA,QAEH;AAAA,uBAAa,cACZ,4CAAC,yBAAsB,KAAK,YAAa,GAAG,cACzC,qBAAW,SAAS,SACvB,IACE;AAAA,UAEH;AAAA,UAEA,CAAC,aAAa,cACb,4CAAC,yBAAsB,KAAK,YAAa,GAAG,cACzC,qBAAW,SAAS,SACvB,IACE;AAAA;AAAA;AAAA,IACN;AAAA,EAEJ;AACF;AAIA,IAAM,4BAAwB;AAAA,EAC5B,CAAC,EAAE,WAAW,GAAG,KAAK,GAAG,QAAQ;AAC/B,UAAM,UAAmB;AAAA,MACvB,OAAO;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,SAAS;AAAA,QACT,gBAAgB;AAAA,QAChB,YAAY;AAAA,MACd;AAAA,MACA,CAAC;AAAA,IACH;AAEA,WACE;AAAA,MAAC,eAAG;AAAA,MAAH;AAAA,QACC;AAAA,QACA,eAAW,iBAAG,oCAAoC,SAAS;AAAA,QAC3D,OAAO;AAAA,QACN,GAAG;AAAA;AAAA,IACN;AAAA,EAEJ;AACF;","names":[]}