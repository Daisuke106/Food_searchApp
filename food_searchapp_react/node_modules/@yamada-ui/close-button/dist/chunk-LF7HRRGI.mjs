"use client"

// src/close-button.tsx
import {
  ui,
  forwardRef,
  useComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { CloseIcon } from "@yamada-ui/icon";
import { Ripple, useRipple } from "@yamada-ui/ripple";
import { cx } from "@yamada-ui/utils";
import { jsx, jsxs } from "react/jsx-runtime";
var CloseButton = forwardRef(
  (props, ref) => {
    const [styles, mergedProps] = useComponentStyle("CloseButton", props);
    const {
      className,
      children,
      isDisabled,
      isRounded,
      __css,
      disableRipple,
      ...rest
    } = omitThemeProps(mergedProps);
    const { onPointerDown, ...rippleProps } = useRipple({
      ...rest,
      isDisabled: disableRipple || isDisabled
    });
    const css = {
      position: "relative",
      overflow: "hidden",
      outline: 0,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      flexShrink: 0,
      ...styles,
      ...__css,
      ...isRounded ? { borderRadius: "fallback(full, 9999px)" } : {}
    };
    return /* @__PURE__ */ jsxs(
      ui.button,
      {
        ref,
        type: "button",
        "aria-label": "Close",
        className: cx("ui-close-button", className),
        disabled: isDisabled,
        __css: css,
        ...rest,
        onPointerDown,
        children: [
          children || /* @__PURE__ */ jsx(CloseIcon, { width: "1em", height: "1em" }),
          /* @__PURE__ */ jsx(Ripple, { isDisabled: disableRipple || isDisabled, ...rippleProps })
        ]
      }
    );
  }
);

export {
  CloseButton
};
//# sourceMappingURL=chunk-LF7HRRGI.mjs.map