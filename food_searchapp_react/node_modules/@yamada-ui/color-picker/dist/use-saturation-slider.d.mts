import { HTMLUIProps, UIPropGetter, CSSUIProps } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';

type Hsv = [number, number, number];
type Overlay = HTMLUIProps<"div"> | ((value: Hsv) => HTMLUIProps<"div">);
type UseSaturationSliderOptions = {
    /**
     * The base `id` to use for the saturation slider.
     */
    id?: string;
    /**
     * The name attribute of the hidden `input` field.
     * This is particularly useful in forms.
     */
    name?: string;
    /**
     * The value of the saturation slider.
     */
    value?: Hsv;
    /**
     * The initial value of the saturation slider.
     *
     * @default "[0, 0, 1]"
     */
    defaultValue?: Hsv;
    /**
     * Function called whenever the saturation slider value changes.
     */
    onChange?: (value: Hsv) => void;
    /**
     * Function called when the user starts selecting a new value.
     */
    onChangeStart?: (value: Hsv) => void;
    /**
     * Function called when the user is done selecting a new value.
     */
    onChangeEnd?: (value: Hsv) => void;
    /**
     * The step in which increments or decrements have to be made.
     *
     * @default 0.01
     */
    step?: number;
    /**
     * If `false`, the saturation slider handle will not capture focus when value changes.
     *
     * @default true
     */
    focusThumbOnChange?: boolean;
    /**
     * The CSS `background` property. Used in `background` of thumb element.
     */
    thumbColor?: CSSUIProps["bg"];
    /**
     * If `true`, the slider has an inner `box-shadow`.
     *
     * @default true
     */
    withShadow?: boolean;
    /**
     * The overlay used for the saturation slider.
     */
    overlays?: Overlay[];
};
type UseSaturationSliderProps = Omit<HTMLUIProps<"div">, "defaultValue" | "onChange"> & UseSaturationSliderOptions & FormControlOptions;
declare const useSaturationSlider: ({ focusThumbOnChange, ...props }: UseSaturationSliderProps) => {
    value: [number, number, number];
    overlays: HTMLUIProps<"div">[];
    getContainerProps: UIPropGetter;
    getInnerProps: UIPropGetter;
    getTrackProps: UIPropGetter;
    getInputProps: UIPropGetter<"input">;
    getThumbProps: UIPropGetter;
};
type UseSaturationSliderReturn = ReturnType<typeof useSaturationSlider>;

export { type Hsv, type UseSaturationSliderProps, type UseSaturationSliderReturn, useSaturationSlider };
