"use client"
import {
  useColorSlider
} from "./chunk-R4DLOKLT.mjs";

// src/alpha-slider.tsx
import {
  ui,
  forwardRef,
  omitThemeProps,
  useMultiComponentStyle
} from "@yamada-ui/core";
import { alphaToHex, convertColor, cx } from "@yamada-ui/utils";
import { jsx, jsxs } from "react/jsx-runtime";
var defaultOverlays = (color, min, max, withShadow) => {
  let overlays = [
    {
      bgImage: "linear-gradient(45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--ui-checkers) 75%), linear-gradient(-45deg, var(--ui-body) 75%, var(--ui-checkers) 75%)",
      bgSize: `8px 8px`,
      bgPosition: `0 0, 0 4px, 4px -4px, -4px 0`,
      var: [
        {
          __prefix: "ui",
          name: "checkers",
          token: "colors",
          value: ["blackAlpha.300", "whiteAlpha.300"]
        },
        {
          __prefix: "ui",
          name: "body",
          token: "colors",
          value: ["whiteAlpha.500", "blackAlpha.500"]
        }
      ]
    },
    {
      bgGradient: `linear(to-r, ${convertColor(color)("hex") + alphaToHex(min)}, ${convertColor(color)("hex") + alphaToHex(max)})`
    }
  ];
  if (withShadow)
    overlays = [
      ...overlays,
      {
        boxShadow: `rgba(0, 0, 0, .1) 0 0 0 1px inset, rgb(0, 0, 0, .15) 0 0 4px inset`
      }
    ];
  return overlays;
};
var AlphaSlider = forwardRef(
  (props, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle("AlphaSlider", props);
    const {
      className,
      inputProps,
      trackProps,
      thumbProps,
      color = "#ffffff",
      min = 0,
      max = 1,
      withShadow = true,
      overlays = defaultOverlays(color, min, max, withShadow),
      __css,
      ...computedProps
    } = omitThemeProps(mergedProps);
    const { getContainerProps, getTrackProps, getInputProps, getThumbProps } = useColorSlider({
      min,
      max,
      step: 0.01,
      thumbColor: "transparent",
      ...computedProps
    });
    const css = {
      position: "relative",
      ...styles.container,
      ...__css
    };
    return /* @__PURE__ */ jsxs(
      ui.div,
      {
        className: cx("ui-alpha-slider", className),
        __css: css,
        ...getContainerProps(),
        children: [
          /* @__PURE__ */ jsx(ui.input, { ...getInputProps(inputProps, ref) }),
          overlays.map((props2, index) => /* @__PURE__ */ jsx(
            ui.div,
            {
              className: "ui-alpha-slider__overlay",
              __css: {
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                ...styles.overlay
              },
              ...props2
            },
            index
          )),
          /* @__PURE__ */ jsx(
            ui.div,
            {
              className: "ui-alpha-slider__track",
              __css: {
                position: "relative",
                w: "100%",
                h: "100%",
                ...styles.track
              },
              ...getTrackProps(trackProps),
              children: /* @__PURE__ */ jsx(
                ui.div,
                {
                  className: "ui-alpha-slider__thumb",
                  __css: { ...styles.thumb },
                  ...getThumbProps(thumbProps)
                }
              )
            }
          )
        ]
      }
    );
  }
);

export {
  AlphaSlider
};
//# sourceMappingURL=chunk-YD5QBKEV.mjs.map