"use client"
import {
  ColorSwatch
} from "./chunk-UQWAM6TA.mjs";
import {
  useColorSelectorContext
} from "./chunk-5QT7SRA4.mjs";

// src/color-selector-swatches.tsx
import { forwardRef, ui } from "@yamada-ui/core";
import { cx, replaceObject } from "@yamada-ui/utils";
import { jsx, jsxs } from "react/jsx-runtime";
var ColorSelectorSwatches = forwardRef(
  ({
    className,
    swatchesLabel,
    swatches,
    swatchesContainerProps,
    swatchProps,
    swatchesColumns,
    ...rest
  }, ref) => {
    const { getSwatchProps, readOnly, styles } = useColorSelectorContext();
    const css = {
      display: "grid",
      gridTemplateColumns: replaceObject(
        swatchesColumns,
        (value) => value != null ? `repeat(${value}, minmax(0, 1fr))` : void 0
      ),
      ...styles.swatches
    };
    return (swatches == null ? void 0 : swatches.length) ? /* @__PURE__ */ jsxs(ui.div, { ...swatchesContainerProps, children: [
      swatchesLabel ? /* @__PURE__ */ jsx(
        ui.p,
        {
          className: "ui-color-selector__swatches__label",
          __css: { ...styles.swatchesLabel },
          children: swatchesLabel
        }
      ) : null,
      /* @__PURE__ */ jsx(
        ui.div,
        {
          ref,
          className: cx("ui-color-selector__swatches", className),
          __css: css,
          ...rest,
          children: swatches.map((color) => /* @__PURE__ */ jsx(
            ColorSwatch,
            {
              as: "button",
              __css: {
                boxSize: "100%",
                pointerEvents: readOnly ? "none" : void 0,
                ...styles.swatch
              },
              ...getSwatchProps({ color, ...swatchProps })
            },
            color
          ))
        }
      )
    ] }) : null;
  }
);

export {
  ColorSelectorSwatches
};
//# sourceMappingURL=chunk-WJEDVOZ4.mjs.map