"use client"

// src/color-swatch.tsx
import {
  ui,
  forwardRef,
  omitThemeProps,
  useMultiComponentStyle
} from "@yamada-ui/core";
import { cx } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var defaultOverlays = (background, withShadow) => {
  let overlays = [
    {
      bgImage: "linear-gradient(45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--ui-checkers) 75%), linear-gradient(-45deg, var(--ui-body) 75%, var(--ui-checkers) 75%)",
      bgSize: `8px 8px`,
      bgPosition: `0 0, 0 4px, 4px -4px, -4px 0`,
      var: [
        {
          __prefix: "ui",
          name: "checkers",
          token: "colors",
          value: ["blackAlpha.300", "whiteAlpha.300"]
        },
        {
          __prefix: "ui",
          name: "body",
          token: "colors",
          value: ["whiteAlpha.500", "blackAlpha.500"]
        }
      ]
    },
    { background }
  ];
  if (withShadow)
    overlays = [
      ...overlays,
      {
        boxShadow: `rgba(0, 0, 0, .1) 0 0 0 1px inset, rgb(0, 0, 0, .15) 0 0 4px inset`
      }
    ];
  return overlays;
};
var ColorSwatch = forwardRef((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle("ColorSwatch", props);
  const {
    className,
    color = "#ffffff00",
    withShadow = true,
    overlays = defaultOverlays(color, withShadow),
    isRounded,
    __css,
    ...rest
  } = omitThemeProps(mergedProps);
  const css = {
    position: "relative",
    _before: {
      content: `""`,
      display: "block",
      h: 0,
      pb: "100%"
    },
    "& > *": {
      overflow: "hidden",
      position: "absolute",
      top: "0",
      right: "0",
      bottom: "0",
      left: "0",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      w: "100%",
      h: "100%"
    },
    ...styles.container,
    ...__css
  };
  return /* @__PURE__ */ jsx(
    ui.div,
    {
      ref,
      className: cx("ui-color-swatch", className),
      ...isRounded ? { rounded: "fallback(full, 9999px)" } : {},
      __css: css,
      ...rest,
      children: /* @__PURE__ */ jsx(ui.div, { ...isRounded ? { rounded: "fallback(full, 9999px)" } : {}, children: overlays.map((props2, index) => /* @__PURE__ */ jsx(
        ui.div,
        {
          __css: {
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            ...styles.overlay
          },
          ...isRounded ? { rounded: "fallback(full, 9999px)" } : {},
          ...props2
        },
        index
      )) })
    }
  );
});

export {
  ColorSwatch
};
//# sourceMappingURL=chunk-UQWAM6TA.mjs.map