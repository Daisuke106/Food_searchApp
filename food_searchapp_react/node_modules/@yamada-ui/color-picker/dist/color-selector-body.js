"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/color-selector-body.tsx
var color_selector_body_exports = {};
__export(color_selector_body_exports, {
  ColorSelectorBody: () => ColorSelectorBody
});
module.exports = __toCommonJS(color_selector_body_exports);
var import_core6 = require("@yamada-ui/core");
var import_utils8 = require("@yamada-ui/utils");

// src/color-selector-eye-dropper.tsx
var import_button = require("@yamada-ui/button");
var import_core = require("@yamada-ui/core");
var import_icon = require("@yamada-ui/icon");
var import_utils2 = require("@yamada-ui/utils");

// src/use-color-selector.ts
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_eye_dropper = require("@yamada-ui/use-eye-dropper");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var [ColorSelectorProvider, useColorSelectorContext] = (0, import_utils.createContext)({
  name: "ColorSelectorContext",
  errorMessage: `useColorSelectorContext returned is 'undefined'. Seems you forgot to wrap the components in "<ColorSelector />"`
});

// src/color-selector-eye-dropper.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var ColorSelectorEyeDropper = (0, import_core.forwardRef)(({ className, ...rest }, ref) => {
  const { getEyeDropperProps, readOnly, size, styles } = useColorSelectorContext();
  const css = {
    h: "auto",
    minW: "auto",
    pointerEvents: readOnly ? "none" : void 0,
    ...styles.eyeDropper
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_button.IconButton,
    {
      className: (0, import_utils2.cx)("ui-color-selector__eye-dropper", className),
      variant: "outline",
      size,
      __css: css,
      ...getEyeDropperProps(rest, ref),
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(EyeDropperIcon, { className: "ui-color-selector__eye-dropper__icon" })
    }
  );
});
var EyeDropperIcon = ({ ...rest }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_icon.Icon,
    {
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      ...rest,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m2 22 1-1h3l9-9" }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M3 21v-3l9-9" }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m15 6 3.4-3.4a2.1 2.1 0 1 1 3 3L18 9l.4.4a2.1 2.1 0 1 1-3 3l-3.8-3.8a2.1 2.1 0 1 1 3-3l.4.4Z" })
      ]
    }
  );
};

// src/color-selector-sliders.tsx
var import_core4 = require("@yamada-ui/core");
var import_utils6 = require("@yamada-ui/utils");

// src/alpha-slider.tsx
var import_core2 = require("@yamada-ui/core");
var import_utils4 = require("@yamada-ui/utils");

// src/use-color-slider.ts
var import_form_control2 = require("@yamada-ui/form-control");
var import_use_controllable_state2 = require("@yamada-ui/use-controllable-state");
var import_use_latest_ref = require("@yamada-ui/use-latest-ref");
var import_use_pan_event = require("@yamada-ui/use-pan-event");
var import_use_size = require("@yamada-ui/use-size");
var import_utils3 = require("@yamada-ui/utils");
var import_react2 = require("react");
var useColorSlider = ({
  focusThumbOnChange = true,
  ...props
}) => {
  if (!focusThumbOnChange)
    props.isReadOnly = true;
  let {
    id,
    name,
    value: valueProp,
    defaultValue,
    min = 0,
    max,
    step = 1,
    onChange: onChangeProp,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    thumbColor,
    required,
    disabled,
    readOnly,
    ...rest
  } = (0, import_form_control2.useFormControlProps)(props);
  const onChangeStart = (0, import_utils3.useCallbackRef)(onChangeStartProp);
  const onChangeEnd = (0, import_utils3.useCallbackRef)(onChangeEndProp);
  const [computedValue, setValue] = (0, import_use_controllable_state2.useControllableState)({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : min + (max - min) / 2,
    onChange: onChangeProp
  });
  const value = (0, import_utils3.clampNumber)(computedValue, min, max);
  const thumbPercent = (0, import_utils3.valueToPercent)(value, min, max);
  const [isDragging, setDragging] = (0, import_react2.useState)(false);
  const isInteractive = !(disabled || readOnly);
  const oneStep = step || (max - min) / 100;
  const tenStep = (max - min) / 10;
  const containerRef = (0, import_react2.useRef)(null);
  const trackRef = (0, import_react2.useRef)(null);
  const thumbRef = (0, import_react2.useRef)(null);
  const latestRef = (0, import_use_latest_ref.useLatestRef)({
    value,
    min,
    max,
    step,
    isInteractive,
    eventSource: null,
    focusThumbOnChange
  });
  const thumbSize = (0, import_use_size.useSize)(thumbRef);
  const getValueFromPointer = (0, import_react2.useCallback)(
    (ev) => {
      var _a, _b;
      if (!trackRef.current)
        return;
      const { min: min2, max: max2, step: step2 } = latestRef.current;
      latestRef.current.eventSource = "pointer";
      const { left, width } = trackRef.current.getBoundingClientRect();
      const { clientX } = (_b = (_a = ev.touches) == null ? void 0 : _a[0]) != null ? _b : ev;
      let percent = (clientX - left) / width;
      let nextValue = (0, import_utils3.percentToValue)(percent, min2, max2);
      if (step2)
        nextValue = parseFloat((0, import_utils3.roundNumberToStep)(nextValue, min2, step2));
      nextValue = (0, import_utils3.clampNumber)(nextValue, min2, max2);
      return nextValue;
    },
    [latestRef]
  );
  const setValueFromPointer = (ev) => {
    const { value: value2 } = latestRef.current;
    const nextValue = getValueFromPointer(ev);
    if (nextValue != null && nextValue !== value2)
      setValue(nextValue);
  };
  const focusThumb = (0, import_react2.useCallback)(() => {
    const { focusThumbOnChange: focusThumbOnChange2 } = latestRef.current;
    if (focusThumbOnChange2)
      setTimeout(() => {
        var _a;
        return (_a = thumbRef.current) == null ? void 0 : _a.focus();
      });
  }, [latestRef]);
  const constrain = (0, import_react2.useCallback)(
    (value2) => {
      const { isInteractive: isInteractive2, min: min2, max: max2 } = latestRef.current;
      if (!isInteractive2)
        return;
      value2 = parseFloat((0, import_utils3.roundNumberToStep)(value2, min2, oneStep));
      value2 = (0, import_utils3.clampNumber)(value2, min2, max2);
      setValue(value2);
    },
    [setValue, latestRef, oneStep]
  );
  const stepUp = (0, import_react2.useCallback)(
    (step2 = oneStep) => constrain(value + step2),
    [constrain, value, oneStep]
  );
  const stepDown = (0, import_react2.useCallback)(
    (step2 = oneStep) => constrain(value - step2),
    [constrain, value, oneStep]
  );
  const onKeyDown = (0, import_react2.useCallback)(
    (ev) => {
      const { min: min2, max: max2 } = latestRef.current;
      const actions = {
        ArrowRight: () => stepUp(),
        ArrowUp: () => stepUp(),
        ArrowLeft: () => stepDown(),
        ArrowDown: () => stepDown(),
        PageUp: () => stepUp(tenStep),
        PageDown: () => stepDown(tenStep),
        Home: () => constrain(min2),
        End: () => constrain(max2)
      };
      const action = actions[ev.key];
      if (!action)
        return;
      ev.preventDefault();
      ev.stopPropagation();
      action(ev);
      latestRef.current.eventSource = "keyboard";
    },
    [constrain, latestRef, stepDown, stepUp, tenStep]
  );
  (0, import_use_pan_event.usePanEvent)(containerRef, {
    onSessionStart: (ev) => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(true);
      focusThumb();
      setValueFromPointer(ev);
      onChangeStart(value2);
    },
    onSessionEnd: () => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(false);
      onChangeEnd(value2);
    },
    onMove: (ev) => {
      const { isInteractive: isInteractive2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setValueFromPointer(ev);
    }
  });
  (0, import_utils3.useUpdateEffect)(() => {
    const { eventSource, value: value2 } = latestRef.current;
    if (eventSource === "keyboard")
      onChangeEnd(value2);
  }, [value, onChangeEnd]);
  const getContainerProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => {
      const { width: w } = thumbSize != null ? thumbSize : { width: 0 };
      const style = {
        ...props2.style,
        ...rest.style,
        paddingInline: `${w / 2}px`
      };
      return {
        ...props2,
        ...(0, import_utils3.omitObject)(rest, ["aria-readonly"]),
        ref: (0, import_utils3.mergeRefs)(ref, containerRef),
        tabIndex: -1,
        style
      };
    },
    [rest, thumbSize]
  );
  const getInputProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => ({
      ...(0, import_utils3.pickObject)(rest, import_form_control2.formControlProperties),
      ...props2,
      id,
      ref,
      type: "hidden",
      name,
      value,
      required,
      disabled,
      readOnly
    }),
    [disabled, id, name, readOnly, required, rest, value]
  );
  const getTrackProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => ({
      ...(0, import_utils3.pickObject)(
        rest,
        (0, import_form_control2.getFormControlProperties)({ omit: ["aria-readonly"] })
      ),
      ...props2,
      ref: (0, import_utils3.mergeRefs)(ref, trackRef)
    }),
    [rest]
  );
  const getThumbProps = (0, import_react2.useCallback)(
    (props2 = {}, ref = null) => {
      const n = thumbPercent;
      const { width: w } = thumbSize != null ? thumbSize : { width: 0 };
      const style = {
        ...props2.style,
        position: "absolute",
        userSelect: "none",
        touchAction: "none",
        left: `calc(${n}% - ${w / 2}px)`
      };
      return {
        "aria-label": "Slider thumb",
        bg: thumbColor != null ? thumbColor : `hsl(${value}, 100%, 50%)`,
        ...(0, import_utils3.pickObject)(rest, import_form_control2.formControlProperties),
        ...props2,
        ref: (0, import_utils3.mergeRefs)(ref, thumbRef),
        tabIndex: isInteractive && focusThumbOnChange ? 0 : void 0,
        role: "slider",
        "aria-valuenow": value,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "data-active": (0, import_utils3.dataAttr)(isDragging && focusThumbOnChange),
        onKeyDown: (0, import_utils3.handlerAll)(props2.onKeyDown, onKeyDown),
        onFocus: (0, import_utils3.handlerAll)(props2.onFocus, rest.onFocus),
        onBlur: (0, import_utils3.handlerAll)(props2.onBlur, rest.onBlur),
        style
      };
    },
    [
      thumbColor,
      focusThumbOnChange,
      isDragging,
      isInteractive,
      min,
      max,
      onKeyDown,
      rest,
      thumbPercent,
      thumbSize,
      value
    ]
  );
  return {
    value,
    getContainerProps,
    getTrackProps,
    getInputProps,
    getThumbProps
  };
};

// src/alpha-slider.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var defaultOverlays = (color, min, max, withShadow) => {
  let overlays = [
    {
      bgImage: "linear-gradient(45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--ui-checkers) 75%), linear-gradient(-45deg, var(--ui-body) 75%, var(--ui-checkers) 75%)",
      bgSize: `8px 8px`,
      bgPosition: `0 0, 0 4px, 4px -4px, -4px 0`,
      var: [
        {
          __prefix: "ui",
          name: "checkers",
          token: "colors",
          value: ["blackAlpha.300", "whiteAlpha.300"]
        },
        {
          __prefix: "ui",
          name: "body",
          token: "colors",
          value: ["whiteAlpha.500", "blackAlpha.500"]
        }
      ]
    },
    {
      bgGradient: `linear(to-r, ${(0, import_utils4.convertColor)(color)("hex") + (0, import_utils4.alphaToHex)(min)}, ${(0, import_utils4.convertColor)(color)("hex") + (0, import_utils4.alphaToHex)(max)})`
    }
  ];
  if (withShadow)
    overlays = [
      ...overlays,
      {
        boxShadow: `rgba(0, 0, 0, .1) 0 0 0 1px inset, rgb(0, 0, 0, .15) 0 0 4px inset`
      }
    ];
  return overlays;
};
var AlphaSlider = (0, import_core2.forwardRef)(
  (props, ref) => {
    const [styles, mergedProps] = (0, import_core2.useMultiComponentStyle)("AlphaSlider", props);
    const {
      className,
      inputProps,
      trackProps,
      thumbProps,
      color = "#ffffff",
      min = 0,
      max = 1,
      withShadow = true,
      overlays = defaultOverlays(color, min, max, withShadow),
      __css,
      ...computedProps
    } = (0, import_core2.omitThemeProps)(mergedProps);
    const { getContainerProps, getTrackProps, getInputProps, getThumbProps } = useColorSlider({
      min,
      max,
      step: 0.01,
      thumbColor: "transparent",
      ...computedProps
    });
    const css = {
      position: "relative",
      ...styles.container,
      ...__css
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      import_core2.ui.div,
      {
        className: (0, import_utils4.cx)("ui-alpha-slider", className),
        __css: css,
        ...getContainerProps(),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_core2.ui.input, { ...getInputProps(inputProps, ref) }),
          overlays.map((props2, index) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_core2.ui.div,
            {
              className: "ui-alpha-slider__overlay",
              __css: {
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                ...styles.overlay
              },
              ...props2
            },
            index
          )),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_core2.ui.div,
            {
              className: "ui-alpha-slider__track",
              __css: {
                position: "relative",
                w: "100%",
                h: "100%",
                ...styles.track
              },
              ...getTrackProps(trackProps),
              children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
                import_core2.ui.div,
                {
                  className: "ui-alpha-slider__thumb",
                  __css: { ...styles.thumb },
                  ...getThumbProps(thumbProps)
                }
              )
            }
          )
        ]
      }
    );
  }
);

// src/hue-slider.tsx
var import_core3 = require("@yamada-ui/core");
var import_utils5 = require("@yamada-ui/utils");
var import_jsx_runtime3 = require("react/jsx-runtime");
var defaultOverlays2 = (min, max, withShadow) => {
  let overlays = [
    {
      bgGradient: `linear(to-r, ${[...Array(7)].map(
        (_, index) => `hsl(${Math.round(min + (max - min) / 6 * index)}, 100%, 50%)`
      ).join(", ")})`
    }
  ];
  if (withShadow)
    overlays = [
      ...overlays,
      {
        boxShadow: `rgba(0, 0, 0, .1) 0 0 0 1px inset, rgb(0, 0, 0, .15) 0 0 4px inset`
      }
    ];
  return overlays;
};
var HueSlider = (0, import_core3.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core3.useMultiComponentStyle)("HueSlider", props);
  const {
    className,
    inputProps,
    trackProps,
    thumbProps,
    min = 0,
    max = 360,
    withShadow = true,
    overlays = defaultOverlays2(min, max, withShadow),
    __css,
    ...computedProps
  } = (0, import_core3.omitThemeProps)(mergedProps);
  const { getContainerProps, getTrackProps, getInputProps, getThumbProps } = useColorSlider({ min, max, step: 1, ...computedProps });
  const css = {
    position: "relative",
    ...styles.container,
    ...__css
  };
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
    import_core3.ui.div,
    {
      className: (0, import_utils5.cx)("ui-hue-slider", className),
      __css: css,
      ...getContainerProps(),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_core3.ui.input, { ...getInputProps(inputProps, ref) }),
        overlays.map((props2, index) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          import_core3.ui.div,
          {
            className: "ui-hue-slider__overlay",
            __css: {
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              ...styles.overlay
            },
            ...props2
          },
          index
        )),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          import_core3.ui.div,
          {
            className: "ui-hue-slider__track",
            __css: { position: "relative", w: "100%", h: "100%", ...styles.track },
            ...getTrackProps(trackProps),
            children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              import_core3.ui.div,
              {
                className: "ui-hue-slider__thumb",
                __css: { ...styles.thumb },
                ...getThumbProps(thumbProps)
              }
            )
          }
        )
      ]
    }
  );
});

// src/color-selector-sliders.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var ColorSelectorSliders = (0, import_core4.forwardRef)(
  ({
    className,
    hueSliderRef,
    hueSliderProps,
    alphaSliderRef,
    alphaSliderProps,
    ...rest
  }, ref) => {
    let { size, withAlpha, getHueSliderProps, getAlphaSliderProps, styles } = useColorSelectorContext();
    if (size === "full")
      size = "lg";
    const css = {
      display: "flex",
      flexDirection: "column",
      ...styles.sliders
    };
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
      import_core4.ui.div,
      {
        ref,
        className: (0, import_utils6.cx)("ui-color-selector__sliders", className),
        __css: css,
        ...rest,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            HueSlider,
            {
              size,
              className: "ui-color-selector__hue-slider",
              __css: { ...styles.hueSlider },
              ...getHueSliderProps(hueSliderProps, hueSliderRef)
            }
          ),
          withAlpha ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            AlphaSlider,
            {
              size,
              className: "ui-color-selector__alpha-slider",
              __css: { ...styles.alphaSlider },
              ...getAlphaSliderProps(alphaSliderProps, alphaSliderRef)
            }
          ) : null
        ]
      }
    );
  }
);

// src/color-swatch.tsx
var import_core5 = require("@yamada-ui/core");
var import_utils7 = require("@yamada-ui/utils");
var import_jsx_runtime5 = require("react/jsx-runtime");
var defaultOverlays3 = (background, withShadow) => {
  let overlays = [
    {
      bgImage: "linear-gradient(45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(-45deg, var(--ui-checkers) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, var(--ui-checkers) 75%), linear-gradient(-45deg, var(--ui-body) 75%, var(--ui-checkers) 75%)",
      bgSize: `8px 8px`,
      bgPosition: `0 0, 0 4px, 4px -4px, -4px 0`,
      var: [
        {
          __prefix: "ui",
          name: "checkers",
          token: "colors",
          value: ["blackAlpha.300", "whiteAlpha.300"]
        },
        {
          __prefix: "ui",
          name: "body",
          token: "colors",
          value: ["whiteAlpha.500", "blackAlpha.500"]
        }
      ]
    },
    { background }
  ];
  if (withShadow)
    overlays = [
      ...overlays,
      {
        boxShadow: `rgba(0, 0, 0, .1) 0 0 0 1px inset, rgb(0, 0, 0, .15) 0 0 4px inset`
      }
    ];
  return overlays;
};
var ColorSwatch = (0, import_core5.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core5.useMultiComponentStyle)("ColorSwatch", props);
  const {
    className,
    color = "#ffffff00",
    withShadow = true,
    overlays = defaultOverlays3(color, withShadow),
    isRounded,
    __css,
    ...rest
  } = (0, import_core5.omitThemeProps)(mergedProps);
  const css = {
    position: "relative",
    _before: {
      content: `""`,
      display: "block",
      h: 0,
      pb: "100%"
    },
    "& > *": {
      overflow: "hidden",
      position: "absolute",
      top: "0",
      right: "0",
      bottom: "0",
      left: "0",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      w: "100%",
      h: "100%"
    },
    ...styles.container,
    ...__css
  };
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    import_core5.ui.div,
    {
      ref,
      className: (0, import_utils7.cx)("ui-color-swatch", className),
      ...isRounded ? { rounded: "fallback(full, 9999px)" } : {},
      __css: css,
      ...rest,
      children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_core5.ui.div, { ...isRounded ? { rounded: "fallback(full, 9999px)" } : {}, children: overlays.map((props2, index) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        import_core5.ui.div,
        {
          __css: {
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            ...styles.overlay
          },
          ...isRounded ? { rounded: "fallback(full, 9999px)" } : {},
          ...props2
        },
        index
      )) })
    }
  );
});

// src/color-selector-body.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
var ColorSelectorBody = (0, import_core6.forwardRef)(
  ({
    className,
    withEyeDropper = true,
    withResult,
    eyeDropperRef,
    eyeDropperProps,
    hueSliderRef,
    hueSliderProps,
    alphaSliderRef,
    alphaSliderProps,
    ...rest
  }, ref) => {
    const { value, eyeDropperSupported, styles } = useColorSelectorContext();
    const css = {
      display: "flex",
      w: "100%",
      ...styles.body
    };
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
      import_core6.ui.div,
      {
        ref,
        className: (0, import_utils8.cx)("ui-color-selector__body", className),
        __css: css,
        ...rest,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            ColorSelectorSliders,
            {
              ...{
                hueSliderRef,
                hueSliderProps,
                alphaSliderRef,
                alphaSliderProps
              }
            }
          ),
          withEyeDropper && eyeDropperSupported ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ColorSelectorEyeDropper, { ref: eyeDropperRef, ...eyeDropperProps }) : null,
          withResult ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            ColorSwatch,
            {
              className: "ui-color-selector__result",
              color: value,
              __css: { ...styles.result }
            }
          ) : null
        ]
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ColorSelectorBody
});
//# sourceMappingURL=color-selector-body.js.map