"use client"

// src/use-color-slider.ts
import {
  useFormControlProps,
  formControlProperties,
  getFormControlProperties
} from "@yamada-ui/form-control";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import { useLatestRef } from "@yamada-ui/use-latest-ref";
import { usePanEvent } from "@yamada-ui/use-pan-event";
import { useSize } from "@yamada-ui/use-size";
import {
  omitObject,
  dataAttr,
  handlerAll,
  mergeRefs,
  valueToPercent,
  clampNumber,
  useCallbackRef,
  roundNumberToStep,
  useUpdateEffect,
  percentToValue,
  pickObject
} from "@yamada-ui/utils";
import { useCallback, useRef, useState } from "react";
var useColorSlider = ({
  focusThumbOnChange = true,
  ...props
}) => {
  if (!focusThumbOnChange)
    props.isReadOnly = true;
  let {
    id,
    name,
    value: valueProp,
    defaultValue,
    min = 0,
    max,
    step = 1,
    onChange: onChangeProp,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    thumbColor,
    required,
    disabled,
    readOnly,
    ...rest
  } = useFormControlProps(props);
  const onChangeStart = useCallbackRef(onChangeStartProp);
  const onChangeEnd = useCallbackRef(onChangeEndProp);
  const [computedValue, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : min + (max - min) / 2,
    onChange: onChangeProp
  });
  const value = clampNumber(computedValue, min, max);
  const thumbPercent = valueToPercent(value, min, max);
  const [isDragging, setDragging] = useState(false);
  const isInteractive = !(disabled || readOnly);
  const oneStep = step || (max - min) / 100;
  const tenStep = (max - min) / 10;
  const containerRef = useRef(null);
  const trackRef = useRef(null);
  const thumbRef = useRef(null);
  const latestRef = useLatestRef({
    value,
    min,
    max,
    step,
    isInteractive,
    eventSource: null,
    focusThumbOnChange
  });
  const thumbSize = useSize(thumbRef);
  const getValueFromPointer = useCallback(
    (ev) => {
      var _a, _b;
      if (!trackRef.current)
        return;
      const { min: min2, max: max2, step: step2 } = latestRef.current;
      latestRef.current.eventSource = "pointer";
      const { left, width } = trackRef.current.getBoundingClientRect();
      const { clientX } = (_b = (_a = ev.touches) == null ? void 0 : _a[0]) != null ? _b : ev;
      let percent = (clientX - left) / width;
      let nextValue = percentToValue(percent, min2, max2);
      if (step2)
        nextValue = parseFloat(roundNumberToStep(nextValue, min2, step2));
      nextValue = clampNumber(nextValue, min2, max2);
      return nextValue;
    },
    [latestRef]
  );
  const setValueFromPointer = (ev) => {
    const { value: value2 } = latestRef.current;
    const nextValue = getValueFromPointer(ev);
    if (nextValue != null && nextValue !== value2)
      setValue(nextValue);
  };
  const focusThumb = useCallback(() => {
    const { focusThumbOnChange: focusThumbOnChange2 } = latestRef.current;
    if (focusThumbOnChange2)
      setTimeout(() => {
        var _a;
        return (_a = thumbRef.current) == null ? void 0 : _a.focus();
      });
  }, [latestRef]);
  const constrain = useCallback(
    (value2) => {
      const { isInteractive: isInteractive2, min: min2, max: max2 } = latestRef.current;
      if (!isInteractive2)
        return;
      value2 = parseFloat(roundNumberToStep(value2, min2, oneStep));
      value2 = clampNumber(value2, min2, max2);
      setValue(value2);
    },
    [setValue, latestRef, oneStep]
  );
  const stepUp = useCallback(
    (step2 = oneStep) => constrain(value + step2),
    [constrain, value, oneStep]
  );
  const stepDown = useCallback(
    (step2 = oneStep) => constrain(value - step2),
    [constrain, value, oneStep]
  );
  const onKeyDown = useCallback(
    (ev) => {
      const { min: min2, max: max2 } = latestRef.current;
      const actions = {
        ArrowRight: () => stepUp(),
        ArrowUp: () => stepUp(),
        ArrowLeft: () => stepDown(),
        ArrowDown: () => stepDown(),
        PageUp: () => stepUp(tenStep),
        PageDown: () => stepDown(tenStep),
        Home: () => constrain(min2),
        End: () => constrain(max2)
      };
      const action = actions[ev.key];
      if (!action)
        return;
      ev.preventDefault();
      ev.stopPropagation();
      action(ev);
      latestRef.current.eventSource = "keyboard";
    },
    [constrain, latestRef, stepDown, stepUp, tenStep]
  );
  usePanEvent(containerRef, {
    onSessionStart: (ev) => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(true);
      focusThumb();
      setValueFromPointer(ev);
      onChangeStart(value2);
    },
    onSessionEnd: () => {
      const { isInteractive: isInteractive2, value: value2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setDragging(false);
      onChangeEnd(value2);
    },
    onMove: (ev) => {
      const { isInteractive: isInteractive2 } = latestRef.current;
      if (!isInteractive2)
        return;
      setValueFromPointer(ev);
    }
  });
  useUpdateEffect(() => {
    const { eventSource, value: value2 } = latestRef.current;
    if (eventSource === "keyboard")
      onChangeEnd(value2);
  }, [value, onChangeEnd]);
  const getContainerProps = useCallback(
    (props2 = {}, ref = null) => {
      const { width: w } = thumbSize != null ? thumbSize : { width: 0 };
      const style = {
        ...props2.style,
        ...rest.style,
        paddingInline: `${w / 2}px`
      };
      return {
        ...props2,
        ...omitObject(rest, ["aria-readonly"]),
        ref: mergeRefs(ref, containerRef),
        tabIndex: -1,
        style
      };
    },
    [rest, thumbSize]
  );
  const getInputProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...pickObject(rest, formControlProperties),
      ...props2,
      id,
      ref,
      type: "hidden",
      name,
      value,
      required,
      disabled,
      readOnly
    }),
    [disabled, id, name, readOnly, required, rest, value]
  );
  const getTrackProps = useCallback(
    (props2 = {}, ref = null) => ({
      ...pickObject(
        rest,
        getFormControlProperties({ omit: ["aria-readonly"] })
      ),
      ...props2,
      ref: mergeRefs(ref, trackRef)
    }),
    [rest]
  );
  const getThumbProps = useCallback(
    (props2 = {}, ref = null) => {
      const n = thumbPercent;
      const { width: w } = thumbSize != null ? thumbSize : { width: 0 };
      const style = {
        ...props2.style,
        position: "absolute",
        userSelect: "none",
        touchAction: "none",
        left: `calc(${n}% - ${w / 2}px)`
      };
      return {
        "aria-label": "Slider thumb",
        bg: thumbColor != null ? thumbColor : `hsl(${value}, 100%, 50%)`,
        ...pickObject(rest, formControlProperties),
        ...props2,
        ref: mergeRefs(ref, thumbRef),
        tabIndex: isInteractive && focusThumbOnChange ? 0 : void 0,
        role: "slider",
        "aria-valuenow": value,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "data-active": dataAttr(isDragging && focusThumbOnChange),
        onKeyDown: handlerAll(props2.onKeyDown, onKeyDown),
        onFocus: handlerAll(props2.onFocus, rest.onFocus),
        onBlur: handlerAll(props2.onBlur, rest.onBlur),
        style
      };
    },
    [
      thumbColor,
      focusThumbOnChange,
      isDragging,
      isInteractive,
      min,
      max,
      onKeyDown,
      rest,
      thumbPercent,
      thumbSize,
      value
    ]
  );
  return {
    value,
    getContainerProps,
    getTrackProps,
    getInputProps,
    getThumbProps
  };
};

export {
  useColorSlider
};
//# sourceMappingURL=chunk-R4DLOKLT.mjs.map