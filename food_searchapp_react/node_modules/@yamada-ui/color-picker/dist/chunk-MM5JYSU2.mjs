"use client"
import {
  ColorPickerProvider,
  useColorPicker,
  useColorPickerContext
} from "./chunk-SBN7FEOE.mjs";
import {
  ColorSelector
} from "./chunk-EUAMWFFM.mjs";
import {
  EyeDropperIcon
} from "./chunk-IU3VEGY6.mjs";
import {
  ColorSwatch
} from "./chunk-UQWAM6TA.mjs";

// src/color-picker.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { Popover, PopoverContent, PopoverTrigger } from "@yamada-ui/popover";
import { Portal } from "@yamada-ui/portal";
import { cx, getValidChildren, isValidElement } from "@yamada-ui/utils";
import { cloneElement } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var ColorPicker = forwardRef(
  ({ withSwatch = true, ...props }, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle("ColorPicker", {
      withSwatch,
      ...props
    });
    let {
      className,
      children,
      withEyeDropper = true,
      color,
      h,
      height,
      minH,
      minHeight,
      containerProps,
      inputProps,
      swatchProps,
      eyeDropperProps,
      saturationSliderRef,
      saturationSliderProps,
      swatchesProps,
      hueSliderRef,
      hueSliderProps,
      alphaSliderRef,
      alphaSliderProps,
      channelsProps,
      channelProps,
      portalProps = { isDisabled: true },
      ...computedProps
    } = omitThemeProps(mergedProps, ["withSwatch"]);
    const {
      allowInput,
      eyeDropperSupported,
      getPopoverProps,
      getContainerProps,
      getFieldProps,
      getSelectorProps,
      getEyeDropperProps,
      ...rest
    } = useColorPicker(computedProps);
    h != null ? h : h = height;
    minH != null ? minH : minH = minHeight;
    const css = {
      w: "100%",
      h: "fit-content",
      color,
      ...styles.container
    };
    return /* @__PURE__ */ jsx(ColorPickerProvider, { value: { styles, ...rest }, children: /* @__PURE__ */ jsx(Popover, { ...getPopoverProps(), children: /* @__PURE__ */ jsxs(
      ui.div,
      {
        className: cx("ui-color-picker", className),
        __css: css,
        ...getContainerProps(containerProps),
        children: [
          /* @__PURE__ */ jsxs(
            ui.div,
            {
              className: "ui-color-picker__inner",
              __css: {
                position: "relative",
                cursor: !allowInput ? "pointer" : void 0,
                ...styles.inner
              },
              children: [
                withSwatch ? /* @__PURE__ */ jsx(ColorPickerSwatch, { ...swatchProps }) : null,
                /* @__PURE__ */ jsx(PopoverTrigger, { children: /* @__PURE__ */ jsx(
                  ColorPickerField,
                  {
                    h,
                    minH,
                    ...getFieldProps(inputProps, ref)
                  }
                ) }),
                eyeDropperSupported && withEyeDropper ? /* @__PURE__ */ jsx(
                  ColorPickerEyeDropper,
                  {
                    ...getEyeDropperProps(eyeDropperProps)
                  }
                ) : null
              ]
            }
          ),
          /* @__PURE__ */ jsx(Portal, { ...portalProps, children: /* @__PURE__ */ jsx(
            PopoverContent,
            {
              className: "ui-color-picker__popover",
              __css: { ...styles.list },
              children: /* @__PURE__ */ jsx(
                ColorSelector,
                {
                  className: "ui-color-picker__picker",
                  ...getSelectorProps({
                    saturationSliderRef,
                    saturationSliderProps,
                    swatchesProps,
                    hueSliderRef,
                    hueSliderProps,
                    alphaSliderRef,
                    alphaSliderProps,
                    channelsProps,
                    channelProps
                  }),
                  children
                }
              )
            }
          ) })
        ]
      }
    ) }) });
  }
);
var ColorPickerField = forwardRef(
  ({ className, h, minH, ...rest }, ref) => {
    const { styles } = useColorPickerContext();
    const css = {
      ps: "2rem",
      pe: "2rem",
      h,
      minH,
      display: "flex",
      alignItems: "center",
      ...styles.field
    };
    return /* @__PURE__ */ jsx(
      ui.input,
      {
        ref,
        className: cx("ui-color-picker__field", className),
        __css: css,
        ...rest
      }
    );
  }
);
var ColorPickerSwatch = forwardRef(
  ({ className, ...rest }, ref) => {
    const { value, styles } = useColorPickerContext();
    const css = {
      position: "absolute",
      top: "50%",
      transform: "translateY(-50%)",
      zIndex: 2,
      ...styles.swatch
    };
    return /* @__PURE__ */ jsx(
      ColorSwatch,
      {
        ref,
        className: cx("ui-color-picker__swatch", className),
        __css: css,
        color: value,
        isRounded: true,
        ...rest
      }
    );
  }
);
var ColorPickerEyeDropper = forwardRef(
  ({ className, children, ...rest }, ref) => {
    const { styles } = useColorPickerContext();
    const css = {
      position: "absolute",
      top: "50%",
      transform: "translateY(-50%)",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      zIndex: 1,
      ...styles.eyeDropper
    };
    const validChildren = getValidChildren(children);
    const cloneChildren = validChildren.map(
      (child) => cloneElement(child, {
        focusable: false,
        "aria-hidden": true,
        style: {
          maxWidth: "1em",
          maxHeight: "1em",
          color: "currentColor"
        }
      })
    );
    return /* @__PURE__ */ jsx(
      ui.button,
      {
        ref,
        className: cx("ui-color-picker__eye-dropper", className),
        __css: css,
        ...rest,
        children: isValidElement(children) ? cloneChildren : /* @__PURE__ */ jsx(EyeDropperIcon, { className: "ui-color-picker__eye-dropper__icon" })
      }
    );
  }
);

export {
  ColorPicker
};
//# sourceMappingURL=chunk-MM5JYSU2.mjs.map