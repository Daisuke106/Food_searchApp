"use client"
import {
  useColorSelectorContext
} from "./chunk-5QT7SRA4.mjs";

// src/color-selector-channels.tsx
import { forwardRef, ui } from "@yamada-ui/core";
import { Input } from "@yamada-ui/input";
import { cx } from "@yamada-ui/utils";
import { useId } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var ColorSelectorChannels = forwardRef(({ className, channelProps, ...rest }, ref) => {
  const { withAlpha, channels, getChannelProps, styles } = useColorSelectorContext();
  const css = {
    display: "grid",
    gridTemplateColumns: `repeat(${withAlpha ? "4" : "3"}, 1fr)`,
    ...styles.channels
  };
  return /* @__PURE__ */ jsx(
    ui.div,
    {
      ref,
      className: cx("ui-color-selector__channels", className),
      __css: css,
      ...rest,
      children: channels.map(({ label, space, value, min, max }) => /* @__PURE__ */ jsx(
        ColorSelectorChannel,
        {
          channelLabel: label,
          ...getChannelProps({ ...channelProps, space, value, min, max })
        },
        label
      ))
    }
  );
});
var ColorSelectorChannel = forwardRef(({ className, channelLabel, ...rest }, ref) => {
  const id = useId();
  let { size, disabled, readOnly, styles } = useColorSelectorContext();
  if (size === "full")
    size = "lg";
  const css = { ...styles.channel };
  return /* @__PURE__ */ jsxs(ui.div, { className: cx("ui-color-selector__channel", className), children: [
    channelLabel ? /* @__PURE__ */ jsx(
      ui.label,
      {
        htmlFor: id,
        style: { cursor: disabled ? "not-allowed" : void 0 },
        __css: {
          display: "block",
          pointerEvents: readOnly ? "none" : void 0,
          ...styles.channelLabel
        },
        children: channelLabel
      }
    ) : null,
    /* @__PURE__ */ jsx(Input, { ref, id, size, __css: css, ...rest })
  ] });
});

export {
  ColorSelectorChannels,
  ColorSelectorChannel
};
//# sourceMappingURL=chunk-YXQQHV2S.mjs.map