"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/color-selector-channels.tsx
var color_selector_channels_exports = {};
__export(color_selector_channels_exports, {
  ColorSelectorChannel: () => ColorSelectorChannel,
  ColorSelectorChannels: () => ColorSelectorChannels
});
module.exports = __toCommonJS(color_selector_channels_exports);
var import_core = require("@yamada-ui/core");
var import_input = require("@yamada-ui/input");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/use-color-selector.ts
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_eye_dropper = require("@yamada-ui/use-eye-dropper");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var [ColorSelectorProvider, useColorSelectorContext] = (0, import_utils.createContext)({
  name: "ColorSelectorContext",
  errorMessage: `useColorSelectorContext returned is 'undefined'. Seems you forgot to wrap the components in "<ColorSelector />"`
});

// src/color-selector-channels.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var ColorSelectorChannels = (0, import_core.forwardRef)(({ className, channelProps, ...rest }, ref) => {
  const { withAlpha, channels, getChannelProps, styles } = useColorSelectorContext();
  const css = {
    display: "grid",
    gridTemplateColumns: `repeat(${withAlpha ? "4" : "3"}, 1fr)`,
    ...styles.channels
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_core.ui.div,
    {
      ref,
      className: (0, import_utils2.cx)("ui-color-selector__channels", className),
      __css: css,
      ...rest,
      children: channels.map(({ label, space, value, min, max }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        ColorSelectorChannel,
        {
          channelLabel: label,
          ...getChannelProps({ ...channelProps, space, value, min, max })
        },
        label
      ))
    }
  );
});
var ColorSelectorChannel = (0, import_core.forwardRef)(({ className, channelLabel, ...rest }, ref) => {
  const id = (0, import_react2.useId)();
  let { size, disabled, readOnly, styles } = useColorSelectorContext();
  if (size === "full")
    size = "lg";
  const css = { ...styles.channel };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_core.ui.div, { className: (0, import_utils2.cx)("ui-color-selector__channel", className), children: [
    channelLabel ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.label,
      {
        htmlFor: id,
        style: { cursor: disabled ? "not-allowed" : void 0 },
        __css: {
          display: "block",
          pointerEvents: readOnly ? "none" : void 0,
          ...styles.channelLabel
        },
        children: channelLabel
      }
    ) : null,
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_input.Input, { ref, id, size, __css: css, ...rest })
  ] });
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ColorSelectorChannel,
  ColorSelectorChannels
});
//# sourceMappingURL=color-selector-channels.js.map