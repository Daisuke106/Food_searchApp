import * as react from 'react';
import { HTMLUIProps, UIPropGetter, CSSUIObject, ThemeProps } from '@yamada-ui/core';
import { PopoverProps } from '@yamada-ui/popover';
import { ColorSelectorProps } from './color-selector.js';
import { UseColorSelectorBaseProps } from './use-color-selector.js';
import './color-selector-body.js';
import './color-selector-eye-dropper.js';
import '@yamada-ui/button';
import '@yamada-ui/icon';
import './color-selector-sliders.js';
import './alpha-slider.js';
import './use-color-slider.js';
import '@yamada-ui/form-control';
import './hue-slider.js';
import './color-selector-channels.js';
import '@yamada-ui/input';
import './color-selector-swatches.js';
import './color-swatch.js';
import './saturation-slider.js';
import './use-saturation-slider.js';
import '@yamada-ui/utils';

type ColorSelectorThemeProps = ThemeProps<"ColorSelector">;
type ColorPickerContext = {
    value: string;
    styles: Record<string, CSSUIObject>;
};
declare const ColorPickerProvider: react.Provider<ColorPickerContext>;
declare const useColorPickerContext: () => ColorPickerContext;
type UseColorPickerOptions = {
    /**
     * The initial value of the color selector.
     */
    defaultColor?: string;
    /**
     * If `true`, allows input.
     *
     * @default true
     */
    allowInput?: boolean;
    /**
     * A callback function to format the input entered.
     */
    formatInput?: (value: string) => string;
    /**
     * If `true`, display the result component.
     *
     * @default false
     */
    withResult?: boolean;
    /**
     * If `true` display the eye dropper component.
     *
     * @default false
     */
    withColorSelectorEyeDropper?: boolean;
    /**
     * If `true`, the color swatch will be closed when value is selected.
     */
    closeOnSelectSwatch?: boolean;
    /**
     * Variant for the color selector component.
     */
    colorSelectorVariant?: ColorSelectorThemeProps["variant"];
    /**
     * Size for the color selector component.
     */
    colorSelectorSize?: ColorSelectorThemeProps["size"];
    /**
     * ColorScheme for the color selector component.
     */
    colorSelectorColorScheme?: ColorSelectorThemeProps["colorScheme"];
    /**
     * Props for color selector component.
     */
    colorSelectorProps?: ColorSelectorProps;
};
type UseColorPickerProps = Omit<HTMLUIProps<"input">, "size" | "offset" | "value" | "defaultValue" | "onChange" | "children"> & Omit<UseColorSelectorBaseProps, "id" | "name"> & Omit<PopoverProps, "initialFocusRef" | "closeOnButton" | "trigger" | "autoFocus" | "restoreFocus" | "openDelay" | "closeDelay" | "children"> & Pick<ColorSelectorProps, "withPicker" | "withChannel" | "swatchesLabel" | "swatches" | "swatchesColumns"> & UseColorPickerOptions;
declare const useColorPicker: ({ value: valueProp, defaultValue, fallbackValue, defaultColor, onChange: onChangeProp, onChangeStart, onChangeEnd, onSwatchClick, formatInput, closeOnBlur, closeOnEsc, placement, duration, isOpen: isOpenProp, defaultIsOpen, onOpen: onOpenProp, onClose: onCloseProp, allowInput, closeOnSelectSwatch, format, swatchesLabel, swatches, swatchesColumns, withPicker, withChannel, withResult, withColorSelectorEyeDropper, colorSelectorVariant, colorSelectorSize, colorSelectorColorScheme, ...rest }: UseColorPickerProps) => {
    value: string;
    eyeDropperSupported: boolean;
    allowInput: boolean;
    getPopoverProps: (props?: PopoverProps) => PopoverProps;
    getContainerProps: UIPropGetter;
    getFieldProps: UIPropGetter<"input">;
    getSelectorProps: (props?: ColorSelectorProps) => ColorSelectorProps;
    getEyeDropperProps: UIPropGetter<"button">;
};
type UseColorPickerReturn = ReturnType<typeof useColorPicker>;

export { ColorPickerProvider, type UseColorPickerProps, type UseColorPickerReturn, useColorPicker, useColorPickerContext };
