import * as react from 'react';
import { HTMLUIProps, UIPropGetter, RequiredUIPropGetter, ThemeProps, CSSUIObject } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';
import { InputProps } from '@yamada-ui/input';
import { Merge, ColorFormat } from '@yamada-ui/utils';
import { AlphaSliderProps } from './alpha-slider.js';
import { ColorSwatchProps } from './color-swatch.js';
import { HueSliderProps } from './hue-slider.js';
import { SaturationSliderProps } from './saturation-slider.js';
import './use-color-slider.js';
import './use-saturation-slider.js';

type Space = keyof Hsla | keyof Rgba;
type Hsla = {
    h: number;
    s: number;
    l: number;
    a: number;
};
type Rgba = {
    r: number;
    g: number;
    b: number;
    a: number;
};
type Hsva = {
    h: number;
    s: number;
    v: number;
    a: number;
};
type Channel = {
    label: string;
    space: Space;
    value: number;
    min: number;
    max: number;
};
type ColorSelectorContext = {
    value: string;
    onChange: (value: string | Partial<Hsva>) => void;
    eyeDropperSupported: boolean;
    withAlpha: boolean;
    isInteractive: boolean;
    disabled?: boolean;
    readOnly?: boolean;
    channels: Channel[];
    size?: ThemeProps<"ColorSelector">["size"];
    getHueSliderProps: UIPropGetter<"input", HueSliderProps, HueSliderProps>;
    getAlphaSliderProps: UIPropGetter<"input", AlphaSliderProps, AlphaSliderProps>;
    getEyeDropperProps: UIPropGetter<"button">;
    getChannelProps: RequiredUIPropGetter<"input", Merge<InputProps, {
        space: Space;
    }>, InputProps>;
    getSwatchProps: UIPropGetter<"div", ColorSwatchProps, ColorSwatchProps>;
    styles: Record<string, CSSUIObject>;
};
declare const ColorSelectorProvider: react.Provider<ColorSelectorContext>;
declare const useColorSelectorContext: () => ColorSelectorContext;
type UseColorSelectorOptions = {
    /**
     * The base `id` to use for the color selector.
     */
    id?: string;
    /**
     * The name attribute of the hidden `input` field.
     * This is particularly useful in forms.
     */
    name?: string;
    /**
     * The value of the color selector.
     */
    value?: string;
    /**
     * The initial value of the color selector.
     */
    defaultValue?: string;
    /**
     * The fallback value returned when color determination fails.
     */
    fallbackValue?: string;
    /**
     * Function called whenever the color selector value changes.
     */
    onChange?: (value: string) => void;
    /**
     * Function called when the user starts selecting a new value.
     */
    onChangeStart?: (value: string) => void;
    /**
     * Function called when the user is done selecting a new value.
     */
    onChangeEnd?: (value: string) => void;
    /**
     * Color format. For example, `hex`, `rgba`, etc.
     *
     * @default "hexa"
     */
    format?: ColorFormat;
    /**
     * Function called whenever the color swatch click.
     */
    onSwatchClick?: (value: string) => void;
};
type UseColorSelectorBaseProps = UseColorSelectorOptions & FormControlOptions;
type UseColorSelectorProps = Omit<HTMLUIProps<"div">, "defaultValue" | "onChange" | "children"> & UseColorSelectorBaseProps;
declare const useColorSelector: ({ isInvalid, ...props }: UseColorSelectorProps) => {
    value: string;
    onChange: (value: string | Partial<Hsva>) => void;
    eyeDropperSupported: boolean;
    withAlpha: boolean;
    isInteractive: boolean;
    disabled: boolean | undefined;
    readOnly: boolean | undefined;
    channels: Channel[];
    getContainerProps: UIPropGetter;
    getInputProps: UIPropGetter<"input">;
    getSaturationSliderProps: UIPropGetter<"input", SaturationSliderProps, SaturationSliderProps>;
    getHueSliderProps: UIPropGetter<"input", HueSliderProps, HueSliderProps>;
    getAlphaSliderProps: UIPropGetter<"input", AlphaSliderProps, AlphaSliderProps>;
    getEyeDropperProps: UIPropGetter<"button">;
    getChannelProps: RequiredUIPropGetter<"input", Omit<InputProps, "space"> & {
        space: Space;
    }, InputProps>;
    getSwatchProps: UIPropGetter<"div", ColorSwatchProps, ColorSwatchProps>;
};
type UseColorSelectorReturn = ReturnType<typeof useColorSelector>;

export { ColorSelectorProvider, type UseColorSelectorBaseProps, type UseColorSelectorProps, type UseColorSelectorReturn, useColorSelector, useColorSelectorContext };
