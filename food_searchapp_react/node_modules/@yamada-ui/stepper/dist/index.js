"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Step: () => Step,
  StepDescription: () => StepDescription,
  StepIcon: () => StepIcon,
  StepNumber: () => StepNumber,
  StepSeparator: () => StepSeparator,
  StepStatus: () => StepStatus,
  StepTitle: () => StepTitle,
  Stepper: () => Stepper,
  useSteps: () => useSteps
});
module.exports = __toCommonJS(src_exports);

// src/stepper.tsx
var import_core = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/use-stepper.ts
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var {
  DescendantsContextProvider: StepperDescendantsContextProvider,
  useDescendants: useStepperDescendants,
  useDescendant: useStepperDescendant
} = (0, import_use_descendant.createDescendant)();
var [StepperProvider, useStepperContext] = (0, import_utils.createContext)({
  name: "StepperContext",
  errorMessage: `useStepperContext returned is 'undefined'. Seems you forgot to wrap the components in "<Stepper />"`
});
var useStepper = ({
  index,
  orientation = "horizontal",
  showLastSeparator = false,
  ...rest
}) => {
  const descendants = useStepperDescendants();
  const getStepStatus = (0, import_react.useCallback)(
    (step) => {
      if (step < index)
        return "complete";
      if (step > index)
        return "incomplete";
      return "active";
    },
    [index]
  );
  const getContainerProps = (0, import_react.useCallback)(
    (props = {}, ref = null) => ({
      ...rest,
      ...props,
      ref,
      "data-orientation": orientation
    }),
    [orientation, rest]
  );
  return {
    descendants,
    index,
    orientation,
    showLastSeparator,
    getStepStatus,
    getContainerProps
  };
};
var useStep = () => {
  var _a;
  const { orientation, getStepStatus } = useStepperContext();
  const { index, register, descendants } = useStepperDescendant();
  const isFirst = index === 0;
  const isLast = index === ((_a = descendants.lastValue()) == null ? void 0 : _a.index);
  const status = getStepStatus(index);
  const getStepProps = (0, import_react.useCallback)(
    (props = {}, ref = null) => ({
      ...props,
      ref: (0, import_utils.mergeRefs)(ref, register),
      "data-status": status,
      "data-orientation": orientation
    }),
    [orientation, register, status]
  );
  return { index, status, isFirst, isLast, getStepProps };
};

// src/stepper.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Stepper = (0, import_core.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Stepper", props);
  const { className, steps, children, ...computedProps } = (0, import_core.omitThemeProps)(mergedProps);
  const { descendants, getContainerProps, ...rest } = useStepper(computedProps);
  const computedChildren = (0, import_react2.useMemo)(() => {
    const hasChildren = children != null;
    if (hasChildren) {
      return children;
    } else {
      return steps == null ? void 0 : steps.map(
        ({
          title,
          description,
          hasSeparator = true,
          statusProps,
          titleProps,
          descriptionProps,
          separatorProps,
          ...rest2
        }, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Step, { ...rest2, children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StepStatus, { ...statusProps }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_core.ui.div, { flexShrink: 0, children: [
            title ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StepTitle, { ...titleProps, children: title }) : null,
            description ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StepDescription, { ...descriptionProps, children: description }) : null
          ] }),
          hasSeparator ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StepSeparator, { ...separatorProps }) : null
        ] }, index)
      );
    }
  }, [children, steps]);
  const css = { ...styles.stepper };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StepperDescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StepperProvider, { value: { ...rest, styles }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_core.ui.div,
    {
      className: (0, import_utils2.cx)("ui-stepper", className),
      __css: css,
      ...getContainerProps({}, ref),
      children: computedChildren
    }
  ) }) });
});

// src/use-steps.ts
var import_react3 = require("react");
var useSteps = ({ index = 0, count }) => {
  const [activeStep, setActiveStep] = (0, import_react3.useState)(index);
  const maxStep = typeof count === "number" ? count - 1 : 0;
  const activeStepPercent = activeStep / maxStep;
  const isActiveStep = (0, import_react3.useCallback)(
    (step) => step === activeStep,
    [activeStep]
  );
  const isCompleteStep = (0, import_react3.useCallback)(
    (step) => step < activeStep,
    [activeStep]
  );
  const isIncompleteStep = (0, import_react3.useCallback)(
    (step) => step > activeStep,
    [activeStep]
  );
  const getStepStatus = (0, import_react3.useCallback)(
    (step) => {
      if (step < activeStep)
        return "complete";
      if (step > activeStep)
        return "incomplete";
      return "active";
    },
    [activeStep]
  );
  const onStepNext = (0, import_react3.useCallback)(
    () => setActiveStep(
      (step) => typeof count === "number" ? Math.min(count, step + 1) : step + 1
    ),
    [count]
  );
  const onStepPrev = (0, import_react3.useCallback)(
    () => setActiveStep((step) => Math.max(0, step - 1)),
    []
  );
  return {
    activeStep,
    setActiveStep,
    activeStepPercent,
    isActiveStep,
    isCompleteStep,
    isIncompleteStep,
    getStepStatus,
    onStepNext,
    onStepPrev
  };
};

// src/step.tsx
var import_core2 = require("@yamada-ui/core");
var import_utils3 = require("@yamada-ui/utils");
var import_jsx_runtime2 = require("react/jsx-runtime");
var [StepProvider, useStepContext] = (0, import_utils3.createContext)({
  name: "StepperContext",
  errorMessage: `useStepContext returned is 'undefined'. Seems you forgot to wrap the components in "<Step />"`
});
var Step = (0, import_core2.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { orientation, showLastSeparator, styles } = useStepperContext();
    const { index, status, isFirst, isLast, getStepProps } = useStep();
    const css = { ...styles.step };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(StepProvider, { value: { index, status, isFirst, isLast }, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.div,
      {
        className: (0, import_utils3.cx)("ui-step", className),
        __css: css,
        "data-orientation": orientation,
        "data-stretch": (0, import_utils3.dataAttr)(showLastSeparator),
        ...getStepProps(rest, ref)
      }
    ) });
  }
);

// src/step-title.tsx
var import_core3 = require("@yamada-ui/core");
var import_utils4 = require("@yamada-ui/utils");
var import_jsx_runtime3 = require("react/jsx-runtime");
var StepTitle = (0, import_core3.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useStepperContext();
    const { status } = useStepContext();
    const css = { ...styles.title };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_core3.ui.h3,
      {
        ref,
        className: (0, import_utils4.cx)("ui-step__title", className),
        "data-status": status,
        __css: css,
        ...rest
      }
    );
  }
);

// src/step-description.tsx
var import_core4 = require("@yamada-ui/core");
var import_utils5 = require("@yamada-ui/utils");
var import_jsx_runtime4 = require("react/jsx-runtime");
var StepDescription = (0, import_core4.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useStepperContext();
    const { status } = useStepContext();
    const css = { ...styles.description };
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      import_core4.ui.p,
      {
        ref,
        className: (0, import_utils5.cx)("ui-step__description", className),
        "data-status": status,
        __css: css,
        ...rest
      }
    );
  }
);

// src/step-separator.tsx
var import_core5 = require("@yamada-ui/core");
var import_utils6 = require("@yamada-ui/utils");
var import_jsx_runtime5 = require("react/jsx-runtime");
var StepSeparator = (0, import_core5.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { orientation, showLastSeparator, styles } = useStepperContext();
    const { status, isLast } = useStepContext();
    const css = { ...styles.separator };
    if (isLast && !showLastSeparator)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      import_core5.ui.div,
      {
        ref,
        className: (0, import_utils6.cx)("ui-step__separator", className),
        role: "separator",
        "data-orientation": orientation,
        "data-status": status,
        __css: css,
        ...rest
      }
    );
  }
);

// src/step-status.tsx
var import_core6 = require("@yamada-ui/core");
var import_icon = require("@yamada-ui/icon");
var import_utils7 = require("@yamada-ui/utils");
var import_jsx_runtime6 = require("react/jsx-runtime");
var StepStatus = (0, import_core6.forwardRef)(
  ({
    className,
    complete = /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(StepIcon, {}),
    incomplete = /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(StepNumber, {}),
    active = /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(StepNumber, {}),
    ...rest
  }, ref) => {
    const { styles } = useStepperContext();
    const { status, ...props } = useStepContext();
    const css = { ...styles.status };
    let component = null;
    switch (status) {
      case "complete":
        component = (0, import_utils7.runIfFunc)(complete, props);
        break;
      case "incomplete":
        component = (0, import_utils7.runIfFunc)(incomplete, props);
        break;
      case "active":
        component = (0, import_utils7.runIfFunc)(active, props);
        break;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      import_core6.ui.div,
      {
        ref,
        className: (0, import_utils7.cx)("ui-step__status", className),
        "data-status": status,
        __css: css,
        ...rest,
        children: component ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: component }) : null
      }
    );
  }
);
var StepNumber = (0, import_core6.forwardRef)(
  ({ className, children, ...rest }, ref) => {
    const { styles } = useStepperContext();
    const { status, index } = useStepContext();
    const css = { ...styles.number };
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      import_core6.ui.div,
      {
        ref,
        className: (0, import_utils7.cx)("ui-step__number", className),
        "data-status": status,
        __css: css,
        ...rest,
        children: children || index + 1
      }
    );
  }
);
var StepIcon = (0, import_core6.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useStepperContext();
    const { status } = useStepContext();
    const as = status === "complete" ? CheckIcon : void 0;
    const css = { ...styles.icon };
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      import_icon.Icon,
      {
        ref,
        as,
        className: (0, import_utils7.cx)("ui-step__icon", className),
        "data-status": status,
        __css: css,
        ...rest
      }
    );
  }
);
var CheckIcon = (props) => {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    "svg",
    {
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0",
      viewBox: "0 0 20 20",
      "aria-hidden": "true",
      height: "1em",
      width: "1em",
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
        "path",
        {
          fillRule: "evenodd",
          d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z",
          clipRule: "evenodd"
        }
      )
    }
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Step,
  StepDescription,
  StepIcon,
  StepNumber,
  StepSeparator,
  StepStatus,
  StepTitle,
  Stepper,
  useSteps
});
//# sourceMappingURL=index.js.map