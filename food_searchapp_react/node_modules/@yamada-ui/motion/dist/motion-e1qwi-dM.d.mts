import * as _yamada_ui_core from '@yamada-ui/core';
import { OmitProps, HTMLUIProps } from '@yamada-ui/core';
import { motion, Transition, Target, TargetAndTransition, HTMLMotionProps } from 'framer-motion';
import { ReactHTML, Ref, RefAttributes } from 'react';
import { Dict, Merge } from '@yamada-ui/utils';

type MotionAs = keyof typeof motion;
type TargetResolver<Y = Dict> = (props: Y & MotionTransitionProperties) => TargetAndTransition;
type Variant<Y = Dict> = TargetAndTransition | TargetResolver<Y>;
type MotionTransitionVariants<Y = Dict> = {
    enter: Variant<Y>;
    exit: Variant<Y>;
    initial?: Variant<Y>;
};
type MotionTransitionProperties = {
    /**
     * Custom `transition` definition for `enter` and `exit`.
     */
    transition?: MotionTransitionProps;
    /**
     * Custom `transitionEnd` definition for `enter` and `exit`.
     */
    transitionEnd?: MotionTransitionEndProps;
    /**
     * Custom `delay` definition for `enter` and `exit`.
     */
    delay?: number | MotionDelayProps;
    /**
     * Custom `duration` definition for `enter` and `exit`.
     */
    duration?: number | MotionDurationProps;
    /**
     * Custom `enter`.
     */
    enter?: any;
    /**
     * Custom `exit`.
     */
    exit?: any;
    /**
     * Custom `initial`.
     */
    initial?: any;
};
type WithMotionProps<Y> = Partial<Record<"enter" | "exit", Y>>;
type MotionTransitionProps = WithMotionProps<Transition>;
type MotionTransitionEndProps = WithMotionProps<Target>;
type MotionDelayProps = WithMotionProps<number>;
type MotionDurationProps = WithMotionProps<number>;
type WithTransitionProps<Y extends object> = Omit<Y, "transition"> & MotionTransitionProperties & {
    /**
     * If `true`, the element will unmount when `isOpen={false}` and animation is done.
     */
    unmountOnExit?: boolean;
    /**
     * Show the component. triggers when enter or exit states.
     */
    isOpen?: boolean;
};
type MotionUIPropGetter<Y extends keyof ReactHTML = "div", M = undefined> = (props?: Merge<MotionProps<Y>, M>, ref?: Ref<any>) => MotionProps<Y> & RefAttributes<any>;
type RequiredMotionUIPropGetter<Y extends keyof ReactHTML = "div", M = undefined> = (props: Merge<MotionProps<Y>, M>, ref?: Ref<any>) => MotionProps<Y> & RefAttributes<any>;

type UIProps = "children" | "color";
type MotionOptions = {
    as?: MotionAs;
};
type MotionProps<Y extends keyof ReactHTML = "div"> = OmitProps<HTMLUIProps<Y>, keyof Omit<HTMLMotionProps<Y>, UIProps>> & Omit<HTMLMotionProps<Y>, UIProps> & MotionOptions;
/**
 * `Motion` is a component that allows for the easy implementation of a wide variety of animations.
 *
 * @see Docs https://yamada-ui.com/components/other/motion
 */
declare const Motion: _yamada_ui_core.Component<"div", MotionProps<"div">>;

export { type MotionTransitionProperties as M, type RequiredMotionUIPropGetter as R, type WithTransitionProps as W, Motion as a, type MotionProps as b, type MotionAs as c, type MotionTransitionVariants as d, type MotionTransitionProps as e, type MotionTransitionEndProps as f, type MotionDelayProps as g, type MotionDurationProps as h, type MotionUIPropGetter as i };
