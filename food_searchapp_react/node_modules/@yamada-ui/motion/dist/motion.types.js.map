{"version":3,"sources":["../src/motion.types.ts"],"sourcesContent":["import type { Dict, Merge } from \"@yamada-ui/utils\"\nimport type {\n  Target,\n  TargetAndTransition,\n  Transition,\n  motion,\n} from \"framer-motion\"\nimport type { Ref, RefAttributes, ReactHTML } from \"react\"\nimport type { MotionProps } from \"./motion\"\n\nexport type {\n  HTMLMotionProps,\n  SVGMotionProps,\n  Variants as MotionVariants,\n  Transition as MotionTransition,\n  AnimatePresenceProps as MotionAnimatePresenceProps,\n  LayoutProps as MotionLayoutProps,\n  LazyProps as MotionLazyProps,\n  MotionConfigProps,\n  MotionStyle,\n  DragControls,\n  AnimationControls as MotionAnimationControls,\n  AnimationProps as MotionAnimationProps,\n  AnimationType as MotionAnimationType,\n  AnimationLifecycles as MotionAnimationLifecycles,\n  AnimationOptions as MotionAnimationOptions,\n  AnimationPlaybackControls as MotionAnimationPlaybackControls,\n  MotionValue,\n  PanInfo as MotionPanInfo,\n} from \"framer-motion\"\n\nexport type MotionAs = keyof typeof motion\n\ntype TargetResolver<Y = Dict> = (\n  props: Y & MotionTransitionProperties,\n) => TargetAndTransition\n\ntype Variant<Y = Dict> = TargetAndTransition | TargetResolver<Y>\n\nexport type MotionTransitionVariants<Y = Dict> = {\n  enter: Variant<Y>\n  exit: Variant<Y>\n  initial?: Variant<Y>\n}\n\nexport type MotionTransitionProperties = {\n  /**\n   * Custom `transition` definition for `enter` and `exit`.\n   */\n  transition?: MotionTransitionProps\n  /**\n   * Custom `transitionEnd` definition for `enter` and `exit`.\n   */\n  transitionEnd?: MotionTransitionEndProps\n  /**\n   * Custom `delay` definition for `enter` and `exit`.\n   */\n  delay?: number | MotionDelayProps\n  /**\n   * Custom `duration` definition for `enter` and `exit`.\n   */\n  duration?: number | MotionDurationProps\n  /**\n   * Custom `enter`.\n   */\n  enter?: any\n  /**\n   * Custom `exit`.\n   */\n  exit?: any\n  /**\n   * Custom `initial`.\n   */\n  initial?: any\n}\n\ntype WithMotionProps<Y> = Partial<Record<\"enter\" | \"exit\", Y>>\n\nexport type MotionTransitionProps = WithMotionProps<Transition>\n\nexport type MotionTransitionEndProps = WithMotionProps<Target>\n\nexport type MotionDelayProps = WithMotionProps<number>\n\nexport type MotionDurationProps = WithMotionProps<number>\n\nexport type WithTransitionProps<Y extends object> = Omit<Y, \"transition\"> &\n  MotionTransitionProperties & {\n    /**\n     * If `true`, the element will unmount when `isOpen={false}` and animation is done.\n     */\n    unmountOnExit?: boolean\n    /**\n     * Show the component. triggers when enter or exit states.\n     */\n    isOpen?: boolean\n  }\n\nexport type MotionUIPropGetter<\n  Y extends keyof ReactHTML = \"div\",\n  M = undefined,\n> = (\n  props?: Merge<MotionProps<Y>, M>,\n  ref?: Ref<any>,\n) => MotionProps<Y> & RefAttributes<any>\n\nexport type RequiredMotionUIPropGetter<\n  Y extends keyof ReactHTML = \"div\",\n  M = undefined,\n> = (\n  props: Merge<MotionProps<Y>, M>,\n  ref?: Ref<any>,\n) => MotionProps<Y> & RefAttributes<any>\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}