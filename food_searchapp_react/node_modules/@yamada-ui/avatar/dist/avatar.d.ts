import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, ThemeProps, CSSUIObject } from '@yamada-ui/core';
import * as react from 'react';
import { ReactElement, HTMLAttributeReferrerPolicy } from 'react';
import { UseImageProps, ImageProps } from '@yamada-ui/image';

type AvatarContext = Record<string, CSSUIObject>;
declare const AvatarProvider: react.Provider<AvatarContext>;
declare const useAvatarContext: () => AvatarContext;
type AvatarOptions = {
    /**
     * The name of the person in the avatar.
     *
     * - If `src` has loaded, the name will be used as the `alt` attribute of the `img`
     * - If `src` is not loaded, the name will be used to create the initials
     */
    name?: string;
    /**
     * The image url of the avatar.
     */
    src?: ImageProps["src"];
    /**
     * List of sources to use for different screen resolutions.
     */
    srcSet?: ImageProps["srcSet"];
    /**
     * Defines loading strategy.
     */
    loading?: ImageProps["loading"];
    /**
     * If `true`, opt out of the avatar's `fallback` logic and renders the `img` at all times.
     *
     * @default false
     */
    ignoreFallback?: ImageProps["ignoreFallback"];
    /**
     * The avatar icon to use.
     */
    icon?: ReactElement;
    /**
     * Function to get the initials to display.
     */
    format?: (name: string) => string;
    /**
     * Defining which referrer is sent when fetching the resource.
     */
    referrerPolicy?: HTMLAttributeReferrerPolicy;
    /**
     * The `HTMLImageElement` property `alt`.
     */
    alt?: HTMLUIProps<"img">["alt"];
};
type AvatarProps = HTMLUIProps<"span"> & ThemeProps<"Avatar"> & AvatarOptions & Pick<UseImageProps, "onLoad" | "onError" | "crossOrigin">;
/**
 * `Avatar` is a component that displays a profile picture or an icon with initials representing a user.
 *
 * @see Docs https://yamada-ui.com/components/media-and-icons/avatar
 */
declare const Avatar: _yamada_ui_core.Component<"span", AvatarProps>;

export { Avatar, type AvatarProps, AvatarProvider, useAvatarContext };
