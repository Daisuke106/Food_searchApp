"use client"
import {
  AvatarIcon
} from "./chunk-RYWCAIUH.mjs";

// src/avatar-name.tsx
import { ui as ui2 } from "@yamada-ui/core";

// src/avatar.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { useImage } from "@yamada-ui/image";
import { createContext, cx, dataAttr, handlerAll } from "@yamada-ui/utils";
import { cloneElement, useState } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var [AvatarProvider, useAvatarContext] = createContext({
  strict: false,
  name: "AvatarContext"
});
var Avatar = forwardRef((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle("Avatar", props);
  const {
    className,
    src,
    srcSet,
    name,
    loading,
    alt,
    icon,
    ignoreFallback,
    referrerPolicy,
    borderRadius = "fallback(full, 9999px)",
    rounded = "fallback(full, 9999px)",
    onError,
    onLoad,
    crossOrigin,
    format,
    children,
    ...rest
  } = omitThemeProps(mergedProps);
  const [isLoaded, setIsLoaded] = useState(false);
  const css = {
    position: "relative",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0,
    textAlign: "center",
    textTransform: "uppercase",
    fontWeight: "medium",
    ...styles.container
  };
  return /* @__PURE__ */ jsx(AvatarProvider, { value: styles, children: /* @__PURE__ */ jsxs(
    ui.span,
    {
      ref,
      className: cx("ui-avatar", className),
      "data-loaded": dataAttr(isLoaded),
      borderRadius,
      rounded,
      __css: css,
      ...rest,
      children: [
        /* @__PURE__ */ jsx(
          AvatarImage,
          {
            src,
            alt,
            srcSet,
            loading,
            borderRadius,
            rounded,
            onLoad: handlerAll(onLoad, () => setIsLoaded(true)),
            onError,
            crossOrigin,
            format,
            name,
            icon,
            ignoreFallback,
            referrerPolicy
          }
        ),
        children
      ]
    }
  ) });
});
var AvatarImage = ({
  src,
  alt,
  srcSet,
  onError,
  onLoad,
  format,
  borderRadius,
  rounded,
  name,
  loading,
  icon = /* @__PURE__ */ jsx(AvatarIcon, {}),
  ignoreFallback,
  crossOrigin,
  referrerPolicy
}) => {
  const status = useImage({ src, onLoad, onError, crossOrigin, ignoreFallback });
  const isLoaded = status === "loaded";
  const isFallback = !src || !isLoaded;
  if (isFallback)
    return name ? /* @__PURE__ */ jsx(AvatarName, { name, format }) : cloneElement(icon, { role: "img", "aria-label": alt != null ? alt : "Avatar Icon" });
  const css = {
    width: "100%",
    height: "100%",
    objectFit: "cover"
  };
  return /* @__PURE__ */ jsx(
    ui.img,
    {
      className: "ui-avatar__image",
      src,
      srcSet,
      alt: alt != null ? alt : name,
      loading,
      referrerPolicy,
      borderRadius,
      rounded,
      __css: css
    }
  );
};

// src/avatar-name.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var defaultFormat = (name) => {
  var _a;
  const names = name.trim().split(" ");
  const firstName = (_a = names[0]) != null ? _a : "";
  const lastName = names.length > 1 ? names[names.length - 1] : "";
  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
};
var AvatarName = ({
  name,
  format = defaultFormat,
  ...rest
}) => {
  const styles = useAvatarContext();
  const css = { ...styles.name };
  return /* @__PURE__ */ jsx2(
    ui2.div,
    {
      className: "ui-avatar__name",
      role: "img",
      "aria-label": name,
      __css: css,
      ...rest,
      children: name ? format(name) : null
    }
  );
};

export {
  AvatarName,
  AvatarProvider,
  useAvatarContext,
  Avatar
};
//# sourceMappingURL=chunk-F7MHUXUL.mjs.map