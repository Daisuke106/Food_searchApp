"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/event.ts
var event_exports = {};
__export(event_exports, {
  addDomEvent: () => addDomEvent,
  addPointerEvent: () => addPointerEvent,
  getEventPoint: () => getEventPoint,
  getEventWindow: () => getEventWindow,
  isMouseEvent: () => isMouseEvent,
  isMultiTouchEvent: () => isMultiTouchEvent,
  isTouchEvent: () => isTouchEvent,
  pointFromMouse: () => pointFromMouse,
  pointFromTouch: () => pointFromTouch
});
module.exports = __toCommonJS(event_exports);
var isMouseEvent = (ev) => {
  const win = getEventWindow(ev);
  if (typeof win.PointerEvent !== "undefined" && ev instanceof win.PointerEvent)
    return !!(ev.pointerType === "mouse");
  return ev instanceof win.MouseEvent;
};
var isTouchEvent = (ev) => !!ev.touches;
var isMultiTouchEvent = (ev) => isTouchEvent(ev) && ev.touches.length > 1;
var getEventWindow = (ev) => {
  var _a;
  return (_a = ev.view) != null ? _a : window;
};
var pointFromTouch = (e, type = "page") => {
  const point = e.touches[0] || e.changedTouches[0];
  return { x: point[`${type}X`], y: point[`${type}Y`] };
};
var pointFromMouse = (point, type = "page") => ({
  x: point[`${type}X`],
  y: point[`${type}Y`]
});
var getEventPoint = (ev, type = "page") => isTouchEvent(ev) ? pointFromTouch(ev, type) : pointFromMouse(ev, type);
var addDomEvent = (target, type, cb, options) => {
  target.addEventListener(type, cb, options);
  return () => {
    target.removeEventListener(type, cb, options);
  };
};
var filter = (cb) => (ev) => {
  const isMouse = isMouseEvent(ev);
  if (!isMouse || isMouse && ev.button === 0)
    cb(ev);
};
var wrap = (cb, filterPrimary = false) => {
  const listener = (ev) => cb(ev, { point: getEventPoint(ev) });
  const fn = filterPrimary ? filter(listener) : listener;
  return fn;
};
var addPointerEvent = (target, type, cb, options) => addDomEvent(target, type, wrap(cb, type === "pointerdown"), options);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addDomEvent,
  addPointerEvent,
  getEventPoint,
  getEventWindow,
  isMouseEvent,
  isMultiTouchEvent,
  isTouchEvent,
  pointFromMouse,
  pointFromTouch
});
//# sourceMappingURL=event.js.map