declare const noop: () => void;
declare const runIfFunc: <T, U extends any[]>(valOrFunc: T | ((...funcArgs: U) => T), ...args: U) => T;
declare const handlerAll: <T extends (event: any, ...args: any[]) => void>(...funcs: (T | undefined)[]) => (event: T extends (event: infer R, ...args: any[]) => any ? R : never, ...args: T extends (event: any, ...args: infer R_1) => any ? R_1 : never) => void;
declare const funcAll: <T extends (...args: any[]) => any>(...funcs: (T | undefined)[]) => (...args: T extends (...args: infer R) => any ? R : never) => void;

export { funcAll, handlerAll, noop, runIfFunc };
