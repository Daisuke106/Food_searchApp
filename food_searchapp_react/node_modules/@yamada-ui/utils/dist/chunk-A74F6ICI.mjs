// src/event.ts
var isMouseEvent = (ev) => {
  const win = getEventWindow(ev);
  if (typeof win.PointerEvent !== "undefined" && ev instanceof win.PointerEvent)
    return !!(ev.pointerType === "mouse");
  return ev instanceof win.MouseEvent;
};
var isTouchEvent = (ev) => !!ev.touches;
var isMultiTouchEvent = (ev) => isTouchEvent(ev) && ev.touches.length > 1;
var getEventWindow = (ev) => {
  var _a;
  return (_a = ev.view) != null ? _a : window;
};
var pointFromTouch = (e, type = "page") => {
  const point = e.touches[0] || e.changedTouches[0];
  return { x: point[`${type}X`], y: point[`${type}Y`] };
};
var pointFromMouse = (point, type = "page") => ({
  x: point[`${type}X`],
  y: point[`${type}Y`]
});
var getEventPoint = (ev, type = "page") => isTouchEvent(ev) ? pointFromTouch(ev, type) : pointFromMouse(ev, type);
var addDomEvent = (target, type, cb, options) => {
  target.addEventListener(type, cb, options);
  return () => {
    target.removeEventListener(type, cb, options);
  };
};
var filter = (cb) => (ev) => {
  const isMouse = isMouseEvent(ev);
  if (!isMouse || isMouse && ev.button === 0)
    cb(ev);
};
var wrap = (cb, filterPrimary = false) => {
  const listener = (ev) => cb(ev, { point: getEventPoint(ev) });
  const fn = filterPrimary ? filter(listener) : listener;
  return fn;
};
var addPointerEvent = (target, type, cb, options) => addDomEvent(target, type, wrap(cb, type === "pointerdown"), options);

export {
  isMouseEvent,
  isTouchEvent,
  isMultiTouchEvent,
  getEventWindow,
  pointFromTouch,
  pointFromMouse,
  getEventPoint,
  addDomEvent,
  addPointerEvent
};
//# sourceMappingURL=chunk-A74F6ICI.mjs.map