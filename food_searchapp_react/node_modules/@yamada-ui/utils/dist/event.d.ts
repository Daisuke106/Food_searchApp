type AnyPointerEvent = MouseEvent | TouchEvent | PointerEvent;
type PointType = "page" | "client";
type Point = {
    x: number;
    y: number;
};
type PointerEventInfo = {
    point: Point;
};
type MixedEventListener = (e: AnyPointerEvent, info: PointerEventInfo) => void;
declare const isMouseEvent: (ev: any) => ev is MouseEvent;
declare const isTouchEvent: (ev: AnyPointerEvent) => ev is TouchEvent;
declare const isMultiTouchEvent: (ev: AnyPointerEvent) => boolean;
declare const getEventWindow: (ev: Event) => typeof globalThis;
declare const pointFromTouch: (e: TouchEvent, type?: PointType) => {
    x: number;
    y: number;
};
declare const pointFromMouse: (point: MouseEvent | PointerEvent, type?: PointType) => {
    x: number;
    y: number;
};
declare const getEventPoint: (ev: AnyPointerEvent, type?: PointType) => {
    x: number;
    y: number;
};
declare const addDomEvent: (target: EventTarget, type: string, cb: EventListener, options?: AddEventListenerOptions) => () => void;
declare const addPointerEvent: (target: EventTarget, type: string, cb: MixedEventListener, options?: AddEventListenerOptions) => () => void;

export { type AnyPointerEvent, type MixedEventListener, type Point, type PointType, type PointerEventInfo, addDomEvent, addPointerEvent, getEventPoint, getEventWindow, isMouseEvent, isMultiTouchEvent, isTouchEvent, pointFromMouse, pointFromTouch };
