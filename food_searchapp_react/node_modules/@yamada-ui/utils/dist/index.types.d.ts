type Primitive = null | undefined | string | number | boolean | symbol | bigint;
type PathImpl<K extends string | number | symbol, V> = K extends string | number ? V extends Primitive ? `${K}` : `${K}.${Path<V>}` : ``;
type Path<T> = {
    [K in keyof T]-?: PathImpl<K, T[K]>;
}[keyof T];
type Dict<T = any> = Record<string, T>;
type StringLiteral = string & {};
type Union<T> = T | StringLiteral;
type Length = string | 0 | number;
type Merge<Y, M> = M extends undefined ? Y : Omit<Y, keyof M> & M;

export type { Dict, Length, Merge, Path, Primitive, StringLiteral, Union };
