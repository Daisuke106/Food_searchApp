{"version":3,"sources":["../src/index.types.ts"],"sourcesContent":["export type Primitive =\n  | null\n  | undefined\n  | string\n  | number\n  | boolean\n  | symbol\n  | bigint\n\ntype PathImpl<K extends string | number | symbol, V> = K extends string | number\n  ? V extends Primitive\n    ? `${K}`\n    : `${K}.${Path<V>}`\n  : ``\n\nexport type Path<T> = {\n  [K in keyof T]-?: PathImpl<K, T[K]>\n}[keyof T]\n\nexport type Dict<T = any> = Record<string, T>\n\nexport type StringLiteral = string & {}\n\nexport type Union<T> = T | StringLiteral\n\nexport type Length = string | 0 | number\n\nexport type Merge<Y, M> = M extends undefined ? Y : Omit<Y, keyof M> & M\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}