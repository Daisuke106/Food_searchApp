"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/assertion.ts
var assertion_exports = {};
__export(assertion_exports, {
  cast: () => cast,
  isArray: () => isArray,
  isBoolean: () => isBoolean,
  isEmpty: () => isEmpty,
  isFunction: () => isFunction,
  isNotNumber: () => isNotNumber,
  isNull: () => isNull,
  isNumber: () => isNumber,
  isNumeric: () => isNumeric,
  isObject: () => isObject,
  isString: () => isString,
  isUndefined: () => isUndefined,
  isUnit: () => isUnit
});
module.exports = __toCommonJS(assertion_exports);
var isNumber = (value) => typeof value === "number";
var isNotNumber = (value) => typeof value !== "number" || Number.isNaN(value) || !Number.isFinite(value);
var isNumeric = (value) => value != null && parseFloat(value.toString()) - parseFloat(value.toString()) + 1 >= 0;
var isString = (value) => Object.prototype.toString.call(value) === "[object String]";
var isBoolean = (value) => typeof value === "boolean";
var isUndefined = (value) => typeof value === "undefined" && value === void 0;
var isNull = (value) => value === null;
var isObject = (value) => value !== null && (typeof value === "object" || typeof value === "function") && !isArray(value);
var isArray = (value) => Array.isArray(value);
var isEmpty = (value) => !isArray(value) || !value.length || value.every((v) => v == null);
var isFunction = (value) => typeof value === "function";
var isUnit = (value) => /[0-9].*[px|rem|em|%|vw|vh]$/.test(value);
var cast = (value) => value;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cast,
  isArray,
  isBoolean,
  isEmpty,
  isFunction,
  isNotNumber,
  isNull,
  isNumber,
  isNumeric,
  isObject,
  isString,
  isUndefined,
  isUnit
});
//# sourceMappingURL=assertion.js.map