"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/dom.ts
var dom_exports = {};
__export(dom_exports, {
  ariaAttr: () => ariaAttr,
  createdDom: () => createdDom,
  dataAttr: () => dataAttr,
  getActiveElement: () => getActiveElement,
  getAllFocusable: () => getAllFocusable,
  getEventRelatedTarget: () => getEventRelatedTarget,
  getOwnerDocument: () => getOwnerDocument,
  getOwnerWindow: () => getOwnerWindow,
  getPlatform: () => getPlatform,
  getPx: () => getPx,
  hasNegativeTabIndex: () => hasNegativeTabIndex,
  hasTabIndex: () => hasTabIndex,
  isActiveElement: () => isActiveElement,
  isApple: () => isApple,
  isContains: () => isContains,
  isContentEditable: () => isContentEditable,
  isDisabled: () => isDisabled,
  isElement: () => isElement,
  isFocusable: () => isFocusable,
  isHTMLElement: () => isHTMLElement,
  isHidden: () => isHidden,
  isMac: () => isMac,
  isSafari: () => isSafari,
  isTabbable: () => isTabbable,
  platform: () => platform,
  vendor: () => vendor
});
module.exports = __toCommonJS(dom_exports);

// src/assertion.ts
var isNumber = (value) => typeof value === "number";
var isUndefined = (value) => typeof value === "undefined" && value === void 0;

// src/dom.ts
var createdDom = () => !!(typeof window !== "undefined" && window.document && window.document.createElement);
var getPlatform = () => {
  var _a, _b;
  return (_b = (_a = navigator.userAgentData) == null ? void 0 : _a.platform) != null ? _b : navigator.platform;
};
var vendor = (v) => createdDom() && v.test(navigator.vendor);
var platform = (v) => createdDom() && v.test(getPlatform());
var isMac = () => platform(/^mac/i);
var isApple = () => platform(/mac|iphone|ipad|ipod/i);
var isSafari = () => isApple() && vendor(/apple/i);
var isElement = (el) => el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
var isHTMLElement = (el) => {
  var _a;
  if (!isElement(el))
    return false;
  const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;
  return el instanceof win.HTMLElement;
};
var isHidden = (el) => {
  if (el.parentElement && isHidden(el.parentElement))
    return true;
  return el.hidden;
};
var isDisabled = (el) => Boolean(el.getAttribute("disabled")) === true || Boolean(el.getAttribute("data-disabled")) === true || Boolean(el.getAttribute("aria-disabled")) === true;
var isVisible = (el) => el.offsetWidth > 0 && el.offsetHeight > 0;
var hasTabIndex = (el) => el.hasAttribute("tabindex");
var isContentEditable = (el) => {
  const value = el.getAttribute("contenteditable");
  return value !== "false" && value != null;
};
var isContains = (parent, child) => {
  return parent === child || (parent == null ? void 0 : parent.contains(child));
};
var getPx = (value) => {
  if (isNumber(value))
    return value;
  if (isUndefined(value))
    return 0;
  if (value.includes("px"))
    return parseFloat(value);
  const isBrowser = createdDom();
  let fontSize = 16;
  if (isBrowser) {
    const style = window.getComputedStyle(document.documentElement);
    const computedFontSize = parseFloat(style.fontSize);
    if (!isNaN(computedFontSize))
      fontSize = computedFontSize;
  }
  return parseFloat(value) * fontSize;
};
var getEventRelatedTarget = (ev) => {
  var _a;
  return (_a = ev.relatedTarget) != null ? _a : ev.currentTarget.ownerDocument.activeElement;
};
var dataAttr = (condition) => condition ? "" : void 0;
var ariaAttr = (condition) => condition ? true : void 0;
var focusableElList = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();
var getAllFocusable = (container) => {
  const focusableEls = Array.from(
    container.querySelectorAll(focusableElSelector)
  );
  focusableEls.unshift(container);
  return focusableEls.filter((el) => isFocusable(el) && isVisible(el));
};
var isFocusable = (el) => {
  if (!isHTMLElement(el) || isHidden(el) || isDisabled(el)) {
    return false;
  }
  const { localName } = el;
  const focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.indexOf(localName) >= 0)
    return true;
  const others = {
    a: () => el.hasAttribute("href"),
    audio: () => el.hasAttribute("controls"),
    video: () => el.hasAttribute("controls")
  };
  if (localName in others)
    return others[localName]();
  if (isContentEditable(el))
    return true;
  return hasTabIndex(el);
};
var hasNegativeTabIndex = (el) => hasTabIndex(el) && el.tabIndex === -1;
var isTabbable = (el) => el ? isHTMLElement(el) && isFocusable(el) && !hasNegativeTabIndex(el) : false;
var getOwnerWindow = (node) => {
  var _a, _b;
  return (_b = (_a = getOwnerDocument(node)) == null ? void 0 : _a.defaultView) != null ? _b : window;
};
var getOwnerDocument = (el) => isElement(el) ? el.ownerDocument : document;
var getActiveElement = (el) => getOwnerDocument(el).activeElement;
var isActiveElement = (el) => {
  return getActiveElement(el) === el;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ariaAttr,
  createdDom,
  dataAttr,
  getActiveElement,
  getAllFocusable,
  getEventRelatedTarget,
  getOwnerDocument,
  getOwnerWindow,
  getPlatform,
  getPx,
  hasNegativeTabIndex,
  hasTabIndex,
  isActiveElement,
  isApple,
  isContains,
  isContentEditable,
  isDisabled,
  isElement,
  isFocusable,
  isHTMLElement,
  isHidden,
  isMac,
  isSafari,
  isTabbable,
  platform,
  vendor
});
//# sourceMappingURL=dom.js.map