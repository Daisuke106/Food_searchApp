import React__default from 'react';

declare const createdDom: () => boolean;
declare const getPlatform: () => string;
declare const vendor: (v: RegExp) => boolean;
declare const platform: (v: RegExp) => boolean;
declare const isMac: () => boolean;
declare const isApple: () => boolean;
declare const isSafari: () => boolean;
declare const isElement: (el: any) => el is Element;
declare const isHTMLElement: (el: any) => el is HTMLElement;
declare const isHidden: (el: HTMLElement) => boolean;
declare const isDisabled: (el: HTMLElement) => boolean;
declare const hasTabIndex: (el: HTMLElement) => boolean;
declare const isContentEditable: (el: HTMLElement) => boolean;
declare const isContains: (parent: HTMLElement | null, child: HTMLElement | null) => boolean | undefined;
declare const getPx: (value: string | number | undefined) => number;
declare const getEventRelatedTarget: (ev: React__default.FocusEvent | React__default.MouseEvent) => HTMLElement | null;
type Booleanish = boolean | "true" | "false";
declare const dataAttr: (condition: boolean | undefined) => Booleanish;
declare const ariaAttr: (condition: boolean | undefined) => boolean | undefined;
type FocusableElement = {
    focus: (options?: FocusOptions) => void;
};
declare const getAllFocusable: <T extends HTMLElement>(container: T) => T[];
declare const isFocusable: (el: HTMLElement) => boolean;
declare const hasNegativeTabIndex: (el: HTMLElement) => boolean;
declare const isTabbable: (el?: HTMLElement | null) => boolean;
declare const getOwnerWindow: (node?: Element | null) => Window & typeof globalThis;
declare const getOwnerDocument: (el?: Element | null) => Document;
declare const getActiveElement: (el?: HTMLElement) => HTMLElement;
declare const isActiveElement: (el: HTMLElement) => boolean;

export { type FocusableElement, ariaAttr, createdDom, dataAttr, getActiveElement, getAllFocusable, getEventRelatedTarget, getOwnerDocument, getOwnerWindow, getPlatform, getPx, hasNegativeTabIndex, hasTabIndex, isActiveElement, isApple, isContains, isContentEditable, isDisabled, isElement, isFocusable, isHTMLElement, isHidden, isMac, isSafari, isTabbable, platform, vendor };
