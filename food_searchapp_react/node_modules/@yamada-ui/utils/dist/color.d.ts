import { Dict } from './index.types.js';

type ColorMode = "light" | "dark";
type ColorFormat = "hex" | "hexa" | "rgba" | "rgb" | "hsl" | "hsla";
declare const tones: readonly [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];
declare const isGray: (colorScheme: string) => boolean;
declare const isAccessible: (colorScheme: string) => boolean;
declare const getColor: (color: string, fallback?: string) => (theme?: Dict, colorMode?: ColorMode) => string;
declare const lightenColor: (color: string, amount: number) => (theme?: Dict, colorMode?: ColorMode) => string;
declare const darkenColor: (color: string, amount: number) => (theme?: Dict, colorMode?: ColorMode) => string;
declare const tintColor: (color: string, amount: number) => (theme?: Dict, colorMode?: ColorMode) => string;
declare const shadeColor: (color: string, amount: number) => (theme?: Dict, colorMode?: ColorMode) => string;
declare const transparentizeColor: (color: string, alpha: number) => (theme?: Dict, colorMode?: ColorMode) => string;
declare const randomColor: ({ string, colors, }?: {
    string?: string;
    colors?: string[];
}) => string;
declare const isTone: (color: string) => (theme?: Dict, colorMode?: ColorMode) => "light" | "dark";
declare const isLight: (color: string) => (theme?: Dict, colorMode?: ColorMode) => boolean;
declare const isDark: (color: string) => (theme?: Dict, colorMode?: ColorMode) => boolean;
declare const convertColor: (color: string, fallback?: string) => (format: ColorFormat) => string | undefined;
declare const calcFormat: (color: string) => ColorFormat;
declare const getAlpha: (color: string) => number;
declare const alphaToHex: (a: number) => string;
declare const parseToRgba: (color: string, fallback?: string) => [number, number, number, number] | undefined;
declare const parseToHsla: (color: string, fallback?: string) => [number, number, number, number] | undefined;
declare const parseToHsv: (color: string, fallback?: string) => [number, number, number, number];
declare const rgbaTo: ([r, g, b, a]: [number, number, number, number], fallback?: string) => (format?: ColorFormat) => string | undefined;
declare const hslaTo: ([h, s, l, a]: [number, number, number, number], fallback?: string) => (format?: ColorFormat) => string | undefined;
declare const hsvTo: ([h, s, v, a]: [number, number, number, number?], fallback?: string) => (format?: ColorFormat) => string | undefined;
declare const sameColor: (color: string | undefined, comparison: string | undefined) => boolean;

export { type ColorFormat, alphaToHex, calcFormat, convertColor, darkenColor, getAlpha, getColor, hslaTo, hsvTo, isAccessible, isDark, isGray, isLight, isTone, lightenColor, parseToHsla, parseToHsv, parseToRgba, randomColor, rgbaTo, sameColor, shadeColor, tintColor, tones, transparentizeColor };
