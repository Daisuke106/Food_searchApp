{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { useCallbackRef } from \"@yamada-ui/utils\"\nimport { useCallback, useRef, useState } from \"react\"\n\nexport type UseDisclosureProps<\n  T extends (...args: any[]) => any = () => void,\n  K extends (...args: any[]) => any = () => void,\n> = {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onOpen?: T\n  onClose?: K\n  timing?: \"before\" | \"after\"\n}\n\n/**\n * `useDisclosure` is a custom hook that helps handle common open/close or toggle scenarios.\n * It can be used to control components such as `Modal`, `Dialog`, `Drawer`, etc.\n *\n * @see Docs https://yamada-ui.com/hooks/use-disclosure\n */\nexport const useDisclosure = <\n  T extends (...args: any[]) => any = () => void,\n  K extends (...args: any[]) => any = () => void,\n>(\n  props: UseDisclosureProps<T, K> = {},\n) => {\n  const [defaultIsOpen, setIsOpen] = useState<boolean>(\n    props.defaultIsOpen ?? false,\n  )\n\n  const timingRef = useRef(props.timing ?? \"after\")\n  const handleOpen = useCallbackRef(props.onOpen)\n  const handleClose = useCallbackRef(props.onClose)\n\n  const isControlled = props.isOpen !== undefined\n  const isOpen = props.isOpen !== undefined ? props.isOpen : defaultIsOpen\n\n  const onOpen = useCallback(\n    async (...args: any) => {\n      if (timingRef.current === \"before\") await handleOpen?.(...args)\n\n      if (!isControlled) setIsOpen(true)\n\n      if (timingRef.current === \"after\") await handleOpen?.(...args)\n    },\n    [isControlled, handleOpen, timingRef],\n  ) as unknown as T\n\n  const onClose = useCallback(\n    async (...args: any) => {\n      if (timingRef.current === \"before\") await handleClose?.(...args)\n\n      if (!isControlled) setIsOpen(false)\n\n      if (timingRef.current === \"after\") await handleClose?.(...args)\n    },\n    [isControlled, handleClose, timingRef],\n  ) as unknown as K\n\n  const onToggle = useCallback(\n    (...args: any) => (!isOpen ? onOpen(...args) : onClose(...args)),\n    [isOpen, onOpen, onClose],\n  ) as unknown as T | K\n\n  return { isOpen, onOpen, onClose, onToggle }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n\nexport type LazyMode = \"unmount\" | \"keepMounted\"\n\nexport type UseLazyDisclosureProps = {\n  enabled?: boolean\n  isSelected?: boolean\n  wasSelected?: boolean\n  mode?: LazyMode\n}\n\nexport const useLazyDisclosure = ({\n  wasSelected,\n  enabled,\n  isSelected,\n  mode = \"unmount\",\n}: UseLazyDisclosureProps) => {\n  if (!enabled) return true\n\n  if (isSelected) return true\n\n  if (mode === \"keepMounted\" && wasSelected) return true\n\n  return false\n}\n"],"mappings":";;;AAAA,SAAS,sBAAsB;AAC/B,SAAS,aAAa,QAAQ,gBAAgB;AAmBvC,IAAM,gBAAgB,CAI3B,QAAkC,CAAC,MAChC;AAzBL;AA0BE,QAAM,CAAC,eAAe,SAAS,IAAI;AAAA,KACjC,WAAM,kBAAN,YAAuB;AAAA,EACzB;AAEA,QAAM,YAAY,QAAO,WAAM,WAAN,YAAgB,OAAO;AAChD,QAAM,aAAa,eAAe,MAAM,MAAM;AAC9C,QAAM,cAAc,eAAe,MAAM,OAAO;AAEhD,QAAM,eAAe,MAAM,WAAW;AACtC,QAAM,SAAS,MAAM,WAAW,SAAY,MAAM,SAAS;AAE3D,QAAM,SAAS;AAAA,IACb,UAAU,SAAc;AACtB,UAAI,UAAU,YAAY;AAAU,eAAM,yCAAa,GAAG;AAE1D,UAAI,CAAC;AAAc,kBAAU,IAAI;AAEjC,UAAI,UAAU,YAAY;AAAS,eAAM,yCAAa,GAAG;AAAA,IAC3D;AAAA,IACA,CAAC,cAAc,YAAY,SAAS;AAAA,EACtC;AAEA,QAAM,UAAU;AAAA,IACd,UAAU,SAAc;AACtB,UAAI,UAAU,YAAY;AAAU,eAAM,2CAAc,GAAG;AAE3D,UAAI,CAAC;AAAc,kBAAU,KAAK;AAElC,UAAI,UAAU,YAAY;AAAS,eAAM,2CAAc,GAAG;AAAA,IAC5D;AAAA,IACA,CAAC,cAAc,aAAa,SAAS;AAAA,EACvC;AAEA,QAAM,WAAW;AAAA,IACf,IAAI,SAAe,CAAC,SAAS,OAAO,GAAG,IAAI,IAAI,QAAQ,GAAG,IAAI;AAAA,IAC9D,CAAC,QAAQ,QAAQ,OAAO;AAAA,EAC1B;AAEA,SAAO,EAAE,QAAQ,QAAQ,SAAS,SAAS;AAC7C;AAaO,IAAM,oBAAoB,CAAC;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AACT,MAA8B;AAC5B,MAAI,CAAC;AAAS,WAAO;AAErB,MAAI;AAAY,WAAO;AAEvB,MAAI,SAAS,iBAAiB;AAAa,WAAO;AAElD,SAAO;AACT;","names":[]}