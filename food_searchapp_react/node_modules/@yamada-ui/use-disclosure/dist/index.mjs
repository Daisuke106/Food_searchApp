"use client"

// src/index.ts
import { useCallbackRef } from "@yamada-ui/utils";
import { useCallback, useRef, useState } from "react";
var useDisclosure = (props = {}) => {
  var _a, _b;
  const [defaultIsOpen, setIsOpen] = useState(
    (_a = props.defaultIsOpen) != null ? _a : false
  );
  const timingRef = useRef((_b = props.timing) != null ? _b : "after");
  const handleOpen = useCallbackRef(props.onOpen);
  const handleClose = useCallbackRef(props.onClose);
  const isControlled = props.isOpen !== void 0;
  const isOpen = props.isOpen !== void 0 ? props.isOpen : defaultIsOpen;
  const onOpen = useCallback(
    async (...args) => {
      if (timingRef.current === "before")
        await (handleOpen == null ? void 0 : handleOpen(...args));
      if (!isControlled)
        setIsOpen(true);
      if (timingRef.current === "after")
        await (handleOpen == null ? void 0 : handleOpen(...args));
    },
    [isControlled, handleOpen, timingRef]
  );
  const onClose = useCallback(
    async (...args) => {
      if (timingRef.current === "before")
        await (handleClose == null ? void 0 : handleClose(...args));
      if (!isControlled)
        setIsOpen(false);
      if (timingRef.current === "after")
        await (handleClose == null ? void 0 : handleClose(...args));
    },
    [isControlled, handleClose, timingRef]
  );
  const onToggle = useCallback(
    (...args) => !isOpen ? onOpen(...args) : onClose(...args),
    [isOpen, onOpen, onClose]
  );
  return { isOpen, onOpen, onClose, onToggle };
};
var useLazyDisclosure = ({
  wasSelected,
  enabled,
  isSelected,
  mode = "unmount"
}) => {
  if (!enabled)
    return true;
  if (isSelected)
    return true;
  if (mode === "keepMounted" && wasSelected)
    return true;
  return false;
};
export {
  useDisclosure,
  useLazyDisclosure
};
//# sourceMappingURL=index.mjs.map