type UseDisclosureProps<T extends (...args: any[]) => any = () => void, K extends (...args: any[]) => any = () => void> = {
    isOpen?: boolean;
    defaultIsOpen?: boolean;
    onOpen?: T;
    onClose?: K;
    timing?: "before" | "after";
};
/**
 * `useDisclosure` is a custom hook that helps handle common open/close or toggle scenarios.
 * It can be used to control components such as `Modal`, `Dialog`, `Drawer`, etc.
 *
 * @see Docs https://yamada-ui.com/hooks/use-disclosure
 */
declare const useDisclosure: <T extends (...args: any[]) => any = () => void, K extends (...args: any[]) => any = () => void>(props?: UseDisclosureProps<T, K>) => {
    isOpen: boolean;
    onOpen: T;
    onClose: K;
    onToggle: T | K;
};
type UseDisclosureReturn = ReturnType<typeof useDisclosure>;
type LazyMode = "unmount" | "keepMounted";
type UseLazyDisclosureProps = {
    enabled?: boolean;
    isSelected?: boolean;
    wasSelected?: boolean;
    mode?: LazyMode;
};
declare const useLazyDisclosure: ({ wasSelected, enabled, isSelected, mode, }: UseLazyDisclosureProps) => boolean;

export { type LazyMode, type UseDisclosureProps, type UseDisclosureReturn, type UseLazyDisclosureProps, useDisclosure, useLazyDisclosure };
