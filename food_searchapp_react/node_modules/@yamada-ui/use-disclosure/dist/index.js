"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useDisclosure: () => useDisclosure,
  useLazyDisclosure: () => useLazyDisclosure
});
module.exports = __toCommonJS(src_exports);
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var useDisclosure = (props = {}) => {
  var _a, _b;
  const [defaultIsOpen, setIsOpen] = (0, import_react.useState)(
    (_a = props.defaultIsOpen) != null ? _a : false
  );
  const timingRef = (0, import_react.useRef)((_b = props.timing) != null ? _b : "after");
  const handleOpen = (0, import_utils.useCallbackRef)(props.onOpen);
  const handleClose = (0, import_utils.useCallbackRef)(props.onClose);
  const isControlled = props.isOpen !== void 0;
  const isOpen = props.isOpen !== void 0 ? props.isOpen : defaultIsOpen;
  const onOpen = (0, import_react.useCallback)(
    async (...args) => {
      if (timingRef.current === "before")
        await (handleOpen == null ? void 0 : handleOpen(...args));
      if (!isControlled)
        setIsOpen(true);
      if (timingRef.current === "after")
        await (handleOpen == null ? void 0 : handleOpen(...args));
    },
    [isControlled, handleOpen, timingRef]
  );
  const onClose = (0, import_react.useCallback)(
    async (...args) => {
      if (timingRef.current === "before")
        await (handleClose == null ? void 0 : handleClose(...args));
      if (!isControlled)
        setIsOpen(false);
      if (timingRef.current === "after")
        await (handleClose == null ? void 0 : handleClose(...args));
    },
    [isControlled, handleClose, timingRef]
  );
  const onToggle = (0, import_react.useCallback)(
    (...args) => !isOpen ? onOpen(...args) : onClose(...args),
    [isOpen, onOpen, onClose]
  );
  return { isOpen, onOpen, onClose, onToggle };
};
var useLazyDisclosure = ({
  wasSelected,
  enabled,
  isSelected,
  mode = "unmount"
}) => {
  if (!enabled)
    return true;
  if (isSelected)
    return true;
  if (mode === "keepMounted" && wasSelected)
    return true;
  return false;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useDisclosure,
  useLazyDisclosure
});
//# sourceMappingURL=index.js.map