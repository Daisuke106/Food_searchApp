"use client"
import {
  useReorderContext
} from "./chunk-JAYSNS4U.mjs";

// src/reorder-item.tsx
import { ui } from "@yamada-ui/core";
import {
  MotionReorder,
  useMotionValue,
  useDragControls
} from "@yamada-ui/motion";
import { createContext, cx, dataAttr } from "@yamada-ui/utils";
import { forwardRef, useCallback, useEffect, useState } from "react";
import { jsx } from "react/jsx-runtime";
var [ReorderItemProvider, useReorderItemContext] = createContext({
  name: "ReorderContext",
  errorMessage: `useReorderItemContext returned is 'undefined'. Seems you forgot to wrap the components in "<ReorderItem />"`
});
var ReorderItem = forwardRef(
  ({ className, label, ...rest }, ref) => {
    var _a;
    const { orientation, styles } = useReorderContext();
    const dragControls = useDragControls();
    const [hasTrigger, setHasTrigger] = useState(false);
    const [isDrag, setIsDrag] = useState(false);
    const x = useMotionValue(0);
    const y = useMotionValue(0);
    const register = useCallback(
      (node) => setHasTrigger(!!node),
      []
    );
    useEffect(() => {
      const unsubscribeX = x.on("change", (x2) => {
        if (orientation === "horizontal")
          setIsDrag(x2 !== 0);
      });
      const unsubscribeY = y.on("change", (y2) => {
        if (orientation === "vertical")
          setIsDrag(y2 !== 0);
      });
      return () => {
        unsubscribeX();
        unsubscribeY();
      };
    }, [orientation, x, y]);
    const css = {
      ...!hasTrigger ? { cursor: "grab" } : { userSelect: "none" },
      ...styles.item,
      ...!hasTrigger ? {
        _selected: {
          ...(_a = styles.item) == null ? void 0 : _a._selected,
          cursor: "grabbing"
        }
      } : {}
    };
    return /* @__PURE__ */ jsx(ReorderItemProvider, { value: { register, isDrag, dragControls }, children: /* @__PURE__ */ jsx(
      ui.li,
      {
        ref,
        as: MotionReorder.Item,
        className: cx("ui-reorder__item", className),
        value: label,
        __css: css,
        ...rest,
        dragListener: !hasTrigger,
        dragControls,
        "data-selected": dataAttr(isDrag),
        style: { ...rest.style, x, y }
      }
    ) });
  }
);
ReorderItem.displayName = "ReorderItem";

export {
  ReorderItemProvider,
  useReorderItemContext,
  ReorderItem
};
//# sourceMappingURL=chunk-TTUCMKAS.mjs.map