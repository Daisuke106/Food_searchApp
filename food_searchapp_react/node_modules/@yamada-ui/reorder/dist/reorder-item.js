"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/reorder-item.tsx
var reorder_item_exports = {};
__export(reorder_item_exports, {
  ReorderItem: () => ReorderItem,
  ReorderItemProvider: () => ReorderItemProvider,
  useReorderItemContext: () => useReorderItemContext
});
module.exports = __toCommonJS(reorder_item_exports);
var import_core2 = require("@yamada-ui/core");
var import_motion2 = require("@yamada-ui/motion");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/reorder.tsx
var import_core = require("@yamada-ui/core");
var import_motion = require("@yamada-ui/motion");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var [ReorderProvider, useReorderContext] = (0, import_utils.createContext)({
  name: "ReorderContext",
  errorMessage: `useReorderContext returned is 'undefined'. Seems you forgot to wrap the components in "<Reorder />"`
});
var omitDuplicated = (values) => Array.from(new Set(values));
var pickDuplicated = (values) => values.filter(
  (value, index, self) => self.indexOf(value) === index && index !== self.lastIndexOf(value)
);
var Reorder = (0, import_react.forwardRef)(
  (props, ref) => {
    const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Reorder", props);
    const {
      className,
      orientation = "vertical",
      gap = "fallback(4, 1rem)",
      onChange,
      onCompleteChange,
      children,
      ...rest
    } = (0, import_core.omitThemeProps)(mergedProps);
    const axis = orientation === "vertical" ? "y" : "x";
    const validChildren = (0, import_utils.getValidChildren)(children);
    const defaultValues = (0, import_react.useMemo)(() => {
      const values2 = validChildren.map(({ props: props2 }) => props2.label);
      const duplicatedValues = pickDuplicated(values2);
      if (duplicatedValues.length)
        console.warn(
          `Reorder: 'label' of 'ReorderItem' must not be duplicated. duplicate 'label' is '${duplicatedValues.join(
            `', '`
          )}' `
        );
      return omitDuplicated(values2);
    }, [validChildren]);
    const prevDefaultValues = (0, import_react.useRef)(defaultValues);
    const [values, setValues] = (0, import_react.useState)(defaultValues);
    const prevValues = (0, import_react.useRef)(defaultValues);
    const onReorder = (0, import_react.useCallback)(
      (newValues) => {
        setValues(newValues);
        onChange == null ? void 0 : onChange(newValues);
      },
      [onChange]
    );
    const onCompleteReorder = (0, import_react.useCallback)(() => {
      const isEqual = JSON.stringify(prevValues.current) === JSON.stringify(values);
      if (isEqual)
        return;
      prevValues.current = values;
      onCompleteChange == null ? void 0 : onCompleteChange(values);
    }, [onCompleteChange, values]);
    (0, import_utils.useUpdateEffect)(() => {
      const isEqual = JSON.stringify(defaultValues) === JSON.stringify(prevDefaultValues.current);
      if (isEqual)
        return;
      prevValues.current = defaultValues;
      prevDefaultValues.current = defaultValues;
      setValues(defaultValues);
    }, [defaultValues]);
    const cloneChildren = (0, import_react.useMemo)(
      () => values.map(
        (value) => validChildren.find(({ props: props2 }) => props2.label === value)
      ),
      [values, validChildren]
    );
    const css = {
      display: "flex",
      flexDirection: orientation === "vertical" ? "column" : "row",
      gap,
      ...styles.container
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ReorderProvider, { value: { orientation, styles }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.ul,
      {
        ref,
        as: import_motion.MotionReorder.Group,
        className: (0, import_utils.cx)("ui-reorder", className),
        axis,
        values,
        onReorder,
        __css: css,
        ...rest,
        onMouseUp: (0, import_utils.handlerAll)(rest.onMouseUp, onCompleteReorder),
        onTouchEnd: (0, import_utils.handlerAll)(rest.onTouchEnd, onCompleteReorder),
        children: cloneChildren
      }
    ) });
  }
);
Reorder.displayName = "Reorder";

// src/reorder-item.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var [ReorderItemProvider, useReorderItemContext] = (0, import_utils2.createContext)({
  name: "ReorderContext",
  errorMessage: `useReorderItemContext returned is 'undefined'. Seems you forgot to wrap the components in "<ReorderItem />"`
});
var ReorderItem = (0, import_react2.forwardRef)(
  ({ className, label, ...rest }, ref) => {
    var _a;
    const { orientation, styles } = useReorderContext();
    const dragControls = (0, import_motion2.useDragControls)();
    const [hasTrigger, setHasTrigger] = (0, import_react2.useState)(false);
    const [isDrag, setIsDrag] = (0, import_react2.useState)(false);
    const x = (0, import_motion2.useMotionValue)(0);
    const y = (0, import_motion2.useMotionValue)(0);
    const register = (0, import_react2.useCallback)(
      (node) => setHasTrigger(!!node),
      []
    );
    (0, import_react2.useEffect)(() => {
      const unsubscribeX = x.on("change", (x2) => {
        if (orientation === "horizontal")
          setIsDrag(x2 !== 0);
      });
      const unsubscribeY = y.on("change", (y2) => {
        if (orientation === "vertical")
          setIsDrag(y2 !== 0);
      });
      return () => {
        unsubscribeX();
        unsubscribeY();
      };
    }, [orientation, x, y]);
    const css = {
      ...!hasTrigger ? { cursor: "grab" } : { userSelect: "none" },
      ...styles.item,
      ...!hasTrigger ? {
        _selected: {
          ...(_a = styles.item) == null ? void 0 : _a._selected,
          cursor: "grabbing"
        }
      } : {}
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ReorderItemProvider, { value: { register, isDrag, dragControls }, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.li,
      {
        ref,
        as: import_motion2.MotionReorder.Item,
        className: (0, import_utils2.cx)("ui-reorder__item", className),
        value: label,
        __css: css,
        ...rest,
        dragListener: !hasTrigger,
        dragControls,
        "data-selected": (0, import_utils2.dataAttr)(isDrag),
        style: { ...rest.style, x, y }
      }
    ) });
  }
);
ReorderItem.displayName = "ReorderItem";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ReorderItem,
  ReorderItemProvider,
  useReorderItemContext
});
//# sourceMappingURL=reorder-item.js.map