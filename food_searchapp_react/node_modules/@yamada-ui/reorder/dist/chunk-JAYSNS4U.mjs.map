{"version":3,"sources":["../src/reorder.tsx"],"sourcesContent":["import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport { ui, useMultiComponentStyle, omitThemeProps } from \"@yamada-ui/core\"\nimport type { HTMLMotionProps } from \"@yamada-ui/motion\"\nimport { MotionReorder } from \"@yamada-ui/motion\"\nimport {\n  createContext,\n  cx,\n  getValidChildren,\n  handlerAll,\n  useUpdateEffect,\n} from \"@yamada-ui/utils\"\nimport { forwardRef, useCallback, useMemo, useRef, useState } from \"react\"\n\ntype ReorderContext = {\n  orientation: \"vertical\" | \"horizontal\"\n  styles: Record<string, CSSUIObject>\n}\n\nexport const [ReorderProvider, useReorderContext] =\n  createContext<ReorderContext>({\n    name: \"ReorderContext\",\n    errorMessage: `useReorderContext returned is 'undefined'. Seems you forgot to wrap the components in \"<Reorder />\"`,\n  })\n\ntype ReorderOptions = {\n  /**\n   * The orientation of the reorder.\n   *\n   * @default 'vertical'\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * The callback invoked when reorder items are moved.\n   */\n  onChange?: (labels: (string | number)[]) => void\n  /**\n   * The callback invoked when the movement of reorder items is completed.\n   */\n  onCompleteChange?: (labels: (string | number)[]) => void\n}\n\nexport type ReorderProps = Omit<HTMLUIProps<\"ul\">, \"as\" | \"onChange\"> &\n  Omit<HTMLMotionProps<\"ul\">, \"as\" | \"onChange\"> &\n  ThemeProps<\"Reorder\"> &\n  ReorderOptions\n\nconst omitDuplicated = (values: (string | number)[]): (string | number)[] =>\n  Array.from(new Set(values))\n\nconst pickDuplicated = (values: (string | number)[]): (string | number)[] =>\n  values.filter(\n    (value, index, self) =>\n      self.indexOf(value) === index && index !== self.lastIndexOf(value),\n  )\n\n/**\n * `Reorder` is a component that allows you to change the order of items using drag and drop.\n *\n * @see Docs https://yamada-ui.com/components/data-display/reorder\n */\nexport const Reorder = forwardRef<HTMLUListElement, ReorderProps>(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"Reorder\", props)\n    const {\n      className,\n      orientation = \"vertical\",\n      gap = \"fallback(4, 1rem)\",\n      onChange,\n      onCompleteChange,\n      children,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    const axis = orientation === \"vertical\" ? \"y\" : \"x\"\n\n    const validChildren = getValidChildren(children)\n\n    const defaultValues = useMemo(() => {\n      const values = validChildren.map(({ props }) => props.label)\n\n      const duplicatedValues = pickDuplicated(values)\n\n      if (duplicatedValues.length)\n        console.warn(\n          `Reorder: 'label' of 'ReorderItem' must not be duplicated. duplicate 'label' is '${duplicatedValues.join(\n            `', '`,\n          )}' `,\n        )\n\n      return omitDuplicated(values)\n    }, [validChildren])\n    const prevDefaultValues = useRef<(string | number)[]>(defaultValues)\n\n    const [values, setValues] = useState<(string | number)[]>(defaultValues)\n    const prevValues = useRef<(string | number)[]>(defaultValues)\n\n    const onReorder = useCallback(\n      (newValues: (string | number)[]) => {\n        setValues(newValues)\n\n        onChange?.(newValues)\n      },\n      [onChange],\n    )\n\n    const onCompleteReorder = useCallback(() => {\n      const isEqual =\n        JSON.stringify(prevValues.current) === JSON.stringify(values)\n\n      if (isEqual) return\n\n      prevValues.current = values\n\n      onCompleteChange?.(values)\n    }, [onCompleteChange, values])\n\n    useUpdateEffect(() => {\n      const isEqual =\n        JSON.stringify(defaultValues) ===\n        JSON.stringify(prevDefaultValues.current)\n\n      if (isEqual) return\n\n      prevValues.current = defaultValues\n      prevDefaultValues.current = defaultValues\n\n      setValues(defaultValues)\n    }, [defaultValues])\n\n    const cloneChildren = useMemo(\n      () =>\n        values.map((value) =>\n          validChildren.find(({ props }) => props.label === value),\n        ),\n      [values, validChildren],\n    )\n\n    const css: CSSUIObject = {\n      display: \"flex\",\n      flexDirection: orientation === \"vertical\" ? \"column\" : \"row\",\n      gap,\n      ...styles.container,\n    }\n\n    return (\n      <ReorderProvider value={{ orientation, styles }}>\n        <ui.ul\n          ref={ref}\n          as={MotionReorder.Group}\n          className={cx(\"ui-reorder\", className)}\n          axis={axis}\n          values={values}\n          onReorder={onReorder}\n          __css={css}\n          {...rest}\n          onMouseUp={handlerAll(rest.onMouseUp, onCompleteReorder)}\n          onTouchEnd={handlerAll(rest.onTouchEnd, onCompleteReorder)}\n        >\n          {cloneChildren}\n        </ui.ul>\n      </ReorderProvider>\n    )\n  },\n)\n\nReorder.displayName = \"Reorder\"\n"],"mappings":"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","names":["values","props"]}