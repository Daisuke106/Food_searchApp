{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { useCallbackRef } from \"@yamada-ui/utils\"\nimport { useEffect } from \"react\"\n\ntype Handler<E extends string> = E extends keyof WindowEventMap\n  ? (ev: WindowEventMap[E]) => void\n  : (ev: CustomEvent) => void\ntype Options = boolean | AddEventListenerOptions\n\n/**\n * `useWindowEvent` is a custom hook that assigns an event listener to `window`.\n *\n * @see Docs https://yamada-ui.com/hooks/use-window-event\n */\nexport const useWindowEvent = <E extends string>(\n  event: E,\n  handler: Handler<E>,\n  options?: Options,\n) => {\n  const listener = useCallbackRef(\n    handler,\n  ) as unknown as EventListenerOrEventListenerObject\n\n  useEffect(() => {\n    window.addEventListener(event, listener, options)\n\n    return () => {\n      window.removeEventListener(event, listener, options)\n    }\n  }, [event, listener, options])\n}\n"],"mappings":";;;AAAA,SAAS,sBAAsB;AAC/B,SAAS,iBAAiB;AAYnB,IAAM,iBAAiB,CAC5B,OACA,SACA,YACG;AACH,QAAM,WAAW;AAAA,IACf;AAAA,EACF;AAEA,YAAU,MAAM;AACd,WAAO,iBAAiB,OAAO,UAAU,OAAO;AAEhD,WAAO,MAAM;AACX,aAAO,oBAAoB,OAAO,UAAU,OAAO;AAAA,IACrD;AAAA,EACF,GAAG,CAAC,OAAO,UAAU,OAAO,CAAC;AAC/B;","names":[]}