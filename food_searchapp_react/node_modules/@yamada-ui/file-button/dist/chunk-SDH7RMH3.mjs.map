{"version":3,"sources":["../src/file-button.tsx"],"sourcesContent":["import type { ButtonProps } from \"@yamada-ui/button\"\nimport { Button } from \"@yamada-ui/button\"\nimport type { ColorModeToken, CSS } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  formControlProperties,\n  useFormControlProps,\n} from \"@yamada-ui/form-control\"\nimport {\n  assignRef,\n  cx,\n  handlerAll,\n  isFunction,\n  isNull,\n  mergeRefs,\n  pickObject,\n} from \"@yamada-ui/utils\"\nimport type { ChangeEvent, ForwardedRef, ReactNode } from \"react\"\nimport { useCallback, useRef } from \"react\"\n\ntype Props = {\n  onClick: () => void\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n} & FormControlOptions\n\ntype FileButtonOptions = {\n  /**\n   * The border color when the button is invalid.\n   */\n  errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * Function to be called when a file change event occurs.\n   */\n  onChange?: (files: File[] | undefined) => void\n  children?: ReactNode | ((props: Props) => ReactNode)\n  /**\n   * Ref to a reset function.\n   */\n  resetRef?: ForwardedRef<() => void>\n}\n\ntype InputProps = Partial<Pick<HTMLInputElement, \"accept\" | \"multiple\">>\n\nexport type FileButtonProps = Omit<ButtonProps, \"onChange\" | \"children\"> &\n  InputProps &\n  FileButtonOptions &\n  FormControlOptions\n\n/**\n * `FileButton` is a button component used for users to select files.\n *\n * @see Docs https://yamada-ui.com/components/forms/file-button\n */\nexport const FileButton = forwardRef<FileButtonProps, \"input\">(\n  ({ className, resetRef, as: As, children, ...props }, ref) => {\n    const {\n      id,\n      name,\n      accept,\n      multiple,\n      form,\n      \"aria-readonly\": ariaReadonly,\n      onClick: onClickProp,\n      onChange: onChangeProp,\n      ...rest\n    } = useFormControlProps(props)\n\n    const { disabled, readOnly, required, \"aria-invalid\": isInvalid } = rest\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const onClick = useCallback(() => {\n      if (disabled || readOnly) return\n\n      inputRef.current?.click()\n    }, [disabled, readOnly])\n\n    const onChange = useCallback(\n      (ev: ChangeEvent<HTMLInputElement>) => {\n        const files = !isNull(ev.currentTarget.files)\n          ? Array.from(ev.currentTarget.files)\n          : undefined\n\n        onChangeProp?.(files)\n      },\n      [onChangeProp],\n    )\n\n    const onReset = useCallback(() => {\n      if (inputRef.current) inputRef.current.value = \"\"\n    }, [])\n\n    if (!isFunction(children)) {\n      const Component = As || Button\n\n      children = (\n        <Component\n          className={cx(\"ui-file-button\", className)}\n          {...rest}\n          onClick={handlerAll(onClickProp, onClick)}\n        >\n          {children}\n        </Component>\n      ) as ReactNode\n    }\n\n    assignRef(resetRef, onReset)\n\n    return (\n      <>\n        <ui.input\n          ref={mergeRefs(inputRef, ref)}\n          type=\"file\"\n          aria-hidden\n          tabIndex={-1}\n          id={id}\n          name={name}\n          form={form}\n          accept={accept}\n          multiple={multiple}\n          style={{\n            border: \"0px\",\n            clip: \"rect(0px, 0px, 0px, 0px)\",\n            height: \"1px\",\n            width: \"1px\",\n            margin: \"-1px\",\n            padding: \"0px\",\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            position: \"absolute\",\n          }}\n          onChange={onChange}\n          aria-readonly={ariaReadonly}\n          {...pickObject(rest, formControlProperties)}\n        />\n\n        {isFunction(children)\n          ? children({\n              onClick,\n              disabled,\n              readOnly,\n              required,\n              isDisabled: disabled,\n              isReadOnly: readOnly,\n              isRequired: required,\n              isInvalid,\n            })\n          : children}\n      </>\n    )\n  },\n)\n"],"mappings":";;;AACA,SAAS,cAAc;AAEvB,SAAS,IAAI,kBAAkB;AAE/B;AAAA,EACE;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,SAAS,aAAa,cAAc;AAgF5B,SAaF,UAbE,KAaF,YAbE;AA3CD,IAAM,aAAa;AAAA,EACxB,CAAC,EAAE,WAAW,UAAU,IAAI,IAAI,UAAU,GAAG,MAAM,GAAG,QAAQ;AAC5D,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAAiB;AAAA,MACjB,SAAS;AAAA,MACT,UAAU;AAAA,MACV,GAAG;AAAA,IACL,IAAI,oBAAoB,KAAK;AAE7B,UAAM,EAAE,UAAU,UAAU,UAAU,gBAAgB,UAAU,IAAI;AAEpE,UAAM,WAAW,OAAyB,IAAI;AAE9C,UAAM,UAAU,YAAY,MAAM;AA1EtC;AA2EM,UAAI,YAAY;AAAU;AAE1B,qBAAS,YAAT,mBAAkB;AAAA,IACpB,GAAG,CAAC,UAAU,QAAQ,CAAC;AAEvB,UAAM,WAAW;AAAA,MACf,CAAC,OAAsC;AACrC,cAAM,QAAQ,CAAC,OAAO,GAAG,cAAc,KAAK,IACxC,MAAM,KAAK,GAAG,cAAc,KAAK,IACjC;AAEJ,qDAAe;AAAA,MACjB;AAAA,MACA,CAAC,YAAY;AAAA,IACf;AAEA,UAAM,UAAU,YAAY,MAAM;AAChC,UAAI,SAAS;AAAS,iBAAS,QAAQ,QAAQ;AAAA,IACjD,GAAG,CAAC,CAAC;AAEL,QAAI,CAAC,WAAW,QAAQ,GAAG;AACzB,YAAM,YAAY,MAAM;AAExB,iBACE;AAAA,QAAC;AAAA;AAAA,UACC,WAAW,GAAG,kBAAkB,SAAS;AAAA,UACxC,GAAG;AAAA,UACJ,SAAS,WAAW,aAAa,OAAO;AAAA,UAEvC;AAAA;AAAA,MACH;AAAA,IAEJ;AAEA,cAAU,UAAU,OAAO;AAE3B,WACE,iCACE;AAAA;AAAA,QAAC,GAAG;AAAA,QAAH;AAAA,UACC,KAAK,UAAU,UAAU,GAAG;AAAA,UAC5B,MAAK;AAAA,UACL,eAAW;AAAA,UACX,UAAU;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,OAAO;AAAA,YACL,QAAQ;AAAA,YACR,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,UAAU;AAAA,YACV,YAAY;AAAA,YACZ,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,UACA,iBAAe;AAAA,UACd,GAAG,WAAW,MAAM,qBAAqB;AAAA;AAAA,MAC5C;AAAA,MAEC,WAAW,QAAQ,IAChB,SAAS;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ;AAAA,MACF,CAAC,IACD;AAAA,OACN;AAAA,EAEJ;AACF;","names":[]}