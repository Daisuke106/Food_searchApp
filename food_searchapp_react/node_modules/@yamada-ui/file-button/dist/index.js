"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FileButton: () => FileButton
});
module.exports = __toCommonJS(src_exports);

// src/file-button.tsx
var import_button = require("@yamada-ui/button");
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var FileButton = (0, import_core.forwardRef)(
  ({ className, resetRef, as: As, children, ...props }, ref) => {
    const {
      id,
      name,
      accept,
      multiple,
      form,
      "aria-readonly": ariaReadonly,
      onClick: onClickProp,
      onChange: onChangeProp,
      ...rest
    } = (0, import_form_control.useFormControlProps)(props);
    const { disabled, readOnly, required, "aria-invalid": isInvalid } = rest;
    const inputRef = (0, import_react.useRef)(null);
    const onClick = (0, import_react.useCallback)(() => {
      var _a;
      if (disabled || readOnly)
        return;
      (_a = inputRef.current) == null ? void 0 : _a.click();
    }, [disabled, readOnly]);
    const onChange = (0, import_react.useCallback)(
      (ev) => {
        const files = !(0, import_utils.isNull)(ev.currentTarget.files) ? Array.from(ev.currentTarget.files) : void 0;
        onChangeProp == null ? void 0 : onChangeProp(files);
      },
      [onChangeProp]
    );
    const onReset = (0, import_react.useCallback)(() => {
      if (inputRef.current)
        inputRef.current.value = "";
    }, []);
    if (!(0, import_utils.isFunction)(children)) {
      const Component = As || import_button.Button;
      children = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        Component,
        {
          className: (0, import_utils.cx)("ui-file-button", className),
          ...rest,
          onClick: (0, import_utils.handlerAll)(onClickProp, onClick),
          children
        }
      );
    }
    (0, import_utils.assignRef)(resetRef, onReset);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_core.ui.input,
        {
          ref: (0, import_utils.mergeRefs)(inputRef, ref),
          type: "file",
          "aria-hidden": true,
          tabIndex: -1,
          id,
          name,
          form,
          accept,
          multiple,
          style: {
            border: "0px",
            clip: "rect(0px, 0px, 0px, 0px)",
            height: "1px",
            width: "1px",
            margin: "-1px",
            padding: "0px",
            overflow: "hidden",
            whiteSpace: "nowrap",
            position: "absolute"
          },
          onChange,
          "aria-readonly": ariaReadonly,
          ...(0, import_utils.pickObject)(rest, import_form_control.formControlProperties)
        }
      ),
      (0, import_utils.isFunction)(children) ? children({
        onClick,
        disabled,
        readOnly,
        required,
        isDisabled: disabled,
        isReadOnly: readOnly,
        isRequired: required,
        isInvalid
      }) : children
    ] });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FileButton
});
//# sourceMappingURL=index.js.map