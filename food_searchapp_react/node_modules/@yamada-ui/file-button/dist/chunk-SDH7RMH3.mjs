"use client"

// src/file-button.tsx
import { Button } from "@yamada-ui/button";
import { ui, forwardRef } from "@yamada-ui/core";
import {
  formControlProperties,
  useFormControlProps
} from "@yamada-ui/form-control";
import {
  assignRef,
  cx,
  handlerAll,
  isFunction,
  isNull,
  mergeRefs,
  pickObject
} from "@yamada-ui/utils";
import { useCallback, useRef } from "react";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var FileButton = forwardRef(
  ({ className, resetRef, as: As, children, ...props }, ref) => {
    const {
      id,
      name,
      accept,
      multiple,
      form,
      "aria-readonly": ariaReadonly,
      onClick: onClickProp,
      onChange: onChangeProp,
      ...rest
    } = useFormControlProps(props);
    const { disabled, readOnly, required, "aria-invalid": isInvalid } = rest;
    const inputRef = useRef(null);
    const onClick = useCallback(() => {
      var _a;
      if (disabled || readOnly)
        return;
      (_a = inputRef.current) == null ? void 0 : _a.click();
    }, [disabled, readOnly]);
    const onChange = useCallback(
      (ev) => {
        const files = !isNull(ev.currentTarget.files) ? Array.from(ev.currentTarget.files) : void 0;
        onChangeProp == null ? void 0 : onChangeProp(files);
      },
      [onChangeProp]
    );
    const onReset = useCallback(() => {
      if (inputRef.current)
        inputRef.current.value = "";
    }, []);
    if (!isFunction(children)) {
      const Component = As || Button;
      children = /* @__PURE__ */ jsx(
        Component,
        {
          className: cx("ui-file-button", className),
          ...rest,
          onClick: handlerAll(onClickProp, onClick),
          children
        }
      );
    }
    assignRef(resetRef, onReset);
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        ui.input,
        {
          ref: mergeRefs(inputRef, ref),
          type: "file",
          "aria-hidden": true,
          tabIndex: -1,
          id,
          name,
          form,
          accept,
          multiple,
          style: {
            border: "0px",
            clip: "rect(0px, 0px, 0px, 0px)",
            height: "1px",
            width: "1px",
            margin: "-1px",
            padding: "0px",
            overflow: "hidden",
            whiteSpace: "nowrap",
            position: "absolute"
          },
          onChange,
          "aria-readonly": ariaReadonly,
          ...pickObject(rest, formControlProperties)
        }
      ),
      isFunction(children) ? children({
        onClick,
        disabled,
        readOnly,
        required,
        isDisabled: disabled,
        isReadOnly: readOnly,
        isRequired: required,
        isInvalid
      }) : children
    ] });
  }
);

export {
  FileButton
};
//# sourceMappingURL=chunk-SDH7RMH3.mjs.map