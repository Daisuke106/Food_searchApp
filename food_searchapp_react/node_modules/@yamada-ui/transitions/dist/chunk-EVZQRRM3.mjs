"use client"

// src/collapse.tsx
import { forwardRef } from "@yamada-ui/core";
import {
  AnimatePresence,
  transitionEnter,
  transitionExit,
  MOTION_TRANSITION_EASINGS,
  Motion
} from "@yamada-ui/motion";
import { createdDom, cx } from "@yamada-ui/utils";
import { useEffect, useState } from "react";
import { jsx } from "react/jsx-runtime";
var isNumeric = (value) => value != null && parseFloat(value.toString()) > 0;
var variants = {
  enter: ({
    animationOpacity,
    endingHeight: height,
    transition,
    transitionEnd,
    delay,
    duration,
    enter
  } = {}) => ({
    ...animationOpacity ? { opacity: 1 } : {},
    height,
    transition: transitionEnter(transition == null ? void 0 : transition.enter)(delay, duration),
    transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
    ...enter
  }),
  exit: ({
    animationOpacity,
    startingHeight: height,
    transition,
    transitionEnd,
    delay,
    duration,
    exit
  } = {}) => ({
    ...animationOpacity ? { opacity: isNumeric(height) ? 1 : 0 } : {},
    height,
    transition: transitionExit(transition == null ? void 0 : transition.exit)(delay, duration),
    transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
    ...exit
  })
};
var collapseProps = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants
};
var Collapse = forwardRef(
  ({
    unmountOnExit,
    isOpen,
    animationOpacity = true,
    startingHeight = 0,
    endingHeight = "auto",
    transition,
    transitionEnd,
    delay,
    duration,
    className,
    style,
    __css,
    ...rest
  }, ref) => {
    const [mounted, setMounted] = useState(false);
    useEffect(() => {
      const isBrowser = createdDom();
      if (isBrowser)
        setMounted(true);
    }, []);
    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    isOpen = unmountOnExit ? isOpen : true;
    transition = !mounted ? { enter: { duration: 0 } } : transition != null ? transition : {
      enter: {
        height: {
          duration: duration != null ? duration : 0.3,
          ease: MOTION_TRANSITION_EASINGS.ease
        },
        opacity: {
          duration: duration != null ? duration : 0.4,
          ease: MOTION_TRANSITION_EASINGS.ease
        }
      },
      exit: {
        height: {
          duration: duration != null ? duration : 0.3,
          ease: MOTION_TRANSITION_EASINGS.ease
        },
        opacity: {
          duration: duration != null ? duration : 0.4,
          ease: MOTION_TRANSITION_EASINGS.ease
        }
      }
    };
    transitionEnd = unmountOnExit ? transitionEnd : {
      ...transitionEnd,
      exit: {
        ...transitionEnd == null ? void 0 : transitionEnd.exit,
        display: hasStartingHeight ? "block" : "none"
      }
    };
    const custom = {
      animationOpacity,
      startingHeight,
      endingHeight,
      transition,
      transitionEnd,
      delay,
      duration
    };
    const css = {
      w: "100%",
      ...__css
    };
    return /* @__PURE__ */ jsx(AnimatePresence, { initial: false, custom, children: isOpen ? /* @__PURE__ */ jsx(
      Motion,
      {
        ref,
        className: cx("ui-collapse", className),
        ...rest,
        ...collapseProps,
        custom,
        animate,
        initial: unmountOnExit ? "exit" : false,
        __css: css,
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        }
      }
    ) : null });
  }
);

export {
  collapseProps,
  Collapse
};
//# sourceMappingURL=chunk-EVZQRRM3.mjs.map