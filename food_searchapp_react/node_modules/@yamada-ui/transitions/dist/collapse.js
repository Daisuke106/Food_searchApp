"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/collapse.tsx
var collapse_exports = {};
__export(collapse_exports, {
  Collapse: () => Collapse,
  collapseProps: () => collapseProps
});
module.exports = __toCommonJS(collapse_exports);
var import_core = require("@yamada-ui/core");
var import_motion = require("@yamada-ui/motion");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var isNumeric = (value) => value != null && parseFloat(value.toString()) > 0;
var variants = {
  enter: ({
    animationOpacity,
    endingHeight: height,
    transition,
    transitionEnd,
    delay,
    duration,
    enter
  } = {}) => ({
    ...animationOpacity ? { opacity: 1 } : {},
    height,
    transition: (0, import_motion.transitionEnter)(transition == null ? void 0 : transition.enter)(delay, duration),
    transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
    ...enter
  }),
  exit: ({
    animationOpacity,
    startingHeight: height,
    transition,
    transitionEnd,
    delay,
    duration,
    exit
  } = {}) => ({
    ...animationOpacity ? { opacity: isNumeric(height) ? 1 : 0 } : {},
    height,
    transition: (0, import_motion.transitionExit)(transition == null ? void 0 : transition.exit)(delay, duration),
    transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
    ...exit
  })
};
var collapseProps = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants
};
var Collapse = (0, import_core.forwardRef)(
  ({
    unmountOnExit,
    isOpen,
    animationOpacity = true,
    startingHeight = 0,
    endingHeight = "auto",
    transition,
    transitionEnd,
    delay,
    duration,
    className,
    style,
    __css,
    ...rest
  }, ref) => {
    const [mounted, setMounted] = (0, import_react.useState)(false);
    (0, import_react.useEffect)(() => {
      const isBrowser = (0, import_utils.createdDom)();
      if (isBrowser)
        setMounted(true);
    }, []);
    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    isOpen = unmountOnExit ? isOpen : true;
    transition = !mounted ? { enter: { duration: 0 } } : transition != null ? transition : {
      enter: {
        height: {
          duration: duration != null ? duration : 0.3,
          ease: import_motion.MOTION_TRANSITION_EASINGS.ease
        },
        opacity: {
          duration: duration != null ? duration : 0.4,
          ease: import_motion.MOTION_TRANSITION_EASINGS.ease
        }
      },
      exit: {
        height: {
          duration: duration != null ? duration : 0.3,
          ease: import_motion.MOTION_TRANSITION_EASINGS.ease
        },
        opacity: {
          duration: duration != null ? duration : 0.4,
          ease: import_motion.MOTION_TRANSITION_EASINGS.ease
        }
      }
    };
    transitionEnd = unmountOnExit ? transitionEnd : {
      ...transitionEnd,
      exit: {
        ...transitionEnd == null ? void 0 : transitionEnd.exit,
        display: hasStartingHeight ? "block" : "none"
      }
    };
    const custom = {
      animationOpacity,
      startingHeight,
      endingHeight,
      transition,
      transitionEnd,
      delay,
      duration
    };
    const css = {
      w: "100%",
      ...__css
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_motion.AnimatePresence, { initial: false, custom, children: isOpen ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_motion.Motion,
      {
        ref,
        className: (0, import_utils.cx)("ui-collapse", className),
        ...rest,
        ...collapseProps,
        custom,
        animate,
        initial: unmountOnExit ? "exit" : false,
        __css: css,
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        }
      }
    ) : null });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Collapse,
  collapseProps
});
//# sourceMappingURL=collapse.js.map