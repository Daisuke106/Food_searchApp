"use client"

// src/scale-fade.tsx
import { forwardRef } from "@yamada-ui/core";
import {
  AnimatePresence,
  transitionEnter,
  transitionExit,
  Motion
} from "@yamada-ui/motion";
import { cx } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var variants = {
  enter: ({ transition, transitionEnd, delay, duration, enter } = {}) => ({
    opacity: 1,
    scale: 1,
    transition: transitionEnter(transition == null ? void 0 : transition.enter)(delay, duration),
    transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
    ...enter
  }),
  exit: ({
    scale,
    reverse,
    transition,
    transitionEnd,
    delay,
    duration,
    exit
  } = {}) => ({
    opacity: 0,
    transition: transitionExit(transition == null ? void 0 : transition.exit)(delay, duration),
    ...reverse ? { scale, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { scale, ...transitionEnd == null ? void 0 : transitionEnd.exit } },
    ...exit
  })
};
var scaleFadeProps = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants
};
var ScaleFade = forwardRef(
  ({
    unmountOnExit,
    isOpen,
    scale = 0.95,
    reverse = true,
    transition,
    transitionEnd,
    delay,
    duration,
    className,
    ...rest
  }, ref) => {
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
      scale,
      reverse,
      transition,
      transitionEnd,
      delay,
      duration
    };
    isOpen = unmountOnExit ? isOpen && unmountOnExit : true;
    const css = {
      w: "100%"
    };
    return /* @__PURE__ */ jsx(AnimatePresence, { custom, children: isOpen ? /* @__PURE__ */ jsx(
      Motion,
      {
        ref,
        className: cx("ui-scale-fade", className),
        custom,
        ...scaleFadeProps,
        animate,
        __css: css,
        ...rest
      }
    ) : null });
  }
);

export {
  scaleFadeProps,
  ScaleFade
};
//# sourceMappingURL=chunk-23WDGZU6.mjs.map