"use client"

// src/slide.tsx
import { forwardRef } from "@yamada-ui/core";
import {
  AnimatePresence,
  transitionEnter,
  transitionExit,
  MOTION_TRANSITION_VARIANTS,
  Motion
} from "@yamada-ui/motion";
import { useValue } from "@yamada-ui/use-value";
import { cx } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var getSlideProps = (placement = "right") => {
  switch (placement) {
    case "right":
      return MOTION_TRANSITION_VARIANTS.slideRight;
    case "left":
      return MOTION_TRANSITION_VARIANTS.slideLeft;
    case "bottom":
      return MOTION_TRANSITION_VARIANTS.slideDown;
    case "top":
      return MOTION_TRANSITION_VARIANTS.slideUp;
  }
};
var variants = {
  enter: ({
    placement,
    transition,
    transitionEnd,
    delay,
    duration,
    enter
  } = {}) => ({
    ...getSlideProps(placement).enter,
    transition: transitionEnter(transition == null ? void 0 : transition.enter)(delay, duration),
    transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
    ...enter
  }),
  exit: ({
    placement,
    transition,
    transitionEnd,
    delay,
    duration,
    exit
  } = {}) => ({
    ...getSlideProps(placement).exit,
    transition: transitionExit(transition == null ? void 0 : transition.exit)(delay, duration),
    transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
    ...exit
  })
};
var slideProps = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants
};
var Slide = forwardRef(
  ({
    unmountOnExit,
    isOpen,
    placement: _placement = "right",
    transition,
    transitionEnd,
    delay,
    duration = { enter: 0.4, exit: 0.3 },
    className,
    __css,
    ...rest
  }, ref) => {
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const placement = useValue(_placement);
    const custom = { placement, transition, transitionEnd, delay, duration };
    isOpen = unmountOnExit ? isOpen && unmountOnExit : true;
    const { position } = getSlideProps(placement);
    const css = {
      position: "fixed",
      zIndex: "fallback(jeice, 110)",
      ...__css,
      ...position
    };
    return /* @__PURE__ */ jsx(AnimatePresence, { custom, children: isOpen ? /* @__PURE__ */ jsx(
      Motion,
      {
        ref,
        className: cx("ui-slide", className),
        custom,
        ...slideProps,
        animate,
        __css: css,
        ...rest
      }
    ) : null });
  }
);

export {
  getSlideProps,
  slideProps,
  Slide
};
//# sourceMappingURL=chunk-JRKTI7XA.mjs.map