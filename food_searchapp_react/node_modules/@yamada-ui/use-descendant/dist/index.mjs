"use client"

// src/index.ts
import {
  cast,
  createContext,
  isElement,
  mergeRefs,
  useSafeLayoutEffect
} from "@yamada-ui/utils";
import { useRef, useState } from "react";
var sortNodes = (nodes) => nodes.sort((a, b) => {
  const compare = a.compareDocumentPosition(b);
  if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY)
    return -1;
  if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS)
    return 1;
  if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
    throw Error("Cannot sort the given nodes.");
  } else {
    return 0;
  }
});
var getNextIndex = (current, max, loop) => {
  let next = current + 1;
  if (loop && next >= max)
    next = 0;
  return next;
};
var getPrevIndex = (current, max, loop) => {
  let next = current - 1;
  if (loop && next < 0)
    next = max;
  return next;
};
var descendantsManager = () => {
  const descendants = /* @__PURE__ */ new Map();
  const assignIndex = (newDescendants) => {
    descendants.forEach((descendant) => {
      const index = newDescendants.indexOf(descendant.node);
      descendant.index = index;
      descendant.node.dataset.index = descendant.index.toString();
    });
  };
  const setDescendants = (node, options) => {
    if (!node || descendants.has(node))
      return;
    const keys = Array.from(descendants.keys()).concat(node);
    const sorted = sortNodes(keys);
    if (options == null ? void 0 : options.disabled)
      options.disabled = !!options.disabled;
    const descendant = { node, index: -1, ...options };
    descendants.set(node, descendant);
    assignIndex(sorted);
  };
  const register = (nodeOrOptions) => {
    if (nodeOrOptions == null)
      return;
    if (isElement(nodeOrOptions))
      return setDescendants(nodeOrOptions);
    return (node) => setDescendants(node, nodeOrOptions);
  };
  const unregister = (node) => {
    descendants.delete(node);
    const sorted = sortNodes(Array.from(descendants.keys()));
    assignIndex(sorted);
  };
  const destroy = () => descendants.clear();
  const count = (filter) => values(filter).length;
  const enabledCount = (filter) => enabledValues(filter).length;
  const indexOf = (node) => {
    var _a, _b;
    return !node ? -1 : (_b = (_a = descendants.get(node)) == null ? void 0 : _a.index) != null ? _b : -1;
  };
  const enabledIndexOf = (node, filter) => node == null ? -1 : enabledValues(filter).findIndex((i) => i.node.isSameNode(node));
  const values = (filter) => {
    const values2 = Array.from(descendants.values());
    if (filter) {
      return values2.filter(filter).sort((a, b) => a.index - b.index);
    } else {
      return values2.sort((a, b) => a.index - b.index);
    }
  };
  const enabledValues = (filter) => values(filter).filter(({ disabled }) => !disabled);
  const value = (index, filter) => {
    if (count(filter) === 0)
      return void 0;
    return values(filter)[index];
  };
  const enabledValue = (index, filter) => {
    if (enabledCount(filter) === 0)
      return void 0;
    return enabledValues(filter)[index];
  };
  const firstValue = (filter) => value(0, filter);
  const enabledFirstValue = (filter) => enabledValue(0, filter);
  const lastValue = (filter) => value(descendants.size - 1, filter);
  const enabledLastValue = (filter) => enabledValue(enabledValues(filter).length - 1, filter);
  const prevValue = (index, filter, loop = true) => {
    const prev = getPrevIndex(index, count(filter) - 1, loop);
    return value(prev, filter);
  };
  const enabledPrevValue = (index, filter, loop = true) => {
    const target = value(index);
    if (!target)
      return;
    const enabledIndex = enabledIndexOf(target.node, filter);
    const prevEnabledIndex = getPrevIndex(
      enabledIndex,
      enabledCount(filter) - 1,
      loop
    );
    return enabledValue(prevEnabledIndex, filter);
  };
  const nextValue = (index, filter, loop = true) => {
    const next = getNextIndex(index, count(filter), loop);
    return value(next, filter);
  };
  const enabledNextValue = (index, filter, loop = true) => {
    const target = value(index);
    if (!target)
      return;
    const enabledIndex = enabledIndexOf(target.node, filter);
    const nextEnabledIndex = getNextIndex(
      enabledIndex,
      enabledCount(filter),
      loop
    );
    return enabledValue(nextEnabledIndex, filter);
  };
  return {
    register,
    unregister,
    destroy,
    count,
    values,
    value,
    indexOf,
    firstValue,
    lastValue,
    prevValue,
    nextValue,
    enabledCount,
    enabledValues,
    enabledValue,
    enabledIndexOf,
    enabledFirstValue,
    enabledLastValue,
    enabledPrevValue,
    enabledNextValue
  };
};
var useDescendants = () => {
  const descendants = useRef(descendantsManager());
  useSafeLayoutEffect(() => {
    return () => descendants.current.destroy();
  });
  return descendants.current;
};
var [DescendantsContextProvider, useDescendantsContext] = createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsContextProvider"
});
var useDescendant = (options) => {
  const descendants = useDescendantsContext();
  const [index, setIndex] = useState(-1);
  const ref = useRef(null);
  useSafeLayoutEffect(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect(() => {
    if (!ref.current)
      return;
    const dataIndex = Number(ref.current.dataset.index);
    if (index != dataIndex && !Number.isNaN(dataIndex))
      setIndex(dataIndex);
  });
  const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);
  return {
    descendants,
    index,
    enabledIndex: descendants.enabledIndexOf(
      ref.current,
      options == null ? void 0 : options.filter
    ),
    register: mergeRefs(refCallback, ref)
  };
};
var createDescendant = () => ({
  DescendantsContextProvider: cast(
    DescendantsContextProvider
  ),
  useDescendantsContext: () => cast(useDescendantsContext()),
  useDescendants: () => useDescendants(),
  useDescendant: (options) => useDescendant(options)
});
export {
  createDescendant
};
//# sourceMappingURL=index.mjs.map