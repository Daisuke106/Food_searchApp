import { Provider } from 'react';

type DescendantOptions<T extends HTMLElement = HTMLElement, K = {}> = K & {
    disabled?: boolean;
    id?: string;
    filter?: FilterDescendant<T, K>;
};
type Descendant<T extends HTMLElement = HTMLElement, K = {}> = DescendantOptions<T, K> & {
    node: T;
    index: number;
};
type FilterDescendant<T extends HTMLElement = HTMLElement, K = {}> = (value: Descendant<T, K>, index: number, array: Descendant<T, K>[]) => boolean;
declare const descendantsManager: <T extends HTMLElement = HTMLElement, K = {}>() => {
    register: (nodeOrOptions: T | null | DescendantOptions<T, K>) => void | ((node: T | null) => void);
    unregister: (node: T) => void;
    destroy: () => void;
    count: (filter?: FilterDescendant<T, K>) => number;
    values: (filter?: FilterDescendant<T, K>) => Descendant<T, K>[];
    value: (index: number, filter?: FilterDescendant<T, K>) => Descendant<T, K> | undefined;
    indexOf: (node: T | null) => number;
    firstValue: (filter?: FilterDescendant<T, K>) => Descendant<T, K> | undefined;
    lastValue: (filter?: FilterDescendant<T, K>) => Descendant<T, K> | undefined;
    prevValue: (index: number, filter?: FilterDescendant<T, K>, loop?: boolean) => Descendant<T, K> | undefined;
    nextValue: (index: number, filter?: FilterDescendant<T, K>, loop?: boolean) => Descendant<T, K> | undefined;
    enabledCount: (filter?: FilterDescendant<T, K>) => number;
    enabledValues: (filter?: FilterDescendant<T, K>) => Descendant<T, K>[];
    enabledValue: (index: number, filter?: FilterDescendant<T, K>) => Descendant<T, K> | undefined;
    enabledIndexOf: (node: T | null, filter?: FilterDescendant<T, K>) => number;
    enabledFirstValue: (filter?: FilterDescendant<T, K>) => Descendant<T, K> | undefined;
    enabledLastValue: (filter?: FilterDescendant<T, K>) => Descendant<T, K> | undefined;
    enabledPrevValue: (index: number, filter?: FilterDescendant<T, K>, loop?: boolean) => Descendant<T, K> | undefined;
    enabledNextValue: (index: number, filter?: FilterDescendant<T, K>, loop?: boolean) => Descendant<T, K> | undefined;
};
type DescendantsManager<T extends HTMLElement, K extends Record<string, any> = {}> = ReturnType<typeof descendantsManager<T, K>>;
declare const createDescendant: <T extends HTMLElement = HTMLElement, K extends Record<string, any> = {}>() => {
    readonly DescendantsContextProvider: Provider<{
        register: (nodeOrOptions: T | DescendantOptions<T, K> | null) => void | ((node: T | null) => void);
        unregister: (node: T) => void;
        destroy: () => void;
        count: (filter?: FilterDescendant<T, K> | undefined) => number;
        values: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K>[];
        value: (index: number, filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        indexOf: (node: T | null) => number;
        firstValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        lastValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        prevValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        nextValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        enabledCount: (filter?: FilterDescendant<T, K> | undefined) => number;
        enabledValues: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K>[];
        enabledValue: (index: number, filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledIndexOf: (node: T | null, filter?: FilterDescendant<T, K> | undefined) => number;
        enabledFirstValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledLastValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledPrevValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        enabledNextValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
    }>;
    readonly useDescendantsContext: () => {
        register: (nodeOrOptions: T | DescendantOptions<T, K> | null) => void | ((node: T | null) => void);
        unregister: (node: T) => void;
        destroy: () => void;
        count: (filter?: FilterDescendant<T, K> | undefined) => number;
        values: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K>[];
        value: (index: number, filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        indexOf: (node: T | null) => number;
        firstValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        lastValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        prevValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        nextValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        enabledCount: (filter?: FilterDescendant<T, K> | undefined) => number;
        enabledValues: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K>[];
        enabledValue: (index: number, filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledIndexOf: (node: T | null, filter?: FilterDescendant<T, K> | undefined) => number;
        enabledFirstValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledLastValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledPrevValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        enabledNextValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
    };
    readonly useDescendants: () => {
        register: (nodeOrOptions: T | DescendantOptions<T, K> | null) => void | ((node: T | null) => void);
        unregister: (node: T) => void;
        destroy: () => void;
        count: (filter?: FilterDescendant<T, K> | undefined) => number;
        values: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K>[];
        value: (index: number, filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        indexOf: (node: T | null) => number;
        firstValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        lastValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        prevValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        nextValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        enabledCount: (filter?: FilterDescendant<T, K> | undefined) => number;
        enabledValues: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K>[];
        enabledValue: (index: number, filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledIndexOf: (node: T | null, filter?: FilterDescendant<T, K> | undefined) => number;
        enabledFirstValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledLastValue: (filter?: FilterDescendant<T, K> | undefined) => Descendant<T, K> | undefined;
        enabledPrevValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
        enabledNextValue: (index: number, filter?: FilterDescendant<T, K> | undefined, loop?: boolean) => Descendant<T, K> | undefined;
    };
    readonly useDescendant: (options?: DescendantOptions<T, K>) => {
        descendants: {
            register: (nodeOrOptions: HTMLElement | DescendantOptions<HTMLElement, Record<string, any>> | null) => void | ((node: HTMLElement | null) => void);
            unregister: (node: HTMLElement) => void;
            destroy: () => void;
            count: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
            values: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>>[];
            value: (index: number, filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>> | undefined;
            indexOf: (node: HTMLElement | null) => number;
            firstValue: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>> | undefined;
            lastValue: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>> | undefined;
            prevValue: (index: number, filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => Descendant<HTMLElement, Record<string, any>> | undefined;
            nextValue: (index: number, filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => Descendant<HTMLElement, Record<string, any>> | undefined;
            enabledCount: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
            enabledValues: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>>[];
            enabledValue: (index: number, filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>> | undefined;
            enabledIndexOf: (node: HTMLElement | null, filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
            enabledFirstValue: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>> | undefined;
            enabledLastValue: (filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined) => Descendant<HTMLElement, Record<string, any>> | undefined;
            enabledPrevValue: (index: number, filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => Descendant<HTMLElement, Record<string, any>> | undefined;
            enabledNextValue: (index: number, filter?: FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => Descendant<HTMLElement, Record<string, any>> | undefined;
        };
        index: number;
        enabledIndex: number;
        register: (node: T | null) => void;
    };
};

export { type Descendant, type DescendantOptions, type DescendantsManager, type FilterDescendant, createDescendant };
