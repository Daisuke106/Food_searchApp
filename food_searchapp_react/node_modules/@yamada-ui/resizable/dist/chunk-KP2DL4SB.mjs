"use client"

// src/use-resizable.ts
import { createContext, dataAttr, handlerAll } from "@yamada-ui/utils";
import { useCallback, useEffect, useId, useState } from "react";
import {
  getPanelElement,
  getPanelGroupElement,
  getResizeHandleElement
} from "react-resizable-panels";
var [ResizableProvider, useResizableContext] = createContext({
  name: "ResizableContext",
  errorMessage: `useResizableContext returned is 'undefined'. Seems you forgot to wrap the components in "<Resizable />"`
});
var useResizable = ({
  id,
  direction = "horizontal",
  storageKey,
  keyboardStep,
  isDisabled = false,
  onLayout,
  storage,
  ref,
  groupProps,
  ...rest
}) => {
  id != null ? id : id = useId();
  const getContainerProps = useCallback(
    (props = {}, ref2 = null) => ({ ...props, ref: ref2, ...rest }),
    [rest]
  );
  const getGroupProps = useCallback(
    (props = {}) => {
      const { as, ...rest2 } = groupProps != null ? groupProps : {};
      return {
        ...props,
        id,
        direction,
        tagName: as,
        autoSaveId: storageKey,
        keyboardResizeBy: keyboardStep,
        onLayout,
        storage,
        ...rest2
      };
    },
    [id, direction, groupProps, storageKey, keyboardStep, onLayout, storage]
  );
  useEffect(() => {
    if (!id)
      return;
    const el = getPanelGroupElement(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    isDisabled,
    getContainerProps,
    getGroupProps
  };
};
var useResizableItem = ({
  id,
  ref,
  collapsedSize,
  collapsible,
  defaultSize,
  maxSize,
  minSize,
  onCollapse,
  onExpand,
  onResize,
  order,
  controlRef,
  containerProps,
  ...innerProps
}) => {
  id != null ? id : id = useId();
  const getPanelProps = useCallback(
    (props = {}) => {
      const { as, ...rest } = containerProps != null ? containerProps : {};
      return {
        ...props,
        ref: controlRef,
        id,
        tagName: as,
        collapsible,
        defaultSize,
        maxSize,
        minSize,
        collapsedSize,
        onCollapse,
        onExpand,
        onResize,
        order,
        ...rest
      };
    },
    [
      id,
      controlRef,
      containerProps,
      collapsedSize,
      collapsible,
      defaultSize,
      maxSize,
      minSize,
      onCollapse,
      onExpand,
      onResize,
      order
    ]
  );
  const getItemProps = useCallback(
    (props = {}, ref2 = null) => ({ ...props, ref: ref2, ...innerProps }),
    [innerProps]
  );
  useEffect(() => {
    if (!id)
      return;
    const el = getPanelElement(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    getPanelProps,
    getItemProps
  };
};
var useResizableTrigger = ({
  id,
  ref,
  as,
  disabled,
  isDisabled,
  onDragging,
  ...rest
}) => {
  id != null ? id : id = useId();
  const { isDisabled: isGroupDisabled } = useResizableContext();
  const [isActive, setIsActive] = useState(false);
  const trulyDisabled = disabled || isDisabled || isGroupDisabled;
  const getTriggerProps = useCallback(
    (props = {}) => ({
      ...props,
      id,
      tagName: as,
      disabled: trulyDisabled,
      onDragging: handlerAll(onDragging, (isActive2) => setIsActive(isActive2)),
      ...rest,
      "data-active": dataAttr(isActive),
      style: {
        ...props.style,
        ...rest.style,
        ...trulyDisabled ? { cursor: "default" } : {}
      }
    }),
    [id, as, trulyDisabled, onDragging, rest, isActive]
  );
  const getIconProps = useCallback(
    (props = {}, ref2 = null) => ({
      ...props,
      ref: ref2,
      "data-active": dataAttr(isActive)
    }),
    [isActive]
  );
  useEffect(() => {
    if (!id)
      return;
    const el = getResizeHandleElement(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    getTriggerProps,
    getIconProps
  };
};

export {
  ResizableProvider,
  useResizableContext,
  useResizable,
  useResizableItem,
  useResizableTrigger
};
//# sourceMappingURL=chunk-KP2DL4SB.mjs.map