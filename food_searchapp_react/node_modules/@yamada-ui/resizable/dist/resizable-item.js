"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/resizable-item.tsx
var resizable_item_exports = {};
__export(resizable_item_exports, {
  ResizableItem: () => ResizableItem
});
module.exports = __toCommonJS(resizable_item_exports);
var import_core = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");
var import_react_resizable_panels2 = require("react-resizable-panels");

// src/use-resizable.ts
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_react_resizable_panels = require("react-resizable-panels");
var [ResizableProvider, useResizableContext] = (0, import_utils.createContext)({
  name: "ResizableContext",
  errorMessage: `useResizableContext returned is 'undefined'. Seems you forgot to wrap the components in "<Resizable />"`
});
var useResizableItem = ({
  id,
  ref,
  collapsedSize,
  collapsible,
  defaultSize,
  maxSize,
  minSize,
  onCollapse,
  onExpand,
  onResize,
  order,
  controlRef,
  containerProps,
  ...innerProps
}) => {
  id != null ? id : id = (0, import_react.useId)();
  const getPanelProps = (0, import_react.useCallback)(
    (props = {}) => {
      const { as, ...rest } = containerProps != null ? containerProps : {};
      return {
        ...props,
        ref: controlRef,
        id,
        tagName: as,
        collapsible,
        defaultSize,
        maxSize,
        minSize,
        collapsedSize,
        onCollapse,
        onExpand,
        onResize,
        order,
        ...rest
      };
    },
    [
      id,
      controlRef,
      containerProps,
      collapsedSize,
      collapsible,
      defaultSize,
      maxSize,
      minSize,
      onCollapse,
      onExpand,
      onResize,
      order
    ]
  );
  const getItemProps = (0, import_react.useCallback)(
    (props = {}, ref2 = null) => ({ ...props, ref: ref2, ...innerProps }),
    [innerProps]
  );
  (0, import_react.useEffect)(() => {
    if (!id)
      return;
    const el = (0, import_react_resizable_panels.getPanelElement)(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    getPanelProps,
    getItemProps
  };
};

// src/resizable-item.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var panelProps = /* @__PURE__ */ new Set(["order"]);
var UIPanel = (0, import_core.ui)(import_react_resizable_panels2.Panel, { disableStyleProp: (prop) => panelProps.has(prop) });
var ResizableItem = (0, import_core.forwardRef)(
  ({
    className,
    children,
    innerRef,
    w,
    width,
    minW,
    minWidth,
    maxW,
    maxWidth,
    h,
    height,
    minH,
    minHeight,
    maxH,
    maxHeight,
    boxSize,
    ...rest
  }, ref) => {
    const { styles } = useResizableContext();
    const { getPanelProps, getItemProps } = useResizableItem({
      ref,
      ...rest
    });
    const css = { boxSize: "100%", ...styles.item };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      UIPanel,
      {
        ...getPanelProps({
          w,
          width,
          minW,
          minWidth,
          maxW,
          maxWidth,
          h,
          height,
          minH,
          minHeight,
          maxH,
          maxHeight,
          boxSize
        }),
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_core.ui.div,
          {
            className: (0, import_utils2.cx)("ui-resizable__item", className),
            __css: css,
            ...getItemProps({}, innerRef),
            children
          }
        )
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ResizableItem
});
//# sourceMappingURL=resizable-item.js.map