"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Resizable: () => Resizable,
  ResizableItem: () => ResizableItem,
  ResizableTrigger: () => ResizableTrigger,
  ResizableTriggerIcon: () => ResizableTriggerIcon
});
module.exports = __toCommonJS(src_exports);

// src/resizable.tsx
var import_core = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");
var import_react_resizable_panels2 = require("react-resizable-panels");

// src/use-resizable.ts
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_react_resizable_panels = require("react-resizable-panels");
var [ResizableProvider, useResizableContext] = (0, import_utils.createContext)({
  name: "ResizableContext",
  errorMessage: `useResizableContext returned is 'undefined'. Seems you forgot to wrap the components in "<Resizable />"`
});
var useResizable = ({
  id,
  direction = "horizontal",
  storageKey,
  keyboardStep,
  isDisabled = false,
  onLayout,
  storage,
  ref,
  groupProps,
  ...rest
}) => {
  id != null ? id : id = (0, import_react.useId)();
  const getContainerProps = (0, import_react.useCallback)(
    (props = {}, ref2 = null) => ({ ...props, ref: ref2, ...rest }),
    [rest]
  );
  const getGroupProps = (0, import_react.useCallback)(
    (props = {}) => {
      const { as, ...rest2 } = groupProps != null ? groupProps : {};
      return {
        ...props,
        id,
        direction,
        tagName: as,
        autoSaveId: storageKey,
        keyboardResizeBy: keyboardStep,
        onLayout,
        storage,
        ...rest2
      };
    },
    [id, direction, groupProps, storageKey, keyboardStep, onLayout, storage]
  );
  (0, import_react.useEffect)(() => {
    if (!id)
      return;
    const el = (0, import_react_resizable_panels.getPanelGroupElement)(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    isDisabled,
    getContainerProps,
    getGroupProps
  };
};
var useResizableItem = ({
  id,
  ref,
  collapsedSize,
  collapsible,
  defaultSize,
  maxSize,
  minSize,
  onCollapse,
  onExpand,
  onResize,
  order,
  controlRef,
  containerProps,
  ...innerProps
}) => {
  id != null ? id : id = (0, import_react.useId)();
  const getPanelProps = (0, import_react.useCallback)(
    (props = {}) => {
      const { as, ...rest } = containerProps != null ? containerProps : {};
      return {
        ...props,
        ref: controlRef,
        id,
        tagName: as,
        collapsible,
        defaultSize,
        maxSize,
        minSize,
        collapsedSize,
        onCollapse,
        onExpand,
        onResize,
        order,
        ...rest
      };
    },
    [
      id,
      controlRef,
      containerProps,
      collapsedSize,
      collapsible,
      defaultSize,
      maxSize,
      minSize,
      onCollapse,
      onExpand,
      onResize,
      order
    ]
  );
  const getItemProps = (0, import_react.useCallback)(
    (props = {}, ref2 = null) => ({ ...props, ref: ref2, ...innerProps }),
    [innerProps]
  );
  (0, import_react.useEffect)(() => {
    if (!id)
      return;
    const el = (0, import_react_resizable_panels.getPanelElement)(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    getPanelProps,
    getItemProps
  };
};
var useResizableTrigger = ({
  id,
  ref,
  as,
  disabled,
  isDisabled,
  onDragging,
  ...rest
}) => {
  id != null ? id : id = (0, import_react.useId)();
  const { isDisabled: isGroupDisabled } = useResizableContext();
  const [isActive, setIsActive] = (0, import_react.useState)(false);
  const trulyDisabled = disabled || isDisabled || isGroupDisabled;
  const getTriggerProps = (0, import_react.useCallback)(
    (props = {}) => ({
      ...props,
      id,
      tagName: as,
      disabled: trulyDisabled,
      onDragging: (0, import_utils.handlerAll)(onDragging, (isActive2) => setIsActive(isActive2)),
      ...rest,
      "data-active": (0, import_utils.dataAttr)(isActive),
      style: {
        ...props.style,
        ...rest.style,
        ...trulyDisabled ? { cursor: "default" } : {}
      }
    }),
    [id, as, trulyDisabled, onDragging, rest, isActive]
  );
  const getIconProps = (0, import_react.useCallback)(
    (props = {}, ref2 = null) => ({
      ...props,
      ref: ref2,
      "data-active": (0, import_utils.dataAttr)(isActive)
    }),
    [isActive]
  );
  (0, import_react.useEffect)(() => {
    if (!id)
      return;
    const el = (0, import_react_resizable_panels.getResizeHandleElement)(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    getTriggerProps,
    getIconProps
  };
};

// src/resizable.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Resizable = (0, import_core.forwardRef)(
  ({ direction = "horizontal", ...props }, ref) => {
    const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Resizable", {
      direction,
      ...props
    });
    const { className, children, containerRef, ...computedProps } = (0, import_core.omitThemeProps)(mergedProps);
    const { getContainerProps, getGroupProps, ...rest } = useResizable({
      ref,
      ...computedProps
    });
    const css = { w: "100%", h: "100%", ...styles.container };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ResizableProvider, { value: { styles, ...rest }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils2.cx)("ui-resizable", className),
        __css: css,
        ...getContainerProps({}, containerRef),
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_resizable_panels2.PanelGroup, { ...getGroupProps(), children })
      }
    ) });
  }
);

// src/resizable-item.tsx
var import_core2 = require("@yamada-ui/core");
var import_utils3 = require("@yamada-ui/utils");
var import_react_resizable_panels3 = require("react-resizable-panels");
var import_jsx_runtime2 = require("react/jsx-runtime");
var panelProps = /* @__PURE__ */ new Set(["order"]);
var UIPanel = (0, import_core2.ui)(import_react_resizable_panels3.Panel, { disableStyleProp: (prop) => panelProps.has(prop) });
var ResizableItem = (0, import_core2.forwardRef)(
  ({
    className,
    children,
    innerRef,
    w,
    width,
    minW,
    minWidth,
    maxW,
    maxWidth,
    h,
    height,
    minH,
    minHeight,
    maxH,
    maxHeight,
    boxSize,
    ...rest
  }, ref) => {
    const { styles } = useResizableContext();
    const { getPanelProps, getItemProps } = useResizableItem({
      ref,
      ...rest
    });
    const css = { boxSize: "100%", ...styles.item };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      UIPanel,
      {
        ...getPanelProps({
          w,
          width,
          minW,
          minWidth,
          maxW,
          maxWidth,
          h,
          height,
          minH,
          minHeight,
          maxH,
          maxHeight,
          boxSize
        }),
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_core2.ui.div,
          {
            className: (0, import_utils3.cx)("ui-resizable__item", className),
            __css: css,
            ...getItemProps({}, innerRef),
            children
          }
        )
      }
    );
  }
);

// src/resizable-trigger.tsx
var import_core3 = require("@yamada-ui/core");
var import_icon = require("@yamada-ui/icon");
var import_utils4 = require("@yamada-ui/utils");
var import_react_resizable_panels4 = require("react-resizable-panels");
var import_jsx_runtime3 = require("react/jsx-runtime");
var ResizableTrigger = (0, import_core3.forwardRef)(
  ({ className, icon, children, iconProps, ...rest }, ref) => {
    const { styles } = useResizableContext();
    const { getTriggerProps, getIconProps } = useResizableTrigger({
      ref,
      ...rest
    });
    const css = { position: "relative", ...styles.trigger };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
      import_core3.ui.div,
      {
        as: import_react_resizable_panels4.PanelResizeHandle,
        className: (0, import_utils4.cx)("ui-resizable__trigger", className),
        __css: css,
        ...getTriggerProps(),
        children: [
          icon ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_core3.ui.div,
            {
              className: "ui-resizable__trigger__icon",
              __css: {
                position: "absolute",
                top: "50%",
                left: "50%",
                transform: "auto",
                translateY: "-50%",
                translateX: "-50%",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                ...styles.icon
              },
              ...getIconProps(iconProps),
              children: icon
            }
          ) : null,
          children
        ]
      }
    );
  }
);
var ResizableTriggerIcon = (rest) => {
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_icon.Icon, { viewBox: "0 0 23 39", w: "0.5rem", h: "1rem", ...rest, children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "path",
      {
        d: "M 5 0 C 7.761 0 10 2.239 10 5 C 10 7.761 7.761 10 5 10 C 2.239 10 0 7.761 0 5 C 0 2.239 2.239 0 5 0 Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "path",
      {
        d: "M 19 0 C 21.761 0 24 2.239 24 5 C 24 7.761 21.761 10 19 10 C 16.239 10 14 7.761 14 5 C 14 2.239 16.239 0 19 0 Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "path",
      {
        d: "M 19 14 C 21.761 14 24 16.239 24 19 C 24 21.761 21.761 24 19 24 C 16.239 24 14 21.761 14 19 C 14 16.239 16.239 14 19 14 Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "path",
      {
        d: "M 5 14 C 7.761 14 10 16.239 10 19 C 10 21.761 7.761 24 5 24 C 2.239 24 0 21.761 0 19 C 0 16.239 2.239 14 5 14 Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "path",
      {
        d: "M 5 28 C 7.761 28 10 30.239 10 33 C 10 35.761 7.761 38 5 38 C 2.239 38 0 35.761 0 33 C 0 30.239 2.239 28 5 28 Z",
        fill: "currentColor"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "path",
      {
        d: "M 19 28 C 21.761 28 24 30.239 24 33 C 24 35.761 21.761 38 19 38 C 16.239 38 14 35.761 14 33 C 14 30.239 16.239 28 19 28 Z",
        fill: "currentColor"
      }
    )
  ] });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Resizable,
  ResizableItem,
  ResizableTrigger,
  ResizableTriggerIcon
});
//# sourceMappingURL=index.js.map