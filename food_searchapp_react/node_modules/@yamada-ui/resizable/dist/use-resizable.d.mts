import * as react from 'react';
import { ForwardedRef, RefObject } from 'react';
import { HTMLUIProps, UIPropGetter, CSSUIObject } from '@yamada-ui/core';
import { PropGetter } from '@yamada-ui/utils';
import { PanelGroupStorage, ImperativePanelHandle, PanelGroupOnLayout, PanelGroupProps, PanelProps, PanelResizeHandleProps } from 'react-resizable-panels';

type GroupPropGetter = (props?: Partial<PanelGroupProps>) => PanelGroupProps;
type ItemPropGetter = (props?: HTMLUIProps<"div"> & PanelProps) => PanelProps;
type TriggerPropGetter = (props?: PanelResizeHandleProps) => PanelResizeHandleProps;
type As = {
    as?: keyof HTMLElementTagNameMap;
};
type ResizableGroupProps = Omit<Partial<PanelGroupProps>, "id" | "tagName" | "children"> & As;
type ResizableItemProps = Omit<PanelProps, "id" | "tagName" | "children"> & As;
type ResizableTriggerProps = Omit<PanelResizeHandleProps, "id" | "tagName" | "children"> & As;
type ResizableStorage = PanelGroupStorage;
type ResizableItemControl = ImperativePanelHandle;
type ResizableContext = {
    isDisabled: boolean;
    styles: Record<string, CSSUIObject>;
};
declare const ResizableProvider: react.Provider<ResizableContext>;
declare const useResizableContext: () => ResizableContext;
type UseResizableProps = {
    /**
     * id assigned to resizable element.
     */
    id?: string;
    /**
     * Ref for resizable element.
     */
    ref?: ForwardedRef<HTMLElement>;
    /**
     * The direction of the resizable.
     *
     * @default "horizontal"
     */
    direction?: "horizontal" | "vertical";
    /**
     * If `true`, the resizable trigger will be disabled.
     */
    isDisabled?: boolean;
    /**
     * Unit to resize by keyboard operation.
     *
     * @default 10
     */
    keyboardStep?: number;
    /**
     * Key of value saved in storage.
     * By default, it is saved to `local storage`.
     */
    storageKey?: string;
    /**
     * A callback that gets and sets a value in custom storage.
     */
    storage?: PanelGroupStorage;
    /**
     * The callback invoked when resizable items are resized.
     */
    onLayout?: PanelGroupOnLayout;
    /**
     * Props for resizable component.
     */
    groupProps?: ResizableGroupProps;
};
declare const useResizable: ({ id, direction, storageKey, keyboardStep, isDisabled, onLayout, storage, ref, groupProps, ...rest }: UseResizableProps) => {
    isDisabled: boolean;
    getContainerProps: PropGetter;
    getGroupProps: GroupPropGetter;
};
type UseResizableReturn = ReturnType<typeof useResizable>;
type UseResizableItemOptions = {
    /**
     * id assigned to resizable item element.
     */
    id?: string;
    /**
     * Ref for resizable item element.
     */
    ref?: ForwardedRef<HTMLElement>;
    /**
     * If `true`, the resizable item can be collapsed.
     *
     * @default false
     */
    collapsible?: boolean;
    /**
     * The collapsed size of the resizable item.
     */
    collapsedSize?: number;
    /**
     * The initial size of the resizable item.
     */
    defaultSize?: number;
    /**
     * The minimum allowed value of the resizable item.
     */
    minSize?: number;
    /**
     * The maximum allowed value of the resizable item.
     */
    maxSize?: number;
    /**
     * The callback invoked when resizable item are collapsed.
     */
    onCollapse?: () => void;
    /**
     * The callback invoked when resizable item are expanded.
     */
    onExpand?: () => void;
    /**
     * The callback invoked when resizable item are resized.
     */
    onResize?: (size: number, prevSize: number | undefined) => void;
    /**
     * Order for the resizable item.
     */
    order?: number;
    /**
     * Ref of the resizable item callback.
     */
    controlRef?: RefObject<ResizableItemControl>;
    /**
     * Props for resizable item container element.
     */
    containerProps?: Omit<HTMLUIProps<"div">, "as"> & ResizableItemProps;
};
type UseResizableItemProps = Omit<HTMLUIProps<"div">, keyof UseResizableItemOptions> & UseResizableItemOptions;
declare const useResizableItem: ({ id, ref, collapsedSize, collapsible, defaultSize, maxSize, minSize, onCollapse, onExpand, onResize, order, controlRef, containerProps, ...innerProps }: UseResizableItemProps) => {
    getPanelProps: ItemPropGetter;
    getItemProps: UIPropGetter;
};
type UseResizableItemReturn = ReturnType<typeof useResizableItem>;
type UseResizableTriggerOptions = {
    /**
     * id assigned to resizable trigger element.
     */
    id?: string;
    /**
     * Ref for resizable trigger element.
     */
    ref?: ForwardedRef<HTMLElement>;
    /**
     * If `true`, the resizable trigger will be disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * The callback invoked when resizable trigger are dragged.
     */
    onDragging?: (isDragging: boolean) => void;
};
type UseResizableTriggerProps = HTMLUIProps<"div"> & ResizableTriggerProps & UseResizableTriggerOptions;
declare const useResizableTrigger: ({ id, ref, as, disabled, isDisabled, onDragging, ...rest }: UseResizableTriggerProps) => {
    getTriggerProps: TriggerPropGetter;
    getIconProps: UIPropGetter;
};
type UseResizableTriggerReturn = ReturnType<typeof useResizableTrigger>;

export { type ResizableItemControl, ResizableProvider, type ResizableStorage, type UseResizableItemProps, type UseResizableItemReturn, type UseResizableProps, type UseResizableReturn, type UseResizableTriggerProps, type UseResizableTriggerReturn, useResizable, useResizableContext, useResizableItem, useResizableTrigger };
