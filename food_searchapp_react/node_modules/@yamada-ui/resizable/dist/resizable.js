"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/resizable.tsx
var resizable_exports = {};
__export(resizable_exports, {
  Resizable: () => Resizable
});
module.exports = __toCommonJS(resizable_exports);
var import_core = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");
var import_react_resizable_panels2 = require("react-resizable-panels");

// src/use-resizable.ts
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_react_resizable_panels = require("react-resizable-panels");
var [ResizableProvider, useResizableContext] = (0, import_utils.createContext)({
  name: "ResizableContext",
  errorMessage: `useResizableContext returned is 'undefined'. Seems you forgot to wrap the components in "<Resizable />"`
});
var useResizable = ({
  id,
  direction = "horizontal",
  storageKey,
  keyboardStep,
  isDisabled = false,
  onLayout,
  storage,
  ref,
  groupProps,
  ...rest
}) => {
  id != null ? id : id = (0, import_react.useId)();
  const getContainerProps = (0, import_react.useCallback)(
    (props = {}, ref2 = null) => ({ ...props, ref: ref2, ...rest }),
    [rest]
  );
  const getGroupProps = (0, import_react.useCallback)(
    (props = {}) => {
      const { as, ...rest2 } = groupProps != null ? groupProps : {};
      return {
        ...props,
        id,
        direction,
        tagName: as,
        autoSaveId: storageKey,
        keyboardResizeBy: keyboardStep,
        onLayout,
        storage,
        ...rest2
      };
    },
    [id, direction, groupProps, storageKey, keyboardStep, onLayout, storage]
  );
  (0, import_react.useEffect)(() => {
    if (!id)
      return;
    const el = (0, import_react_resizable_panels.getPanelGroupElement)(id);
    if (ref)
      ref.current = el;
  }, [ref, id]);
  return {
    isDisabled,
    getContainerProps,
    getGroupProps
  };
};

// src/resizable.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Resizable = (0, import_core.forwardRef)(
  ({ direction = "horizontal", ...props }, ref) => {
    const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Resizable", {
      direction,
      ...props
    });
    const { className, children, containerRef, ...computedProps } = (0, import_core.omitThemeProps)(mergedProps);
    const { getContainerProps, getGroupProps, ...rest } = useResizable({
      ref,
      ...computedProps
    });
    const css = { w: "100%", h: "100%", ...styles.container };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ResizableProvider, { value: { styles, ...rest }, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        className: (0, import_utils2.cx)("ui-resizable", className),
        __css: css,
        ...getContainerProps({}, containerRef),
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_resizable_panels2.PanelGroup, { ...getGroupProps(), children })
      }
    ) });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Resizable
});
//# sourceMappingURL=resizable.js.map