"use client"

// src/form-control.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import {
  createContext,
  cx,
  findChildren,
  getValidChildren,
  handlerAll,
  dataAttr,
  ariaAttr
} from "@yamada-ui/utils";
import { useState, useId } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var [FormControlContextProvider, useFormControlContext] = createContext({
  strict: false,
  name: "FormControlContext"
});
var [FormControlStylesProvider, useFormControlStyles] = createContext({
  strict: false,
  name: "FormControlStyleContext"
});
var FormControl = forwardRef(
  ({ id, ...props }, ref) => {
    const [styles, mergedProps] = useMultiComponentStyle("FormControl", props);
    const {
      className,
      isRequired = false,
      isDisabled = false,
      isInvalid = false,
      isReadOnly = false,
      isReplace = true,
      label,
      helperMessage,
      errorMessage,
      children,
      requiredIndicator,
      optionalIndicator,
      ...rest
    } = omitThemeProps(mergedProps);
    id != null ? id : id = useId();
    const [isFocused, setFocused] = useState(false);
    const validChildren = getValidChildren(children);
    const [customLabel] = findChildren(validChildren, Label);
    const [customHelperMessage] = findChildren(validChildren, HelperMessage);
    const [customErrorMessage] = findChildren(validChildren, ErrorMessage);
    const isCustomLabel = !!customLabel;
    const isCustomHelperMessage = !!customHelperMessage;
    const isCustomErrorMessage = !!customErrorMessage;
    const css = {
      ...styles.container
    };
    return /* @__PURE__ */ jsx(
      FormControlContextProvider,
      {
        value: {
          id,
          isFocused,
          isRequired,
          isDisabled,
          isInvalid,
          isReadOnly,
          isReplace,
          onFocus: () => setFocused(true),
          onBlur: () => setFocused(false)
        },
        children: /* @__PURE__ */ jsx(FormControlStylesProvider, { value: styles, children: /* @__PURE__ */ jsxs(
          ui.div,
          {
            ref,
            className: cx("ui-form__control", className),
            role: "group",
            "data-focus": dataAttr(isFocused),
            "data-disabled": dataAttr(isDisabled),
            "data-invalid": dataAttr(isInvalid),
            "data-readonly": dataAttr(isReadOnly),
            __css: css,
            ...rest,
            children: [
              !isCustomLabel && label ? /* @__PURE__ */ jsx(
                Label,
                {
                  requiredIndicator,
                  optionalIndicator,
                  children: label
                }
              ) : null,
              children,
              !isCustomHelperMessage && helperMessage ? /* @__PURE__ */ jsx(HelperMessage, { children: helperMessage }) : null,
              !isCustomErrorMessage && errorMessage ? /* @__PURE__ */ jsx(ErrorMessage, { children: errorMessage }) : null
            ]
          }
        ) })
      }
    );
  }
);
var useFormControl = ({
  id: idProp,
  disabled,
  readOnly,
  required,
  isDisabled: isDisabledProp,
  isReadOnly: isReadOnlyProp,
  isRequired: isRequiredProp,
  isInvalid: isInvalidProp,
  ...rest
}) => {
  var _a, _b, _c;
  const control = useFormControlContext();
  const id = idProp != null ? idProp : control == null ? void 0 : control.id;
  const isDisabled = (_a = disabled != null ? disabled : isDisabledProp) != null ? _a : control == null ? void 0 : control.isDisabled;
  const isReadOnly = (_b = readOnly != null ? readOnly : isReadOnlyProp) != null ? _b : control == null ? void 0 : control.isReadOnly;
  const isRequired = (_c = required != null ? required : isRequiredProp) != null ? _c : control == null ? void 0 : control.isRequired;
  const isInvalid = isInvalidProp != null ? isInvalidProp : control == null ? void 0 : control.isInvalid;
  return {
    id,
    isDisabled,
    isReadOnly,
    isRequired,
    isInvalid,
    ...rest
  };
};
var useFormControlProps = ({
  id,
  disabled,
  readOnly,
  required,
  isDisabled,
  isReadOnly,
  isRequired,
  isInvalid,
  onFocus,
  onBlur,
  ...rest
}) => {
  const control = useFormControlContext();
  disabled != null ? disabled : disabled = isDisabled != null ? isDisabled : control == null ? void 0 : control.isDisabled;
  required != null ? required : required = isRequired != null ? isRequired : control == null ? void 0 : control.isRequired;
  readOnly != null ? readOnly : readOnly = isReadOnly != null ? isReadOnly : control == null ? void 0 : control.isReadOnly;
  isInvalid != null ? isInvalid : isInvalid = control == null ? void 0 : control.isInvalid;
  return {
    id: id != null ? id : control == null ? void 0 : control.id,
    disabled,
    required,
    readOnly,
    "aria-disabled": ariaAttr(disabled),
    "aria-readonly": ariaAttr(readOnly),
    "aria-required": ariaAttr(required),
    "aria-invalid": ariaAttr(isInvalid),
    "data-readonly": dataAttr(readOnly),
    onFocus: handlerAll(control == null ? void 0 : control.onFocus, onFocus),
    onBlur: handlerAll(control == null ? void 0 : control.onBlur, onBlur),
    ...disabled || readOnly ? {
      _hover: {},
      _active: {},
      _focus: {},
      _invalid: {},
      _focusVisible: {}
    } : {},
    ...rest
  };
};
var formControlBaseProperties = [
  "disabled",
  "required",
  "readOnly",
  "aria-disabled",
  "aria-readonly",
  "aria-required",
  "aria-invalid",
  "data-readonly",
  "onFocus",
  "onBlur",
  "_hover",
  "_active",
  "_focus",
  "_invalid",
  "_focusVisible"
];
var formControlProperties = formControlBaseProperties;
var getFormControlProperties = ({
  omit = [],
  pick = []
} = {}) => {
  let result = formControlProperties;
  if (pick.length) {
    result = result.filter((property) => pick.includes(property));
  }
  if (omit.length) {
    result = result.filter((property) => !omit.includes(property));
  }
  return result;
};
var Label = forwardRef(
  ({
    className,
    htmlFor,
    isRequired: isResolveRequired,
    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),
    optionalIndicator = null,
    children,
    ...rest
  }, ref) => {
    var _a, _b;
    const { id, isRequired, isFocused, isDisabled, isInvalid, isReadOnly } = (_a = useFormControlContext()) != null ? _a : {};
    const styles = (_b = useFormControlStyles()) != null ? _b : {};
    isResolveRequired != null ? isResolveRequired : isResolveRequired = isRequired;
    const css = {
      display: "block",
      pointerEvents: isReadOnly ? "none" : void 0,
      ...styles.label
    };
    return /* @__PURE__ */ jsxs(
      ui.label,
      {
        ref,
        className: cx("ui-form__label", className),
        "data-focus": dataAttr(isFocused),
        "data-disabled": dataAttr(isDisabled),
        "data-readonly": dataAttr(isReadOnly),
        "data-invalid": dataAttr(isInvalid),
        htmlFor: htmlFor != null ? htmlFor : id,
        __css: css,
        style: { cursor: isDisabled ? "not-allowed" : void 0 },
        ...rest,
        children: [
          children,
          isResolveRequired ? requiredIndicator : optionalIndicator
        ]
      }
    );
  }
);
var RequiredIndicator = forwardRef(
  ({ className, ...rest }, ref) => {
    var _a;
    const styles = (_a = useFormControlStyles()) != null ? _a : {};
    const css = { ...styles.requiredIndicator };
    return /* @__PURE__ */ jsx(
      ui.span,
      {
        ref,
        className: cx("ui-form__required-indicator", className),
        role: "presentation",
        "aria-hidden": true,
        __css: css,
        ...rest,
        children: "*"
      }
    );
  }
);
var HelperMessage = forwardRef(
  ({ className, ...rest }, ref) => {
    var _a, _b;
    const { isInvalid, isReplace } = (_a = useFormControlContext()) != null ? _a : {};
    const styles = (_b = useFormControlStyles()) != null ? _b : {};
    if (isReplace && isInvalid)
      return null;
    const css = { ...styles.helperMessage };
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-form__helper-message", className),
        __css: css,
        ...rest
      }
    );
  }
);
var ErrorMessage = forwardRef(
  ({ className, ...rest }, ref) => {
    var _a, _b;
    const { isInvalid } = (_a = useFormControlContext()) != null ? _a : {};
    const styles = (_b = useFormControlStyles()) != null ? _b : {};
    if (!isInvalid)
      return null;
    const css = { ...styles.errorMessage };
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-form__error-message", className),
        "aria-live": "polite",
        __css: css,
        ...rest
      }
    );
  }
);

export {
  FormControl,
  useFormControl,
  useFormControlProps,
  formControlBaseProperties,
  formControlProperties,
  getFormControlProperties,
  Label,
  HelperMessage,
  ErrorMessage
};
//# sourceMappingURL=chunk-OHFYUBPF.mjs.map