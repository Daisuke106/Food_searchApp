import * as react from 'react';
import { FocusEventHandler, ReactNode } from 'react';
import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, ThemeProps } from '@yamada-ui/core';
import { Dict } from '@yamada-ui/utils';

type FormControlOptions = {
    /**
     * If `true`, the form control will be required.
     *
     * @default false
     */
    isRequired?: boolean;
    /**
     * If `true`, the form control will be disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * If `true`, the form control will be invalid.
     *
     * @default false
     */
    isInvalid?: boolean;
    /**
     * If `true`, the form control will be readonly.
     *
     * @default false
     */
    isReadOnly?: boolean;
};
type FormControlAdditionalOptions = LabelOptions & {
    /**
     * If `true`, switch between helper message and error message using isInvalid.
     *
     * @default true
     */
    isReplace?: boolean;
    /**
     * The form control label to use.
     */
    label?: ReactNode;
    /**
     * The form control helper message to use.
     */
    helperMessage?: ReactNode;
    /**
     * The form control error message to use.
     */
    errorMessage?: ReactNode;
};
type FormControlProps = HTMLUIProps<"div"> & ThemeProps<"FormControl"> & FormControlOptions & FormControlAdditionalOptions;
/**
 * `FormControl` is a component used to group form elements with labels, help messages, error messages, etc.
 *
 * @see Docs https://yamada-ui.com/components/forms/form-control
 */
declare const FormControl: _yamada_ui_core.Component<"div", FormControlProps>;
type UseFormControlOptions = FormControlOptions & {
    id?: string;
    disabled?: boolean;
    readOnly?: boolean;
    required?: boolean;
};
declare const useFormControl: <Y extends Dict = Dict>({ id: idProp, disabled, readOnly, required, isDisabled: isDisabledProp, isReadOnly: isReadOnlyProp, isRequired: isRequiredProp, isInvalid: isInvalidProp, ...rest }: UseFormControlOptions & Y) => {
    id: string | undefined;
    isDisabled: boolean | undefined;
    isReadOnly: boolean | undefined;
    isRequired: boolean | undefined;
    isInvalid: boolean | undefined;
} & Omit<FormControlOptions & {
    id?: string | undefined;
    disabled?: boolean | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
} & Y, "id" | "isRequired" | "isDisabled" | "isInvalid" | "isReadOnly" | "disabled" | "readOnly" | "required">;
type UseFormControlProps<Y extends HTMLElement> = FormControlOptions & {
    id?: string;
    onFocus?: FocusEventHandler<Y>;
    onBlur?: FocusEventHandler<Y>;
    disabled?: boolean;
    readOnly?: boolean;
    required?: boolean;
};
declare const useFormControlProps: <Y extends HTMLElement, M extends Dict>({ id, disabled, readOnly, required, isDisabled, isReadOnly, isRequired, isInvalid, onFocus, onBlur, ...rest }: UseFormControlProps<Y> & M) => {
    _hover?: {} | undefined;
    _active?: {} | undefined;
    _focus?: {} | undefined;
    _invalid?: {} | undefined;
    _focusVisible?: {} | undefined;
    id: string | undefined;
    disabled: boolean | undefined;
    required: boolean | undefined;
    readOnly: boolean | undefined;
    "aria-disabled": boolean | undefined;
    "aria-readonly": boolean | undefined;
    "aria-required": boolean | undefined;
    "aria-invalid": boolean | undefined;
    "data-readonly": boolean | "true" | "false";
    onFocus: (event: react.FocusEvent<Y, Element>) => void;
    onBlur: (event: react.FocusEvent<Y, Element>) => void;
} & Omit<FormControlOptions & {
    id?: string | undefined;
    onFocus?: FocusEventHandler<Y> | undefined;
    onBlur?: FocusEventHandler<Y> | undefined;
    disabled?: boolean | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
} & M, "id" | "onFocus" | "onBlur" | "isRequired" | "isDisabled" | "isInvalid" | "isReadOnly" | "disabled" | "readOnly" | "required">;
declare const formControlBaseProperties: readonly ["disabled", "required", "readOnly", "aria-disabled", "aria-readonly", "aria-required", "aria-invalid", "data-readonly", "onFocus", "onBlur", "_hover", "_active", "_focus", "_invalid", "_focusVisible"];
declare const formControlProperties: any[];
declare const getFormControlProperties: ({ omit, pick, }?: {
    omit?: (typeof formControlBaseProperties)[number][];
    pick?: (typeof formControlBaseProperties)[number][];
}) => any[];
type LabelOptions = {
    requiredIndicator?: ReactNode;
    optionalIndicator?: ReactNode;
    isRequired?: boolean;
};
type LabelProps = HTMLUIProps<"label"> & LabelOptions;
declare const Label: _yamada_ui_core.Component<"label", LabelProps>;
type HelperMessageProps = HTMLUIProps<"div">;
declare const HelperMessage: _yamada_ui_core.Component<"div", HelperMessageProps>;
type ErrorMessageProps = HTMLUIProps<"div">;
declare const ErrorMessage: _yamada_ui_core.Component<"div", ErrorMessageProps>;

export { ErrorMessage, type ErrorMessageProps, FormControl, type FormControlOptions, type FormControlProps, HelperMessage, type HelperMessageProps, Label, type LabelProps, type UseFormControlProps, formControlBaseProperties, formControlProperties, getFormControlProperties, useFormControl, useFormControlProps };
