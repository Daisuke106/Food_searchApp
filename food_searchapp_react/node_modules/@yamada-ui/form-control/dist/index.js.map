{"version":3,"sources":["../src/index.ts","../src/form-control.tsx"],"sourcesContent":["export {\n  FormControl,\n  Label,\n  HelperMessage,\n  ErrorMessage,\n  useFormControl,\n  useFormControlProps,\n  formControlProperties,\n  getFormControlProperties,\n} from \"./form-control\"\nexport type {\n  FormControlProps,\n  LabelProps,\n  HelperMessageProps,\n  ErrorMessageProps,\n  UseFormControlProps,\n  FormControlOptions,\n} from \"./form-control\"\n","import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport type { Dict } from \"@yamada-ui/utils\"\nimport {\n  createContext,\n  cx,\n  findChildren,\n  getValidChildren,\n  handlerAll,\n  dataAttr,\n  ariaAttr,\n} from \"@yamada-ui/utils\"\nimport type { ReactNode, FocusEventHandler } from \"react\"\nimport { useState, useId } from \"react\"\n\nexport type FormControlOptions = {\n  /**\n   * If `true`, the form control will be required.\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid.\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly.\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ntype FormControlAdditionalOptions = LabelOptions & {\n  /**\n   * If `true`, switch between helper message and error message using isInvalid.\n   *\n   * @default true\n   */\n  isReplace?: boolean\n  /**\n   * The form control label to use.\n   */\n  label?: ReactNode\n  /**\n   * The form control helper message to use.\n   */\n  helperMessage?: ReactNode\n  /**\n   * The form control error message to use.\n   */\n  errorMessage?: ReactNode\n}\n\nexport type FormControlProps = HTMLUIProps<\"div\"> &\n  ThemeProps<\"FormControl\"> &\n  FormControlOptions &\n  FormControlAdditionalOptions\n\ntype FormControlContext = {\n  id?: string\n  isFocused: boolean\n  isRequired: boolean\n  isDisabled: boolean\n  isInvalid: boolean\n  isReadOnly: boolean\n  isReplace: boolean\n  onFocus: () => void\n  onBlur: () => void\n}\n\nconst [FormControlContextProvider, useFormControlContext] = createContext<\n  FormControlContext | undefined\n>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\ntype FormControlStylesContext = Record<string, CSSUIObject>\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  FormControlStylesContext | undefined\n>({\n  strict: false,\n  name: \"FormControlStyleContext\",\n})\n\n/**\n * `FormControl` is a component used to group form elements with labels, help messages, error messages, etc.\n *\n * @see Docs https://yamada-ui.com/components/forms/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  ({ id, ...props }, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"FormControl\", props)\n    const {\n      className,\n      isRequired = false,\n      isDisabled = false,\n      isInvalid = false,\n      isReadOnly = false,\n      isReplace = true,\n      label,\n      helperMessage,\n      errorMessage,\n      children,\n      requiredIndicator,\n      optionalIndicator,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    id ??= useId()\n\n    const [isFocused, setFocused] = useState<boolean>(false)\n\n    const validChildren = getValidChildren(children)\n\n    const [customLabel] = findChildren(validChildren, Label)\n    const [customHelperMessage] = findChildren(validChildren, HelperMessage)\n    const [customErrorMessage] = findChildren(validChildren, ErrorMessage)\n\n    const isCustomLabel = !!customLabel\n    const isCustomHelperMessage = !!customHelperMessage\n    const isCustomErrorMessage = !!customErrorMessage\n\n    const css: CSSUIObject = {\n      ...styles.container,\n    }\n\n    return (\n      <FormControlContextProvider\n        value={{\n          id,\n          isFocused,\n          isRequired,\n          isDisabled,\n          isInvalid,\n          isReadOnly,\n          isReplace,\n          onFocus: () => setFocused(true),\n          onBlur: () => setFocused(false),\n        }}\n      >\n        <FormControlStylesProvider value={styles}>\n          <ui.div\n            ref={ref}\n            className={cx(\"ui-form__control\", className)}\n            role=\"group\"\n            data-focus={dataAttr(isFocused)}\n            data-disabled={dataAttr(isDisabled)}\n            data-invalid={dataAttr(isInvalid)}\n            data-readonly={dataAttr(isReadOnly)}\n            __css={css}\n            {...rest}\n          >\n            {!isCustomLabel && label ? (\n              <Label\n                requiredIndicator={requiredIndicator}\n                optionalIndicator={optionalIndicator}\n              >\n                {label}\n              </Label>\n            ) : null}\n            {children}\n            {!isCustomHelperMessage && helperMessage ? (\n              <HelperMessage>{helperMessage}</HelperMessage>\n            ) : null}\n            {!isCustomErrorMessage && errorMessage ? (\n              <ErrorMessage>{errorMessage}</ErrorMessage>\n            ) : null}\n          </ui.div>\n        </FormControlStylesProvider>\n      </FormControlContextProvider>\n    )\n  },\n)\n\ntype UseFormControlOptions = FormControlOptions & {\n  id?: string\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\nexport const useFormControl = <Y extends Dict = Dict>({\n  id: idProp,\n  disabled,\n  readOnly,\n  required,\n  isDisabled: isDisabledProp,\n  isReadOnly: isReadOnlyProp,\n  isRequired: isRequiredProp,\n  isInvalid: isInvalidProp,\n  ...rest\n}: UseFormControlOptions & Y) => {\n  const control = useFormControlContext()\n\n  const id = idProp ?? control?.id\n  const isDisabled = disabled ?? isDisabledProp ?? control?.isDisabled\n  const isReadOnly = readOnly ?? isReadOnlyProp ?? control?.isReadOnly\n  const isRequired = required ?? isRequiredProp ?? control?.isRequired\n  const isInvalid = isInvalidProp ?? control?.isInvalid\n\n  return {\n    id,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    ...rest,\n  }\n}\n\nexport type UseFormControlProps<Y extends HTMLElement> = FormControlOptions & {\n  id?: string\n  onFocus?: FocusEventHandler<Y>\n  onBlur?: FocusEventHandler<Y>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\nexport const useFormControlProps = <Y extends HTMLElement, M extends Dict>({\n  id,\n  disabled,\n  readOnly,\n  required,\n  isDisabled,\n  isReadOnly,\n  isRequired,\n  isInvalid,\n  onFocus,\n  onBlur,\n  ...rest\n}: UseFormControlProps<Y> & M) => {\n  const control = useFormControlContext()\n\n  disabled ??= isDisabled ?? control?.isDisabled\n  required ??= isRequired ?? control?.isRequired\n  readOnly ??= isReadOnly ?? control?.isReadOnly\n  isInvalid ??= control?.isInvalid\n\n  return {\n    id: id ?? control?.id,\n    disabled,\n    required,\n    readOnly,\n    \"aria-disabled\": ariaAttr(disabled),\n    \"aria-readonly\": ariaAttr(readOnly),\n    \"aria-required\": ariaAttr(required),\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"data-readonly\": dataAttr(readOnly),\n    onFocus: handlerAll(control?.onFocus, onFocus),\n    onBlur: handlerAll(control?.onBlur, onBlur),\n    ...(disabled || readOnly\n      ? {\n          _hover: {},\n          _active: {},\n          _focus: {},\n          _invalid: {},\n          _focusVisible: {},\n        }\n      : {}),\n    ...rest,\n  }\n}\n\nexport const formControlBaseProperties = [\n  \"disabled\",\n  \"required\",\n  \"readOnly\",\n  \"aria-disabled\",\n  \"aria-readonly\",\n  \"aria-required\",\n  \"aria-invalid\",\n  \"data-readonly\",\n  \"onFocus\",\n  \"onBlur\",\n  \"_hover\",\n  \"_active\",\n  \"_focus\",\n  \"_invalid\",\n  \"_focusVisible\",\n] as const\n\nexport const formControlProperties =\n  formControlBaseProperties as unknown as any[]\n\nexport const getFormControlProperties = ({\n  omit = [],\n  pick = [],\n}: {\n  omit?: (typeof formControlBaseProperties)[number][]\n  pick?: (typeof formControlBaseProperties)[number][]\n} = {}) => {\n  let result = formControlProperties\n\n  if (pick.length) {\n    result = result.filter((property) => pick.includes(property))\n  }\n\n  if (omit.length) {\n    result = result.filter((property) => !omit.includes(property))\n  }\n\n  return result\n}\n\ntype LabelOptions = {\n  requiredIndicator?: ReactNode\n  optionalIndicator?: ReactNode\n  isRequired?: boolean\n}\n\nexport type LabelProps = HTMLUIProps<\"label\"> & LabelOptions\n\nexport const Label = forwardRef<LabelProps, \"label\">(\n  (\n    {\n      className,\n      htmlFor,\n      isRequired: isResolveRequired,\n      requiredIndicator = <RequiredIndicator />,\n      optionalIndicator = null,\n      children,\n      ...rest\n    },\n    ref,\n  ) => {\n    const { id, isRequired, isFocused, isDisabled, isInvalid, isReadOnly } =\n      useFormControlContext() ?? {}\n    const styles = useFormControlStyles() ?? {}\n\n    isResolveRequired ??= isRequired\n\n    const css: CSSUIObject = {\n      display: \"block\",\n      pointerEvents: isReadOnly ? \"none\" : undefined,\n      ...styles.label,\n    }\n\n    return (\n      <ui.label\n        ref={ref}\n        className={cx(\"ui-form__label\", className)}\n        data-focus={dataAttr(isFocused)}\n        data-disabled={dataAttr(isDisabled)}\n        data-readonly={dataAttr(isReadOnly)}\n        data-invalid={dataAttr(isInvalid)}\n        htmlFor={htmlFor ?? id}\n        __css={css}\n        style={{ cursor: isDisabled ? \"not-allowed\" : undefined }}\n        {...rest}\n      >\n        {children}\n        {isResolveRequired ? requiredIndicator : optionalIndicator}\n      </ui.label>\n    )\n  },\n)\n\ntype RequiredIndicatorProps = HTMLUIProps<\"span\">\n\nconst RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  ({ className, ...rest }, ref) => {\n    const styles = useFormControlStyles() ?? {}\n\n    const css: CSSUIObject = { ...styles.requiredIndicator }\n\n    return (\n      <ui.span\n        ref={ref}\n        className={cx(\"ui-form__required-indicator\", className)}\n        role=\"presentation\"\n        aria-hidden={true}\n        __css={css}\n        {...rest}\n      >\n        *\n      </ui.span>\n    )\n  },\n)\n\nexport type HelperMessageProps = HTMLUIProps<\"div\">\n\nexport const HelperMessage = forwardRef<HelperMessageProps, \"div\">(\n  ({ className, ...rest }, ref) => {\n    const { isInvalid, isReplace } = useFormControlContext() ?? {}\n    const styles = useFormControlStyles() ?? {}\n\n    if (isReplace && isInvalid) return null\n\n    const css: CSSUIObject = { ...styles.helperMessage }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-form__helper-message\", className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n\nexport type ErrorMessageProps = HTMLUIProps<\"div\">\n\nexport const ErrorMessage = forwardRef<ErrorMessageProps, \"div\">(\n  ({ className, ...rest }, ref) => {\n    const { isInvalid } = useFormControlContext() ?? {}\n    const styles = useFormControlStyles() ?? {}\n\n    if (!isInvalid) return null\n\n    const css: CSSUIObject = { ...styles.errorMessage }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-form__error-message\", className)}\n        aria-live=\"polite\"\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n"],"mappings":"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","names":[]}