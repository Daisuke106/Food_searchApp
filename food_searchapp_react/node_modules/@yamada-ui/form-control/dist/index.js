"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ErrorMessage: () => ErrorMessage,
  FormControl: () => FormControl,
  HelperMessage: () => HelperMessage,
  Label: () => Label,
  formControlProperties: () => formControlProperties,
  getFormControlProperties: () => getFormControlProperties,
  useFormControl: () => useFormControl,
  useFormControlProps: () => useFormControlProps
});
module.exports = __toCommonJS(src_exports);

// src/form-control.tsx
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var [FormControlContextProvider, useFormControlContext] = (0, import_utils.createContext)({
  strict: false,
  name: "FormControlContext"
});
var [FormControlStylesProvider, useFormControlStyles] = (0, import_utils.createContext)({
  strict: false,
  name: "FormControlStyleContext"
});
var FormControl = (0, import_core.forwardRef)(
  ({ id, ...props }, ref) => {
    const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("FormControl", props);
    const {
      className,
      isRequired = false,
      isDisabled = false,
      isInvalid = false,
      isReadOnly = false,
      isReplace = true,
      label,
      helperMessage,
      errorMessage,
      children,
      requiredIndicator,
      optionalIndicator,
      ...rest
    } = (0, import_core.omitThemeProps)(mergedProps);
    id != null ? id : id = (0, import_react.useId)();
    const [isFocused, setFocused] = (0, import_react.useState)(false);
    const validChildren = (0, import_utils.getValidChildren)(children);
    const [customLabel] = (0, import_utils.findChildren)(validChildren, Label);
    const [customHelperMessage] = (0, import_utils.findChildren)(validChildren, HelperMessage);
    const [customErrorMessage] = (0, import_utils.findChildren)(validChildren, ErrorMessage);
    const isCustomLabel = !!customLabel;
    const isCustomHelperMessage = !!customHelperMessage;
    const isCustomErrorMessage = !!customErrorMessage;
    const css = {
      ...styles.container
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      FormControlContextProvider,
      {
        value: {
          id,
          isFocused,
          isRequired,
          isDisabled,
          isInvalid,
          isReadOnly,
          isReplace,
          onFocus: () => setFocused(true),
          onBlur: () => setFocused(false)
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FormControlStylesProvider, { value: styles, children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          import_core.ui.div,
          {
            ref,
            className: (0, import_utils.cx)("ui-form__control", className),
            role: "group",
            "data-focus": (0, import_utils.dataAttr)(isFocused),
            "data-disabled": (0, import_utils.dataAttr)(isDisabled),
            "data-invalid": (0, import_utils.dataAttr)(isInvalid),
            "data-readonly": (0, import_utils.dataAttr)(isReadOnly),
            __css: css,
            ...rest,
            children: [
              !isCustomLabel && label ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                Label,
                {
                  requiredIndicator,
                  optionalIndicator,
                  children: label
                }
              ) : null,
              children,
              !isCustomHelperMessage && helperMessage ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HelperMessage, { children: helperMessage }) : null,
              !isCustomErrorMessage && errorMessage ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ErrorMessage, { children: errorMessage }) : null
            ]
          }
        ) })
      }
    );
  }
);
var useFormControl = ({
  id: idProp,
  disabled,
  readOnly,
  required,
  isDisabled: isDisabledProp,
  isReadOnly: isReadOnlyProp,
  isRequired: isRequiredProp,
  isInvalid: isInvalidProp,
  ...rest
}) => {
  var _a, _b, _c;
  const control = useFormControlContext();
  const id = idProp != null ? idProp : control == null ? void 0 : control.id;
  const isDisabled = (_a = disabled != null ? disabled : isDisabledProp) != null ? _a : control == null ? void 0 : control.isDisabled;
  const isReadOnly = (_b = readOnly != null ? readOnly : isReadOnlyProp) != null ? _b : control == null ? void 0 : control.isReadOnly;
  const isRequired = (_c = required != null ? required : isRequiredProp) != null ? _c : control == null ? void 0 : control.isRequired;
  const isInvalid = isInvalidProp != null ? isInvalidProp : control == null ? void 0 : control.isInvalid;
  return {
    id,
    isDisabled,
    isReadOnly,
    isRequired,
    isInvalid,
    ...rest
  };
};
var useFormControlProps = ({
  id,
  disabled,
  readOnly,
  required,
  isDisabled,
  isReadOnly,
  isRequired,
  isInvalid,
  onFocus,
  onBlur,
  ...rest
}) => {
  const control = useFormControlContext();
  disabled != null ? disabled : disabled = isDisabled != null ? isDisabled : control == null ? void 0 : control.isDisabled;
  required != null ? required : required = isRequired != null ? isRequired : control == null ? void 0 : control.isRequired;
  readOnly != null ? readOnly : readOnly = isReadOnly != null ? isReadOnly : control == null ? void 0 : control.isReadOnly;
  isInvalid != null ? isInvalid : isInvalid = control == null ? void 0 : control.isInvalid;
  return {
    id: id != null ? id : control == null ? void 0 : control.id,
    disabled,
    required,
    readOnly,
    "aria-disabled": (0, import_utils.ariaAttr)(disabled),
    "aria-readonly": (0, import_utils.ariaAttr)(readOnly),
    "aria-required": (0, import_utils.ariaAttr)(required),
    "aria-invalid": (0, import_utils.ariaAttr)(isInvalid),
    "data-readonly": (0, import_utils.dataAttr)(readOnly),
    onFocus: (0, import_utils.handlerAll)(control == null ? void 0 : control.onFocus, onFocus),
    onBlur: (0, import_utils.handlerAll)(control == null ? void 0 : control.onBlur, onBlur),
    ...disabled || readOnly ? {
      _hover: {},
      _active: {},
      _focus: {},
      _invalid: {},
      _focusVisible: {}
    } : {},
    ...rest
  };
};
var formControlBaseProperties = [
  "disabled",
  "required",
  "readOnly",
  "aria-disabled",
  "aria-readonly",
  "aria-required",
  "aria-invalid",
  "data-readonly",
  "onFocus",
  "onBlur",
  "_hover",
  "_active",
  "_focus",
  "_invalid",
  "_focusVisible"
];
var formControlProperties = formControlBaseProperties;
var getFormControlProperties = ({
  omit = [],
  pick = []
} = {}) => {
  let result = formControlProperties;
  if (pick.length) {
    result = result.filter((property) => pick.includes(property));
  }
  if (omit.length) {
    result = result.filter((property) => !omit.includes(property));
  }
  return result;
};
var Label = (0, import_core.forwardRef)(
  ({
    className,
    htmlFor,
    isRequired: isResolveRequired,
    requiredIndicator = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RequiredIndicator, {}),
    optionalIndicator = null,
    children,
    ...rest
  }, ref) => {
    var _a, _b;
    const { id, isRequired, isFocused, isDisabled, isInvalid, isReadOnly } = (_a = useFormControlContext()) != null ? _a : {};
    const styles = (_b = useFormControlStyles()) != null ? _b : {};
    isResolveRequired != null ? isResolveRequired : isResolveRequired = isRequired;
    const css = {
      display: "block",
      pointerEvents: isReadOnly ? "none" : void 0,
      ...styles.label
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
      import_core.ui.label,
      {
        ref,
        className: (0, import_utils.cx)("ui-form__label", className),
        "data-focus": (0, import_utils.dataAttr)(isFocused),
        "data-disabled": (0, import_utils.dataAttr)(isDisabled),
        "data-readonly": (0, import_utils.dataAttr)(isReadOnly),
        "data-invalid": (0, import_utils.dataAttr)(isInvalid),
        htmlFor: htmlFor != null ? htmlFor : id,
        __css: css,
        style: { cursor: isDisabled ? "not-allowed" : void 0 },
        ...rest,
        children: [
          children,
          isResolveRequired ? requiredIndicator : optionalIndicator
        ]
      }
    );
  }
);
var RequiredIndicator = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    var _a;
    const styles = (_a = useFormControlStyles()) != null ? _a : {};
    const css = { ...styles.requiredIndicator };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.span,
      {
        ref,
        className: (0, import_utils.cx)("ui-form__required-indicator", className),
        role: "presentation",
        "aria-hidden": true,
        __css: css,
        ...rest,
        children: "*"
      }
    );
  }
);
var HelperMessage = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    var _a, _b;
    const { isInvalid, isReplace } = (_a = useFormControlContext()) != null ? _a : {};
    const styles = (_b = useFormControlStyles()) != null ? _b : {};
    if (isReplace && isInvalid)
      return null;
    const css = { ...styles.helperMessage };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        className: (0, import_utils.cx)("ui-form__helper-message", className),
        __css: css,
        ...rest
      }
    );
  }
);
var ErrorMessage = (0, import_core.forwardRef)(
  ({ className, ...rest }, ref) => {
    var _a, _b;
    const { isInvalid } = (_a = useFormControlContext()) != null ? _a : {};
    const styles = (_b = useFormControlStyles()) != null ? _b : {};
    if (!isInvalid)
      return null;
    const css = { ...styles.errorMessage };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core.ui.div,
      {
        ref,
        className: (0, import_utils.cx)("ui-form__error-message", className),
        "aria-live": "polite",
        __css: css,
        ...rest
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ErrorMessage,
  FormControl,
  HelperMessage,
  Label,
  formControlProperties,
  getFormControlProperties,
  useFormControl,
  useFormControlProps
});
//# sourceMappingURL=index.js.map