"use client"

// src/index.ts
import { useColorMode, useTheme } from "@yamada-ui/core";
import {
  getMemoizedObject as get,
  isArray,
  isUndefined
} from "@yamada-ui/utils";
var useToken = (name, path) => {
  const { theme } = useTheme();
  const { colorMode } = useColorMode();
  return getToken(name, path)(theme, colorMode);
};
var getToken = (name, path) => (theme, colorMode) => {
  var _a, _b, _c;
  if (name === "layerStyles")
    name = "styles.layerStyles";
  if (name === "textStyles")
    name = "styles.textStyles";
  if (name === "transitionProperty")
    name = "transitions.property";
  if (name === "transitionDuration")
    name = "transitions.duration";
  if (name === "transitionEasing")
    name = "transitions.easing";
  let value = get(theme, `${name}.${path}`);
  if (!isUndefined(value)) {
    if (isArray(value)) {
      const [lightValue, darkValue] = value;
      return colorMode === "light" ? lightValue : darkValue;
    } else {
      return value;
    }
  } else {
    value = get(theme, `semantics.${name}.${path}`);
    if (isArray(value)) {
      value = [
        (_a = get(theme, `${name}.${value[0]}`)) != null ? _a : value[0],
        (_b = get(theme, `${name}.${value[1]}`)) != null ? _b : value[1]
      ];
    } else {
      value = (_c = get(theme, `${name}.${value}`)) != null ? _c : value;
    }
    if (isArray(value)) {
      const [lightValue, darkValue] = value;
      value = colorMode === "light" ? lightValue : darkValue;
      if (isArray(value)) {
        const [lightValue2, darkValue2] = value;
        return colorMode === "light" ? lightValue2 : darkValue2;
      } else {
        return value;
      }
    } else {
      return value;
    }
  }
};
export {
  getToken,
  useToken
};
//# sourceMappingURL=index.mjs.map