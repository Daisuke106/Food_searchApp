{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { ColorMode, StyledTheme, Theme } from \"@yamada-ui/core\"\nimport { useColorMode, useTheme } from \"@yamada-ui/core\"\nimport {\n  getMemoizedObject as get,\n  isArray,\n  isUndefined,\n} from \"@yamada-ui/utils\"\n\n/**\n * `useToken` is a custom hook for retrieving tokens from the theme.\n *\n * @see Docs https://yamada-ui.com/hooks/use-token\n */\nexport const useToken = <\n  Y extends string | number = string,\n  M extends keyof Omit<\n    Theme,\n    \"components\" | \"colorSchemes\" | \"themeSchemes\"\n  > = keyof Omit<Theme, \"components\" | \"colorSchemes\" | \"themeSchemes\">,\n>(\n  name: M,\n  path: Theme[M] | number | undefined,\n) => {\n  const { theme } = useTheme()\n  const { colorMode } = useColorMode()\n\n  return getToken<Y, M>(name, path)(theme, colorMode)\n}\n\nexport const getToken =\n  <\n    Y extends string | number = string,\n    M extends keyof Omit<\n      Theme,\n      \"components\" | \"colorSchemes\" | \"themeSchemes\"\n    > = keyof Omit<Theme, \"components\" | \"colorSchemes\" | \"themeSchemes\">,\n  >(\n    name: M,\n    path: Theme[M] | number | undefined,\n  ) =>\n  (theme: StyledTheme, colorMode: ColorMode) => {\n    if (name === \"layerStyles\") name = \"styles.layerStyles\" as M\n\n    if (name === \"textStyles\") name = \"styles.textStyles\" as M\n\n    if (name === \"transitionProperty\") name = \"transitions.property\" as M\n\n    if (name === \"transitionDuration\") name = \"transitions.duration\" as M\n\n    if (name === \"transitionEasing\") name = \"transitions.easing\" as M\n\n    let value = get<Y | [Y, Y] | undefined>(theme, `${name}.${path}`)\n\n    if (!isUndefined(value)) {\n      if (isArray(value)) {\n        const [lightValue, darkValue] = value\n\n        return colorMode === \"light\" ? lightValue : darkValue\n      } else {\n        return value\n      }\n    } else {\n      value = get<Y | [Y, Y] | undefined>(theme, `semantics.${name}.${path}`)\n\n      if (isArray(value)) {\n        value = [\n          get<Y>(theme, `${name}.${value[0]}`) ?? value[0],\n          get<Y>(theme, `${name}.${value[1]}`) ?? value[1],\n        ]\n      } else {\n        value = get<Y | undefined>(theme, `${name}.${value}`) ?? value\n      }\n\n      if (isArray(value)) {\n        const [lightValue, darkValue] = value\n\n        value = colorMode === \"light\" ? lightValue : darkValue\n\n        if (isArray(value)) {\n          const [lightValue, darkValue] = value as unknown as [Y, Y]\n\n          return colorMode === \"light\" ? lightValue : darkValue\n        } else {\n          return value\n        }\n      } else {\n        return value\n      }\n    }\n  }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAuC;AACvC,mBAIO;AAOA,IAAM,WAAW,CAOtB,MACA,SACG;AACH,QAAM,EAAE,MAAM,QAAI,sBAAS;AAC3B,QAAM,EAAE,UAAU,QAAI,0BAAa;AAEnC,SAAO,SAAe,MAAM,IAAI,EAAE,OAAO,SAAS;AACpD;AAEO,IAAM,WACX,CAOE,MACA,SAEF,CAAC,OAAoB,cAAyB;AAxChD;AAyCI,MAAI,SAAS;AAAe,WAAO;AAEnC,MAAI,SAAS;AAAc,WAAO;AAElC,MAAI,SAAS;AAAsB,WAAO;AAE1C,MAAI,SAAS;AAAsB,WAAO;AAE1C,MAAI,SAAS;AAAoB,WAAO;AAExC,MAAI,YAAQ,aAAAA,mBAA4B,OAAO,GAAG,IAAI,IAAI,IAAI,EAAE;AAEhE,MAAI,KAAC,0BAAY,KAAK,GAAG;AACvB,YAAI,sBAAQ,KAAK,GAAG;AAClB,YAAM,CAAC,YAAY,SAAS,IAAI;AAEhC,aAAO,cAAc,UAAU,aAAa;AAAA,IAC9C,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF,OAAO;AACL,gBAAQ,aAAAA,mBAA4B,OAAO,aAAa,IAAI,IAAI,IAAI,EAAE;AAEtE,YAAI,sBAAQ,KAAK,GAAG;AAClB,cAAQ;AAAA,SACN,sBAAAA,mBAAO,OAAO,GAAG,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,MAAnC,YAAwC,MAAM,CAAC;AAAA,SAC/C,sBAAAA,mBAAO,OAAO,GAAG,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,MAAnC,YAAwC,MAAM,CAAC;AAAA,MACjD;AAAA,IACF,OAAO;AACL,eAAQ,sBAAAA,mBAAmB,OAAO,GAAG,IAAI,IAAI,KAAK,EAAE,MAA5C,YAAiD;AAAA,IAC3D;AAEA,YAAI,sBAAQ,KAAK,GAAG;AAClB,YAAM,CAAC,YAAY,SAAS,IAAI;AAEhC,cAAQ,cAAc,UAAU,aAAa;AAE7C,cAAI,sBAAQ,KAAK,GAAG;AAClB,cAAM,CAACC,aAAYC,UAAS,IAAI;AAEhC,eAAO,cAAc,UAAUD,cAAaC;AAAA,MAC9C,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":["get","lightValue","darkValue"]}