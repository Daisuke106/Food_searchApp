"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getToken: () => getToken,
  useToken: () => useToken
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@yamada-ui/core");
var import_utils = require("@yamada-ui/utils");
var useToken = (name, path) => {
  const { theme } = (0, import_core.useTheme)();
  const { colorMode } = (0, import_core.useColorMode)();
  return getToken(name, path)(theme, colorMode);
};
var getToken = (name, path) => (theme, colorMode) => {
  var _a, _b, _c;
  if (name === "layerStyles")
    name = "styles.layerStyles";
  if (name === "textStyles")
    name = "styles.textStyles";
  if (name === "transitionProperty")
    name = "transitions.property";
  if (name === "transitionDuration")
    name = "transitions.duration";
  if (name === "transitionEasing")
    name = "transitions.easing";
  let value = (0, import_utils.getMemoizedObject)(theme, `${name}.${path}`);
  if (!(0, import_utils.isUndefined)(value)) {
    if ((0, import_utils.isArray)(value)) {
      const [lightValue, darkValue] = value;
      return colorMode === "light" ? lightValue : darkValue;
    } else {
      return value;
    }
  } else {
    value = (0, import_utils.getMemoizedObject)(theme, `semantics.${name}.${path}`);
    if ((0, import_utils.isArray)(value)) {
      value = [
        (_a = (0, import_utils.getMemoizedObject)(theme, `${name}.${value[0]}`)) != null ? _a : value[0],
        (_b = (0, import_utils.getMemoizedObject)(theme, `${name}.${value[1]}`)) != null ? _b : value[1]
      ];
    } else {
      value = (_c = (0, import_utils.getMemoizedObject)(theme, `${name}.${value}`)) != null ? _c : value;
    }
    if ((0, import_utils.isArray)(value)) {
      const [lightValue, darkValue] = value;
      value = colorMode === "light" ? lightValue : darkValue;
      if ((0, import_utils.isArray)(value)) {
        const [lightValue2, darkValue2] = value;
        return colorMode === "light" ? lightValue2 : darkValue2;
      } else {
        return value;
      }
    } else {
      return value;
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getToken,
  useToken
});
//# sourceMappingURL=index.js.map