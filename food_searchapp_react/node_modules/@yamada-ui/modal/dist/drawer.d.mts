import * as _yamada_ui_close_button from '@yamada-ui/close-button';
import * as _yamada_ui_core from '@yamada-ui/core';
import { ThemeProps, HTMLUIProps, CSSUIObject } from '@yamada-ui/core';
import { SlideProps } from '@yamada-ui/transitions';
import { FC } from 'react';
import { ModalProps } from './modal.mjs';
import { ModalOverlayProps } from './modal-overlay.mjs';
import { ModalCloseButtonProps } from './modal-close-button.mjs';
import { ModalHeaderProps } from './modal-header.mjs';
import { ModalBodyProps } from './modal-body.mjs';
import { ModalFooterProps } from './modal-footer.mjs';
import '@yamada-ui/focus-lock';
import '@yamada-ui/motion';
import '@yamada-ui/portal';

type DrawerOptions = {
    /**
     * The placement of the drawer.
     *
     * @default 'right'
     */
    placement?: SlideProps["placement"];
    /**
     * If `true` and drawer's placement is `top` or `bottom`, the drawer will occupy the viewport height (100dvh).
     */
    isFullHeight?: boolean;
    /**
     * If `true`, then the drawer will close on drag.
     *
     * @default false
     */
    closeOnDrag?: boolean;
    /**
     * If `true`, display the drag bar when `closeOnDrag` is `true`.
     *
     * @default true
     */
    withDragBar?: boolean;
    /**
     * Applies constraints on the permitted draggable area.
     *
     * @default 0
     */
    dragConstraints?: number;
    /**
     * The degree of movement allowed outside constraints. 0 = no movement, 1 = full movement.
     *
     * @default 0.1
     */
    dragElastic?: number;
    /**
     * Offset from being dragged to closing.
     *
     * @default 80
     */
    dragOffset?: number;
    /**
     * Velocity of the drag that triggers close.
     *
     * @default 100
     */
    dragVelocity?: number;
    /**
     * Props for the blank area when `closeOnDrag` is `true`.
     */
    blankForDragProps?: CSSUIObject;
};
type DrawerProps = Omit<ModalProps, "scrollBehavior" | "animation" | "outside" | "placement" | "dragConstraints" | "dragElastic" | keyof ThemeProps> & ThemeProps<"Drawer"> & DrawerOptions;
/**
 * `Drawer` is a component for a panel that appears from the edge of the screen.
 *
 * @see Docs https://yamada-ui.com/components/overlay/drawer
 */
declare const Drawer: _yamada_ui_core.Component<"div", DrawerProps>;
type DrawerContentProps = Omit<DrawerProps, "color" | "transition" | "isOpen" | keyof ThemeProps> & Required<Pick<DrawerProps, "placement" | "dragConstraints" | "dragElastic" | "dragOffset" | "dragVelocity">>;
declare const DrawerContent: _yamada_ui_core.Component<"div", DrawerContentProps>;
type DrawerOverlayProps = ModalOverlayProps;
declare const DrawerOverlay: _yamada_ui_core.Component<"div", ModalOverlayProps>;
type DrawerDragBarProps = HTMLUIProps<"div">;
declare const DrawerDragBar: FC<DrawerDragBarProps>;
type DrawerCloseButtonProps = ModalCloseButtonProps;
declare const DrawerCloseButton: _yamada_ui_core.Component<"button", _yamada_ui_close_button.CloseButtonProps>;
type DrawerHeaderProps = ModalHeaderProps;
declare const DrawerHeader: _yamada_ui_core.Component<"header", ModalHeaderProps>;
type DrawerBodyProps = ModalBodyProps;
declare const DrawerBody: _yamada_ui_core.Component<"main", ModalBodyProps>;
type DrawerFooterProps = ModalFooterProps;
declare const DrawerFooter: _yamada_ui_core.Component<"footer", ModalFooterProps>;

export { Drawer, DrawerBody, type DrawerBodyProps, DrawerCloseButton, type DrawerCloseButtonProps, DrawerContent, DrawerDragBar, type DrawerDragBarProps, DrawerFooter, type DrawerFooterProps, DrawerHeader, type DrawerHeaderProps, DrawerOverlay, type DrawerOverlayProps, type DrawerProps };
