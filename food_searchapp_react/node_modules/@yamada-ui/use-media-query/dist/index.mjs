"use client"

// src/index.ts
import { useEnvironment } from "@yamada-ui/providers";
import { isArray, isFunction } from "@yamada-ui/utils";
import { useEffect, useState } from "react";
var useMediaQuery = (query, { ssr = true, fallback } = {}) => {
  const { getWindow } = useEnvironment();
  const queries = isArray(query) ? query : [query];
  let fallbackValues = isArray(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter((value2) => value2 != null);
  const [value, setValue] = useState(() => {
    return queries.map((media, index) => {
      var _a;
      return {
        media,
        matches: ssr ? !!fallbackValues[index] : !!((_a = getWindow()) == null ? void 0 : _a.matchMedia(media).matches)
      };
    });
  });
  useEffect(() => {
    const win = getWindow();
    if (!win)
      return;
    setValue(
      queries.map((media) => ({
        media,
        matches: win.matchMedia(media).matches
      }))
    );
    const mql = queries.map((query2) => win.matchMedia(query2));
    const handler = (ev) => {
      setValue(
        (prev) => prev.slice().map((item) => {
          if (item.media === ev.media)
            return { ...item, matches: ev.matches };
          return item;
        })
      );
    };
    mql.forEach((mq) => {
      if (isFunction(mq.addListener)) {
        mq.addListener(handler);
      } else {
        mq.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mq) => {
        if (isFunction(mq.removeListener)) {
          mq.removeListener(handler);
        } else {
          mq.removeEventListener("change", handler);
        }
      });
    };
  }, [getWindow]);
  return value.map((item) => item.matches);
};
export {
  useMediaQuery
};
//# sourceMappingURL=index.mjs.map