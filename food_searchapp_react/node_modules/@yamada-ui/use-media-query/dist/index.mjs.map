{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { useEnvironment } from \"@yamada-ui/providers\"\nimport { isArray, isFunction } from \"@yamada-ui/utils\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * `useMediaQuery` is a custom hook that detects whether it matches a single or multiple media queries.\n *\n * @see Docs https://yamada-ui.com/hooks/use-media-query\n */\nexport const useMediaQuery = (\n  query: string | string[],\n  { ssr = true, fallback }: UseMediaQueryOptions = {},\n): boolean[] => {\n  const { getWindow } = useEnvironment()\n\n  const queries = isArray(query) ? query : [query]\n\n  let fallbackValues = isArray(fallback) ? fallback : [fallback]\n\n  fallbackValues = fallbackValues.filter((value) => value != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((media, index) => ({\n      media,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : !!getWindow()?.matchMedia(media).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n\n    if (!win) return\n\n    setValue(\n      queries.map((media) => ({\n        media,\n        matches: win.matchMedia(media).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (ev: MediaQueryListEvent) => {\n      setValue((prev) =>\n        prev.slice().map((item) => {\n          if (item.media === ev.media) return { ...item, matches: ev.matches }\n\n          return item\n        }),\n      )\n    }\n\n    mql.forEach((mq) => {\n      if (isFunction(mq.addListener)) {\n        mq.addListener(handler)\n      } else {\n        mq.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mq) => {\n        if (isFunction(mq.removeListener)) {\n          mq.removeListener(handler)\n        } else {\n          mq.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n"],"mappings":";;;AAAA,SAAS,sBAAsB;AAC/B,SAAS,SAAS,kBAAkB;AACpC,SAAS,WAAW,gBAAgB;AAY7B,IAAM,gBAAgB,CAC3B,OACA,EAAE,MAAM,MAAM,SAAS,IAA0B,CAAC,MACpC;AACd,QAAM,EAAE,UAAU,IAAI,eAAe;AAErC,QAAM,UAAU,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAE/C,MAAI,iBAAiB,QAAQ,QAAQ,IAAI,WAAW,CAAC,QAAQ;AAE7D,mBAAiB,eAAe,OAAO,CAACA,WAAUA,UAAS,IAAI;AAE/D,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAS,MAAM;AACvC,WAAO,QAAQ,IAAI,CAAC,OAAO,UAAO;AA3BtC;AA2B0C;AAAA,QACpC;AAAA,QACA,SAAS,MACL,CAAC,CAAC,eAAe,KAAK,IACtB,CAAC,GAAC,eAAU,MAAV,mBAAa,WAAW,OAAO;AAAA,MACvC;AAAA,KAAE;AAAA,EACJ,CAAC;AAED,YAAU,MAAM;AACd,UAAM,MAAM,UAAU;AAEtB,QAAI,CAAC;AAAK;AAEV;AAAA,MACE,QAAQ,IAAI,CAAC,WAAW;AAAA,QACtB;AAAA,QACA,SAAS,IAAI,WAAW,KAAK,EAAE;AAAA,MACjC,EAAE;AAAA,IACJ;AAEA,UAAM,MAAM,QAAQ,IAAI,CAACC,WAAU,IAAI,WAAWA,MAAK,CAAC;AAExD,UAAM,UAAU,CAAC,OAA4B;AAC3C;AAAA,QAAS,CAAC,SACR,KAAK,MAAM,EAAE,IAAI,CAAC,SAAS;AACzB,cAAI,KAAK,UAAU,GAAG;AAAO,mBAAO,EAAE,GAAG,MAAM,SAAS,GAAG,QAAQ;AAEnE,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,QAAQ,CAAC,OAAO;AAClB,UAAI,WAAW,GAAG,WAAW,GAAG;AAC9B,WAAG,YAAY,OAAO;AAAA,MACxB,OAAO;AACL,WAAG,iBAAiB,UAAU,OAAO;AAAA,MACvC;AAAA,IACF,CAAC;AAED,WAAO,MAAM;AACX,UAAI,QAAQ,CAAC,OAAO;AAClB,YAAI,WAAW,GAAG,cAAc,GAAG;AACjC,aAAG,eAAe,OAAO;AAAA,QAC3B,OAAO;AACL,aAAG,oBAAoB,UAAU,OAAO;AAAA,QAC1C;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EAEF,GAAG,CAAC,SAAS,CAAC;AAEd,SAAO,MAAM,IAAI,CAAC,SAAS,KAAK,OAAO;AACzC;","names":["value","query"]}