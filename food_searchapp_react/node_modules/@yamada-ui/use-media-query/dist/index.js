"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useMediaQuery: () => useMediaQuery
});
module.exports = __toCommonJS(src_exports);
var import_providers = require("@yamada-ui/providers");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var useMediaQuery = (query, { ssr = true, fallback } = {}) => {
  const { getWindow } = (0, import_providers.useEnvironment)();
  const queries = (0, import_utils.isArray)(query) ? query : [query];
  let fallbackValues = (0, import_utils.isArray)(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter((value2) => value2 != null);
  const [value, setValue] = (0, import_react.useState)(() => {
    return queries.map((media, index) => {
      var _a;
      return {
        media,
        matches: ssr ? !!fallbackValues[index] : !!((_a = getWindow()) == null ? void 0 : _a.matchMedia(media).matches)
      };
    });
  });
  (0, import_react.useEffect)(() => {
    const win = getWindow();
    if (!win)
      return;
    setValue(
      queries.map((media) => ({
        media,
        matches: win.matchMedia(media).matches
      }))
    );
    const mql = queries.map((query2) => win.matchMedia(query2));
    const handler = (ev) => {
      setValue(
        (prev) => prev.slice().map((item) => {
          if (item.media === ev.media)
            return { ...item, matches: ev.matches };
          return item;
        })
      );
    };
    mql.forEach((mq) => {
      if ((0, import_utils.isFunction)(mq.addListener)) {
        mq.addListener(handler);
      } else {
        mq.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mq) => {
        if ((0, import_utils.isFunction)(mq.removeListener)) {
          mq.removeListener(handler);
        } else {
          mq.removeEventListener("change", handler);
        }
      });
    };
  }, [getWindow]);
  return value.map((item) => item.matches);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useMediaQuery
});
//# sourceMappingURL=index.js.map