"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/accordion-panel.tsx
var accordion_panel_exports = {};
__export(accordion_panel_exports, {
  AccordionPanel: () => AccordionPanel
});
module.exports = __toCommonJS(accordion_panel_exports);
var import_core4 = require("@yamada-ui/core");
var import_transitions = require("@yamada-ui/transitions");
var import_utils4 = require("@yamada-ui/utils");

// src/accordion.tsx
var import_core = require("@yamada-ui/core");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var {
  DescendantsContextProvider,
  useDescendants,
  useDescendant: useAccordionDescendant
} = (0, import_use_descendant.createDescendant)();
var [AccordionProvider, useAccordionContext] = (0, import_utils.createContext)({
  name: "AccordionContext",
  errorMessage: `useAccordionContext returned is 'undefined'. Seems you forgot to wrap the components in "<Accordion />"`
});
var Accordion = (0, import_core.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Accordion", props);
  const {
    className,
    index: value,
    defaultIndex: defaultValue,
    isMultiple,
    isToggle,
    iconHidden,
    icon,
    onChange,
    ...rest
  } = (0, import_core.omitThemeProps)(mergedProps);
  if ((value || defaultValue) != null && !(0, import_utils.isArray)(value || defaultValue) && isMultiple) {
    console.warn(
      `Accordion: If 'isMultiple' is passed, then 'index' or 'defaultIndex' must be an array.`
    );
  }
  if (isMultiple && isToggle) {
    console.warn(
      `Accordion: If 'isMultiple' is passed, 'isToggle' will be ignored. Either remove 'isToggle' or 'isMultiple' depending on whether you want isMultiple accordions visible or not`
    );
  }
  const descendants = useDescendants();
  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(-1);
  const [index, setIndex] = (0, import_use_controllable_state.useControllableState)({
    value,
    defaultValue: () => isMultiple ? defaultValue != null ? defaultValue : [] : defaultValue != null ? defaultValue : -1,
    onChange
  });
  (0, import_react.useEffect)(() => {
    return () => setFocusedIndex(-1);
  }, []);
  const css = { w: "100%", ...styles.container };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    AccordionProvider,
    {
      value: {
        index,
        setIndex,
        focusedIndex,
        setFocusedIndex,
        isMultiple,
        isToggle,
        iconHidden,
        icon,
        styles
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_core.ui.ul,
        {
          ref,
          className: (0, import_utils.cx)("ui-accordion", className),
          __css: css,
          ...rest
        }
      )
    }
  ) });
});

// src/accordion-item.tsx
var import_core3 = require("@yamada-ui/core");
var import_utils3 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/accordion-label.tsx
var import_core2 = require("@yamada-ui/core");
var import_icon = require("@yamada-ui/icon");
var import_utils2 = require("@yamada-ui/utils");
var import_jsx_runtime2 = require("react/jsx-runtime");
var AccordionLabel = (0, import_core2.forwardRef)(
  ({ className, icon: customIcon, children, ...rest }, ref) => {
    var _a;
    const {
      isOpen,
      isDisabled = false,
      icon: supplementIcon,
      getLabelProps
    } = useAccordionItemContext();
    const { icon: generalIcon, iconHidden, styles } = useAccordionContext();
    const css = {
      display: "inline-flex",
      alignItems: "center",
      width: "100%",
      outline: 0,
      ...styles.button
    };
    const cloneCustomIcon = typeof customIcon === "function" ? customIcon({
      isExpanded: isOpen,
      isDisabled
    }) : customIcon;
    const cloneSupplementIcon = typeof supplementIcon === "function" ? supplementIcon({
      isExpanded: isOpen,
      isDisabled
    }) : supplementIcon;
    const cloneGeneralIcon = typeof generalIcon === "function" ? generalIcon({
      isExpanded: isOpen,
      isDisabled
    }) : generalIcon;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      import_core2.ui.button,
      {
        ...getLabelProps(rest, ref),
        className: (0, import_utils2.cx)("ui-accordion__label", className),
        __css: css,
        children: [
          children,
          !iconHidden ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(AccordionIcon, { children: (_a = cloneCustomIcon != null ? cloneCustomIcon : cloneSupplementIcon) != null ? _a : cloneGeneralIcon }) : null
        ]
      }
    );
  }
);
var AccordionIcon = ({
  className,
  children,
  ...rest
}) => {
  const { isOpen, isDisabled } = useAccordionItemContext();
  const { styles } = useAccordionContext();
  const css = {
    opacity: isDisabled ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : void 0,
    transition: "transform 0.2s",
    transformOrigin: "center",
    ...styles.icon
  };
  if (children)
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_core2.ui.span,
      {
        className: (0, import_utils2.cx)("ui-accordion__icon", className),
        __css: {
          display: "inline-flex",
          justifyContent: "center",
          alignItems: "center",
          ml: "auto"
        },
        children
      }
    );
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_icon.ChevronIcon,
    {
      className: (0, import_utils2.cx)("ui-accordion__icon", className),
      __css: css,
      ...rest
    }
  );
};

// src/accordion-item.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var [AccordionItemProvider, useAccordionItemContext] = (0, import_utils3.createContext)({
  name: "AccordionItemContext",
  errorMessage: `useAccordionItemContext returned is 'undefined'. Seems you forgot to wrap the components in "<AccordionItem />"`
});
var AccordionItem = (0, import_core3.forwardRef)(
  ({ className, isDisabled = false, label, icon, children, ...rest }, ref) => {
    const { index, setIndex, setFocusedIndex, isMultiple, isToggle, styles } = useAccordionContext();
    const {
      index: i,
      register,
      descendants
    } = useAccordionDescendant({ disabled: isDisabled });
    const isOpen = i !== -1 ? (0, import_utils3.isArray)(index) ? index.includes(i) : index === i : false;
    if (isOpen && isDisabled)
      console.warn(`Accordion: Cannot open a disabled accordion item`);
    const onChange = (0, import_react2.useCallback)(
      (isOpen2) => {
        if (i === -1)
          return;
        if (isMultiple && (0, import_utils3.isArray)(index)) {
          setIndex(isOpen2 ? index.concat(i) : index.filter((v) => v !== i));
        } else if (isOpen2) {
          setIndex(i);
        } else if (isToggle) {
          setIndex(-1);
        }
      },
      [isMultiple, isToggle, i, index, setIndex]
    );
    const onFocus = (0, import_react2.useCallback)(() => {
      setFocusedIndex(i);
    }, [setFocusedIndex, i]);
    const onClick = (0, import_react2.useCallback)(() => {
      onChange(!isOpen);
      setFocusedIndex(i);
    }, [i, setFocusedIndex, isOpen, onChange]);
    const onKeyDown = (0, import_react2.useCallback)(
      (ev) => {
        const actions = {
          ArrowDown: () => {
            const next = descendants.enabledNextValue(i);
            next == null ? void 0 : next.node.focus();
          },
          ArrowUp: () => {
            const prev = descendants.enabledPrevValue(i);
            prev == null ? void 0 : prev.node.focus();
          },
          Home: () => {
            const first = descendants.enabledFirstValue();
            first == null ? void 0 : first.node.focus();
          },
          End: () => {
            const last = descendants.enabledLastValue();
            last == null ? void 0 : last.node.focus();
          }
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        action(ev);
      },
      [descendants, i]
    );
    const getLabelProps = (0, import_react2.useCallback)(
      (props = {}, ref2 = null) => ({
        ...props,
        ref: (0, import_utils3.mergeRefs)(register, ref2),
        type: "button",
        disabled: isDisabled,
        "aria-expanded": (0, import_utils3.ariaAttr)(isOpen),
        onClick: (0, import_utils3.handlerAll)(props.onClick, onClick),
        onFocus: (0, import_utils3.handlerAll)(props.onFocus, onFocus),
        onKeyDown: (0, import_utils3.handlerAll)(props.onKeyDown, onKeyDown)
      }),
      [isDisabled, isOpen, onClick, onFocus, onKeyDown, register]
    );
    const getPanelProps = (0, import_react2.useCallback)(
      (props = {}, ref2 = null) => ({ ...props, ref: ref2 }),
      []
    );
    const css = { ...styles.item, overflowAnchor: "none" };
    const cloneLabel = typeof label === "function" ? label({
      isExpanded: isOpen,
      isDisabled
    }) : label;
    if (typeof children === "function")
      children = children({ isExpanded: isOpen, isDisabled });
    const validChildren = (0, import_utils3.getValidChildren)(children);
    const [customAccordionLabel] = (0, import_utils3.findChildren)(validChildren, AccordionLabel);
    const [customAccordionPanel] = (0, import_utils3.findChildren)(validChildren, AccordionPanel);
    const cloneChildren = !(0, import_utils3.isEmpty)(validChildren) ? (0, import_utils3.omitChildren)(validChildren, AccordionLabel, AccordionPanel) : children;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      AccordionItemProvider,
      {
        value: { isOpen, isDisabled, icon, getLabelProps, getPanelProps },
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
          import_core3.ui.li,
          {
            ref,
            className: (0, import_utils3.cx)("ui-accordion__item", className),
            "aria-expanded": (0, import_utils3.ariaAttr)(isOpen),
            __css: css,
            ...rest,
            children: [
              customAccordionLabel != null ? customAccordionLabel : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AccordionLabel, { children: cloneLabel }),
              customAccordionPanel != null ? customAccordionPanel : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AccordionPanel, { children: cloneChildren })
            ]
          }
        )
      }
    );
  }
);

// src/accordion-panel.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var AccordionPanel = (0, import_core4.forwardRef)(
  ({
    className,
    unmountOnExit,
    animationOpacity,
    startingHeight,
    endingHeight,
    transition,
    transitionEnd,
    delay,
    duration,
    children,
    ...rest
  }, ref) => {
    const { isOpen, getPanelProps } = useAccordionItemContext();
    const { styles } = useAccordionContext();
    const resolvedChildren = typeof children === "string" ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("p", { children }) : children;
    const css = { ...styles.panel };
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      import_transitions.Collapse,
      {
        ...{
          isOpen,
          unmountOnExit,
          animationOpacity,
          startingHeight,
          endingHeight,
          transition,
          transitionEnd,
          delay,
          duration
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          import_core4.ui.div,
          {
            ...getPanelProps(rest, ref),
            className: (0, import_utils4.cx)("ui-accordion__panel", className),
            __css: css,
            children: resolvedChildren
          }
        )
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AccordionPanel
});
//# sourceMappingURL=accordion-panel.js.map