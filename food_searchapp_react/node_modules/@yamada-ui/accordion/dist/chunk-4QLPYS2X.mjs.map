{"version":3,"sources":["../src/accordion.tsx"],"sourcesContent":["import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport { createContext, cx, isArray } from \"@yamada-ui/utils\"\nimport type { Dispatch, ReactNode, SetStateAction } from \"react\"\nimport { useEffect, useState } from \"react\"\n\nconst {\n  DescendantsContextProvider,\n  useDescendants,\n  useDescendant: useAccordionDescendant,\n} = createDescendant<HTMLButtonElement>()\n\nexport { useAccordionDescendant }\n\ntype AccordionContext = Pick<\n  AccordionOptions,\n  \"isMultiple\" | \"isToggle\" | \"icon\" | \"iconHidden\"\n> & {\n  index: number | number[]\n  setIndex: Dispatch<SetStateAction<number | number[]>>\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  styles: Record<string, CSSUIObject>\n}\n\nconst [AccordionProvider, useAccordionContext] =\n  createContext<AccordionContext>({\n    name: \"AccordionContext\",\n    errorMessage: `useAccordionContext returned is 'undefined'. Seems you forgot to wrap the components in \"<Accordion />\"`,\n  })\n\nexport { useAccordionContext }\n\ntype AccordionOptions = {\n  /**\n   * The index(es) of the accordion item to expand.\n   */\n  index?: number | number[]\n  /**\n   * The initial index(es) of the accordion item to expand.\n   */\n  defaultIndex?: number | number[]\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   *\n   * @default false\n   */\n  isMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   *\n   * @default false\n   */\n  isToggle?: boolean\n  /**\n   * If `true`, hide the accordion icon for all items.\n   *\n   * @default false\n   */\n  iconHidden?: boolean\n  /**\n   * The accordion icon for all items to use.\n   */\n  icon?:\n    | ReactNode\n    | ((props: { isExpanded: boolean; isDisabled: boolean }) => ReactNode)\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?: (index: number | number[]) => void\n}\n\nexport type AccordionProps = Omit<HTMLUIProps<\"ul\">, \"onChange\"> &\n  ThemeProps<\"Accordion\"> &\n  AccordionOptions\n\n/**\n * `Accordion` is a component for a list that displays information in an expandable or collapsible manner.\n *\n * @see Docs https://yamada-ui.com/components/disclosure/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"ul\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Accordion\", props)\n  const {\n    className,\n    index: value,\n    defaultIndex: defaultValue,\n    isMultiple,\n    isToggle,\n    iconHidden,\n    icon,\n    onChange,\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  if (\n    (value || defaultValue) != null &&\n    !isArray(value || defaultValue) &&\n    isMultiple\n  ) {\n    console.warn(\n      `Accordion: If 'isMultiple' is passed, then 'index' or 'defaultIndex' must be an array.`,\n    )\n  }\n\n  if (isMultiple && isToggle) {\n    console.warn(\n      `Accordion: If 'isMultiple' is passed, 'isToggle' will be ignored. Either remove 'isToggle' or 'isMultiple' depending on whether you want isMultiple accordions visible or not`,\n    )\n  }\n\n  const descendants = useDescendants()\n\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n\n  const [index, setIndex] = useControllableState({\n    value,\n    defaultValue: () => (isMultiple ? defaultValue ?? [] : defaultValue ?? -1),\n    onChange,\n  })\n\n  useEffect(() => {\n    return () => setFocusedIndex(-1)\n  }, [])\n\n  const css: CSSUIObject = { w: \"100%\", ...styles.container }\n\n  return (\n    <DescendantsContextProvider value={descendants}>\n      <AccordionProvider\n        value={{\n          index,\n          setIndex,\n          focusedIndex,\n          setFocusedIndex,\n          isMultiple,\n          isToggle,\n          iconHidden,\n          icon,\n          styles,\n        }}\n      >\n        <ui.ul\n          ref={ref}\n          className={cx(\"ui-accordion\", className)}\n          __css={css}\n          {...rest}\n        />\n      </AccordionProvider>\n    </DescendantsContextProvider>\n  )\n})\n"],"mappings":";;;AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AACjC,SAAS,eAAe,IAAI,eAAe;AAE3C,SAAS,WAAW,gBAAgB;AA0I5B;AAxIR,IAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA,eAAe;AACjB,IAAI,iBAAoC;AAexC,IAAM,CAAC,mBAAmB,mBAAmB,IAC3C,cAAgC;AAAA,EAC9B,MAAM;AAAA,EACN,cAAc;AAChB,CAAC;AAoDI,IAAM,YAAY,WAAiC,CAAC,OAAO,QAAQ;AACxE,QAAM,CAAC,QAAQ,WAAW,IAAI,uBAAuB,aAAa,KAAK;AACvE,QAAM;AAAA,IACJ;AAAA,IACA,OAAO;AAAA,IACP,cAAc;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,IAAI,eAAe,WAAW;AAE9B,OACG,SAAS,iBAAiB,QAC3B,CAAC,QAAQ,SAAS,YAAY,KAC9B,YACA;AACA,YAAQ;AAAA,MACN;AAAA,IACF;AAAA,EACF;AAEA,MAAI,cAAc,UAAU;AAC1B,YAAQ;AAAA,MACN;AAAA,IACF;AAAA,EACF;AAEA,QAAM,cAAc,eAAe;AAEnC,QAAM,CAAC,cAAc,eAAe,IAAI,SAAiB,EAAE;AAE3D,QAAM,CAAC,OAAO,QAAQ,IAAI,qBAAqB;AAAA,IAC7C;AAAA,IACA,cAAc,MAAO,aAAa,sCAAgB,CAAC,IAAI,sCAAgB;AAAA,IACvE;AAAA,EACF,CAAC;AAED,YAAU,MAAM;AACd,WAAO,MAAM,gBAAgB,EAAE;AAAA,EACjC,GAAG,CAAC,CAAC;AAEL,QAAM,MAAmB,EAAE,GAAG,QAAQ,GAAG,OAAO,UAAU;AAE1D,SACE,oBAAC,8BAA2B,OAAO,aACjC;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MAEA;AAAA,QAAC,GAAG;AAAA,QAAH;AAAA,UACC;AAAA,UACA,WAAW,GAAG,gBAAgB,SAAS;AAAA,UACvC,OAAO;AAAA,UACN,GAAG;AAAA;AAAA,MACN;AAAA;AAAA,EACF,GACF;AAEJ,CAAC;","names":[]}