"use client"
import {
  useAccordionContext,
  useAccordionDescendant
} from "./chunk-4QLPYS2X.mjs";

// src/accordion-label.tsx
import { ui as ui3, forwardRef as forwardRef3 } from "@yamada-ui/core";
import { ChevronIcon } from "@yamada-ui/icon";
import { cx as cx3 } from "@yamada-ui/utils";

// src/accordion-item.tsx
import { ui as ui2, forwardRef as forwardRef2 } from "@yamada-ui/core";
import {
  ariaAttr,
  createContext,
  cx as cx2,
  findChildren,
  getValidChildren,
  handlerAll,
  isArray,
  isEmpty,
  mergeRefs,
  omitChildren
} from "@yamada-ui/utils";
import { useCallback } from "react";

// src/accordion-panel.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { Collapse } from "@yamada-ui/transitions";
import { cx } from "@yamada-ui/utils";
import { jsx } from "react/jsx-runtime";
var AccordionPanel = forwardRef(
  ({
    className,
    unmountOnExit,
    animationOpacity,
    startingHeight,
    endingHeight,
    transition,
    transitionEnd,
    delay,
    duration,
    children,
    ...rest
  }, ref) => {
    const { isOpen, getPanelProps } = useAccordionItemContext();
    const { styles } = useAccordionContext();
    const resolvedChildren = typeof children === "string" ? /* @__PURE__ */ jsx("p", { children }) : children;
    const css = { ...styles.panel };
    return /* @__PURE__ */ jsx(
      Collapse,
      {
        ...{
          isOpen,
          unmountOnExit,
          animationOpacity,
          startingHeight,
          endingHeight,
          transition,
          transitionEnd,
          delay,
          duration
        },
        children: /* @__PURE__ */ jsx(
          ui.div,
          {
            ...getPanelProps(rest, ref),
            className: cx("ui-accordion__panel", className),
            __css: css,
            children: resolvedChildren
          }
        )
      }
    );
  }
);

// src/accordion-item.tsx
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var [AccordionItemProvider, useAccordionItemContext] = createContext({
  name: "AccordionItemContext",
  errorMessage: `useAccordionItemContext returned is 'undefined'. Seems you forgot to wrap the components in "<AccordionItem />"`
});
var AccordionItem = forwardRef2(
  ({ className, isDisabled = false, label, icon, children, ...rest }, ref) => {
    const { index, setIndex, setFocusedIndex, isMultiple, isToggle, styles } = useAccordionContext();
    const {
      index: i,
      register,
      descendants
    } = useAccordionDescendant({ disabled: isDisabled });
    const isOpen = i !== -1 ? isArray(index) ? index.includes(i) : index === i : false;
    if (isOpen && isDisabled)
      console.warn(`Accordion: Cannot open a disabled accordion item`);
    const onChange = useCallback(
      (isOpen2) => {
        if (i === -1)
          return;
        if (isMultiple && isArray(index)) {
          setIndex(isOpen2 ? index.concat(i) : index.filter((v) => v !== i));
        } else if (isOpen2) {
          setIndex(i);
        } else if (isToggle) {
          setIndex(-1);
        }
      },
      [isMultiple, isToggle, i, index, setIndex]
    );
    const onFocus = useCallback(() => {
      setFocusedIndex(i);
    }, [setFocusedIndex, i]);
    const onClick = useCallback(() => {
      onChange(!isOpen);
      setFocusedIndex(i);
    }, [i, setFocusedIndex, isOpen, onChange]);
    const onKeyDown = useCallback(
      (ev) => {
        const actions = {
          ArrowDown: () => {
            const next = descendants.enabledNextValue(i);
            next == null ? void 0 : next.node.focus();
          },
          ArrowUp: () => {
            const prev = descendants.enabledPrevValue(i);
            prev == null ? void 0 : prev.node.focus();
          },
          Home: () => {
            const first = descendants.enabledFirstValue();
            first == null ? void 0 : first.node.focus();
          },
          End: () => {
            const last = descendants.enabledLastValue();
            last == null ? void 0 : last.node.focus();
          }
        };
        const action = actions[ev.key];
        if (!action)
          return;
        ev.preventDefault();
        action(ev);
      },
      [descendants, i]
    );
    const getLabelProps = useCallback(
      (props = {}, ref2 = null) => ({
        ...props,
        ref: mergeRefs(register, ref2),
        type: "button",
        disabled: isDisabled,
        "aria-expanded": ariaAttr(isOpen),
        onClick: handlerAll(props.onClick, onClick),
        onFocus: handlerAll(props.onFocus, onFocus),
        onKeyDown: handlerAll(props.onKeyDown, onKeyDown)
      }),
      [isDisabled, isOpen, onClick, onFocus, onKeyDown, register]
    );
    const getPanelProps = useCallback(
      (props = {}, ref2 = null) => ({ ...props, ref: ref2 }),
      []
    );
    const css = { ...styles.item, overflowAnchor: "none" };
    const cloneLabel = typeof label === "function" ? label({
      isExpanded: isOpen,
      isDisabled
    }) : label;
    if (typeof children === "function")
      children = children({ isExpanded: isOpen, isDisabled });
    const validChildren = getValidChildren(children);
    const [customAccordionLabel] = findChildren(validChildren, AccordionLabel);
    const [customAccordionPanel] = findChildren(validChildren, AccordionPanel);
    const cloneChildren = !isEmpty(validChildren) ? omitChildren(validChildren, AccordionLabel, AccordionPanel) : children;
    return /* @__PURE__ */ jsx2(
      AccordionItemProvider,
      {
        value: { isOpen, isDisabled, icon, getLabelProps, getPanelProps },
        children: /* @__PURE__ */ jsxs(
          ui2.li,
          {
            ref,
            className: cx2("ui-accordion__item", className),
            "aria-expanded": ariaAttr(isOpen),
            __css: css,
            ...rest,
            children: [
              customAccordionLabel != null ? customAccordionLabel : /* @__PURE__ */ jsx2(AccordionLabel, { children: cloneLabel }),
              customAccordionPanel != null ? customAccordionPanel : /* @__PURE__ */ jsx2(AccordionPanel, { children: cloneChildren })
            ]
          }
        )
      }
    );
  }
);

// src/accordion-label.tsx
import { jsx as jsx3, jsxs as jsxs2 } from "react/jsx-runtime";
var AccordionLabel = forwardRef3(
  ({ className, icon: customIcon, children, ...rest }, ref) => {
    var _a;
    const {
      isOpen,
      isDisabled = false,
      icon: supplementIcon,
      getLabelProps
    } = useAccordionItemContext();
    const { icon: generalIcon, iconHidden, styles } = useAccordionContext();
    const css = {
      display: "inline-flex",
      alignItems: "center",
      width: "100%",
      outline: 0,
      ...styles.button
    };
    const cloneCustomIcon = typeof customIcon === "function" ? customIcon({
      isExpanded: isOpen,
      isDisabled
    }) : customIcon;
    const cloneSupplementIcon = typeof supplementIcon === "function" ? supplementIcon({
      isExpanded: isOpen,
      isDisabled
    }) : supplementIcon;
    const cloneGeneralIcon = typeof generalIcon === "function" ? generalIcon({
      isExpanded: isOpen,
      isDisabled
    }) : generalIcon;
    return /* @__PURE__ */ jsxs2(
      ui3.button,
      {
        ...getLabelProps(rest, ref),
        className: cx3("ui-accordion__label", className),
        __css: css,
        children: [
          children,
          !iconHidden ? /* @__PURE__ */ jsx3(AccordionIcon, { children: (_a = cloneCustomIcon != null ? cloneCustomIcon : cloneSupplementIcon) != null ? _a : cloneGeneralIcon }) : null
        ]
      }
    );
  }
);
var AccordionIcon = ({
  className,
  children,
  ...rest
}) => {
  const { isOpen, isDisabled } = useAccordionItemContext();
  const { styles } = useAccordionContext();
  const css = {
    opacity: isDisabled ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : void 0,
    transition: "transform 0.2s",
    transformOrigin: "center",
    ...styles.icon
  };
  if (children)
    return /* @__PURE__ */ jsx3(
      ui3.span,
      {
        className: cx3("ui-accordion__icon", className),
        __css: {
          display: "inline-flex",
          justifyContent: "center",
          alignItems: "center",
          ml: "auto"
        },
        children
      }
    );
  return /* @__PURE__ */ jsx3(
    ChevronIcon,
    {
      className: cx3("ui-accordion__icon", className),
      __css: css,
      ...rest
    }
  );
};

export {
  AccordionLabel,
  AccordionPanel,
  useAccordionItemContext,
  AccordionItem
};
//# sourceMappingURL=chunk-DJKRUYQU.mjs.map