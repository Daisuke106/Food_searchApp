"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/accordion.tsx
var accordion_exports = {};
__export(accordion_exports, {
  Accordion: () => Accordion,
  useAccordionContext: () => useAccordionContext,
  useAccordionDescendant: () => useAccordionDescendant
});
module.exports = __toCommonJS(accordion_exports);
var import_core = require("@yamada-ui/core");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var {
  DescendantsContextProvider,
  useDescendants,
  useDescendant: useAccordionDescendant
} = (0, import_use_descendant.createDescendant)();
var [AccordionProvider, useAccordionContext] = (0, import_utils.createContext)({
  name: "AccordionContext",
  errorMessage: `useAccordionContext returned is 'undefined'. Seems you forgot to wrap the components in "<Accordion />"`
});
var Accordion = (0, import_core.forwardRef)((props, ref) => {
  const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Accordion", props);
  const {
    className,
    index: value,
    defaultIndex: defaultValue,
    isMultiple,
    isToggle,
    iconHidden,
    icon,
    onChange,
    ...rest
  } = (0, import_core.omitThemeProps)(mergedProps);
  if ((value || defaultValue) != null && !(0, import_utils.isArray)(value || defaultValue) && isMultiple) {
    console.warn(
      `Accordion: If 'isMultiple' is passed, then 'index' or 'defaultIndex' must be an array.`
    );
  }
  if (isMultiple && isToggle) {
    console.warn(
      `Accordion: If 'isMultiple' is passed, 'isToggle' will be ignored. Either remove 'isToggle' or 'isMultiple' depending on whether you want isMultiple accordions visible or not`
    );
  }
  const descendants = useDescendants();
  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(-1);
  const [index, setIndex] = (0, import_use_controllable_state.useControllableState)({
    value,
    defaultValue: () => isMultiple ? defaultValue != null ? defaultValue : [] : defaultValue != null ? defaultValue : -1,
    onChange
  });
  (0, import_react.useEffect)(() => {
    return () => setFocusedIndex(-1);
  }, []);
  const css = { w: "100%", ...styles.container };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    AccordionProvider,
    {
      value: {
        index,
        setIndex,
        focusedIndex,
        setFocusedIndex,
        isMultiple,
        isToggle,
        iconHidden,
        icon,
        styles
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_core.ui.ul,
        {
          ref,
          className: (0, import_utils.cx)("ui-accordion", className),
          __css: css,
          ...rest
        }
      )
    }
  ) });
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Accordion,
  useAccordionContext,
  useAccordionDescendant
});
//# sourceMappingURL=accordion.js.map