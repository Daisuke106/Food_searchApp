import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, ThemeProps, CSSUIObject } from '@yamada-ui/core';
import * as _yamada_ui_use_descendant from '@yamada-ui/use-descendant';
import { Dispatch, SetStateAction, ReactNode } from 'react';

declare const useAccordionDescendant: (options?: {
    disabled?: boolean | undefined;
    id?: string | undefined;
    filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLButtonElement, {}> | undefined; /**
     * The index(es) of the accordion item to expand.
     */
} | undefined) => {
    descendants: {
        register: (nodeOrOptions: HTMLElement | _yamada_ui_use_descendant.DescendantOptions<HTMLElement, Record<string, any>> | null) => void | ((node: HTMLElement | null) => void);
        unregister: (node: HTMLElement) => void;
        destroy: () => void;
        count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>>[];
        value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        indexOf: (node: HTMLElement | null) => number;
        firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>>[];
        enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledIndexOf: (node: HTMLElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
    };
    index: number;
    enabledIndex: number;
    register: (node: HTMLButtonElement | null) => void;
};

type AccordionContext = Pick<AccordionOptions, "isMultiple" | "isToggle" | "icon" | "iconHidden"> & {
    index: number | number[];
    setIndex: Dispatch<SetStateAction<number | number[]>>;
    focusedIndex: number;
    setFocusedIndex: Dispatch<SetStateAction<number>>;
    styles: Record<string, CSSUIObject>;
};
declare const useAccordionContext: () => AccordionContext;

type AccordionOptions = {
    /**
     * The index(es) of the accordion item to expand.
     */
    index?: number | number[];
    /**
     * The initial index(es) of the accordion item to expand.
     */
    defaultIndex?: number | number[];
    /**
     * If `true`, multiple accordion items can be expanded at once.
     *
     * @default false
     */
    isMultiple?: boolean;
    /**
     * If `true`, any expanded accordion item can be collapsed again.
     *
     * @default false
     */
    isToggle?: boolean;
    /**
     * If `true`, hide the accordion icon for all items.
     *
     * @default false
     */
    iconHidden?: boolean;
    /**
     * The accordion icon for all items to use.
     */
    icon?: ReactNode | ((props: {
        isExpanded: boolean;
        isDisabled: boolean;
    }) => ReactNode);
    /**
     * The callback invoked when accordion items are expanded or collapsed.
     */
    onChange?: (index: number | number[]) => void;
};
type AccordionProps = Omit<HTMLUIProps<"ul">, "onChange"> & ThemeProps<"Accordion"> & AccordionOptions;
/**
 * `Accordion` is a component for a list that displays information in an expandable or collapsible manner.
 *
 * @see Docs https://yamada-ui.com/components/disclosure/accordion
 */
declare const Accordion: _yamada_ui_core.Component<"ul", AccordionProps>;

export { Accordion, type AccordionProps, useAccordionContext, useAccordionDescendant };
