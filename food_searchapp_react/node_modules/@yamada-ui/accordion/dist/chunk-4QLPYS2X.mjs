"use client"

// src/accordion.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import { createDescendant } from "@yamada-ui/use-descendant";
import { createContext, cx, isArray } from "@yamada-ui/utils";
import { useEffect, useState } from "react";
import { jsx } from "react/jsx-runtime";
var {
  DescendantsContextProvider,
  useDescendants,
  useDescendant: useAccordionDescendant
} = createDescendant();
var [AccordionProvider, useAccordionContext] = createContext({
  name: "AccordionContext",
  errorMessage: `useAccordionContext returned is 'undefined'. Seems you forgot to wrap the components in "<Accordion />"`
});
var Accordion = forwardRef((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle("Accordion", props);
  const {
    className,
    index: value,
    defaultIndex: defaultValue,
    isMultiple,
    isToggle,
    iconHidden,
    icon,
    onChange,
    ...rest
  } = omitThemeProps(mergedProps);
  if ((value || defaultValue) != null && !isArray(value || defaultValue) && isMultiple) {
    console.warn(
      `Accordion: If 'isMultiple' is passed, then 'index' or 'defaultIndex' must be an array.`
    );
  }
  if (isMultiple && isToggle) {
    console.warn(
      `Accordion: If 'isMultiple' is passed, 'isToggle' will be ignored. Either remove 'isToggle' or 'isMultiple' depending on whether you want isMultiple accordions visible or not`
    );
  }
  const descendants = useDescendants();
  const [focusedIndex, setFocusedIndex] = useState(-1);
  const [index, setIndex] = useControllableState({
    value,
    defaultValue: () => isMultiple ? defaultValue != null ? defaultValue : [] : defaultValue != null ? defaultValue : -1,
    onChange
  });
  useEffect(() => {
    return () => setFocusedIndex(-1);
  }, []);
  const css = { w: "100%", ...styles.container };
  return /* @__PURE__ */ jsx(DescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ jsx(
    AccordionProvider,
    {
      value: {
        index,
        setIndex,
        focusedIndex,
        setFocusedIndex,
        isMultiple,
        isToggle,
        iconHidden,
        icon,
        styles
      },
      children: /* @__PURE__ */ jsx(
        ui.ul,
        {
          ref,
          className: cx("ui-accordion", className),
          __css: css,
          ...rest
        }
      )
    }
  ) });
});

export {
  useAccordionDescendant,
  useAccordionContext,
  Accordion
};
//# sourceMappingURL=chunk-4QLPYS2X.mjs.map