"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/popover.tsx
var popover_exports = {};
__export(popover_exports, {
  Popover: () => Popover,
  popoverProperties: () => popoverProperties,
  usePopover: () => usePopover
});
module.exports = __toCommonJS(popover_exports);
var import_core = require("@yamada-ui/core");
var import_use_animation = require("@yamada-ui/use-animation");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_use_focus = require("@yamada-ui/use-focus");
var import_use_popper = require("@yamada-ui/use-popper");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var popoverProperties = [
  ...import_use_popper.popperProperties,
  "isOpen",
  "defaultIsOpen",
  "onOpen",
  "onClose",
  "initialFocusRef",
  "restoreFocus",
  "autoFocus",
  "closeOnBlur",
  "closeOnEsc",
  "closeOnButton",
  "trigger",
  "openDelay",
  "closeDelay",
  "isLazy",
  "lazyBehavior",
  "animation",
  "duration"
];
var [PopoverProvider, usePopover] = (0, import_utils.createContext)({
  strict: false,
  name: "PopoverContext"
});
var Popover = (props) => {
  const [styles, mergedProps] = (0, import_core.useMultiComponentStyle)("Popover", props);
  const {
    children,
    initialFocusRef,
    restoreFocus = true,
    autoFocus = true,
    closeOnBlur = true,
    closeOnEsc = true,
    closeOnButton = true,
    trigger = "click",
    openDelay = 200,
    closeDelay = 200,
    isLazy,
    lazyBehavior = "unmount",
    animation = "scale",
    duration,
    relatedRef,
    ...rest
  } = (0, import_core.omitThemeProps)(mergedProps);
  const { isOpen, onOpen, onClose, onToggle } = (0, import_use_disclosure.useDisclosure)(mergedProps);
  const anchorRef = (0, import_react.useRef)(null);
  const triggerRef = (0, import_react.useRef)(null);
  const popoverRef = (0, import_react.useRef)(null);
  const { present, onAnimationComplete } = (0, import_use_animation.useAnimationObserver)({
    isOpen,
    ref: popoverRef
  });
  const openTimeout = (0, import_react.useRef)(void 0);
  const closeTimeout = (0, import_react.useRef)(void 0);
  const isHoveringRef = (0, import_react.useRef)(false);
  const hasBeenOpened = (0, import_react.useRef)(false);
  if (isOpen)
    hasBeenOpened.current = true;
  const { referenceRef, getPopperProps, forceUpdate, transformOrigin } = (0, import_use_popper.usePopper)({
    ...rest,
    enabled: isOpen
  });
  (0, import_react.useEffect)(() => {
    return () => {
      if (openTimeout.current)
        clearTimeout(openTimeout.current);
      if (closeTimeout.current)
        clearTimeout(closeTimeout.current);
    };
  }, []);
  (0, import_use_focus.useFocusOnPointerDown)({
    enabled: isOpen,
    ref: triggerRef
  });
  (0, import_use_focus.useFocusOnHide)(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: restoreFocus && trigger === "click"
  });
  (0, import_use_focus.useFocusOnShow)(popoverRef, {
    focusRef: initialFocusRef,
    visible: isOpen,
    shouldFocus: autoFocus && trigger === "click"
  });
  const shouldRenderChildren = (0, import_use_disclosure.useLazyDisclosure)({
    wasSelected: hasBeenOpened.current,
    enabled: isLazy,
    mode: lazyBehavior,
    isSelected: present
  });
  const getPopoverProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const popoverProps = {
        ...props2,
        style: {
          ...props2.style,
          transformOrigin
        },
        ref: (0, import_utils.mergeRefs)(popoverRef, ref),
        children: shouldRenderChildren ? props2.children : null,
        tabIndex: -1,
        onKeyDown: (0, import_utils.handlerAll)(props2.onKeyDown, (ev) => {
          if (closeOnEsc && ev.key === "Escape")
            onClose();
        }),
        onBlur: (0, import_utils.handlerAll)(props2.onBlur, (ev) => {
          const relatedTarget = (0, import_utils.getEventRelatedTarget)(ev);
          const targetIsPopover = (0, import_utils.isContains)(popoverRef.current, relatedTarget);
          const targetIsTrigger = (0, import_utils.isContains)(triggerRef.current, relatedTarget);
          const targetIsRelated = (relatedRef == null ? void 0 : relatedRef.current) ? (0, import_utils.isContains)(relatedRef.current, relatedTarget) : false;
          const isValidBlur = !targetIsPopover && !targetIsTrigger && !targetIsRelated;
          if (isOpen && closeOnBlur && isValidBlur)
            onClose();
        })
      };
      if (trigger === "hover") {
        popoverProps.onMouseEnter = (0, import_utils.handlerAll)(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
        });
        popoverProps.onMouseLeave = (0, import_utils.handlerAll)(props2.onMouseLeave, (ev) => {
          if (ev.nativeEvent.relatedTarget === null)
            return;
          isHoveringRef.current = false;
          if (closeOnBlur)
            setTimeout(onClose, closeDelay);
        });
      }
      return popoverProps;
    },
    [
      closeDelay,
      closeOnBlur,
      closeOnEsc,
      isOpen,
      onClose,
      shouldRenderChildren,
      transformOrigin,
      trigger,
      relatedRef
    ]
  );
  const maybeReferenceRef = (0, import_react.useCallback)(
    (node) => {
      if (anchorRef.current == null)
        referenceRef(node);
    },
    [referenceRef]
  );
  const getTriggerProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      const triggerProps = {
        ...props2,
        ref: (0, import_utils.mergeRefs)(triggerRef, ref, maybeReferenceRef)
      };
      if (trigger === "click") {
        triggerProps.onClick = (0, import_utils.handlerAll)(props2.onClick, onToggle);
        triggerProps.onBlur = (0, import_utils.handlerAll)(props2.onBlur, (ev) => {
          const relatedTarget = (0, import_utils.getEventRelatedTarget)(ev);
          const isValidBlur = !(0, import_utils.isContains)(popoverRef.current, relatedTarget);
          if (isOpen && closeOnBlur && isValidBlur)
            onClose();
        });
      }
      if (trigger === "hover") {
        triggerProps.onFocus = (0, import_utils.handlerAll)(props2.onFocus, () => {
          if (openTimeout.current === void 0)
            onOpen();
        });
        triggerProps.onBlur = (0, import_utils.handlerAll)(props2.onBlur, (ev) => {
          const relatedTarget = (0, import_utils.getEventRelatedTarget)(ev);
          const isValidBlur = !(0, import_utils.isContains)(popoverRef.current, relatedTarget);
          if (isOpen && closeOnBlur && isValidBlur)
            onClose();
        });
        triggerProps.onKeyDown = (0, import_utils.handlerAll)(props2.onKeyDown, (ev) => {
          if (ev.key === "Escape")
            onClose();
        });
        triggerProps.onMouseEnter = (0, import_utils.handlerAll)(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
          openTimeout.current = window.setTimeout(onOpen, openDelay);
        });
        triggerProps.onMouseLeave = (0, import_utils.handlerAll)(props2.onMouseLeave, () => {
          isHoveringRef.current = false;
          if (openTimeout.current) {
            clearTimeout(openTimeout.current);
            openTimeout.current = void 0;
          }
          closeTimeout.current = window.setTimeout(() => {
            if (!isHoveringRef.current)
              onClose();
          }, closeDelay);
        });
      }
      return triggerProps;
    },
    [
      closeDelay,
      closeOnBlur,
      isOpen,
      maybeReferenceRef,
      onClose,
      onOpen,
      onToggle,
      openDelay,
      trigger
    ]
  );
  const getAnchorProps = (0, import_react.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: (0, import_utils.mergeRefs)(ref, anchorRef, referenceRef)
      };
    },
    [anchorRef, referenceRef]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    PopoverProvider,
    {
      value: {
        isOpen,
        onClose,
        closeOnButton,
        onAnimationComplete,
        forceUpdate,
        getTriggerProps,
        getAnchorProps,
        getPopperProps,
        getPopoverProps,
        animation,
        duration,
        styles
      },
      children: (0, import_utils.runIfFunc)(children, {
        isOpen,
        onClose,
        forceUpdate
      })
    }
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Popover,
  popoverProperties,
  usePopover
});
//# sourceMappingURL=popover.js.map