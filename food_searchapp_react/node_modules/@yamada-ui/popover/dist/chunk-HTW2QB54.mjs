"use client"
import {
  PopoverCloseButton
} from "./chunk-6J7DV7JV.mjs";
import {
  usePopover
} from "./chunk-56RWB3AQ.mjs";

// src/popover-content.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { motion } from "@yamada-ui/motion";
import { scaleFadeProps, slideFadeProps } from "@yamada-ui/transitions";
import { cx, findChildren, funcAll, getValidChildren } from "@yamada-ui/utils";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var getPopoverContentProps = (animation = "scale", duration) => {
  const custom = {
    reverse: true,
    duration,
    enter: { visibility: "visible" },
    transitionEnd: { exit: { visibility: "hidden" } }
  };
  switch (animation) {
    case "scale":
      return {
        ...scaleFadeProps,
        custom: { ...custom, scale: 0.95 }
      };
    case "top":
      return {
        ...slideFadeProps,
        custom: { ...custom, offsetX: 0, offsetY: -16 }
      };
    case "right":
      return {
        ...slideFadeProps,
        custom: { ...custom, offsetX: 16, offsetY: 0 }
      };
    case "left":
      return {
        ...slideFadeProps,
        custom: { ...custom, offsetX: -16, offsetY: 0 }
      };
    case "bottom":
      return {
        ...slideFadeProps,
        custom: { ...custom, offsetX: 0, offsetY: 16 }
      };
  }
};
var PopoverContent = forwardRef(
  ({
    as = "section",
    className,
    children,
    w,
    width,
    minW,
    minWidth,
    z: zProp,
    zIndex: zIndexProp,
    __css: __cssProp,
    ...rest
  }, ref) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    const {
      isOpen,
      closeOnButton,
      getPopperProps,
      getPopoverProps,
      onAnimationComplete,
      animation,
      duration,
      styles
    } = usePopover();
    const validChildren = getValidChildren(children);
    const [customPopoverCloseButton, ...cloneChildren] = findChildren(
      validChildren,
      PopoverCloseButton
    );
    const resolvedChildren = () => {
      return /* @__PURE__ */ jsxs(Fragment, { children: [
        customPopoverCloseButton != null ? customPopoverCloseButton : closeOnButton ? /* @__PURE__ */ jsx(PopoverCloseButton, {}) : null,
        cloneChildren
      ] });
    };
    const { z, zIndex, ...__css } = (_a = __cssProp != null ? __cssProp : styles.container) != null ? _a : {};
    const css = {
      position: "relative",
      w: "100%",
      display: "flex",
      flexDirection: "column",
      outline: 0,
      ...__css
    };
    w = (_e = w != null ? w : width) != null ? _e : (_d = (_b = styles.container) == null ? void 0 : _b.w) != null ? _d : (_c = styles.container) == null ? void 0 : _c.width;
    minW = (_i = minW != null ? minW : minWidth) != null ? _i : (_h = (_f = styles.container) == null ? void 0 : _f.minW) != null ? _h : (_g = styles.container) == null ? void 0 : _g.minWidth;
    const resolvedZIndex = (_k = (_j = zIndexProp != null ? zIndexProp : zProp) != null ? _j : zIndex) != null ? _k : z;
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ...getPopperProps({
          style: { visibility: isOpen ? "visible" : "hidden" }
        }),
        className: "ui-popover",
        w,
        minW,
        zIndex: resolvedZIndex,
        children: /* @__PURE__ */ jsx(
          ui.section,
          {
            as: motion[as],
            className: cx("ui-popover__content", className),
            ...animation !== "none" ? getPopoverContentProps(animation, duration) : {},
            ...getPopoverProps(
              {
                ...rest,
                children: resolvedChildren()
              },
              ref
            ),
            initial: "exit",
            animate: isOpen ? "enter" : "exit",
            exit: "exit",
            onAnimationComplete: funcAll(
              onAnimationComplete,
              rest.onAnimationComplete
            ),
            __css: css
          }
        )
      }
    );
  }
);

export {
  PopoverContent
};
//# sourceMappingURL=chunk-HTW2QB54.mjs.map