import { ThemeProps, CSSUIObject } from '@yamada-ui/core';
import { MotionTransitionProperties, MotionUIPropGetter } from '@yamada-ui/motion';
import { LazyMode } from '@yamada-ui/use-disclosure';
import { UsePopperProps } from '@yamada-ui/use-popper';
import { PropGetter } from '@yamada-ui/utils';
import { PropsWithChildren, FC, RefObject } from 'react';

declare const popoverProperties: any[];
type PopoverOptions = {
    /**
     * If `true`, the popover will be opened.
     */
    isOpen?: boolean;
    /**
     * If `true`, the popover will be initially opened.
     */
    defaultIsOpen?: boolean;
    /**
     * Callback fired when the popover opens.
     */
    onOpen?: () => void;
    /**
     * Callback fired when the popover closes.
     */
    onClose?: () => void;
    /**
     * The `ref` of the element that should receive focus when the popover opens.
     */
    initialFocusRef?: RefObject<{
        focus(): void;
    }>;
    /**
     * The `ref` of the element related to the popover.
     * This is used during the `onBlur` event.
     */
    relatedRef?: RefObject<HTMLElement>;
    /**
     * If `true`, focus will be returned to the element that triggers the popover when it closes.
     *
     * @default true
     */
    restoreFocus?: boolean;
    /**
     * If `true`, focus will be transferred to the first interactive element when the popover opens.
     *
     * @default true
     */
    autoFocus?: boolean;
    /**
     * If `true`, the popover will close when you blur out it by clicking outside or tabbing out.
     *
     * @default true
     */
    closeOnBlur?: boolean;
    /**
     * If `true`, the popover will close when you hit the `Esc` key.
     *
     * @default true
     */
    closeOnEsc?: boolean;
    /**
     * If `true`, display the popover close button.
     *
     * @default true
     */
    closeOnButton?: boolean;
    /**
     * The interaction that triggers the popover.
     *
     * - `hover`: means the popover will open when you hover with mouse or focus with keyboard on the popover trigger.
     * - `click`: means the popover will open on click or press `Enter` to `Space` on keyboard.
     *
     * @default 'click'
     */
    trigger?: "click" | "hover" | "never";
    /**
     * The number of delay time to open.
     *
     * @default 200
     */
    openDelay?: number;
    /**
     * The number of delay time to close.
     *
     * @default 200
     */
    closeDelay?: number;
    /**
     * If `true`, the PopoverContent rendering will be deferred until the popover is open.
     *
     * @default false
     */
    isLazy?: boolean;
    /**
     * The lazy behavior of popover's content when not visible. Only works when `isLazy={true}`
     *
     * - `unmount`: The popover's content is always unmounted when not open.
     * - `keepMounted`: The popover's content initially unmounted, but stays mounted when popover is open.
     *
     * @default 'unmount'
     */
    lazyBehavior?: LazyMode;
    /**
     * The animation of the popover.
     *
     * @default 'scale'
     */
    animation?: "scale" | "top" | "right" | "left" | "bottom" | "none";
    /**
     * The animation duration.
     */
    duration?: MotionTransitionProperties["duration"];
};
type PopoverProps = ThemeProps<"Popover"> & Omit<UsePopperProps, "enabled"> & PropsWithChildren<PopoverOptions>;
type PopoverContext = Pick<PopoverOptions, "isOpen" | "onClose" | "closeOnButton" | "animation" | "duration"> & {
    onAnimationComplete: () => void;
    forceUpdate: () => void | undefined;
    getTriggerProps: PropGetter;
    getAnchorProps: PropGetter;
    getPopperProps: PropGetter;
    getPopoverProps: MotionUIPropGetter;
    styles: Record<string, CSSUIObject>;
};
declare const usePopover: () => PopoverContext;

/**
 * `Popover` is a component that floats around an element to display information.
 *
 * @see Docs https://yamada-ui.com/components/overlay/popover
 */
declare const Popover: FC<PopoverProps>;

export { Popover, type PopoverProps, popoverProperties, usePopover };
