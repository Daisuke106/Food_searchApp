"use client"

// src/popover.tsx
import { useMultiComponentStyle, omitThemeProps } from "@yamada-ui/core";
import { useAnimationObserver } from "@yamada-ui/use-animation";
import { useDisclosure, useLazyDisclosure } from "@yamada-ui/use-disclosure";
import {
  useFocusOnHide,
  useFocusOnShow,
  useFocusOnPointerDown
} from "@yamada-ui/use-focus";
import { usePopper, popperProperties } from "@yamada-ui/use-popper";
import {
  createContext,
  getEventRelatedTarget,
  handlerAll,
  isContains,
  mergeRefs,
  runIfFunc
} from "@yamada-ui/utils";
import { useCallback, useEffect, useRef } from "react";
import { jsx } from "react/jsx-runtime";
var popoverProperties = [
  ...popperProperties,
  "isOpen",
  "defaultIsOpen",
  "onOpen",
  "onClose",
  "initialFocusRef",
  "restoreFocus",
  "autoFocus",
  "closeOnBlur",
  "closeOnEsc",
  "closeOnButton",
  "trigger",
  "openDelay",
  "closeDelay",
  "isLazy",
  "lazyBehavior",
  "animation",
  "duration"
];
var [PopoverProvider, usePopover] = createContext({
  strict: false,
  name: "PopoverContext"
});
var Popover = (props) => {
  const [styles, mergedProps] = useMultiComponentStyle("Popover", props);
  const {
    children,
    initialFocusRef,
    restoreFocus = true,
    autoFocus = true,
    closeOnBlur = true,
    closeOnEsc = true,
    closeOnButton = true,
    trigger = "click",
    openDelay = 200,
    closeDelay = 200,
    isLazy,
    lazyBehavior = "unmount",
    animation = "scale",
    duration,
    relatedRef,
    ...rest
  } = omitThemeProps(mergedProps);
  const { isOpen, onOpen, onClose, onToggle } = useDisclosure(mergedProps);
  const anchorRef = useRef(null);
  const triggerRef = useRef(null);
  const popoverRef = useRef(null);
  const { present, onAnimationComplete } = useAnimationObserver({
    isOpen,
    ref: popoverRef
  });
  const openTimeout = useRef(void 0);
  const closeTimeout = useRef(void 0);
  const isHoveringRef = useRef(false);
  const hasBeenOpened = useRef(false);
  if (isOpen)
    hasBeenOpened.current = true;
  const { referenceRef, getPopperProps, forceUpdate, transformOrigin } = usePopper({
    ...rest,
    enabled: isOpen
  });
  useEffect(() => {
    return () => {
      if (openTimeout.current)
        clearTimeout(openTimeout.current);
      if (closeTimeout.current)
        clearTimeout(closeTimeout.current);
    };
  }, []);
  useFocusOnPointerDown({
    enabled: isOpen,
    ref: triggerRef
  });
  useFocusOnHide(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: restoreFocus && trigger === "click"
  });
  useFocusOnShow(popoverRef, {
    focusRef: initialFocusRef,
    visible: isOpen,
    shouldFocus: autoFocus && trigger === "click"
  });
  const shouldRenderChildren = useLazyDisclosure({
    wasSelected: hasBeenOpened.current,
    enabled: isLazy,
    mode: lazyBehavior,
    isSelected: present
  });
  const getPopoverProps = useCallback(
    (props2 = {}, ref = null) => {
      const popoverProps = {
        ...props2,
        style: {
          ...props2.style,
          transformOrigin
        },
        ref: mergeRefs(popoverRef, ref),
        children: shouldRenderChildren ? props2.children : null,
        tabIndex: -1,
        onKeyDown: handlerAll(props2.onKeyDown, (ev) => {
          if (closeOnEsc && ev.key === "Escape")
            onClose();
        }),
        onBlur: handlerAll(props2.onBlur, (ev) => {
          const relatedTarget = getEventRelatedTarget(ev);
          const targetIsPopover = isContains(popoverRef.current, relatedTarget);
          const targetIsTrigger = isContains(triggerRef.current, relatedTarget);
          const targetIsRelated = (relatedRef == null ? void 0 : relatedRef.current) ? isContains(relatedRef.current, relatedTarget) : false;
          const isValidBlur = !targetIsPopover && !targetIsTrigger && !targetIsRelated;
          if (isOpen && closeOnBlur && isValidBlur)
            onClose();
        })
      };
      if (trigger === "hover") {
        popoverProps.onMouseEnter = handlerAll(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
        });
        popoverProps.onMouseLeave = handlerAll(props2.onMouseLeave, (ev) => {
          if (ev.nativeEvent.relatedTarget === null)
            return;
          isHoveringRef.current = false;
          if (closeOnBlur)
            setTimeout(onClose, closeDelay);
        });
      }
      return popoverProps;
    },
    [
      closeDelay,
      closeOnBlur,
      closeOnEsc,
      isOpen,
      onClose,
      shouldRenderChildren,
      transformOrigin,
      trigger,
      relatedRef
    ]
  );
  const maybeReferenceRef = useCallback(
    (node) => {
      if (anchorRef.current == null)
        referenceRef(node);
    },
    [referenceRef]
  );
  const getTriggerProps = useCallback(
    (props2 = {}, ref = null) => {
      const triggerProps = {
        ...props2,
        ref: mergeRefs(triggerRef, ref, maybeReferenceRef)
      };
      if (trigger === "click") {
        triggerProps.onClick = handlerAll(props2.onClick, onToggle);
        triggerProps.onBlur = handlerAll(props2.onBlur, (ev) => {
          const relatedTarget = getEventRelatedTarget(ev);
          const isValidBlur = !isContains(popoverRef.current, relatedTarget);
          if (isOpen && closeOnBlur && isValidBlur)
            onClose();
        });
      }
      if (trigger === "hover") {
        triggerProps.onFocus = handlerAll(props2.onFocus, () => {
          if (openTimeout.current === void 0)
            onOpen();
        });
        triggerProps.onBlur = handlerAll(props2.onBlur, (ev) => {
          const relatedTarget = getEventRelatedTarget(ev);
          const isValidBlur = !isContains(popoverRef.current, relatedTarget);
          if (isOpen && closeOnBlur && isValidBlur)
            onClose();
        });
        triggerProps.onKeyDown = handlerAll(props2.onKeyDown, (ev) => {
          if (ev.key === "Escape")
            onClose();
        });
        triggerProps.onMouseEnter = handlerAll(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
          openTimeout.current = window.setTimeout(onOpen, openDelay);
        });
        triggerProps.onMouseLeave = handlerAll(props2.onMouseLeave, () => {
          isHoveringRef.current = false;
          if (openTimeout.current) {
            clearTimeout(openTimeout.current);
            openTimeout.current = void 0;
          }
          closeTimeout.current = window.setTimeout(() => {
            if (!isHoveringRef.current)
              onClose();
          }, closeDelay);
        });
      }
      return triggerProps;
    },
    [
      closeDelay,
      closeOnBlur,
      isOpen,
      maybeReferenceRef,
      onClose,
      onOpen,
      onToggle,
      openDelay,
      trigger
    ]
  );
  const getAnchorProps = useCallback(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: mergeRefs(ref, anchorRef, referenceRef)
      };
    },
    [anchorRef, referenceRef]
  );
  return /* @__PURE__ */ jsx(
    PopoverProvider,
    {
      value: {
        isOpen,
        onClose,
        closeOnButton,
        onAnimationComplete,
        forceUpdate,
        getTriggerProps,
        getAnchorProps,
        getPopperProps,
        getPopoverProps,
        animation,
        duration,
        styles
      },
      children: runIfFunc(children, {
        isOpen,
        onClose,
        forceUpdate
      })
    }
  );
};

export {
  popoverProperties,
  usePopover,
  Popover
};
//# sourceMappingURL=chunk-56RWB3AQ.mjs.map