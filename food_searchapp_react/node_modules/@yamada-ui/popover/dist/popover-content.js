"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/popover-content.tsx
var popover_content_exports = {};
__export(popover_content_exports, {
  PopoverContent: () => PopoverContent
});
module.exports = __toCommonJS(popover_content_exports);
var import_core3 = require("@yamada-ui/core");
var import_motion = require("@yamada-ui/motion");
var import_transitions = require("@yamada-ui/transitions");
var import_utils3 = require("@yamada-ui/utils");

// src/popover.tsx
var import_core = require("@yamada-ui/core");
var import_use_animation = require("@yamada-ui/use-animation");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_use_focus = require("@yamada-ui/use-focus");
var import_use_popper = require("@yamada-ui/use-popper");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var popoverProperties = [
  ...import_use_popper.popperProperties,
  "isOpen",
  "defaultIsOpen",
  "onOpen",
  "onClose",
  "initialFocusRef",
  "restoreFocus",
  "autoFocus",
  "closeOnBlur",
  "closeOnEsc",
  "closeOnButton",
  "trigger",
  "openDelay",
  "closeDelay",
  "isLazy",
  "lazyBehavior",
  "animation",
  "duration"
];
var [PopoverProvider, usePopover] = (0, import_utils.createContext)({
  strict: false,
  name: "PopoverContext"
});

// src/popover-close-button.tsx
var import_close_button = require("@yamada-ui/close-button");
var import_core2 = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");
var import_jsx_runtime2 = require("react/jsx-runtime");
var PopoverCloseButton = (0, import_core2.forwardRef)(
  ({ onClick, ...rest }, ref) => {
    const { styles, onClose } = usePopover();
    const css = {
      position: "absolute",
      ...styles.closeButton
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_close_button.CloseButton,
      {
        ref,
        className: (0, import_utils2.cx)("ui-popover__close-button"),
        __css: css,
        onClick: (0, import_utils2.handlerAll)(onClick, (ev) => {
          ev.stopPropagation();
          onClose == null ? void 0 : onClose();
        }),
        size: "sm",
        ...rest
      }
    );
  }
);

// src/popover-content.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var getPopoverContentProps = (animation = "scale", duration) => {
  const custom = {
    reverse: true,
    duration,
    enter: { visibility: "visible" },
    transitionEnd: { exit: { visibility: "hidden" } }
  };
  switch (animation) {
    case "scale":
      return {
        ...import_transitions.scaleFadeProps,
        custom: { ...custom, scale: 0.95 }
      };
    case "top":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetX: 0, offsetY: -16 }
      };
    case "right":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetX: 16, offsetY: 0 }
      };
    case "left":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetX: -16, offsetY: 0 }
      };
    case "bottom":
      return {
        ...import_transitions.slideFadeProps,
        custom: { ...custom, offsetX: 0, offsetY: 16 }
      };
  }
};
var PopoverContent = (0, import_core3.forwardRef)(
  ({
    as = "section",
    className,
    children,
    w,
    width,
    minW,
    minWidth,
    z: zProp,
    zIndex: zIndexProp,
    __css: __cssProp,
    ...rest
  }, ref) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    const {
      isOpen,
      closeOnButton,
      getPopperProps,
      getPopoverProps,
      onAnimationComplete,
      animation,
      duration,
      styles
    } = usePopover();
    const validChildren = (0, import_utils3.getValidChildren)(children);
    const [customPopoverCloseButton, ...cloneChildren] = (0, import_utils3.findChildren)(
      validChildren,
      PopoverCloseButton
    );
    const resolvedChildren = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
        customPopoverCloseButton != null ? customPopoverCloseButton : closeOnButton ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PopoverCloseButton, {}) : null,
        cloneChildren
      ] });
    };
    const { z, zIndex, ...__css } = (_a = __cssProp != null ? __cssProp : styles.container) != null ? _a : {};
    const css = {
      position: "relative",
      w: "100%",
      display: "flex",
      flexDirection: "column",
      outline: 0,
      ...__css
    };
    w = (_e = w != null ? w : width) != null ? _e : (_d = (_b = styles.container) == null ? void 0 : _b.w) != null ? _d : (_c = styles.container) == null ? void 0 : _c.width;
    minW = (_i = minW != null ? minW : minWidth) != null ? _i : (_h = (_f = styles.container) == null ? void 0 : _f.minW) != null ? _h : (_g = styles.container) == null ? void 0 : _g.minWidth;
    const resolvedZIndex = (_k = (_j = zIndexProp != null ? zIndexProp : zProp) != null ? _j : zIndex) != null ? _k : z;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_core3.ui.div,
      {
        ...getPopperProps({
          style: { visibility: isOpen ? "visible" : "hidden" }
        }),
        className: "ui-popover",
        w,
        minW,
        zIndex: resolvedZIndex,
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          import_core3.ui.section,
          {
            as: import_motion.motion[as],
            className: (0, import_utils3.cx)("ui-popover__content", className),
            ...animation !== "none" ? getPopoverContentProps(animation, duration) : {},
            ...getPopoverProps(
              {
                ...rest,
                children: resolvedChildren()
              },
              ref
            ),
            initial: "exit",
            animate: isOpen ? "enter" : "exit",
            exit: "exit",
            onAnimationComplete: (0, import_utils3.funcAll)(
              onAnimationComplete,
              rest.onAnimationComplete
            ),
            __css: css
          }
        )
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PopoverContent
});
//# sourceMappingURL=popover-content.js.map