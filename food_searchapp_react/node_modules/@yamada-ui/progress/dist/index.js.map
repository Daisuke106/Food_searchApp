{"version":3,"sources":["../src/index.ts","../src/progress.tsx","../src/circle-progress.tsx"],"sourcesContent":["export { Progress } from \"./progress\"\nexport type { ProgressProps } from \"./progress\"\nexport { CircleProgress, CircleProgressLabel } from \"./circle-progress\"\nexport type { CircleProgressProps } from \"./circle-progress\"\n","import type {\n  HTMLUIProps,\n  ThemeProps,\n  CSSUIObject,\n  Interpolation,\n  ColorModeToken,\n  CSS,\n} from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { useAnimation } from \"@yamada-ui/use-animation\"\nimport { createContext, cx, valueToPercent } from \"@yamada-ui/utils\"\nimport type { FC } from \"react\"\n\nconst [ProgressProvider, useProgress] = createContext<\n  Record<string, CSSUIObject>\n>({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgress returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `,\n})\n\ntype ProgressOptions = {\n  /**\n   * The value of the progress.\n   *\n   * @default 0\n   */\n  value?: number\n  /**\n   * The minimum value of the progress.\n   *\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress.\n   *\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe.\n   *\n   * @default false\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated.\n   *\n   * @default false\n   */\n  isStripeAnimation?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value` prop will be ignored.\n   *\n   * @default false\n   */\n  isAnimation?: boolean\n  /**\n   * The animation speed in seconds.\n   *\n   * @default '1.4s'\n   */\n  speed?: string | number\n  /**\n   * The CSS `color` property.\n   */\n  filledTrackColor?: ColorModeToken<CSS.Property.Color, \"colors\">\n}\n\nexport type ProgressProps = HTMLUIProps<\"div\"> &\n  ThemeProps<\"Progress\"> &\n  ProgressOptions\n\n/**\n * `Progress` is a component for visually indicating progress.\n *\n * @see Docs https://yamada-ui.com/components/feedback/progress\n */\nexport const Progress = forwardRef<ProgressProps, \"div\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Progress\", props)\n  const {\n    className,\n    children,\n    value,\n    min,\n    max,\n    hasStripe,\n    isStripeAnimation,\n    isAnimation,\n    speed,\n    borderRadius: _borderRadius,\n    rounded,\n    ...rest\n  } = omitThemeProps(mergedProps, [\"filledTrackColor\"])\n\n  const borderRadius =\n    _borderRadius ?? rounded ?? (styles.track.borderRadius as string | number)\n\n  const css: CSSUIObject = {\n    w: \"100%\",\n    overflow: \"hidden\",\n    pos: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <ProgressProvider value={styles}>\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-progress\", className)}\n        __css={css}\n        borderRadius={borderRadius}\n        {...rest}\n      >\n        <ProgressFilledTrack\n          min={min}\n          max={max}\n          value={value}\n          hasStripe={hasStripe}\n          isStripeAnimation={isStripeAnimation}\n          isAnimation={isAnimation}\n          speed={speed}\n          borderRadius={borderRadius}\n        />\n        {children}\n      </ui.div>\n    </ProgressProvider>\n  )\n})\n\ntype ProgressFilledTrackProps = HTMLUIProps<\"div\"> & ProgressProps\n\nconst ProgressFilledTrack: FC<ProgressFilledTrackProps> = ({\n  value = 0,\n  min = 0,\n  max = 100,\n  hasStripe,\n  isStripeAnimation,\n  isAnimation,\n  speed = \"1.4s\",\n  ...rest\n}) => {\n  const percent = valueToPercent(value, min, max)\n\n  const styles = useProgress()\n\n  const stripeAnimation = useAnimation({\n    keyframes: {\n      \"0%\": { bgPosition: \"1rem 0\" },\n      \"100%\": { bgPosition: \"0 0\" },\n    },\n    duration: typeof speed === \"string\" ? speed : `${speed}s`,\n    iterationCount: \"infinite\",\n    timingFunction: \"linear\",\n  })\n\n  const interpolationAnimation = useAnimation({\n    keyframes: {\n      \"0%\": { left: \"-40%\" },\n      \"100%\": { left: \"100%\" },\n    },\n    duration: typeof speed === \"string\" ? speed : `${speed}s`,\n    iterationCount: \"infinite\",\n    timingFunction: \"ease\",\n  })\n\n  isStripeAnimation = !isAnimation && hasStripe && isStripeAnimation\n\n  const css: Interpolation<{}> = {\n    ...(isStripeAnimation\n      ? {\n          animation: stripeAnimation,\n        }\n      : {}),\n    ...(isAnimation\n      ? {\n          position: \"absolute\",\n          willChange: \"left\",\n          minWidth: \"50%\",\n          animation: interpolationAnimation,\n        }\n      : {}),\n  }\n\n  const __css: CSSUIObject = {\n    w: `${percent}%`,\n    h: \"100%\",\n    ...styles.filledTrack,\n  }\n\n  return <ui.div css={css} __css={__css} {...rest} />\n}\n","import type { HTMLUIProps, CSSUIObject, CSSUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { useAnimation } from \"@yamada-ui/use-animation\"\nimport { useToken } from \"@yamada-ui/use-token\"\nimport { useValue } from \"@yamada-ui/use-value\"\nimport { cx, valueToPercent } from \"@yamada-ui/utils\"\nimport type { FC } from \"react\"\n\ntype CircleProgressOptions = {\n  /**\n   * The CSS `box-size` property.\n   *\n   * @default '6rem'\n   */\n  size?: CSSUIProps[\"boxSize\"]\n  /**\n   * The CSS `width` property.\n   *\n   * @default '0.625ewm'\n   */\n  thickness?: CSSUIProps[\"width\"]\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'primary'\n   */\n  color?: CSSUIProps[\"color\"]\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'border'\n   */\n  trackColor?: CSSUIProps[\"color\"]\n  /**\n   * The value of the progress.\n   *\n   * @default 0\n   */\n  value?: number\n  /**\n   * The minimum value of the progress.\n   *\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress.\n   *\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value` prop will be ignored.\n   *\n   * @default false\n   */\n  isAnimation?: boolean\n  /**\n   * The animation speed in seconds.\n   *\n   * @default '[1.4s, 2s]'\n   */\n  speed?: [string | number, string | number]\n}\n\nexport type CircleProgressProps = Omit<HTMLUIProps<\"div\">, \"color\"> &\n  CircleProgressOptions\n\n/**\n * `CircleProgress` is a component that displays progress in a circular progress bar.\n *\n * @see Docs https://yamada-ui.com/components/feedback/circle-progress\n */\nexport const CircleProgress = forwardRef<CircleProgressProps, \"div\">(\n  (\n    {\n      className,\n      children,\n      size = \"6rem\",\n      thickness = \"0.625rem\",\n      color = \"primary\",\n      trackColor = \"border\",\n      value = 0,\n      min = 0,\n      max = 100,\n      isAnimation = false,\n      isRounded,\n      speed = [\"1.4s\", \"2s\"],\n      ...rest\n    },\n    ref,\n  ) => {\n    size = (useToken(\"sizes\", useValue(size)) ?? size) as string | number\n    thickness = (useToken(\"sizes\", useValue(thickness)) ?? thickness) as\n      | string\n      | number\n\n    const isTransparent = value === 0 && !isAnimation\n    const percent = valueToPercent(value, min, max)\n\n    const interval = !isAnimation ? percent * 2.64 : undefined\n\n    const animation = useAnimation({\n      keyframes: {\n        \"0%\": {\n          strokeDasharray: \"1, 400\",\n          strokeDashoffset: \"0\",\n        },\n        \"50%\": {\n          strokeDasharray: \"400, 400\",\n          strokeDashoffset: \"-100\",\n        },\n        \"100%\": {\n          strokeDasharray: \"400, 400\",\n          strokeDashoffset: \"-260\",\n        },\n      },\n      duration: typeof speed[0] === \"string\" ? speed[0] : `${speed[0]}s`,\n      iterationCount: \"infinite\",\n      timingFunction: \"linear\",\n    })\n\n    const css: CSSUIObject = {\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      fontSize: size,\n    }\n\n    const props: CircleProps = isAnimation\n      ? {\n          animation,\n        }\n      : {\n          strokeDashoffset: 66,\n          strokeDasharray:\n            interval == null ? undefined : `${interval} ${264 - interval}`,\n          transitionProperty: \"stroke-dasharray, stroke\",\n          transitionDuration: \"0.6s\",\n          transitionTimingFunction: \"ease\",\n        }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-circle-progress\", className)}\n        __css={css}\n        {...rest}\n      >\n        <Shape size={size} isAnimation={isAnimation} speed={speed}>\n          <Circle stroke={trackColor} strokeWidth={thickness} />\n          <Circle\n            stroke={color}\n            strokeWidth={thickness}\n            strokeLinecap={isRounded ? \"round\" : undefined}\n            opacity={isTransparent ? 0 : undefined}\n            {...props}\n          />\n        </Shape>\n        {children}\n      </ui.div>\n    )\n  },\n)\n\ntype CircleProps = HTMLUIProps<\"circle\">\n\nconst Circle: FC<CircleProps> = ({ ...rest }) => (\n  <ui.circle cx={50} cy={50} r={42} fill=\"transparent\" {...rest} />\n)\n\ntype ShapeProps = Omit<HTMLUIProps<\"svg\">, \"speed\"> &\n  Pick<\n    Required<CircleProgressProps>,\n    \"children\" | \"size\" | \"isAnimation\" | \"speed\"\n  >\n\nconst Shape: FC<ShapeProps> = ({ size, isAnimation, speed, ...rest }) => {\n  const animation = useAnimation({\n    keyframes: {\n      \"0%\": {\n        transform: \"rotate(0deg)\",\n      },\n      \"100%\": {\n        transform: \"rotate(360deg)\",\n      },\n    },\n    duration: typeof speed[1] === \"string\" ? speed[1] : `${speed[1]}s`,\n    iterationCount: \"infinite\",\n    timingFunction: \"linear\",\n  })\n\n  const css: CSSUIObject = {\n    display: \"block\",\n    boxSize: size,\n    ...(isAnimation ? { animation } : {}),\n  }\n\n  return <ui.svg viewBox=\"0 0 100 100\" __css={css} {...rest} />\n}\n\nexport const CircleProgressLabel = ui(\"span\", {\n  baseStyle: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"100%\",\n    fontSize: \"0.25em\",\n    textAlign: \"center\",\n  },\n})\n"],"mappings":"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","names":["import_core","import_use_animation","import_utils","import_jsx_runtime"]}