{"version":3,"sources":["../src/circle-progress.tsx"],"sourcesContent":["import type { HTMLUIProps, CSSUIObject, CSSUIProps } from \"@yamada-ui/core\"\nimport { ui, forwardRef } from \"@yamada-ui/core\"\nimport { useAnimation } from \"@yamada-ui/use-animation\"\nimport { useToken } from \"@yamada-ui/use-token\"\nimport { useValue } from \"@yamada-ui/use-value\"\nimport { cx, valueToPercent } from \"@yamada-ui/utils\"\nimport type { FC } from \"react\"\n\ntype CircleProgressOptions = {\n  /**\n   * The CSS `box-size` property.\n   *\n   * @default '6rem'\n   */\n  size?: CSSUIProps[\"boxSize\"]\n  /**\n   * The CSS `width` property.\n   *\n   * @default '0.625ewm'\n   */\n  thickness?: CSSUIProps[\"width\"]\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'primary'\n   */\n  color?: CSSUIProps[\"color\"]\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'border'\n   */\n  trackColor?: CSSUIProps[\"color\"]\n  /**\n   * The value of the progress.\n   *\n   * @default 0\n   */\n  value?: number\n  /**\n   * The minimum value of the progress.\n   *\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress.\n   *\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value` prop will be ignored.\n   *\n   * @default false\n   */\n  isAnimation?: boolean\n  /**\n   * The animation speed in seconds.\n   *\n   * @default '[1.4s, 2s]'\n   */\n  speed?: [string | number, string | number]\n}\n\nexport type CircleProgressProps = Omit<HTMLUIProps<\"div\">, \"color\"> &\n  CircleProgressOptions\n\n/**\n * `CircleProgress` is a component that displays progress in a circular progress bar.\n *\n * @see Docs https://yamada-ui.com/components/feedback/circle-progress\n */\nexport const CircleProgress = forwardRef<CircleProgressProps, \"div\">(\n  (\n    {\n      className,\n      children,\n      size = \"6rem\",\n      thickness = \"0.625rem\",\n      color = \"primary\",\n      trackColor = \"border\",\n      value = 0,\n      min = 0,\n      max = 100,\n      isAnimation = false,\n      isRounded,\n      speed = [\"1.4s\", \"2s\"],\n      ...rest\n    },\n    ref,\n  ) => {\n    size = (useToken(\"sizes\", useValue(size)) ?? size) as string | number\n    thickness = (useToken(\"sizes\", useValue(thickness)) ?? thickness) as\n      | string\n      | number\n\n    const isTransparent = value === 0 && !isAnimation\n    const percent = valueToPercent(value, min, max)\n\n    const interval = !isAnimation ? percent * 2.64 : undefined\n\n    const animation = useAnimation({\n      keyframes: {\n        \"0%\": {\n          strokeDasharray: \"1, 400\",\n          strokeDashoffset: \"0\",\n        },\n        \"50%\": {\n          strokeDasharray: \"400, 400\",\n          strokeDashoffset: \"-100\",\n        },\n        \"100%\": {\n          strokeDasharray: \"400, 400\",\n          strokeDashoffset: \"-260\",\n        },\n      },\n      duration: typeof speed[0] === \"string\" ? speed[0] : `${speed[0]}s`,\n      iterationCount: \"infinite\",\n      timingFunction: \"linear\",\n    })\n\n    const css: CSSUIObject = {\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      fontSize: size,\n    }\n\n    const props: CircleProps = isAnimation\n      ? {\n          animation,\n        }\n      : {\n          strokeDashoffset: 66,\n          strokeDasharray:\n            interval == null ? undefined : `${interval} ${264 - interval}`,\n          transitionProperty: \"stroke-dasharray, stroke\",\n          transitionDuration: \"0.6s\",\n          transitionTimingFunction: \"ease\",\n        }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-circle-progress\", className)}\n        __css={css}\n        {...rest}\n      >\n        <Shape size={size} isAnimation={isAnimation} speed={speed}>\n          <Circle stroke={trackColor} strokeWidth={thickness} />\n          <Circle\n            stroke={color}\n            strokeWidth={thickness}\n            strokeLinecap={isRounded ? \"round\" : undefined}\n            opacity={isTransparent ? 0 : undefined}\n            {...props}\n          />\n        </Shape>\n        {children}\n      </ui.div>\n    )\n  },\n)\n\ntype CircleProps = HTMLUIProps<\"circle\">\n\nconst Circle: FC<CircleProps> = ({ ...rest }) => (\n  <ui.circle cx={50} cy={50} r={42} fill=\"transparent\" {...rest} />\n)\n\ntype ShapeProps = Omit<HTMLUIProps<\"svg\">, \"speed\"> &\n  Pick<\n    Required<CircleProgressProps>,\n    \"children\" | \"size\" | \"isAnimation\" | \"speed\"\n  >\n\nconst Shape: FC<ShapeProps> = ({ size, isAnimation, speed, ...rest }) => {\n  const animation = useAnimation({\n    keyframes: {\n      \"0%\": {\n        transform: \"rotate(0deg)\",\n      },\n      \"100%\": {\n        transform: \"rotate(360deg)\",\n      },\n    },\n    duration: typeof speed[1] === \"string\" ? speed[1] : `${speed[1]}s`,\n    iterationCount: \"infinite\",\n    timingFunction: \"linear\",\n  })\n\n  const css: CSSUIObject = {\n    display: \"block\",\n    boxSize: size,\n    ...(isAnimation ? { animation } : {}),\n  }\n\n  return <ui.svg viewBox=\"0 0 100 100\" __css={css} {...rest} />\n}\n\nexport const CircleProgressLabel = ui(\"span\", {\n  baseStyle: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: \"100%\",\n    fontSize: \"0.25em\",\n    textAlign: \"center\",\n  },\n})\n"],"mappings":"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","names":[]}