"use client"

// src/progress.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { useAnimation } from "@yamada-ui/use-animation";
import { createContext, cx, valueToPercent } from "@yamada-ui/utils";
import { jsx, jsxs } from "react/jsx-runtime";
var [ProgressProvider, useProgress] = createContext({
  name: `ProgressStylesContext`,
  errorMessage: `useProgress returned is 'undefined'. Seems you forgot to wrap the components in "<Progress />" `
});
var Progress = forwardRef((props, ref) => {
  var _a;
  const [styles, mergedProps] = useMultiComponentStyle("Progress", props);
  const {
    className,
    children,
    value,
    min,
    max,
    hasStripe,
    isStripeAnimation,
    isAnimation,
    speed,
    borderRadius: _borderRadius,
    rounded,
    ...rest
  } = omitThemeProps(mergedProps, ["filledTrackColor"]);
  const borderRadius = (_a = _borderRadius != null ? _borderRadius : rounded) != null ? _a : styles.track.borderRadius;
  const css = {
    w: "100%",
    overflow: "hidden",
    pos: "relative",
    ...styles.track
  };
  return /* @__PURE__ */ jsx(ProgressProvider, { value: styles, children: /* @__PURE__ */ jsxs(
    ui.div,
    {
      ref,
      className: cx("ui-progress", className),
      __css: css,
      borderRadius,
      ...rest,
      children: [
        /* @__PURE__ */ jsx(
          ProgressFilledTrack,
          {
            min,
            max,
            value,
            hasStripe,
            isStripeAnimation,
            isAnimation,
            speed,
            borderRadius
          }
        ),
        children
      ]
    }
  ) });
});
var ProgressFilledTrack = ({
  value = 0,
  min = 0,
  max = 100,
  hasStripe,
  isStripeAnimation,
  isAnimation,
  speed = "1.4s",
  ...rest
}) => {
  const percent = valueToPercent(value, min, max);
  const styles = useProgress();
  const stripeAnimation = useAnimation({
    keyframes: {
      "0%": { bgPosition: "1rem 0" },
      "100%": { bgPosition: "0 0" }
    },
    duration: typeof speed === "string" ? speed : `${speed}s`,
    iterationCount: "infinite",
    timingFunction: "linear"
  });
  const interpolationAnimation = useAnimation({
    keyframes: {
      "0%": { left: "-40%" },
      "100%": { left: "100%" }
    },
    duration: typeof speed === "string" ? speed : `${speed}s`,
    iterationCount: "infinite",
    timingFunction: "ease"
  });
  isStripeAnimation = !isAnimation && hasStripe && isStripeAnimation;
  const css = {
    ...isStripeAnimation ? {
      animation: stripeAnimation
    } : {},
    ...isAnimation ? {
      position: "absolute",
      willChange: "left",
      minWidth: "50%",
      animation: interpolationAnimation
    } : {}
  };
  const __css = {
    w: `${percent}%`,
    h: "100%",
    ...styles.filledTrack
  };
  return /* @__PURE__ */ jsx(ui.div, { css, __css, ...rest });
};

export {
  Progress
};
//# sourceMappingURL=chunk-IIL2LFUE.mjs.map