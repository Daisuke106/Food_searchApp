"use client"

// src/circle-progress.tsx
import { ui, forwardRef } from "@yamada-ui/core";
import { useAnimation } from "@yamada-ui/use-animation";
import { useToken } from "@yamada-ui/use-token";
import { useValue } from "@yamada-ui/use-value";
import { cx, valueToPercent } from "@yamada-ui/utils";
import { jsx, jsxs } from "react/jsx-runtime";
var CircleProgress = forwardRef(
  ({
    className,
    children,
    size = "6rem",
    thickness = "0.625rem",
    color = "primary",
    trackColor = "border",
    value = 0,
    min = 0,
    max = 100,
    isAnimation = false,
    isRounded,
    speed = ["1.4s", "2s"],
    ...rest
  }, ref) => {
    var _a, _b;
    size = (_a = useToken("sizes", useValue(size))) != null ? _a : size;
    thickness = (_b = useToken("sizes", useValue(thickness))) != null ? _b : thickness;
    const isTransparent = value === 0 && !isAnimation;
    const percent = valueToPercent(value, min, max);
    const interval = !isAnimation ? percent * 2.64 : void 0;
    const animation = useAnimation({
      keyframes: {
        "0%": {
          strokeDasharray: "1, 400",
          strokeDashoffset: "0"
        },
        "50%": {
          strokeDasharray: "400, 400",
          strokeDashoffset: "-100"
        },
        "100%": {
          strokeDasharray: "400, 400",
          strokeDashoffset: "-260"
        }
      },
      duration: typeof speed[0] === "string" ? speed[0] : `${speed[0]}s`,
      iterationCount: "infinite",
      timingFunction: "linear"
    });
    const css = {
      display: "inline-block",
      position: "relative",
      verticalAlign: "middle",
      fontSize: size
    };
    const props = isAnimation ? {
      animation
    } : {
      strokeDashoffset: 66,
      strokeDasharray: interval == null ? void 0 : `${interval} ${264 - interval}`,
      transitionProperty: "stroke-dasharray, stroke",
      transitionDuration: "0.6s",
      transitionTimingFunction: "ease"
    };
    return /* @__PURE__ */ jsxs(
      ui.div,
      {
        ref,
        className: cx("ui-circle-progress", className),
        __css: css,
        ...rest,
        children: [
          /* @__PURE__ */ jsxs(Shape, { size, isAnimation, speed, children: [
            /* @__PURE__ */ jsx(Circle, { stroke: trackColor, strokeWidth: thickness }),
            /* @__PURE__ */ jsx(
              Circle,
              {
                stroke: color,
                strokeWidth: thickness,
                strokeLinecap: isRounded ? "round" : void 0,
                opacity: isTransparent ? 0 : void 0,
                ...props
              }
            )
          ] }),
          children
        ]
      }
    );
  }
);
var Circle = ({ ...rest }) => /* @__PURE__ */ jsx(ui.circle, { cx: 50, cy: 50, r: 42, fill: "transparent", ...rest });
var Shape = ({ size, isAnimation, speed, ...rest }) => {
  const animation = useAnimation({
    keyframes: {
      "0%": {
        transform: "rotate(0deg)"
      },
      "100%": {
        transform: "rotate(360deg)"
      }
    },
    duration: typeof speed[1] === "string" ? speed[1] : `${speed[1]}s`,
    iterationCount: "infinite",
    timingFunction: "linear"
  });
  const css = {
    display: "block",
    boxSize: size,
    ...isAnimation ? { animation } : {}
  };
  return /* @__PURE__ */ jsx(ui.svg, { viewBox: "0 0 100 100", __css: css, ...rest });
};
var CircleProgressLabel = ui("span", {
  baseStyle: {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: "100%",
    fontSize: "0.25em",
    textAlign: "center"
  }
});

export {
  CircleProgress,
  CircleProgressLabel
};
//# sourceMappingURL=chunk-GJAFLWEF.mjs.map