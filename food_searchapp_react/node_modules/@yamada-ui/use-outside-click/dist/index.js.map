{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { getOwnerDocument, useCallbackRef } from \"@yamada-ui/utils\"\nimport type { RefObject } from \"react\"\nimport { useEffect, useRef } from \"react\"\n\nexport type UseOutsideClickProps = {\n  enabled?: boolean\n  ref: React.RefObject<HTMLElement>\n  handler?: (ev: Event) => void\n}\n\n/**\n * `useOutsideClick` is a custom hook that detects click events outside of an element.\n *\n * @see Docs https://yamada-ui.com/hooks/use-outside-click\n */\nexport const useOutsideClick = ({\n  ref,\n  handler,\n  enabled = true,\n}: UseOutsideClickProps) => {\n  const handlerRef = useCallbackRef(handler)\n\n  const state = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n  })\n\n  useEffect(() => {\n    if (!enabled) return\n\n    const onPointerDown = (ev: MouseEvent | TouchEvent) => {\n      if (isValidEvent(ev, ref)) state.current.isPointerDown = true\n    }\n\n    const onMouseUp = (ev: MouseEvent) => {\n      if (state.current.ignoreEmulatedMouseEvents) {\n        state.current.ignoreEmulatedMouseEvents = false\n\n        return\n      }\n\n      if (state.current.isPointerDown && handler && isValidEvent(ev, ref)) {\n        state.current.isPointerDown = false\n\n        handlerRef(ev)\n      }\n    }\n\n    const onTouchEnd = (ev: TouchEvent) => {\n      state.current.ignoreEmulatedMouseEvents = true\n\n      if (handler && state.current.isPointerDown && isValidEvent(ev, ref)) {\n        state.current.isPointerDown = false\n\n        handlerRef(ev)\n      }\n    }\n\n    const doc = getOwnerDocument(ref.current)\n\n    doc.addEventListener(\"mousedown\", onPointerDown, true)\n    doc.addEventListener(\"mouseup\", onMouseUp, true)\n    doc.addEventListener(\"touchstart\", onPointerDown, true)\n    doc.addEventListener(\"touchend\", onTouchEnd, true)\n\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true)\n      doc.removeEventListener(\"mouseup\", onMouseUp, true)\n      doc.removeEventListener(\"touchstart\", onPointerDown, true)\n      doc.removeEventListener(\"touchend\", onTouchEnd, true)\n    }\n  }, [handler, ref, handlerRef, state, enabled])\n}\n\nconst isValidEvent = (\n  ev: MouseEvent | TouchEvent,\n  ref: RefObject<HTMLElement>,\n) => {\n  const target = ev.target as HTMLElement\n\n  if (\"button\" in ev && ev.button > 0) return false\n\n  if (target) if (!getOwnerDocument(target).contains(target)) return false\n\n  return !ref.current?.contains(target)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiD;AAEjD,mBAAkC;AAa3B,IAAM,kBAAkB,CAAC;AAAA,EAC9B;AAAA,EACA;AAAA,EACA,UAAU;AACZ,MAA4B;AAC1B,QAAM,iBAAa,6BAAe,OAAO;AAEzC,QAAM,YAAQ,qBAAO;AAAA,IACnB,eAAe;AAAA,IACf,2BAA2B;AAAA,EAC7B,CAAC;AAED,8BAAU,MAAM;AACd,QAAI,CAAC;AAAS;AAEd,UAAM,gBAAgB,CAAC,OAAgC;AACrD,UAAI,aAAa,IAAI,GAAG;AAAG,cAAM,QAAQ,gBAAgB;AAAA,IAC3D;AAEA,UAAM,YAAY,CAAC,OAAmB;AACpC,UAAI,MAAM,QAAQ,2BAA2B;AAC3C,cAAM,QAAQ,4BAA4B;AAE1C;AAAA,MACF;AAEA,UAAI,MAAM,QAAQ,iBAAiB,WAAW,aAAa,IAAI,GAAG,GAAG;AACnE,cAAM,QAAQ,gBAAgB;AAE9B,mBAAW,EAAE;AAAA,MACf;AAAA,IACF;AAEA,UAAM,aAAa,CAAC,OAAmB;AACrC,YAAM,QAAQ,4BAA4B;AAE1C,UAAI,WAAW,MAAM,QAAQ,iBAAiB,aAAa,IAAI,GAAG,GAAG;AACnE,cAAM,QAAQ,gBAAgB;AAE9B,mBAAW,EAAE;AAAA,MACf;AAAA,IACF;AAEA,UAAM,UAAM,+BAAiB,IAAI,OAAO;AAExC,QAAI,iBAAiB,aAAa,eAAe,IAAI;AACrD,QAAI,iBAAiB,WAAW,WAAW,IAAI;AAC/C,QAAI,iBAAiB,cAAc,eAAe,IAAI;AACtD,QAAI,iBAAiB,YAAY,YAAY,IAAI;AAEjD,WAAO,MAAM;AACX,UAAI,oBAAoB,aAAa,eAAe,IAAI;AACxD,UAAI,oBAAoB,WAAW,WAAW,IAAI;AAClD,UAAI,oBAAoB,cAAc,eAAe,IAAI;AACzD,UAAI,oBAAoB,YAAY,YAAY,IAAI;AAAA,IACtD;AAAA,EACF,GAAG,CAAC,SAAS,KAAK,YAAY,OAAO,OAAO,CAAC;AAC/C;AAEA,IAAM,eAAe,CACnB,IACA,QACG;AA7EL;AA8EE,QAAM,SAAS,GAAG;AAElB,MAAI,YAAY,MAAM,GAAG,SAAS;AAAG,WAAO;AAE5C,MAAI;AAAQ,QAAI,KAAC,+BAAiB,MAAM,EAAE,SAAS,MAAM;AAAG,aAAO;AAAA;AAEnE,SAAO,GAAC,SAAI,YAAJ,mBAAa,SAAS;AAChC;","names":[]}