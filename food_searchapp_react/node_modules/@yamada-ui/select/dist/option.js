"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/option.tsx
var option_exports = {};
__export(option_exports, {
  Option: () => Option
});
module.exports = __toCommonJS(option_exports);
var import_core2 = require("@yamada-ui/core");
var import_utils2 = require("@yamada-ui/utils");

// src/use-select.ts
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_use_outside_click = require("@yamada-ui/use-outside-click");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var isTargetOption = (target) => {
  var _a;
  return (0, import_utils.isHTMLElement)(target) && !!((_a = target == null ? void 0 : target.getAttribute("role")) == null ? void 0 : _a.startsWith("select-item"));
};
var {
  DescendantsContextProvider: SelectDescendantsContextProvider,
  useDescendantsContext: useSelectDescendantsContext,
  useDescendants: useSelectDescendants,
  useDescendant: useSelectDescendant
} = (0, import_use_descendant.createDescendant)();
var [SelectProvider, useSelectContext] = (0, import_utils.createContext)({
  strict: false,
  name: "SelectContext"
});
var useSelectOption = (ref, props) => {
  var _a, _b;
  const {
    fieldRef,
    value,
    placeholder,
    placeholderInOptions,
    omitSelectedValues,
    closeOnSelect: generalCloseOnSelect,
    focusedIndex,
    optionProps,
    onChange,
    onChangeLabel,
    onFocusNext,
    onClose,
    setFocusedIndex
  } = useSelectContext();
  let {
    icon: customIcon,
    isDisabled,
    isFocusable,
    closeOnSelect: customCloseOnSelect,
    children,
    ...computedProps
  } = { ...optionProps, ...props };
  const trulyDisabled = !!isDisabled && !isFocusable;
  const itemRef = (0, import_react.useRef)(null);
  const { index, register, descendants } = useSelectDescendant({
    disabled: trulyDisabled
  });
  const values = descendants.values();
  const frontValues = values.slice(0, index);
  const isMulti = (0, import_utils.isArray)(value);
  const isDuplicated = !isMulti ? frontValues.some(
    ({ node }) => {
      var _a2;
      return node.dataset.value === ((_a2 = computedProps.value) != null ? _a2 : "");
    }
  ) : false;
  const isSelected = !isDuplicated && (!isMulti ? ((_a = computedProps.value) != null ? _a : "") === value : value.includes((_b = computedProps.value) != null ? _b : ""));
  const isFocused = index === focusedIndex;
  if (!!placeholder && index > 0 && placeholderInOptions && !computedProps.value) {
    console.warn(
      `${!isMulti ? "Select" : "MultiSelect"}: If placeholders are present, All options must be set value. If want to set an empty value, either don't set the placeholder or set 'placeholderInOptions' to false.`
    );
  }
  const onClick = (0, import_react.useCallback)(
    (ev) => {
      var _a2;
      ev.preventDefault();
      ev.stopPropagation();
      if (isDisabled) {
        if (fieldRef.current)
          fieldRef.current.focus();
        return;
      }
      if (!isTargetOption(ev.currentTarget)) {
        if (fieldRef.current)
          fieldRef.current.focus();
        return;
      }
      setFocusedIndex(index);
      onChange((_a2 = computedProps.value) != null ? _a2 : "");
      if (fieldRef.current)
        fieldRef.current.focus();
      if (customCloseOnSelect != null ? customCloseOnSelect : generalCloseOnSelect)
        onClose();
      if (omitSelectedValues)
        onFocusNext();
    },
    [
      isDisabled,
      setFocusedIndex,
      index,
      onChange,
      computedProps.value,
      fieldRef,
      customCloseOnSelect,
      generalCloseOnSelect,
      onClose,
      omitSelectedValues,
      onFocusNext
    ]
  );
  (0, import_react.useEffect)(() => {
    var _a2;
    if (isSelected)
      onChangeLabel((_a2 = computedProps.value) != null ? _a2 : "", false);
  }, [computedProps, isSelected, onChangeLabel]);
  const getOptionProps = (0, import_react.useCallback)(
    (props2 = {}) => {
      var _a2;
      const style = {
        border: "0px",
        clip: "rect(0px, 0px, 0px, 0px)",
        height: "1px",
        width: "1px",
        margin: "-1px",
        padding: "0px",
        overflow: "hidden",
        whiteSpace: "nowrap",
        position: "absolute"
      };
      return {
        ref: (0, import_utils.mergeRefs)(itemRef, ref, register),
        ...(0, import_utils.omitObject)(computedProps, ["value"]),
        ...props2,
        role: "select-item",
        tabIndex: -1,
        style: omitSelectedValues && isSelected ? style : void 0,
        "data-value": (_a2 = computedProps.value) != null ? _a2 : "",
        "data-focus": (0, import_utils.dataAttr)(isFocused),
        "data-disabled": (0, import_utils.dataAttr)(isDisabled),
        "aria-checked": (0, import_utils.ariaAttr)(isSelected),
        "aria-disabled": (0, import_utils.ariaAttr)(isDisabled),
        onClick: (0, import_utils.handlerAll)(computedProps.onClick, props2.onClick, onClick)
      };
    },
    [
      computedProps,
      isDisabled,
      isFocused,
      isSelected,
      omitSelectedValues,
      onClick,
      ref,
      register
    ]
  );
  return {
    isSelected,
    isFocused,
    customIcon,
    children,
    getOptionProps
  };
};

// src/option.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Option = (0, import_core2.forwardRef)(
  ({ className, icon, ...rest }, ref) => {
    const { styles } = useSelectContext();
    const { isSelected, customIcon, children, getOptionProps } = useSelectOption(ref, rest);
    icon != null ? icon : icon = customIcon;
    const css = {
      textDecoration: "none",
      color: "inherit",
      userSelect: "none",
      display: "flex",
      width: "100%",
      alignItems: "center",
      textAlign: "start",
      flex: "0 0 auto",
      outline: 0,
      gap: "0.75rem",
      ...styles.item
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
      import_core2.ui.li,
      {
        className: (0, import_utils2.cx)("ui-select__item", className),
        __css: css,
        ...getOptionProps(),
        children: [
          icon !== null ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(OptionIcon, { opacity: isSelected ? 1 : 0, children: icon || /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CheckIcon, {}) }) : null,
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core2.ui.span, { style: { flex: 1 }, "data-label": true, children })
        ]
      }
    );
  }
);
var OptionIcon = (0, import_core2.forwardRef)(
  ({ className, ...rest }, ref) => {
    const { styles } = useSelectContext();
    const css = {
      flexShrink: 0,
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      fontSize: "0.85em",
      ...styles.itemIcon
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core2.ui.span,
      {
        ref,
        className: (0, import_utils2.cx)("ui-select__item__icon", className),
        __css: css,
        ...rest
      }
    );
  }
);
var CheckIcon = () => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { viewBox: "0 0 14 14", width: "1em", height: "1em", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
  "polygon",
  {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }
) });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Option
});
//# sourceMappingURL=option.js.map