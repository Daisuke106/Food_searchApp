"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/select-list.tsx
var select_list_exports = {};
__export(select_list_exports, {
  SelectList: () => SelectList
});
module.exports = __toCommonJS(select_list_exports);
var import_core2 = require("@yamada-ui/core");
var import_popover = require("@yamada-ui/popover");
var import_utils2 = require("@yamada-ui/utils");

// src/use-select.ts
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_use_outside_click = require("@yamada-ui/use-outside-click");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var {
  DescendantsContextProvider: SelectDescendantsContextProvider,
  useDescendantsContext: useSelectDescendantsContext,
  useDescendants: useSelectDescendants,
  useDescendant: useSelectDescendant
} = (0, import_use_descendant.createDescendant)();
var [SelectProvider, useSelectContext] = (0, import_utils.createContext)({
  strict: false,
  name: "SelectContext"
});
var useSelectList = () => {
  const { listRef, focusedIndex } = useSelectContext();
  const descendants = useSelectDescendantsContext();
  const beforeFocusedIndex = (0, import_react.useRef)(-1);
  const selectedValue = descendants.value(focusedIndex);
  (0, import_react.useEffect)(() => {
    if (!listRef.current || !selectedValue)
      return;
    if (beforeFocusedIndex.current === selectedValue.index)
      return;
    const parent = listRef.current;
    const child = selectedValue.node;
    const parentHeight = parent.clientHeight;
    const viewTop = parent.scrollTop;
    const viewBottom = viewTop + parentHeight;
    const childHeight = child.clientHeight;
    const childTop = child.offsetTop;
    const childBottom = childTop + childHeight;
    const isInView = viewTop <= childTop && childBottom <= viewBottom;
    const isScrollBottom = beforeFocusedIndex.current < selectedValue.index;
    if (!isInView) {
      if (childBottom <= parentHeight) {
        listRef.current.scrollTo({ top: 0 });
      } else {
        if (!isScrollBottom) {
          listRef.current.scrollTo({ top: childTop + 1 });
        } else {
          listRef.current.scrollTo({ top: childBottom - parentHeight });
        }
      }
    }
    beforeFocusedIndex.current = selectedValue.index;
  }, [listRef, selectedValue]);
  const getListProps = (0, import_react.useCallback)(
    (props = {}, ref = null) => ({
      as: "ul",
      ref: (0, import_utils.mergeRefs)(listRef, ref),
      role: "select",
      tabIndex: -1,
      ...props
    }),
    [listRef]
  );
  return {
    getListProps
  };
};

// src/select-list.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var SelectList = (0, import_core2.forwardRef)(
  ({ className, w, width, minW, minWidth, ...rest }, ref) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { styles } = useSelectContext();
    const { getListProps } = useSelectList();
    w = (_d = w != null ? w : width) != null ? _d : (_c = (_a = styles.list) == null ? void 0 : _a.w) != null ? _c : (_b = styles.list) == null ? void 0 : _b.width;
    minW = (_h = minW != null ? minW : minWidth) != null ? _h : (_g = (_e = styles.list) == null ? void 0 : _e.minW) != null ? _g : (_f = styles.list) == null ? void 0 : _f.minWidth;
    const css = { ...styles.list };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_popover.PopoverContent,
      {
        className: (0, import_utils2.cx)("ui-select__list", className),
        w,
        minW,
        __css: css,
        ...getListProps(rest, ref)
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SelectList
});
//# sourceMappingURL=select-list.js.map