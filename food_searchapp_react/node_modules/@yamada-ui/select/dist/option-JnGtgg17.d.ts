import * as _yamada_ui_core from '@yamada-ui/core';
import { HTMLUIProps, UIPropGetter, CSSUIObject } from '@yamada-ui/core';
import * as react from 'react';
import { RefObject, MouseEvent, Dispatch, SetStateAction, ForwardedRef, ReactElement } from 'react';
import * as _yamada_ui_use_descendant from '@yamada-ui/use-descendant';
import { FormControlOptions } from '@yamada-ui/form-control';
import { MotionUIPropGetter } from '@yamada-ui/motion';
import { PopoverProps } from '@yamada-ui/popover';

declare const SelectDescendantsContextProvider: react.Provider<{
    register: (nodeOrOptions: HTMLElement | {
        disabled?: boolean | undefined;
        id?: string | undefined;
        filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined;
    } | null) => void | ((node: HTMLElement | null) => void);
    unregister: (node: HTMLElement) => void;
    destroy: () => void;
    count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
    value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    indexOf: (node: HTMLElement | null) => number;
    firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
    enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledIndexOf: (node: HTMLElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
}>;
declare const useSelectDescendantsContext: () => {
    register: (nodeOrOptions: HTMLElement | {
        disabled?: boolean | undefined;
        id?: string | undefined;
        filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined;
    } | null) => void | ((node: HTMLElement | null) => void);
    unregister: (node: HTMLElement) => void;
    destroy: () => void;
    count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
    value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    indexOf: (node: HTMLElement | null) => number;
    firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
    enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledIndexOf: (node: HTMLElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
};
declare const useSelectDescendants: () => {
    register: (nodeOrOptions: HTMLElement | {
        disabled?: boolean | undefined;
        id?: string | undefined;
        filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined;
    } | null) => void | ((node: HTMLElement | null) => void);
    unregister: (node: HTMLElement) => void;
    destroy: () => void;
    count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
    value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    indexOf: (node: HTMLElement | null) => number;
    firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
    enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledIndexOf: (node: HTMLElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
    enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
};
declare const useSelectDescendant: (options?: {
    disabled?: boolean | undefined;
    id?: string | undefined;
    filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined;
} | undefined) => {
    descendants: {
        register: (nodeOrOptions: HTMLElement | _yamada_ui_use_descendant.DescendantOptions<HTMLElement, Record<string, any>> | null) => void | ((node: HTMLElement | null) => void);
        unregister: (node: HTMLElement) => void;
        destroy: () => void;
        count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>>[];
        value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        indexOf: (node: HTMLElement | null) => number;
        firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>>[];
        enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledIndexOf: (node: HTMLElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => number;
        enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
        enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, Record<string, any>> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, Record<string, any>> | undefined;
    };
    index: number;
    enabledIndex: number;
    register: (node: HTMLElement | null) => void;
};
type MaybeValue = string | string[];
type SelectContext = Omit<UseSelectProps, "value" | "defaultValue" | "onChange" | "isEmpty"> & {
    value: MaybeValue;
    label: MaybeValue | undefined;
    onChange: (newValue: string) => void;
    onChangeLabel: (newValue: string, runOmit?: boolean) => void;
    isOpen: boolean;
    onOpen: () => void;
    onClose: () => void;
    onFocusFirst: () => void;
    onFocusLast: () => void;
    onFocusNext: () => void;
    onFocusPrev: () => void;
    focusedIndex: number;
    setFocusedIndex: Dispatch<SetStateAction<number>>;
    containerRef: RefObject<HTMLDivElement>;
    fieldRef: RefObject<HTMLDivElement>;
    listRef: RefObject<HTMLUListElement>;
    styles: Record<string, CSSUIObject>;
};
declare const SelectProvider: react.Provider<SelectContext>;
declare const useSelectContext: () => SelectContext;
type UseSelectProps<T extends MaybeValue = string> = Omit<HTMLUIProps<"div">, "defaultValue" | "onChange" | "offset"> & Omit<PopoverProps, "initialFocusRef" | "closeOnButton" | "trigger" | "autoFocus" | "restoreFocus" | "openDelay" | "closeDelay"> & FormControlOptions & {
    /**
     * The HTML `name` attribute used for forms.
     */
    name?: string;
    /**
     * The placeholder of the select.
     */
    placeholder?: string;
    /**
     * The value of the select.
     */
    value?: T;
    /**
     * The initial value of the select.
     */
    defaultValue?: T;
    /**
     * The callback invoked when value state changes.
     */
    onChange?: (value: T) => void;
    /**
     * If `true`, the list element will be closed when value is selected.
     *
     * @default true
     */
    closeOnSelect?: boolean;
    /**
     * If `true`, include placeholders in options.
     *
     * @default true
     */
    placeholderInOptions?: boolean;
    isEmpty: boolean;
    /**
     * If `true`, the selected item(s) will be excluded from the list.
     *
     * @default false
     */
    omitSelectedValues?: boolean;
    /**
     * The maximum selectable value.
     */
    maxSelectValues?: number;
    /**
     * Props for select option element.
     */
    optionProps?: Omit<OptionProps, "value" | "children">;
};
declare const useSelect: <T extends MaybeValue = string>({ placeholder, closeOnBlur, closeOnEsc, closeOnSelect, placeholderInOptions, omitSelectedValues, maxSelectValues, isEmpty, placement, duration, isOpen: isOpenProp, defaultIsOpen, onOpen: onOpenProp, onClose: onCloseProp, optionProps, ...rest }: UseSelectProps<T>) => {
    descendants: {
        register: (nodeOrOptions: HTMLElement | {
            disabled?: boolean | undefined;
            id?: string | undefined;
            filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined;
        } | null) => void | ((node: HTMLElement | null) => void);
        unregister: (node: HTMLElement) => void;
        destroy: () => void;
        count: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
        values: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
        value: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        indexOf: (node: HTMLElement | null) => number;
        firstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        lastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        prevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        nextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        enabledCount: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
        enabledValues: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}>[];
        enabledValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        enabledIndexOf: (node: HTMLElement | null, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => number;
        enabledFirstValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        enabledLastValue: (filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        enabledPrevValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
        enabledNextValue: (index: number, filter?: _yamada_ui_use_descendant.FilterDescendant<HTMLElement, {}> | undefined, loop?: boolean) => _yamada_ui_use_descendant.Descendant<HTMLElement, {}> | undefined;
    };
    value: T;
    label: T | undefined;
    focusedIndex: number;
    placeholder: string | undefined;
    placeholderInOptions: boolean;
    omitSelectedValues: boolean;
    closeOnSelect: boolean;
    isOpen: boolean;
    containerRef: RefObject<HTMLDivElement>;
    fieldRef: RefObject<HTMLDivElement>;
    listRef: RefObject<HTMLUListElement>;
    optionProps: Omit<OptionProps, "value" | "children"> | undefined;
    formControlProps: {
        [x: string]: any;
    };
    onChangeLabel: (newValue: string, runOmit?: boolean) => void;
    onChange: (newValue: string) => void;
    onClear: (ev: MouseEvent<HTMLDivElement>) => void;
    onOpen: () => void;
    onClose: () => void;
    onFocusFirst: () => void;
    onFocusLast: () => void;
    onFocusSelected: () => void;
    onFocusNext: () => void;
    onFocusPrev: () => void;
    setFocusedIndex: Dispatch<SetStateAction<number>>;
    getPopoverProps: (props?: PopoverProps) => PopoverProps;
    getContainerProps: UIPropGetter;
    getFieldProps: UIPropGetter;
};
type UseSelectReturn = ReturnType<typeof useSelect>;
declare const useSelectList: () => {
    getListProps: MotionUIPropGetter<"ul">;
};
type UseSelectListReturn = ReturnType<typeof useSelectList>;
type UseSelectOptionGroupProps = HTMLUIProps<"ul"> & {
    /**
     * The label of the option group.
     */
    label: string;
};
declare const useSelectOptionGroup: ({ label, ...rest }: UseSelectOptionGroupProps) => {
    label: string;
    getContainerProps: UIPropGetter;
    getGroupProps: UIPropGetter;
};
type UseSelectOptionGroupReturn = ReturnType<typeof useSelectOptionGroup>;
type UseSelectOptionProps = Omit<HTMLUIProps<"li">, "value"> & {
    /**
     * The value of the select option.
     */
    value?: string;
    /**
     * If `true`, the select option will be disabled.
     *
     * @default false
     */
    isDisabled?: boolean;
    /**
     * If `true`, the select option will be focusable.
     *
     * @default false
     */
    isFocusable?: boolean;
    /**
     * If `true`, the list element will be closed when selected.
     *
     * @default false
     */
    closeOnSelect?: boolean;
};
declare const useSelectOption: (ref: ForwardedRef<any> | undefined, props: UseSelectOptionProps) => {
    isSelected: boolean;
    isFocused: boolean;
    customIcon: react.ReactElement<any, string | react.JSXElementConstructor<any>> | undefined;
    children: react.ReactNode;
    getOptionProps: UIPropGetter<"li">;
};
type UseSelectOptionReturn = ReturnType<typeof useSelectOption>;

type OptionOptions = {
    icon?: ReactElement;
};
type OptionProps = UseSelectOptionProps & OptionOptions;
declare const Option: _yamada_ui_core.Component<"li", OptionProps>;

export { type MaybeValue as M, Option as O, SelectDescendantsContextProvider as S, type UseSelectProps as U, type OptionProps as a, type UseSelectOptionGroupProps as b, useSelectDescendants as c, useSelectDescendant as d, SelectProvider as e, useSelectContext as f, useSelect as g, type UseSelectReturn as h, useSelectList as i, type UseSelectListReturn as j, useSelectOptionGroup as k, type UseSelectOptionGroupReturn as l, type UseSelectOptionProps as m, useSelectOption as n, type UseSelectOptionReturn as o, useSelectDescendantsContext as u };
