"use client"

// src/use-select.ts
import { layoutStyleProperties } from "@yamada-ui/core";
import {
  formControlProperties,
  useFormControlProps
} from "@yamada-ui/form-control";
import { useControllableState } from "@yamada-ui/use-controllable-state";
import { createDescendant } from "@yamada-ui/use-descendant";
import { useDisclosure } from "@yamada-ui/use-disclosure";
import { useOutsideClick } from "@yamada-ui/use-outside-click";
import {
  createContext,
  dataAttr,
  funcAll,
  handlerAll,
  omitObject,
  pickObject,
  splitObject,
  useUnmountEffect,
  useUpdateEffect,
  mergeRefs,
  isHTMLElement,
  ariaAttr,
  isArray,
  isUndefined,
  getEventRelatedTarget,
  isContains
} from "@yamada-ui/utils";
import { useCallback, useRef, useState, useEffect } from "react";
var isTargetOption = (target) => {
  var _a;
  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute("role")) == null ? void 0 : _a.startsWith("select-item"));
};
var {
  DescendantsContextProvider: SelectDescendantsContextProvider,
  useDescendantsContext: useSelectDescendantsContext,
  useDescendants: useSelectDescendants,
  useDescendant: useSelectDescendant
} = createDescendant();
var [SelectProvider, useSelectContext] = createContext({
  strict: false,
  name: "SelectContext"
});
var useSelect = ({
  placeholder,
  closeOnBlur = true,
  closeOnEsc = true,
  closeOnSelect = true,
  placeholderInOptions = true,
  omitSelectedValues = false,
  maxSelectValues,
  isEmpty,
  placement = "bottom-start",
  duration = 0.2,
  isOpen: isOpenProp,
  defaultIsOpen,
  onOpen: onOpenProp,
  onClose: onCloseProp,
  optionProps,
  ...rest
}) => {
  rest = useFormControlProps(rest);
  const { "aria-readonly": _ariaReadonly, ...formControlProps } = pickObject(
    rest,
    formControlProperties
  );
  const [containerProps, fieldProps] = splitObject(
    omitObject(rest, ["value", "defaultValue", "onChange", "aria-readonly"]),
    layoutStyleProperties
  );
  const descendants = useSelectDescendants();
  const [focusedIndex, setFocusedIndex] = useState(-1);
  const [isAllSelected, setIsAllSelected] = useState(false);
  const containerRef = useRef(null);
  const fieldRef = useRef(null);
  const listRef = useRef(null);
  const timeoutIds = useRef(/* @__PURE__ */ new Set([]));
  const [value, setValue] = useControllableState({
    value: rest.value,
    defaultValue: rest.defaultValue,
    onChange: rest.onChange
  });
  const [label, setLabel] = useState(void 0);
  const isFocused = focusedIndex > -1;
  const isMulti = isArray(value);
  const isEmptyValue = (!isMulti ? !value : !value.length) && !(placeholder && placeholderInOptions);
  const selectedValues = descendants.values(
    ({ node }) => {
      var _a;
      return isMulti && value.includes((_a = node.dataset.value) != null ? _a : "");
    }
  );
  const selectedIndexes = selectedValues.map(({ index }) => index);
  const enabledValues = descendants.enabledValues(
    ({ index }) => !selectedIndexes.includes(index)
  );
  const onFocusFirst = useCallback(() => {
    const id = setTimeout(() => {
      const first = descendants.enabledFirstValue();
      if (!first)
        return;
      if (!isMulti || !omitSelectedValues) {
        setFocusedIndex(first.index);
      } else {
        if (selectedIndexes.includes(first.index)) {
          const enabledFirst = enabledValues[0];
          setFocusedIndex(enabledFirst.index);
        } else {
          setFocusedIndex(first.index);
        }
      }
    });
    timeoutIds.current.add(id);
  }, [descendants, enabledValues, isMulti, omitSelectedValues, selectedIndexes]);
  const onFocusLast = useCallback(() => {
    const id = setTimeout(() => {
      const last = descendants.enabledLastValue();
      if (!last)
        return;
      if (!isMulti || !omitSelectedValues) {
        setFocusedIndex(last.index);
      } else {
        if (selectedIndexes.includes(last.index)) {
          const enabledLast = enabledValues.reverse()[0];
          setFocusedIndex(enabledLast.index);
        } else {
          setFocusedIndex(last.index);
        }
      }
    });
    timeoutIds.current.add(id);
  }, [descendants, enabledValues, isMulti, omitSelectedValues, selectedIndexes]);
  const onFocusSelected = useCallback(() => {
    const id = setTimeout(() => {
      const values = descendants.enabledValues();
      const selected = values.find(
        ({ node }) => {
          var _a;
          return !isMulti ? node.dataset.value === value : value.includes((_a = node.dataset.value) != null ? _a : "");
        }
      );
      if (selected)
        setFocusedIndex(selected.index);
    });
    timeoutIds.current.add(id);
  }, [descendants, isMulti, value]);
  const onFocusNext = useCallback(() => {
    const id = setTimeout(() => {
      var _a;
      const next = descendants.enabledNextValue(focusedIndex);
      if (!next)
        return;
      if (!isMulti || !omitSelectedValues) {
        setFocusedIndex(next.index);
      } else {
        if (selectedIndexes.includes(next.index)) {
          const enabledNext = (_a = enabledValues.find(({ index }) => next.index < index)) != null ? _a : enabledValues[0];
          setFocusedIndex(enabledNext.index);
        } else {
          setFocusedIndex(next.index);
        }
      }
    });
    timeoutIds.current.add(id);
  }, [
    descendants,
    enabledValues,
    focusedIndex,
    isMulti,
    omitSelectedValues,
    selectedIndexes,
    setFocusedIndex
  ]);
  const onFocusPrev = useCallback(() => {
    const id = setTimeout(() => {
      var _a;
      const prev = descendants.enabledPrevValue(focusedIndex);
      if (!prev)
        return;
      if (!isMulti || !omitSelectedValues) {
        setFocusedIndex(prev.index);
      } else {
        if (selectedIndexes.includes(prev.index)) {
          const enabledPrev = (_a = enabledValues.reverse().find(({ index }) => index < prev.index)) != null ? _a : enabledValues[0];
          setFocusedIndex(enabledPrev.index);
        } else {
          setFocusedIndex(prev.index);
        }
      }
    });
    timeoutIds.current.add(id);
  }, [
    descendants,
    enabledValues,
    focusedIndex,
    isMulti,
    omitSelectedValues,
    selectedIndexes,
    setFocusedIndex
  ]);
  const onFocusFirstOrSelected = isEmptyValue || omitSelectedValues ? onFocusFirst : onFocusSelected;
  const onFocusLastOrSelected = isEmptyValue || omitSelectedValues ? onFocusLast : onFocusSelected;
  const onChangeLabel = useCallback(
    (newValue, runOmit = true) => {
      const values = descendants.values();
      const selectedValues2 = values.filter(({ node }) => node.dataset.value === newValue).map(({ node, index }) => {
        var _a;
        if (!(!!placeholder && placeholderInOptions) || index !== 0) {
          const el = Array.from(node.children).find(
            (child) => child.getAttribute("data-label") !== null
          );
          return (_a = el == null ? void 0 : el.innerHTML) != null ? _a : "";
        } else {
          return void 0;
        }
      });
      setLabel((prev) => {
        if (!isMulti) {
          return selectedValues2[0];
        } else {
          selectedValues2.forEach((selectedValue) => {
            const isSelected = isArray(prev) && prev.includes(selectedValue != null ? selectedValue : "");
            if (!isSelected) {
              prev = [...isArray(prev) ? prev : [], selectedValue];
            } else if (runOmit) {
              prev = isArray(prev) ? prev.filter((value2) => value2 !== selectedValue) : void 0;
            }
          });
          return prev;
        }
      });
    },
    [descendants, isMulti, placeholder, placeholderInOptions]
  );
  const onChange = useCallback(
    (newValue) => {
      setValue((prev) => {
        if (!isArray(prev)) {
          return newValue;
        } else {
          const isSelected = prev.includes(newValue);
          if (!isSelected) {
            return [...prev, newValue];
          } else {
            return prev.filter((value2) => value2 !== newValue);
          }
        }
      });
      onChangeLabel(newValue);
    },
    [onChangeLabel, setValue]
  );
  const onClear = useCallback(
    (ev) => {
      ev.stopPropagation();
      setValue([]);
      setLabel(void 0);
    },
    [setLabel, setValue]
  );
  const {
    isOpen,
    onOpen: onInternalOpen,
    onClose
  } = useDisclosure({
    isOpen: isOpenProp,
    defaultIsOpen,
    onOpen: onOpenProp,
    onClose: onCloseProp
  });
  const onOpen = useCallback(() => {
    if (formControlProps.disabled || formControlProps.readOnly)
      return;
    if (isEmpty || isAllSelected)
      return;
    onInternalOpen();
  }, [formControlProps, isEmpty, isAllSelected, onInternalOpen]);
  const onSelect = useCallback(() => {
    var _a, _b;
    let enabledValue = descendants.value(focusedIndex);
    if ("disabled" in ((_a = enabledValue == null ? void 0 : enabledValue.node.dataset) != null ? _a : {}))
      enabledValue = void 0;
    if (!enabledValue)
      return;
    const value2 = (_b = enabledValue.node.dataset.value) != null ? _b : "";
    onChange(value2);
    if (closeOnSelect)
      onClose();
    if (omitSelectedValues)
      onFocusNext();
  }, [
    closeOnSelect,
    descendants,
    focusedIndex,
    omitSelectedValues,
    onChange,
    onClose,
    onFocusNext
  ]);
  const onClick = useCallback(() => {
    if (isOpen)
      return;
    onOpen();
    onFocusFirstOrSelected();
  }, [isOpen, onFocusFirstOrSelected, onOpen]);
  const onFocus = useCallback(() => {
    if (isOpen)
      return;
    onOpen();
    onFocusFirstOrSelected();
  }, [isOpen, onFocusFirstOrSelected, onOpen]);
  const onBlur = useCallback(
    (ev) => {
      const relatedTarget = getEventRelatedTarget(ev);
      if (isContains(containerRef.current, relatedTarget))
        return;
      if (!closeOnBlur)
        return;
      if (isOpen)
        onClose();
    },
    [closeOnBlur, isOpen, onClose]
  );
  const onKeyDown = useCallback(
    (ev) => {
      if (ev.key === " ")
        ev.key = ev.code;
      if (formControlProps.disabled || formControlProps.readOnly)
        return;
      const actions = {
        ArrowDown: isFocused ? () => onFocusNext() : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : void 0,
        ArrowUp: isFocused ? () => onFocusPrev() : !isOpen ? funcAll(onOpen, onFocusLastOrSelected) : void 0,
        Space: isFocused ? onSelect : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : void 0,
        Enter: isFocused ? onSelect : !isOpen ? funcAll(onOpen, onFocusFirstOrSelected) : void 0,
        Home: isOpen ? onFocusFirst : void 0,
        End: isOpen ? onFocusLast : void 0,
        Escape: closeOnEsc ? onClose : void 0
      };
      const action = actions[ev.key];
      if (!action)
        return;
      ev.preventDefault();
      ev.stopPropagation();
      action();
    },
    [
      formControlProps.disabled,
      formControlProps.readOnly,
      isFocused,
      isOpen,
      onOpen,
      onFocusFirstOrSelected,
      onFocusLastOrSelected,
      onSelect,
      onFocusFirst,
      onFocusLast,
      closeOnEsc,
      onClose,
      onFocusNext,
      onFocusPrev
    ]
  );
  useOutsideClick({
    ref: containerRef,
    handler: onClose,
    enabled: isOpen && closeOnBlur
  });
  useEffect(() => {
    if (!isMulti)
      return;
    if (!omitSelectedValues && isUndefined(maxSelectValues))
      return;
    const isAll = value.length > 0 && value.length === descendants.count();
    const isMax = value.length === maxSelectValues;
    if (isAll || isMax) {
      onClose();
      setIsAllSelected(true);
    } else {
      setIsAllSelected(false);
    }
  }, [
    omitSelectedValues,
    value,
    descendants,
    isMulti,
    onClose,
    maxSelectValues
  ]);
  useUpdateEffect(() => {
    if (!isOpen)
      setFocusedIndex(-1);
  }, [isOpen]);
  useUnmountEffect(() => {
    timeoutIds.current.forEach((id) => clearTimeout(id));
    timeoutIds.current.clear();
  });
  const getPopoverProps = useCallback(
    (props) => ({
      matchWidth: true,
      ...rest,
      ...props,
      isOpen,
      onOpen,
      onClose,
      placement,
      duration,
      trigger: "never",
      closeOnButton: false,
      closeOnBlur
    }),
    [duration, closeOnBlur, onClose, onOpen, placement, rest, isOpen]
  );
  const getContainerProps = useCallback(
    (props = {}, ref = null) => ({
      ref: mergeRefs(containerRef, ref),
      ...containerProps,
      ...props,
      ...formControlProps,
      onClick: handlerAll(props.onClick, rest.onClick, onClick),
      onBlur: handlerAll(props.onBlur, rest.onBlur, onBlur)
    }),
    [containerProps, formControlProps, onBlur, onClick, rest]
  );
  const getFieldProps = useCallback(
    (props = {}, ref = null) => ({
      ref: mergeRefs(fieldRef, ref),
      tabIndex: 0,
      ...fieldProps,
      ...props,
      "data-active": dataAttr(isOpen),
      "data-placeholder": dataAttr(
        !isMulti ? label === void 0 : !(label == null ? void 0 : label.length)
      ),
      "aria-expanded": dataAttr(isOpen),
      onFocus: handlerAll(props.onFocus, rest.onFocus, onFocus),
      onKeyDown: handlerAll(props.onKeyDown, rest.onKeyDown, onKeyDown)
    }),
    [fieldProps, isOpen, isMulti, label, rest, onFocus, onKeyDown]
  );
  return {
    descendants,
    value,
    label,
    focusedIndex,
    placeholder,
    placeholderInOptions,
    omitSelectedValues,
    closeOnSelect,
    isOpen,
    containerRef,
    fieldRef,
    listRef,
    optionProps,
    formControlProps,
    onChangeLabel,
    onChange,
    onClear,
    onOpen,
    onClose,
    onFocusFirst,
    onFocusLast,
    onFocusSelected,
    onFocusNext,
    onFocusPrev,
    setFocusedIndex,
    getPopoverProps,
    getContainerProps,
    getFieldProps
  };
};
var useSelectList = () => {
  const { listRef, focusedIndex } = useSelectContext();
  const descendants = useSelectDescendantsContext();
  const beforeFocusedIndex = useRef(-1);
  const selectedValue = descendants.value(focusedIndex);
  useEffect(() => {
    if (!listRef.current || !selectedValue)
      return;
    if (beforeFocusedIndex.current === selectedValue.index)
      return;
    const parent = listRef.current;
    const child = selectedValue.node;
    const parentHeight = parent.clientHeight;
    const viewTop = parent.scrollTop;
    const viewBottom = viewTop + parentHeight;
    const childHeight = child.clientHeight;
    const childTop = child.offsetTop;
    const childBottom = childTop + childHeight;
    const isInView = viewTop <= childTop && childBottom <= viewBottom;
    const isScrollBottom = beforeFocusedIndex.current < selectedValue.index;
    if (!isInView) {
      if (childBottom <= parentHeight) {
        listRef.current.scrollTo({ top: 0 });
      } else {
        if (!isScrollBottom) {
          listRef.current.scrollTo({ top: childTop + 1 });
        } else {
          listRef.current.scrollTo({ top: childBottom - parentHeight });
        }
      }
    }
    beforeFocusedIndex.current = selectedValue.index;
  }, [listRef, selectedValue]);
  const getListProps = useCallback(
    (props = {}, ref = null) => ({
      as: "ul",
      ref: mergeRefs(listRef, ref),
      role: "select",
      tabIndex: -1,
      ...props
    }),
    [listRef]
  );
  return {
    getListProps
  };
};
var useSelectOptionGroup = ({
  label,
  ...rest
}) => {
  const { value, omitSelectedValues } = useSelectContext();
  const isMulti = isArray(value);
  const descendants = useSelectDescendantsContext();
  const values = descendants.values();
  const selectedValues = isMulti && omitSelectedValues ? descendants.values(
    ({ node }) => {
      var _a;
      return value.includes((_a = node.dataset.value) != null ? _a : "");
    }
  ) : [];
  const selectedIndexes = selectedValues.map(({ index }) => index);
  const childValues = values.filter(
    ({ node, index }) => {
      var _a;
      return ((_a = node.parentElement) == null ? void 0 : _a.dataset.label) === label && !selectedIndexes.includes(index);
    }
  );
  const isEmpty = !childValues.length;
  const computedRest = splitObject(rest, layoutStyleProperties);
  const getContainerProps = useCallback(
    (props = {}, ref = null) => {
      const style = {
        border: "0px",
        clip: "rect(0px, 0px, 0px, 0px)",
        height: "1px",
        width: "1px",
        margin: "-1px",
        padding: "0px",
        overflow: "hidden",
        whiteSpace: "nowrap",
        position: "absolute"
      };
      return {
        ref,
        ...props,
        ...computedRest[0],
        style: isEmpty ? style : void 0
      };
    },
    [computedRest, isEmpty]
  );
  const getGroupProps = useCallback(
    (props = {}, ref = null) => ({
      ref,
      ...props,
      ...computedRest[1],
      "data-label": label
    }),
    [computedRest, label]
  );
  return {
    label,
    getContainerProps,
    getGroupProps
  };
};
var useSelectOption = (ref, props) => {
  var _a, _b;
  const {
    fieldRef,
    value,
    placeholder,
    placeholderInOptions,
    omitSelectedValues,
    closeOnSelect: generalCloseOnSelect,
    focusedIndex,
    optionProps,
    onChange,
    onChangeLabel,
    onFocusNext,
    onClose,
    setFocusedIndex
  } = useSelectContext();
  let {
    icon: customIcon,
    isDisabled,
    isFocusable,
    closeOnSelect: customCloseOnSelect,
    children,
    ...computedProps
  } = { ...optionProps, ...props };
  const trulyDisabled = !!isDisabled && !isFocusable;
  const itemRef = useRef(null);
  const { index, register, descendants } = useSelectDescendant({
    disabled: trulyDisabled
  });
  const values = descendants.values();
  const frontValues = values.slice(0, index);
  const isMulti = isArray(value);
  const isDuplicated = !isMulti ? frontValues.some(
    ({ node }) => {
      var _a2;
      return node.dataset.value === ((_a2 = computedProps.value) != null ? _a2 : "");
    }
  ) : false;
  const isSelected = !isDuplicated && (!isMulti ? ((_a = computedProps.value) != null ? _a : "") === value : value.includes((_b = computedProps.value) != null ? _b : ""));
  const isFocused = index === focusedIndex;
  if (!!placeholder && index > 0 && placeholderInOptions && !computedProps.value) {
    console.warn(
      `${!isMulti ? "Select" : "MultiSelect"}: If placeholders are present, All options must be set value. If want to set an empty value, either don't set the placeholder or set 'placeholderInOptions' to false.`
    );
  }
  const onClick = useCallback(
    (ev) => {
      var _a2;
      ev.preventDefault();
      ev.stopPropagation();
      if (isDisabled) {
        if (fieldRef.current)
          fieldRef.current.focus();
        return;
      }
      if (!isTargetOption(ev.currentTarget)) {
        if (fieldRef.current)
          fieldRef.current.focus();
        return;
      }
      setFocusedIndex(index);
      onChange((_a2 = computedProps.value) != null ? _a2 : "");
      if (fieldRef.current)
        fieldRef.current.focus();
      if (customCloseOnSelect != null ? customCloseOnSelect : generalCloseOnSelect)
        onClose();
      if (omitSelectedValues)
        onFocusNext();
    },
    [
      isDisabled,
      setFocusedIndex,
      index,
      onChange,
      computedProps.value,
      fieldRef,
      customCloseOnSelect,
      generalCloseOnSelect,
      onClose,
      omitSelectedValues,
      onFocusNext
    ]
  );
  useEffect(() => {
    var _a2;
    if (isSelected)
      onChangeLabel((_a2 = computedProps.value) != null ? _a2 : "", false);
  }, [computedProps, isSelected, onChangeLabel]);
  const getOptionProps = useCallback(
    (props2 = {}) => {
      var _a2;
      const style = {
        border: "0px",
        clip: "rect(0px, 0px, 0px, 0px)",
        height: "1px",
        width: "1px",
        margin: "-1px",
        padding: "0px",
        overflow: "hidden",
        whiteSpace: "nowrap",
        position: "absolute"
      };
      return {
        ref: mergeRefs(itemRef, ref, register),
        ...omitObject(computedProps, ["value"]),
        ...props2,
        role: "select-item",
        tabIndex: -1,
        style: omitSelectedValues && isSelected ? style : void 0,
        "data-value": (_a2 = computedProps.value) != null ? _a2 : "",
        "data-focus": dataAttr(isFocused),
        "data-disabled": dataAttr(isDisabled),
        "aria-checked": ariaAttr(isSelected),
        "aria-disabled": ariaAttr(isDisabled),
        onClick: handlerAll(computedProps.onClick, props2.onClick, onClick)
      };
    },
    [
      computedProps,
      isDisabled,
      isFocused,
      isSelected,
      omitSelectedValues,
      onClick,
      ref,
      register
    ]
  );
  return {
    isSelected,
    isFocused,
    customIcon,
    children,
    getOptionProps
  };
};

export {
  SelectDescendantsContextProvider,
  useSelectDescendantsContext,
  useSelectDescendants,
  useSelectDescendant,
  SelectProvider,
  useSelectContext,
  useSelect,
  useSelectList,
  useSelectOptionGroup,
  useSelectOption
};
//# sourceMappingURL=chunk-VOZ36AIW.mjs.map