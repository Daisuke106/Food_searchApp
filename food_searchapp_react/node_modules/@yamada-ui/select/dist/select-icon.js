"use client"
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/select-icon.tsx
var select_icon_exports = {};
__export(select_icon_exports, {
  SelectClearIcon: () => SelectClearIcon,
  SelectIcon: () => SelectIcon
});
module.exports = __toCommonJS(select_icon_exports);
var import_core2 = require("@yamada-ui/core");
var import_icon = require("@yamada-ui/icon");
var import_use_clickable = require("@yamada-ui/use-clickable");
var import_utils2 = require("@yamada-ui/utils");
var import_react2 = require("react");

// src/use-select.ts
var import_core = require("@yamada-ui/core");
var import_form_control = require("@yamada-ui/form-control");
var import_use_controllable_state = require("@yamada-ui/use-controllable-state");
var import_use_descendant = require("@yamada-ui/use-descendant");
var import_use_disclosure = require("@yamada-ui/use-disclosure");
var import_use_outside_click = require("@yamada-ui/use-outside-click");
var import_utils = require("@yamada-ui/utils");
var import_react = require("react");
var {
  DescendantsContextProvider: SelectDescendantsContextProvider,
  useDescendantsContext: useSelectDescendantsContext,
  useDescendants: useSelectDescendants,
  useDescendant: useSelectDescendant
} = (0, import_use_descendant.createDescendant)();
var [SelectProvider, useSelectContext] = (0, import_utils.createContext)({
  strict: false,
  name: "SelectContext"
});

// src/select-icon.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var SelectIcon = (0, import_core2.forwardRef)(
  ({ className, children, __css, ...rest }, ref) => {
    const { styles } = useSelectContext();
    const css = {
      position: "absolute",
      top: "50%",
      transform: "translateY(-50%)",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      pointerEvents: "none",
      cursor: "pointer",
      ...styles.icon,
      ...__css
    };
    const validChildren = (0, import_utils2.getValidChildren)(children);
    const cloneChildren = validChildren.map(
      (child) => (0, import_react2.cloneElement)(child, {
        focusable: false,
        "aria-hidden": true,
        style: {
          maxWidth: "1em",
          maxHeight: "1em",
          color: "currentColor"
        }
      })
    );
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_core2.ui.div,
      {
        ref,
        className: (0, import_utils2.cx)("ui-select__icon", className),
        __css: css,
        ...rest,
        children: (0, import_utils2.isValidElement)(children) ? cloneChildren : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_icon.ChevronIcon, {})
      }
    );
  }
);
var SelectClearIcon = ({
  className,
  children,
  ...props
}) => {
  const ref = (0, import_react2.useRef)(null);
  const { styles } = useSelectContext();
  const isDisabled = props.disabled;
  const rest = (0, import_use_clickable.useClickable)({
    ref,
    isDisabled,
    ...props
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    SelectIcon,
    {
      "aria-label": "Clear value",
      className: (0, import_utils2.cx)("ui-select__clear-icon", className),
      __css: styles.clearIcon,
      ...rest,
      children: children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_icon.CloseIcon, { w: "0.5em", h: "0.5em" })
    }
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SelectClearIcon,
  SelectIcon
});
//# sourceMappingURL=select-icon.js.map