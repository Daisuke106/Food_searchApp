"use client"
import {
  OptionGroup
} from "./chunk-3ZKHIXVX.mjs";
import {
  Option
} from "./chunk-6PNRD4RX.mjs";
import {
  SelectClearIcon,
  SelectIcon
} from "./chunk-ILBWJTLK.mjs";
import {
  SelectList
} from "./chunk-JED4IN26.mjs";
import {
  SelectDescendantsContextProvider,
  SelectProvider,
  useSelect,
  useSelectContext
} from "./chunk-VOZ36AIW.mjs";

// src/select.tsx
import {
  ui as ui2,
  forwardRef as forwardRef2,
  useMultiComponentStyle as useMultiComponentStyle2,
  omitThemeProps as omitThemeProps2
} from "@yamada-ui/core";
import { Popover as Popover2, PopoverTrigger as PopoverTrigger2 } from "@yamada-ui/popover";
import { Portal as Portal2 } from "@yamada-ui/portal";
import { cx as cx2, getValidChildren as getValidChildren2 } from "@yamada-ui/utils";

// src/multi-select.tsx
import {
  ui,
  forwardRef,
  useMultiComponentStyle,
  omitThemeProps
} from "@yamada-ui/core";
import { Popover, PopoverTrigger } from "@yamada-ui/popover";
import { Portal } from "@yamada-ui/portal";
import { cx, getValidChildren, handlerAll } from "@yamada-ui/utils";
import { cloneElement, useMemo } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var MultiSelect = forwardRef((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle("MultiSelect", props);
  let {
    className,
    defaultValue = [],
    component,
    separator,
    isClearable = true,
    items = [],
    color,
    h,
    height,
    minH,
    minHeight,
    closeOnSelect = false,
    containerProps,
    listProps,
    iconProps,
    clearIconProps,
    portalProps = { isDisabled: true },
    children,
    ...computedProps
  } = omitThemeProps(mergedProps);
  const validChildren = getValidChildren(children);
  let computedChildren = [];
  if (!validChildren.length && items.length) {
    computedChildren = items.map((item, i) => {
      if ("value" in item) {
        const { label, value: value2, ...props2 } = item;
        return /* @__PURE__ */ jsx(Option, { value: value2, ...props2, children: label }, i);
      } else if ("items" in item) {
        const { label, items: items2 = [], ...props2 } = item;
        return /* @__PURE__ */ jsx(
          OptionGroup,
          {
            label: label != null ? label : "",
            ...props2,
            children: items2.map(({ label: label2, value: value2, ...props3 }, i2) => /* @__PURE__ */ jsx(Option, { value: value2, ...props3, children: label2 }, i2))
          },
          i
        );
      }
    }).filter(Boolean);
  }
  let isEmpty = !validChildren.length && !computedChildren.length;
  const {
    value,
    descendants,
    formControlProps,
    getPopoverProps,
    getContainerProps,
    getFieldProps,
    placeholder,
    onClear,
    ...rest
  } = useSelect({
    ...computedProps,
    defaultValue,
    placeholderInOptions: false,
    closeOnSelect,
    isEmpty
  });
  h != null ? h : h = height;
  minH != null ? minH : minH = minHeight;
  const css = {
    w: "100%",
    h: "fit-content",
    color,
    ...styles.container
  };
  return /* @__PURE__ */ jsx(SelectDescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ jsx(SelectProvider, { value: { ...rest, value, placeholder, styles }, children: /* @__PURE__ */ jsx(Popover, { ...getPopoverProps(), children: /* @__PURE__ */ jsxs(
    ui.div,
    {
      className: cx("ui-multi-select", className),
      __css: css,
      ...getContainerProps(containerProps),
      children: [
        /* @__PURE__ */ jsxs(
          ui.div,
          {
            className: "ui-multi-select__inner",
            __css: { position: "relative", ...styles.inner },
            children: [
              /* @__PURE__ */ jsx(PopoverTrigger, { children: /* @__PURE__ */ jsx(
                MultiSelectField,
                {
                  component,
                  separator,
                  h,
                  minH,
                  ...getFieldProps({}, ref)
                }
              ) }),
              isClearable && value.length ? /* @__PURE__ */ jsx(
                SelectClearIcon,
                {
                  ...clearIconProps,
                  onClick: handlerAll(clearIconProps == null ? void 0 : clearIconProps.onClick, onClear),
                  ...formControlProps
                }
              ) : /* @__PURE__ */ jsx(SelectIcon, { ...iconProps, ...formControlProps })
            ]
          }
        ),
        !isEmpty ? /* @__PURE__ */ jsx(Portal, { ...portalProps, children: /* @__PURE__ */ jsx(SelectList, { ...listProps, children: children != null ? children : computedChildren }) }) : null
      ]
    }
  ) }) }) });
});
var MultiSelectField = forwardRef(
  ({
    className,
    component,
    separator = ",",
    isTruncated,
    lineClamp = 1,
    h,
    minH,
    ...rest
  }, ref) => {
    const { value, label, onChange, placeholder, styles } = useSelectContext();
    const cloneChildren = useMemo(() => {
      if (!(label == null ? void 0 : label.length))
        return /* @__PURE__ */ jsx(ui.span, { lineClamp, children: placeholder });
      if (component) {
        return /* @__PURE__ */ jsx(ui.span, { isTruncated, lineClamp, children: label.map((label2, index) => {
          const onRemove = (e) => {
            e.stopPropagation();
            onChange(value[index]);
          };
          const el = component({
            value: value[index],
            label: label2,
            index,
            onRemove
          });
          const style = {
            marginBlockStart: "0.125rem",
            marginBlockEnd: "0.125rem",
            marginInlineEnd: "0.25rem"
          };
          return el ? cloneElement(el, { key: index, style }) : null;
        }) });
      } else {
        return /* @__PURE__ */ jsx(ui.span, { isTruncated, lineClamp, children: label.map((value2, index) => {
          const isLast = label.length === index + 1;
          return /* @__PURE__ */ jsx(
            ui.span,
            {
              display: "inline-block",
              me: "0.25rem",
              dangerouslySetInnerHTML: {
                __html: `${value2}${!isLast ? separator : ""}`
              }
            },
            index
          );
        }) });
      }
    }, [
      label,
      isTruncated,
      lineClamp,
      onChange,
      placeholder,
      separator,
      component,
      value
    ]);
    const css = {
      pe: "2rem",
      h,
      minH,
      display: "flex",
      alignItems: "center",
      ...styles.field
    };
    return /* @__PURE__ */ jsx(
      ui.div,
      {
        ref,
        className: cx("ui-multi-select__field", className),
        __css: css,
        py: (label == null ? void 0 : label.length) && component ? "0.125rem" : void 0,
        ...rest,
        children: cloneChildren
      }
    );
  }
);

// src/select.tsx
import { jsx as jsx2, jsxs as jsxs2 } from "react/jsx-runtime";
var Select = forwardRef2((props, ref) => {
  const [styles, mergedProps] = useMultiComponentStyle2("Select", props);
  let {
    className,
    placeholder,
    defaultValue = "",
    placeholderInOptions = true,
    items = [],
    color,
    h,
    height,
    minH,
    minHeight,
    containerProps,
    listProps,
    iconProps,
    portalProps = { isDisabled: true },
    children,
    ...computedProps
  } = omitThemeProps2(mergedProps);
  const validChildren = getValidChildren2(children);
  let computedChildren = [];
  if (!validChildren.length && items.length) {
    computedChildren = items.map((item, i) => {
      if ("value" in item) {
        const { label, value, ...props2 } = item;
        return /* @__PURE__ */ jsx2(Option, { value, ...props2, children: label }, i);
      } else if ("items" in item) {
        const { label, items: items2 = [], ...props2 } = item;
        return /* @__PURE__ */ jsx2(
          OptionGroup,
          {
            label: label != null ? label : "",
            ...props2,
            children: items2.map(({ label: label2, value, ...props3 }, i2) => /* @__PURE__ */ jsx2(Option, { value, ...props3, children: label2 }, i2))
          },
          i
        );
      }
    }).filter(Boolean);
  }
  const isEmpty = !validChildren.length && !computedChildren.length && !(!!placeholder && placeholderInOptions);
  const {
    descendants,
    formControlProps,
    getPopoverProps,
    getContainerProps,
    getFieldProps,
    ...rest
  } = useSelect({
    ...computedProps,
    placeholder,
    placeholderInOptions,
    defaultValue,
    isEmpty
  });
  h != null ? h : h = height;
  minH != null ? minH : minH = minHeight;
  const css = {
    w: "100%",
    h: "fit-content",
    color,
    ...styles.container
  };
  return /* @__PURE__ */ jsx2(SelectDescendantsContextProvider, { value: descendants, children: /* @__PURE__ */ jsx2(
    SelectProvider,
    {
      value: { ...rest, placeholder, placeholderInOptions, styles },
      children: /* @__PURE__ */ jsx2(Popover2, { ...getPopoverProps(), children: /* @__PURE__ */ jsxs2(
        ui2.div,
        {
          className: cx2("ui-select", className),
          __css: css,
          ...getContainerProps(containerProps),
          children: [
            /* @__PURE__ */ jsxs2(
              ui2.div,
              {
                className: "ui-select__inner",
                __css: { position: "relative", ...styles.inner },
                children: [
                  /* @__PURE__ */ jsx2(PopoverTrigger2, { children: /* @__PURE__ */ jsx2(SelectField, { h, minH, ...getFieldProps({}, ref) }) }),
                  /* @__PURE__ */ jsx2(SelectIcon, { ...iconProps, ...formControlProps })
                ]
              }
            ),
            !isEmpty ? /* @__PURE__ */ jsx2(Portal2, { ...portalProps, children: /* @__PURE__ */ jsxs2(SelectList, { ...listProps, children: [
              !!placeholder && placeholderInOptions ? /* @__PURE__ */ jsx2(Option, { children: placeholder }) : null,
              children != null ? children : computedChildren
            ] }) }) : null
          ]
        }
      ) })
    }
  ) });
});
var SelectField = forwardRef2(
  ({ className, isTruncated = true, lineClamp, h, minH, ...rest }, ref) => {
    var _a;
    const { label, placeholder, styles } = useSelectContext();
    const css = {
      pe: "2rem",
      h,
      minH,
      display: "flex",
      alignItems: "center",
      ...styles.field
    };
    return /* @__PURE__ */ jsx2(
      ui2.div,
      {
        ref,
        className: cx2("ui-select__field", className),
        __css: css,
        ...rest,
        children: /* @__PURE__ */ jsx2(
          ui2.span,
          {
            isTruncated,
            lineClamp,
            dangerouslySetInnerHTML: {
              __html: (_a = label != null ? label : placeholder) != null ? _a : ""
            }
          }
        )
      }
    );
  }
);

export {
  Select,
  MultiSelect
};
//# sourceMappingURL=chunk-JD2HZHWV.mjs.map