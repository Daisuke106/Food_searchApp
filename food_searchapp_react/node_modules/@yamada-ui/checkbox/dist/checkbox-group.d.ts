import { CheckboxProps } from './checkbox.js';
import * as react from 'react';
import { ChangeEvent, Ref } from 'react';
import { UIPropGetter, ThemeProps, ComponentArgs } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';
import { FlexProps } from '@yamada-ui/layouts';
import { Dict } from '@yamada-ui/utils';
import '@yamada-ui/motion';

type CheckboxItem<Y extends string | number = string> = CheckboxProps<Y> & {
    label?: string;
};
type UseCheckboxGroupProps<Y extends string | number = string> = {
    /**
     * The value of the checkbox group.
     */
    value?: Y[];
    /**
     * The initial value of the checkbox group.
     */
    defaultValue?: Y[];
    /**
     * The callback fired when any children checkbox is checked or unchecked.
     */
    onChange?: (value: Y[]) => void;
    /**
     * If `true`, input elements will receive `checked` attribute instead of `isChecked`.
     *
     * This assumes, you're using native radio inputs.
     *
     * @default false
     */
    isNative?: boolean;
};
declare const useCheckboxGroup: <Y extends string | number = string, M extends Dict = Dict>({ value: valueProp, defaultValue, onChange: onChangeProp, isNative, ...props }: UseCheckboxGroupProps<Y> & M) => {
    props: Omit<UseCheckboxGroupProps<Y> & M, "defaultValue" | "onChange" | "value" | "isNative">;
    value: Y[];
    setValue: react.Dispatch<react.SetStateAction<Y[]>>;
    onChange: (evOrValue: ChangeEvent<HTMLInputElement> | Y) => void;
    getCheckboxProps: UIPropGetter<"input", {
        value?: Y | undefined;
    }, {
        value?: Y | undefined;
        isChecked?: boolean | undefined;
    }>;
};
type UseCheckboxGroupReturn<Y extends string | number = string> = ReturnType<typeof useCheckboxGroup<Y>>;
type CheckboxGroupProps<Y extends string | number = string> = ThemeProps<"Checkbox"> & Omit<FlexProps, "onChange"> & UseCheckboxGroupProps<Y> & FormControlOptions & {
    /**
     * If provided, generate checkboxes based on items.
     *
     * @default '[]'
     */
    items?: CheckboxItem<Y>[];
};
type CheckboxContext = ThemeProps<"Checkbox"> & FormControlOptions & {
    value: (string | number)[];
    onChange: (evOrValue: ChangeEvent<HTMLInputElement> | string | number) => void;
};
declare const useCheckboxGroupContext: () => CheckboxContext | undefined;

declare const CheckboxGroup: (<Y extends string | number = string>(props: CheckboxGroupProps<Y> & {
    ref?: Ref<HTMLDivElement>;
}) => JSX.Element) & ComponentArgs;

export { CheckboxGroup, type CheckboxGroupProps, type CheckboxItem, type UseCheckboxGroupProps, type UseCheckboxGroupReturn, useCheckboxGroup, useCheckboxGroupContext };
