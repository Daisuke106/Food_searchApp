import * as react from 'react';
import { ChangeEventHandler, FocusEventHandler, Ref, FC, ReactElement, InputHTMLAttributes } from 'react';
import { UIPropGetter, HTMLUIProps, ThemeProps, ComponentArgs } from '@yamada-ui/core';
import { FormControlOptions } from '@yamada-ui/form-control';
import { SVGMotionProps } from '@yamada-ui/motion';
import { Dict, PropGetter, Merge } from '@yamada-ui/utils';

type UseCheckboxProps<Y extends string | number = string> = FormControlOptions & {
    /**
     * id assigned to input.
     */
    id?: string;
    /**
     * The HTML `name` attribute used for forms.
     */
    name?: string;
    /**
     * The value to be used in the checkbox input.
     */
    value?: Y;
    /**
     * If `true`, the checkbox will be initially checked.
     *
     * @default false
     */
    defaultIsChecked?: boolean;
    /**
     * If `true`, the checkbox will be checked.
     *
     * @default false
     */
    isChecked?: boolean;
    /**
     * If `true`, the checkbox will be indeterminate.
     *
     * @default false
     */
    isIndeterminate?: boolean;
    /**
     * The callback invoked when the checked state changes.
     */
    onChange?: ChangeEventHandler<HTMLInputElement>;
    /**
     * The callback invoked when the checkbox is focused.
     */
    onFocus?: FocusEventHandler<HTMLInputElement>;
    /**
     * The callback invoked when the checkbox is blurred.
     */
    onBlur?: FocusEventHandler<HTMLInputElement>;
    /**
     * The tab-index property of the underlying input element.
     */
    tabIndex?: number;
};
declare const useCheckbox: <Y extends string | number = string, M extends Dict = Dict>({ id, ...props }: UseCheckboxProps<Y> & M) => {
    props: Omit<Omit<{
        _hover?: {} | undefined;
        _active?: {} | undefined;
        _focus?: {} | undefined;
        _invalid?: {} | undefined;
        _focusVisible?: {} | undefined;
        id: string | undefined;
        disabled: boolean | undefined;
        required: boolean | undefined;
        readOnly: boolean | undefined;
        "aria-disabled": boolean | undefined;
        "aria-readonly": boolean | undefined;
        "aria-required": boolean | undefined;
        "aria-invalid": boolean | undefined;
        "data-readonly": boolean | "true" | "false";
        onFocus: (event: react.FocusEvent<HTMLElement, Element>) => void;
        onBlur: (event: react.FocusEvent<HTMLElement, Element>) => void;
    } & Omit<FormControlOptions & {
        id?: string | undefined;
        onFocus?: FocusEventHandler<HTMLElement> | undefined;
        onBlur?: FocusEventHandler<HTMLElement> | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
    } & {
        id: string;
    } & Omit<FormControlOptions & {
        /**
         * id assigned to input.
         */
        id?: string | undefined;
        /**
         * The HTML `name` attribute used for forms.
         */
        name?: string | undefined;
        /**
         * The value to be used in the checkbox input.
         */
        value?: Y | undefined;
        /**
         * If `true`, the checkbox will be initially checked.
         *
         * @default false
         */
        defaultIsChecked?: boolean | undefined;
        /**
         * If `true`, the checkbox will be checked.
         *
         * @default false
         */
        isChecked?: boolean | undefined;
        /**
         * If `true`, the checkbox will be indeterminate.
         *
         * @default false
         */
        isIndeterminate?: boolean | undefined;
        /**
         * The callback invoked when the checked state changes.
         */
        onChange?: ChangeEventHandler<HTMLInputElement> | undefined;
        /**
         * The callback invoked when the checkbox is focused.
         */
        onFocus?: FocusEventHandler<HTMLInputElement> | undefined;
        /**
         * The callback invoked when the checkbox is blurred.
         */
        onBlur?: FocusEventHandler<HTMLInputElement> | undefined;
        /**
         * The tab-index property of the underlying input element.
         */
        tabIndex?: number | undefined;
    } & M, "id">, "id" | "onFocus" | "onBlur" | "isRequired" | "isDisabled" | "isInvalid" | "isReadOnly" | "disabled" | "readOnly" | "required">, "id" | "tabIndex" | "onFocus" | "onBlur" | "onChange" | "name" | "value" | "defaultIsChecked" | "isChecked" | "isIndeterminate" | "disabled" | "readOnly" | "required">, any>;
    isFocusVisible: boolean;
    isFocused: boolean;
    isHovered: boolean;
    isActive: boolean;
    isChecked: boolean;
    isIndeterminate: (FormControlOptions & {
        id?: string | undefined;
        onFocus?: FocusEventHandler<HTMLElement> | undefined;
        onBlur?: FocusEventHandler<HTMLElement> | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
    } & {
        id: string;
    } & Omit<FormControlOptions & {
        /**
         * id assigned to input.
         */
        id?: string | undefined;
        /**
         * The HTML `name` attribute used for forms.
         */
        name?: string | undefined;
        /**
         * The value to be used in the checkbox input.
         */
        value?: Y | undefined;
        /**
         * If `true`, the checkbox will be initially checked.
         *
         * @default false
         */
        defaultIsChecked?: boolean | undefined;
        /**
         * If `true`, the checkbox will be checked.
         *
         * @default false
         */
        isChecked?: boolean | undefined;
        /**
         * If `true`, the checkbox will be indeterminate.
         *
         * @default false
         */
        isIndeterminate?: boolean | undefined;
        /**
         * The callback invoked when the checked state changes.
         */
        onChange?: ChangeEventHandler<HTMLInputElement> | undefined;
        /**
         * The callback invoked when the checkbox is focused.
         */
        onFocus?: FocusEventHandler<HTMLInputElement> | undefined;
        /**
         * The callback invoked when the checkbox is blurred.
         */
        onBlur?: FocusEventHandler<HTMLInputElement> | undefined;
        /**
         * The tab-index property of the underlying input element.
         */
        tabIndex?: number | undefined;
    } & M, "id">)["isIndeterminate"] | undefined;
    getContainerProps: UIPropGetter;
    getIconProps: UIPropGetter;
    getInputProps: PropGetter;
    getLabelProps: PropGetter;
};
type UseCheckboxReturn = ReturnType<typeof useCheckbox>;
type CheckboxOptions = {
    /**
     * Props for icon component.
     */
    iconProps?: Omit<HTMLUIProps<"span">, "children"> & {
        children: ReactElement;
    };
    /**
     * Props for input element.
     */
    inputProps?: InputHTMLAttributes<HTMLInputElement>;
    /**
     * Props for label element.
     */
    labelProps?: HTMLUIProps<"span">;
};
type CheckboxProps<Y extends string | number = string> = Omit<Merge<HTMLUIProps<"label">, UseCheckboxProps<Y>>, "checked"> & ThemeProps<"Checkbox"> & CheckboxOptions;
/**
 * `Checkbox` is a component used for allowing users to select multiple values from multiple options.
 *
 * @see Docs https://yamada-ui.com/components/forms/checkbox
 */
declare const Checkbox: (<Y extends string | number = string>(props: CheckboxProps<Y> & {
    ref?: Ref<HTMLInputElement>;
}) => JSX.Element) & ComponentArgs;
type CheckboxIconProps = HTMLUIProps<"svg"> & SVGMotionProps<SVGSVGElement> & FormControlOptions & {
    /**
     * If `true`, the icon will be indeterminate.
     *
     * @default false
     */
    isIndeterminate?: boolean;
    /**
     * If `true`, the icon will be checked.
     *
     * @default false
     */
    isChecked?: boolean;
};
declare const CheckboxIcon: FC<CheckboxIconProps>;

export { Checkbox, CheckboxIcon, type CheckboxIconProps, type CheckboxProps, type UseCheckboxProps, type UseCheckboxReturn, useCheckbox };
